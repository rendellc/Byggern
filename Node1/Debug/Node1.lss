
Node1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000118  00800100  0000177c  00001810  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000177c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000013a  00800218  00800218  00001928  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001928  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000308  00000000  00000000  00001984  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000036eb  00000000  00000000  00001c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001278  00000000  00000000  00005377  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000019db  00000000  00000000  000065ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000820  00000000  00000000  00007fcc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000088f  00000000  00000000  000087ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000016e2  00000000  00000000  0000907b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002b0  00000000  00000000  0000a75d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	f5 c0       	rjmp	.+490    	; 0x1ec <__ctors_end>
       2:	00 00       	nop
       4:	0f c1       	rjmp	.+542    	; 0x224 <__bad_interrupt>
       6:	00 00       	nop
       8:	19 c1       	rjmp	.+562    	; 0x23c <__vector_2>
       a:	00 00       	nop
       c:	0b c1       	rjmp	.+534    	; 0x224 <__bad_interrupt>
       e:	00 00       	nop
      10:	09 c1       	rjmp	.+530    	; 0x224 <__bad_interrupt>
      12:	00 00       	nop
      14:	07 c1       	rjmp	.+526    	; 0x224 <__bad_interrupt>
      16:	00 00       	nop
      18:	05 c1       	rjmp	.+522    	; 0x224 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	03 c1       	rjmp	.+518    	; 0x224 <__bad_interrupt>
      1e:	00 00       	nop
      20:	01 c1       	rjmp	.+514    	; 0x224 <__bad_interrupt>
      22:	00 00       	nop
      24:	ff c0       	rjmp	.+510    	; 0x224 <__bad_interrupt>
      26:	00 00       	nop
      28:	fd c0       	rjmp	.+506    	; 0x224 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	fb c0       	rjmp	.+502    	; 0x224 <__bad_interrupt>
      2e:	00 00       	nop
      30:	f9 c0       	rjmp	.+498    	; 0x224 <__bad_interrupt>
      32:	00 00       	nop
      34:	f7 c0       	rjmp	.+494    	; 0x224 <__bad_interrupt>
      36:	00 00       	nop
      38:	f5 c0       	rjmp	.+490    	; 0x224 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	f3 c0       	rjmp	.+486    	; 0x224 <__bad_interrupt>
      3e:	00 00       	nop
      40:	f1 c0       	rjmp	.+482    	; 0x224 <__bad_interrupt>
      42:	00 00       	nop
      44:	b9 c6       	rjmp	.+3442   	; 0xdb8 <__vector_17>
      46:	00 00       	nop
      48:	ed c0       	rjmp	.+474    	; 0x224 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	1d c7       	rjmp	.+3642   	; 0xe88 <__vector_19>
      4e:	00 00       	nop
      50:	e9 c0       	rjmp	.+466    	; 0x224 <__bad_interrupt>
      52:	00 00       	nop
      54:	e7 c0       	rjmp	.+462    	; 0x224 <__bad_interrupt>
      56:	00 00       	nop
      58:	e5 c0       	rjmp	.+458    	; 0x224 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	5c c7       	rjmp	.+3768   	; 0xf16 <__vector_23>
      5e:	00 00       	nop
      60:	e1 c0       	rjmp	.+450    	; 0x224 <__bad_interrupt>
      62:	00 00       	nop
      64:	df c0       	rjmp	.+446    	; 0x224 <__bad_interrupt>
      66:	00 00       	nop
      68:	dd c0       	rjmp	.+442    	; 0x224 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	db c0       	rjmp	.+438    	; 0x224 <__bad_interrupt>
	...

00000070 <__trampolines_end>:
      70:	00 00       	nop
      72:	00 00       	nop
      74:	00 5c       	subi	r16, 0xC0	; 192
      76:	00 00       	nop
      78:	0c 00       	.word	0x000c	; ????
      7a:	0c 00       	.word	0x000c	; ????
      7c:	7c 28       	or	r7, r12
      7e:	7c 28       	or	r7, r12
      80:	58 dc       	rcall	.-1872   	; 0xfffff932 <__eeprom_end+0xff7ef932>
      82:	68 00       	.word	0x0068	; ????
      84:	24 10       	cpse	r2, r4
      86:	48 00       	.word	0x0048	; ????
      88:	28 54       	subi	r18, 0x48	; 72
      8a:	28 40       	sbci	r18, 0x08	; 8
      8c:	00 0c       	add	r0, r0
      8e:	00 00       	nop
      90:	00 78       	andi	r16, 0x80	; 128
      92:	84 00       	.word	0x0084	; ????
      94:	84 78       	andi	r24, 0x84	; 132
      96:	00 00       	nop
      98:	54 38       	cpi	r21, 0x84	; 132
      9a:	54 00       	.word	0x0054	; ????
      9c:	10 7c       	andi	r17, 0xC0	; 192
      9e:	10 00       	.word	0x0010	; ????
      a0:	80 40       	sbci	r24, 0x00	; 0
      a2:	00 00       	nop
      a4:	10 10       	cpse	r1, r0
      a6:	10 00       	.word	0x0010	; ????
      a8:	00 40       	sbci	r16, 0x00	; 0
      aa:	00 00       	nop
      ac:	60 10       	cpse	r6, r0
      ae:	0c 00       	.word	0x000c	; ????
      b0:	38 54       	subi	r19, 0x48	; 72
      b2:	38 00       	.word	0x0038	; ????
      b4:	48 7c       	andi	r20, 0xC8	; 200
      b6:	40 00       	.word	0x0040	; ????
      b8:	48 64       	ori	r20, 0x48	; 72
      ba:	58 00       	.word	0x0058	; ????
      bc:	44 54       	subi	r20, 0x44	; 68
      be:	2c 00       	.word	0x002c	; ????
      c0:	1c 10       	cpse	r1, r12
      c2:	7c 00       	.word	0x007c	; ????
      c4:	5c 54       	subi	r21, 0x4C	; 76
      c6:	24 00       	.word	0x0024	; ????
      c8:	38 54       	subi	r19, 0x48	; 72
      ca:	24 00       	.word	0x0024	; ????
      cc:	64 14       	cp	r6, r4
      ce:	0c 00       	.word	0x000c	; ????
      d0:	68 54       	subi	r22, 0x48	; 72
      d2:	2c 00       	.word	0x002c	; ????
      d4:	48 54       	subi	r20, 0x48	; 72
      d6:	38 00       	.word	0x0038	; ????
      d8:	00 48       	sbci	r16, 0x80	; 128
      da:	00 00       	nop
      dc:	80 48       	sbci	r24, 0x80	; 128
      de:	00 00       	nop
      e0:	10 28       	or	r1, r0
      e2:	44 00       	.word	0x0044	; ????
      e4:	28 28       	or	r2, r8
      e6:	28 00       	.word	0x0028	; ????
      e8:	44 28       	or	r4, r4
      ea:	10 00       	.word	0x0010	; ????
      ec:	04 54       	subi	r16, 0x44	; 68
      ee:	08 00       	.word	0x0008	; ????
      f0:	38 44       	sbci	r19, 0x48	; 72
      f2:	5c 00       	.word	0x005c	; ????
      f4:	78 14       	cp	r7, r8
      f6:	78 00       	.word	0x0078	; ????
      f8:	7c 54       	subi	r23, 0x4C	; 76
      fa:	28 00       	.word	0x0028	; ????
      fc:	38 44       	sbci	r19, 0x48	; 72
      fe:	28 00       	.word	0x0028	; ????
     100:	7c 44       	sbci	r23, 0x4C	; 76
     102:	38 00       	.word	0x0038	; ????
     104:	7c 54       	subi	r23, 0x4C	; 76
     106:	44 00       	.word	0x0044	; ????
     108:	7c 14       	cp	r7, r12
     10a:	04 00       	.word	0x0004	; ????
     10c:	38 44       	sbci	r19, 0x48	; 72
     10e:	74 00       	.word	0x0074	; ????
     110:	7c 10       	cpse	r7, r12
     112:	7c 00       	.word	0x007c	; ????
     114:	44 7c       	andi	r20, 0xC4	; 196
     116:	44 00       	.word	0x0044	; ????
     118:	20 40       	sbci	r18, 0x00	; 0
     11a:	3c 00       	.word	0x003c	; ????
     11c:	7c 10       	cpse	r7, r12
     11e:	6c 00       	.word	0x006c	; ????
     120:	7c 40       	sbci	r23, 0x0C	; 12
     122:	40 00       	.word	0x0040	; ????
     124:	7c 18       	sub	r7, r12
     126:	7c 00       	.word	0x007c	; ????
     128:	78 10       	cpse	r7, r8
     12a:	3c 00       	.word	0x003c	; ????
     12c:	38 44       	sbci	r19, 0x48	; 72
     12e:	38 00       	.word	0x0038	; ????
     130:	7c 14       	cp	r7, r12
     132:	08 00       	.word	0x0008	; ????
     134:	38 44       	sbci	r19, 0x48	; 72
     136:	b8 00       	.word	0x00b8	; ????
     138:	7c 14       	cp	r7, r12
     13a:	68 00       	.word	0x0068	; ????
     13c:	48 54       	subi	r20, 0x48	; 72
     13e:	24 00       	.word	0x0024	; ????
     140:	04 7c       	andi	r16, 0xC4	; 196
     142:	04 00       	.word	0x0004	; ????
     144:	7c 40       	sbci	r23, 0x0C	; 12
     146:	7c 00       	.word	0x007c	; ????
     148:	3c 60       	ori	r19, 0x0C	; 12
     14a:	3c 00       	.word	0x003c	; ????
     14c:	7c 30       	cpi	r23, 0x0C	; 12
     14e:	7c 00       	.word	0x007c	; ????
     150:	6c 10       	cpse	r6, r12
     152:	6c 00       	.word	0x006c	; ????
     154:	0c 70       	andi	r16, 0x0C	; 12
     156:	0c 00       	.word	0x000c	; ????
     158:	64 54       	subi	r22, 0x44	; 68
     15a:	4c 00       	.word	0x004c	; ????
     15c:	00 7c       	andi	r16, 0xC0	; 192
     15e:	44 00       	.word	0x0044	; ????
     160:	0c 10       	cpse	r0, r12
     162:	60 00       	.word	0x0060	; ????
     164:	44 7c       	andi	r20, 0xC4	; 196
     166:	00 00       	nop
     168:	08 04       	cpc	r0, r8
     16a:	08 00       	.word	0x0008	; ????
     16c:	80 80       	ld	r8, Z
     16e:	80 00       	.word	0x0080	; ????
     170:	00 04       	cpc	r0, r0
     172:	08 00       	.word	0x0008	; ????
     174:	30 48       	sbci	r19, 0x80	; 128
     176:	78 00       	.word	0x0078	; ????
     178:	7c 48       	sbci	r23, 0x8C	; 140
     17a:	30 00       	.word	0x0030	; ????
     17c:	30 48       	sbci	r19, 0x80	; 128
     17e:	48 00       	.word	0x0048	; ????
     180:	30 48       	sbci	r19, 0x80	; 128
     182:	7c 00       	.word	0x007c	; ????
     184:	30 68       	ori	r19, 0x80	; 128
     186:	50 00       	.word	0x0050	; ????
     188:	10 78       	andi	r17, 0x80	; 128
     18a:	14 00       	.word	0x0014	; ????
     18c:	90 a8       	ldd	r9, Z+48	; 0x30
     18e:	78 00       	.word	0x0078	; ????
     190:	7c 08       	sbc	r7, r12
     192:	70 00       	.word	0x0070	; ????
     194:	50 74       	andi	r21, 0x40	; 64
     196:	40 00       	.word	0x0040	; ????
     198:	80 80       	ld	r8, Z
     19a:	74 00       	.word	0x0074	; ????
     19c:	7c 10       	cpse	r7, r12
     19e:	68 00       	.word	0x0068	; ????
     1a0:	44 7c       	andi	r20, 0xC4	; 196
     1a2:	40 00       	.word	0x0040	; ????
     1a4:	78 10       	cpse	r7, r8
     1a6:	78 00       	.word	0x0078	; ????
     1a8:	78 08       	sbc	r7, r8
     1aa:	70 00       	.word	0x0070	; ????
     1ac:	30 48       	sbci	r19, 0x80	; 128
     1ae:	30 00       	.word	0x0030	; ????
     1b0:	f8 28       	or	r15, r8
     1b2:	10 00       	.word	0x0010	; ????
     1b4:	30 48       	sbci	r19, 0x80	; 128
     1b6:	f8 00       	.word	0x00f8	; ????
     1b8:	78 10       	cpse	r7, r8
     1ba:	08 00       	.word	0x0008	; ????
     1bc:	50 58       	subi	r21, 0x80	; 128
     1be:	28 00       	.word	0x0028	; ????
     1c0:	08 3c       	cpi	r16, 0xC8	; 200
     1c2:	48 00       	.word	0x0048	; ????
     1c4:	38 40       	sbci	r19, 0x08	; 8
     1c6:	78 00       	.word	0x0078	; ????
     1c8:	38 40       	sbci	r19, 0x08	; 8
     1ca:	38 00       	.word	0x0038	; ????
     1cc:	78 20       	and	r7, r8
     1ce:	78 00       	.word	0x0078	; ????
     1d0:	48 30       	cpi	r20, 0x08	; 8
     1d2:	48 00       	.word	0x0048	; ????
     1d4:	98 a0       	ldd	r9, Y+32	; 0x20
     1d6:	78 00       	.word	0x0078	; ????
     1d8:	48 68       	ori	r20, 0x88	; 136
     1da:	58 00       	.word	0x0058	; ????
     1dc:	10 78       	andi	r17, 0x80	; 128
     1de:	84 00       	.word	0x0084	; ????
     1e0:	00 7c       	andi	r16, 0xC0	; 192
     1e2:	00 00       	nop
     1e4:	84 78       	andi	r24, 0x84	; 132
     1e6:	10 00       	.word	0x0010	; ????
     1e8:	08 04       	cpc	r0, r8
     1ea:	08 04       	cpc	r0, r8

000001ec <__ctors_end>:
     1ec:	11 24       	eor	r1, r1
     1ee:	1f be       	out	0x3f, r1	; 63
     1f0:	cf ef       	ldi	r28, 0xFF	; 255
     1f2:	d4 e0       	ldi	r29, 0x04	; 4
     1f4:	de bf       	out	0x3e, r29	; 62
     1f6:	cd bf       	out	0x3d, r28	; 61

000001f8 <__do_copy_data>:
     1f8:	12 e0       	ldi	r17, 0x02	; 2
     1fa:	a0 e0       	ldi	r26, 0x00	; 0
     1fc:	b1 e0       	ldi	r27, 0x01	; 1
     1fe:	ec e7       	ldi	r30, 0x7C	; 124
     200:	f7 e1       	ldi	r31, 0x17	; 23
     202:	02 c0       	rjmp	.+4      	; 0x208 <__do_copy_data+0x10>
     204:	05 90       	lpm	r0, Z+
     206:	0d 92       	st	X+, r0
     208:	a8 31       	cpi	r26, 0x18	; 24
     20a:	b1 07       	cpc	r27, r17
     20c:	d9 f7       	brne	.-10     	; 0x204 <__do_copy_data+0xc>

0000020e <__do_clear_bss>:
     20e:	23 e0       	ldi	r18, 0x03	; 3
     210:	a8 e1       	ldi	r26, 0x18	; 24
     212:	b2 e0       	ldi	r27, 0x02	; 2
     214:	01 c0       	rjmp	.+2      	; 0x218 <.do_clear_bss_start>

00000216 <.do_clear_bss_loop>:
     216:	1d 92       	st	X+, r1

00000218 <.do_clear_bss_start>:
     218:	a2 35       	cpi	r26, 0x52	; 82
     21a:	b2 07       	cpc	r27, r18
     21c:	e1 f7       	brne	.-8      	; 0x216 <.do_clear_bss_loop>
     21e:	7a d1       	rcall	.+756    	; 0x514 <main>
     220:	0c 94 bc 0b 	jmp	0x1778	; 0x1778 <_exit>

00000224 <__bad_interrupt>:
     224:	ed ce       	rjmp	.-550    	; 0x0 <__vectors>

00000226 <adc_init>:
/*!
 * Initialize atmega162 to interface with the interrupt signal
 * of the ADC through Port D pin 2
 */
void adc_init(void){
	DDRD  &= ~(1 << DDD2);
     226:	8a 98       	cbi	0x11, 2	; 17
	PORTD |= (1 << PD2);
     228:	92 9a       	sbi	0x12, 2	; 18
     22a:	08 95       	ret

0000022c <adc_read_channel>:
 * @param[in] ch analog channel to perform conversion on
 * @return digital read of analog signal
 */
uint8_t adc_read_channel(uint8_t ch)
{	
	*adc_adr = (ch | 0b0100);
     22c:	84 60       	ori	r24, 0x04	; 4
     22e:	80 93 00 11 	sts	0x1100, r24
	
	while ((PIND & (1<<PIND2))); // wait until pin is high, adc read complete when pin is high
     232:	82 99       	sbic	0x10, 2	; 16
     234:	fe cf       	rjmp	.-4      	; 0x232 <adc_read_channel+0x6>
	
	return *adc_adr;
     236:	80 91 00 11 	lds	r24, 0x1100
}
     23a:	08 95       	ret

0000023c <__vector_2>:
 * the interrupt. \n
 * If there is no room in the buffer, then the interrupt is cleared and message
 * is ignored. 
   \todo Implement better overflow handling? Maybe oldest values should be discardeded. Can be as easy as doing head++, tail++
 */
ISR(INT1_vect){
     23c:	1f 92       	push	r1
     23e:	0f 92       	push	r0
     240:	0f b6       	in	r0, 0x3f	; 63
     242:	0f 92       	push	r0
     244:	11 24       	eor	r1, r1
     246:	ff 92       	push	r15
     248:	0f 93       	push	r16
     24a:	1f 93       	push	r17
     24c:	2f 93       	push	r18
     24e:	3f 93       	push	r19
     250:	4f 93       	push	r20
     252:	5f 93       	push	r21
     254:	6f 93       	push	r22
     256:	7f 93       	push	r23
     258:	8f 93       	push	r24
     25a:	9f 93       	push	r25
     25c:	af 93       	push	r26
     25e:	bf 93       	push	r27
     260:	ef 93       	push	r30
     262:	ff 93       	push	r31
     264:	cf 93       	push	r28
     266:	df 93       	push	r29
     268:	cd b7       	in	r28, 0x3d	; 61
     26a:	de b7       	in	r29, 0x3e	; 62
     26c:	2e 97       	sbiw	r28, 0x0e	; 14
     26e:	de bf       	out	0x3e, r29	; 62
     270:	cd bf       	out	0x3d, r28	; 61
	cli();	
     272:	f8 94       	cli
	///\todo implement overflow such that new data replaces old?
	// pick correct buffer, RXB1 has highest priority now
	volatile uint8_t n			  = 0;
     274:	19 82       	std	Y+1, r1	; 0x01
	volatile uint8_t MCP_RXBn	  = MCP_RXB0;
     276:	80 e6       	ldi	r24, 0x60	; 96
     278:	8a 83       	std	Y+2, r24	; 0x02
	volatile uint8_t MCP_READ_RXn = MCP_READ_RX0;
     27a:	80 e9       	ldi	r24, 0x90	; 144
     27c:	8b 83       	std	Y+3, r24	; 0x03
	volatile uint8_t MCP_RXnIF    = MCP_RX0IF;
     27e:	81 e0       	ldi	r24, 0x01	; 1
     280:	8c 83       	std	Y+4, r24	; 0x04
	if (mcp_readstatus() & 0x02)
     282:	b4 d1       	rcall	.+872    	; 0x5ec <mcp_readstatus>
     284:	81 ff       	sbrs	r24, 1
     286:	08 c0       	rjmp	.+16     	; 0x298 <__vector_2+0x5c>
	{	
		n = 1;
     288:	81 e0       	ldi	r24, 0x01	; 1
     28a:	89 83       	std	Y+1, r24	; 0x01
		MCP_RXBn	 = MCP_RXB1;
     28c:	80 e7       	ldi	r24, 0x70	; 112
     28e:	8a 83       	std	Y+2, r24	; 0x02
		MCP_READ_RXn = MCP_READ_RX1;
     290:	84 e9       	ldi	r24, 0x94	; 148
     292:	8b 83       	std	Y+3, r24	; 0x03
		MCP_RXnIF    = MCP_RX1IF;
     294:	82 e0       	ldi	r24, 0x02	; 2
     296:	8c 83       	std	Y+4, r24	; 0x04
	}
	
	// if there is room in buffer first
	if ((rx_head[n]+1)%RX_BUFFER_MAX != rx_tail[n]){
     298:	e9 81       	ldd	r30, Y+1	; 0x01
     29a:	f0 e0       	ldi	r31, 0x00	; 0
     29c:	e6 5e       	subi	r30, 0xE6	; 230
     29e:	fd 4f       	sbci	r31, 0xFD	; 253
     2a0:	20 81       	ld	r18, Z
     2a2:	e9 81       	ldd	r30, Y+1	; 0x01
     2a4:	f0 e0       	ldi	r31, 0x00	; 0
     2a6:	e8 5e       	subi	r30, 0xE8	; 232
     2a8:	fd 4f       	sbci	r31, 0xFD	; 253
     2aa:	80 81       	ld	r24, Z
     2ac:	30 e0       	ldi	r19, 0x00	; 0
     2ae:	2f 5f       	subi	r18, 0xFF	; 255
     2b0:	3f 4f       	sbci	r19, 0xFF	; 255
     2b2:	27 70       	andi	r18, 0x07	; 7
     2b4:	30 78       	andi	r19, 0x80	; 128
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	28 17       	cp	r18, r24
     2ba:	39 07       	cpc	r19, r25
     2bc:	09 f4       	brne	.+2      	; 0x2c0 <__vector_2+0x84>
     2be:	59 c0       	rjmp	.+178    	; 0x372 <__vector_2+0x136>
    	volatile can_msg_t msg = {};
     2c0:	fe 01       	movw	r30, r28
     2c2:	35 96       	adiw	r30, 0x05	; 5
     2c4:	8a e0       	ldi	r24, 0x0A	; 10
     2c6:	df 01       	movw	r26, r30
     2c8:	1d 92       	st	X+, r1
     2ca:	8a 95       	dec	r24
     2cc:	e9 f7       	brne	.-6      	; 0x2c8 <__vector_2+0x8c>
    	
    	msg.length = mcp_read(MCP_RXBn | MCP_RXBnDLC) & MCP_DLC_MASK;
     2ce:	8a 81       	ldd	r24, Y+2	; 0x02
     2d0:	85 66       	ori	r24, 0x65	; 101
     2d2:	6f d1       	rcall	.+734    	; 0x5b2 <mcp_read>
     2d4:	8f 70       	andi	r24, 0x0F	; 15
     2d6:	8e 83       	std	Y+6, r24	; 0x06
    	
    	spi_ss_low();
     2d8:	92 d5       	rcall	.+2852   	; 0xdfe <spi_ss_low>
    	spi_transmit(MCP_READ_RXn | 0x00); // sid
     2da:	8b 81       	ldd	r24, Y+3	; 0x03
     2dc:	9b d5       	rcall	.+2870   	; 0xe14 <spi_transmit>
    	msg.sid = spi_transmit(0);
     2de:	80 e0       	ldi	r24, 0x00	; 0
     2e0:	99 d5       	rcall	.+2866   	; 0xe14 <spi_transmit>
     2e2:	8d 83       	std	Y+5, r24	; 0x05
    	spi_ss_high();
     2e4:	8e d5       	rcall	.+2844   	; 0xe02 <spi_ss_high>
    	
    	spi_ss_low();
     2e6:	8b d5       	rcall	.+2838   	; 0xdfe <spi_ss_low>
    	spi_transmit(MCP_READ_RXn | 0x02);
     2e8:	8b 81       	ldd	r24, Y+3	; 0x03
     2ea:	82 60       	ori	r24, 0x02	; 2
     2ec:	93 d5       	rcall	.+2854   	; 0xe14 <spi_transmit>
    	
    	for (uint8_t i = 0; i < msg.length; ++i)
     2ee:	8e 81       	ldd	r24, Y+6	; 0x06
     2f0:	88 23       	and	r24, r24
     2f2:	81 f0       	breq	.+32     	; 0x314 <__vector_2+0xd8>
     2f4:	f1 2c       	mov	r15, r1
    	{
    		msg.data[i] = spi_transmit(0);
     2f6:	0f 2d       	mov	r16, r15
     2f8:	10 e0       	ldi	r17, 0x00	; 0
     2fa:	80 e0       	ldi	r24, 0x00	; 0
     2fc:	8b d5       	rcall	.+2838   	; 0xe14 <spi_transmit>
     2fe:	e7 e0       	ldi	r30, 0x07	; 7
     300:	f0 e0       	ldi	r31, 0x00	; 0
     302:	ec 0f       	add	r30, r28
     304:	fd 1f       	adc	r31, r29
     306:	e0 0f       	add	r30, r16
     308:	f1 1f       	adc	r31, r17
     30a:	80 83       	st	Z, r24
    	spi_ss_high();
    	
    	spi_ss_low();
    	spi_transmit(MCP_READ_RXn | 0x02);
    	
    	for (uint8_t i = 0; i < msg.length; ++i)
     30c:	f3 94       	inc	r15
     30e:	8e 81       	ldd	r24, Y+6	; 0x06
     310:	f8 16       	cp	r15, r24
     312:	88 f3       	brcs	.-30     	; 0x2f6 <__vector_2+0xba>
    	{
    		msg.data[i] = spi_transmit(0);
    	}
    	spi_ss_high();
     314:	76 d5       	rcall	.+2796   	; 0xe02 <spi_ss_high>
        
    	rx_buffer[n][rx_head[n]] = msg;
     316:	29 81       	ldd	r18, Y+1	; 0x01
     318:	e9 81       	ldd	r30, Y+1	; 0x01
     31a:	f0 e0       	ldi	r31, 0x00	; 0
     31c:	e6 5e       	subi	r30, 0xE6	; 230
     31e:	fd 4f       	sbci	r31, 0xFD	; 253
     320:	80 81       	ld	r24, Z
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	dc 01       	movw	r26, r24
     326:	aa 0f       	add	r26, r26
     328:	bb 1f       	adc	r27, r27
     32a:	88 0f       	add	r24, r24
     32c:	99 1f       	adc	r25, r25
     32e:	88 0f       	add	r24, r24
     330:	99 1f       	adc	r25, r25
     332:	88 0f       	add	r24, r24
     334:	99 1f       	adc	r25, r25
     336:	a8 0f       	add	r26, r24
     338:	b9 1f       	adc	r27, r25
     33a:	80 e5       	ldi	r24, 0x50	; 80
     33c:	28 9f       	mul	r18, r24
     33e:	a0 0d       	add	r26, r0
     340:	b1 1d       	adc	r27, r1
     342:	11 24       	eor	r1, r1
     344:	a4 5e       	subi	r26, 0xE4	; 228
     346:	bd 4f       	sbci	r27, 0xFD	; 253
     348:	8a e0       	ldi	r24, 0x0A	; 10
     34a:	fe 01       	movw	r30, r28
     34c:	35 96       	adiw	r30, 0x05	; 5
     34e:	01 90       	ld	r0, Z+
     350:	0d 92       	st	X+, r0
     352:	8a 95       	dec	r24
     354:	e1 f7       	brne	.-8      	; 0x34e <__vector_2+0x112>
    	rx_head[n] = (rx_head[n]+1) % RX_BUFFER_MAX;
     356:	e9 81       	ldd	r30, Y+1	; 0x01
     358:	f0 e0       	ldi	r31, 0x00	; 0
     35a:	a9 81       	ldd	r26, Y+1	; 0x01
     35c:	b0 e0       	ldi	r27, 0x00	; 0
     35e:	a6 5e       	subi	r26, 0xE6	; 230
     360:	bd 4f       	sbci	r27, 0xFD	; 253
     362:	8c 91       	ld	r24, X
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	01 96       	adiw	r24, 0x01	; 1
     368:	87 70       	andi	r24, 0x07	; 7
     36a:	90 78       	andi	r25, 0x80	; 128
     36c:	e6 5e       	subi	r30, 0xE6	; 230
     36e:	fd 4f       	sbci	r31, 0xFD	; 253
     370:	80 83       	st	Z, r24
	}

    mcp_bitmodify(MCP_CANINTF, MCP_RXnIF, 0);
     372:	6c 81       	ldd	r22, Y+4	; 0x04
     374:	40 e0       	ldi	r20, 0x00	; 0
     376:	8c e2       	ldi	r24, 0x2C	; 44
     378:	44 d1       	rcall	.+648    	; 0x602 <mcp_bitmodify>
	sei();
     37a:	78 94       	sei
}
     37c:	2e 96       	adiw	r28, 0x0e	; 14
     37e:	0f b6       	in	r0, 0x3f	; 63
     380:	f8 94       	cli
     382:	de bf       	out	0x3e, r29	; 62
     384:	0f be       	out	0x3f, r0	; 63
     386:	cd bf       	out	0x3d, r28	; 61
     388:	df 91       	pop	r29
     38a:	cf 91       	pop	r28
     38c:	ff 91       	pop	r31
     38e:	ef 91       	pop	r30
     390:	bf 91       	pop	r27
     392:	af 91       	pop	r26
     394:	9f 91       	pop	r25
     396:	8f 91       	pop	r24
     398:	7f 91       	pop	r23
     39a:	6f 91       	pop	r22
     39c:	5f 91       	pop	r21
     39e:	4f 91       	pop	r20
     3a0:	3f 91       	pop	r19
     3a2:	2f 91       	pop	r18
     3a4:	1f 91       	pop	r17
     3a6:	0f 91       	pop	r16
     3a8:	ff 90       	pop	r15
     3aa:	0f 90       	pop	r0
     3ac:	0f be       	out	0x3f, r0	; 63
     3ae:	0f 90       	pop	r0
     3b0:	1f 90       	pop	r1
     3b2:	18 95       	reti

000003b4 <can_init>:
/*!
 * Initialize can controller and mcp. 
 */
void can_init()
{
	mcp_init();
     3b4:	3a d1       	rcall	.+628    	; 0x62a <mcp_init>
	
	// enable interupt
	mcp_bitmodify(MCP_CANINTE, MCP_RX_INT, MCP_RX_INT);
     3b6:	43 e0       	ldi	r20, 0x03	; 3
     3b8:	63 e0       	ldi	r22, 0x03	; 3
     3ba:	8b e2       	ldi	r24, 0x2B	; 43
     3bc:	22 d1       	rcall	.+580    	; 0x602 <mcp_bitmodify>
	GICR |= (1 << INT1); 
     3be:	8b b7       	in	r24, 0x3b	; 59
     3c0:	80 68       	ori	r24, 0x80	; 128
     3c2:	8b bf       	out	0x3b, r24	; 59
     3c4:	08 95       	ret

000003c6 <game_init_menu>:
		default:
			break;
	}
}

void game_tick_playing(){
     3c6:	80 e0       	ldi	r24, 0x00	; 0
     3c8:	91 c2       	rjmp	.+1314   	; 0x8ec <menu_move_cursor>
     3ca:	08 95       	ret

000003cc <game_init>:
     3cc:	fc df       	rcall	.-8      	; 0x3c6 <game_init_menu>
     3ce:	81 e0       	ldi	r24, 0x01	; 1
     3d0:	80 93 bc 02 	sts	0x02BC, r24
     3d4:	08 95       	ret

000003d6 <game_start>:
     3d6:	28 e2       	ldi	r18, 0x28	; 40
     3d8:	31 e0       	ldi	r19, 0x01	; 1
     3da:	4e e0       	ldi	r20, 0x0E	; 14
     3dc:	50 e0       	ldi	r21, 0x00	; 0
     3de:	61 e0       	ldi	r22, 0x01	; 1
     3e0:	70 e0       	ldi	r23, 0x00	; 0
     3e2:	86 e3       	ldi	r24, 0x36	; 54
     3e4:	91 e0       	ldi	r25, 0x01	; 1
     3e6:	28 d7       	rcall	.+3664   	; 0x1238 <fwrite>
     3e8:	82 e0       	ldi	r24, 0x02	; 2
     3ea:	80 93 bc 02 	sts	0x02BC, r24
     3ee:	08 95       	ret

000003f0 <game_tick_menu>:
	
	
	
}

void game_tick_menu(){
     3f0:	cf 93       	push	r28
	static BOOL click_released = TRUE;
	static BOOL joy_released = TRUE;
	
	menu_print_current();
     3f2:	08 d2       	rcall	.+1040   	; 0x804 <menu_print_current>
	
	joystick_t joy = joy_get_state();
     3f4:	7e d0       	rcall	.+252    	; 0x4f2 <joy_get_state>
     3f6:	96 2f       	mov	r25, r22
     3f8:	67 2f       	mov	r22, r23
     3fa:	c8 2f       	mov	r28, r24
	
	direction_t joy_dir = joy_direction(joy.x, joy.y);
     3fc:	89 2f       	mov	r24, r25
     3fe:	3d d0       	rcall	.+122    	; 0x47a <joy_direction>
	
	
	switch (joy_dir){
     400:	83 30       	cpi	r24, 0x03	; 3
     402:	d9 f0       	breq	.+54     	; 0x43a <game_tick_menu+0x4a>
     404:	28 f4       	brcc	.+10     	; 0x410 <game_tick_menu+0x20>
     406:	88 23       	and	r24, r24
     408:	09 f1       	breq	.+66     	; 0x44c <game_tick_menu+0x5c>
     40a:	82 30       	cpi	r24, 0x02	; 2
     40c:	69 f0       	breq	.+26     	; 0x428 <game_tick_menu+0x38>
     40e:	2d c0       	rjmp	.+90     	; 0x46a <game_tick_menu+0x7a>
     410:	84 30       	cpi	r24, 0x04	; 4
     412:	21 f1       	breq	.+72     	; 0x45c <game_tick_menu+0x6c>
     414:	85 30       	cpi	r24, 0x05	; 5
     416:	49 f5       	brne	.+82     	; 0x46a <game_tick_menu+0x7a>
		case CLICKED:
			if (click_released){
     418:	80 91 07 01 	lds	r24, 0x0107
     41c:	88 23       	and	r24, r24
     41e:	29 f1       	breq	.+74     	; 0x46a <game_tick_menu+0x7a>
				click_released = FALSE;
     420:	10 92 07 01 	sts	0x0107, r1
				menu_enter_current();
     424:	91 d2       	rcall	.+1314   	; 0x948 <menu_enter_current>
     426:	21 c0       	rjmp	.+66     	; 0x46a <game_tick_menu+0x7a>
			} 
			break;
			
		case UP:
			if (joy_released){
     428:	80 91 06 01 	lds	r24, 0x0106
     42c:	88 23       	and	r24, r24
     42e:	e9 f0       	breq	.+58     	; 0x46a <game_tick_menu+0x7a>
				joy_released = FALSE;
     430:	10 92 06 01 	sts	0x0106, r1
				menu_move_cursor(-1);
     434:	8f ef       	ldi	r24, 0xFF	; 255
     436:	5a d2       	rcall	.+1204   	; 0x8ec <menu_move_cursor>
     438:	18 c0       	rjmp	.+48     	; 0x46a <game_tick_menu+0x7a>
			}
			break;
		case DOWN:
			if (joy_released){
     43a:	80 91 06 01 	lds	r24, 0x0106
     43e:	88 23       	and	r24, r24
     440:	a1 f0       	breq	.+40     	; 0x46a <game_tick_menu+0x7a>
				joy_released = FALSE;
     442:	10 92 06 01 	sts	0x0106, r1
				menu_move_cursor(1);
     446:	81 e0       	ldi	r24, 0x01	; 1
     448:	51 d2       	rcall	.+1186   	; 0x8ec <menu_move_cursor>
     44a:	0f c0       	rjmp	.+30     	; 0x46a <game_tick_menu+0x7a>
			}
		case RIGHT:
			break;
		
		case LEFT:
			if (joy_released){
     44c:	80 91 06 01 	lds	r24, 0x0106
     450:	88 23       	and	r24, r24
     452:	59 f0       	breq	.+22     	; 0x46a <game_tick_menu+0x7a>
				joy_released = FALSE;
     454:	10 92 06 01 	sts	0x0106, r1
				menu_enter_parent();
     458:	eb d2       	rcall	.+1494   	; 0xa30 <menu_enter_parent>
     45a:	07 c0       	rjmp	.+14     	; 0x46a <game_tick_menu+0x7a>
			}
		
			break;
		
		case NEUTRAL:
			joy_released = TRUE;
     45c:	81 e0       	ldi	r24, 0x01	; 1
     45e:	80 93 06 01 	sts	0x0106, r24
			click_released = !joy.click;
     462:	c1 11       	cpse	r28, r1
     464:	80 e0       	ldi	r24, 0x00	; 0
     466:	80 93 07 01 	sts	0x0107, r24
		}
		

	}
	*/
}
     46a:	cf 91       	pop	r28
     46c:	08 95       	ret

0000046e <game_tick>:
}


void game_tick(){
	
	switch (game_state){
     46e:	80 91 bc 02 	lds	r24, 0x02BC
     472:	81 30       	cpi	r24, 0x01	; 1
     474:	09 f4       	brne	.+2      	; 0x478 <game_tick+0xa>
		case INVALID:
		
		
			break;
		case IN_MENU:
			game_tick_menu();
     476:	bc cf       	rjmp	.-136    	; 0x3f0 <game_tick_menu>
     478:	08 95       	ret

0000047a <joy_direction>:
	msg.length = 4;
	
	fprintf(&uart_out, "joy sent: %i\t%i\t%i\t%i\n",   joy_xs, joy_ys, joy_dir, joy_click);
	
	can_send(msg, 0);
}
     47a:	28 9b       	sbis	0x05, 0	; 5
     47c:	30 c0       	rjmp	.+96     	; 0x4de <joy_direction+0x64>
     47e:	28 2f       	mov	r18, r24
     480:	30 e0       	ldi	r19, 0x00	; 0
     482:	28 56       	subi	r18, 0x68	; 104
     484:	31 09       	sbc	r19, r1
     486:	21 33       	cpi	r18, 0x31	; 49
     488:	31 05       	cpc	r19, r1
     48a:	38 f4       	brcc	.+14     	; 0x49a <joy_direction+0x20>
     48c:	26 2f       	mov	r18, r22
     48e:	30 e0       	ldi	r19, 0x00	; 0
     490:	28 56       	subi	r18, 0x68	; 104
     492:	31 09       	sbc	r19, r1
     494:	21 33       	cpi	r18, 0x31	; 49
     496:	31 05       	cpc	r19, r1
     498:	20 f1       	brcs	.+72     	; 0x4e2 <joy_direction+0x68>
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	80 58       	subi	r24, 0x80	; 128
     49e:	91 09       	sbc	r25, r1
     4a0:	70 e0       	ldi	r23, 0x00	; 0
     4a2:	60 58       	subi	r22, 0x80	; 128
     4a4:	71 09       	sbc	r23, r1
     4a6:	9b 01       	movw	r18, r22
     4a8:	77 23       	and	r23, r23
     4aa:	24 f4       	brge	.+8      	; 0x4b4 <joy_direction+0x3a>
     4ac:	22 27       	eor	r18, r18
     4ae:	33 27       	eor	r19, r19
     4b0:	26 1b       	sub	r18, r22
     4b2:	37 0b       	sbc	r19, r23
     4b4:	28 17       	cp	r18, r24
     4b6:	39 07       	cpc	r19, r25
     4b8:	b4 f0       	brlt	.+44     	; 0x4e6 <joy_direction+0x6c>
     4ba:	31 95       	neg	r19
     4bc:	21 95       	neg	r18
     4be:	31 09       	sbc	r19, r1
     4c0:	82 17       	cp	r24, r18
     4c2:	93 07       	cpc	r25, r19
     4c4:	94 f0       	brlt	.+36     	; 0x4ea <joy_direction+0x70>
     4c6:	9c 01       	movw	r18, r24
     4c8:	99 23       	and	r25, r25
     4ca:	24 f4       	brge	.+8      	; 0x4d4 <joy_direction+0x5a>
     4cc:	22 27       	eor	r18, r18
     4ce:	33 27       	eor	r19, r19
     4d0:	28 1b       	sub	r18, r24
     4d2:	39 0b       	sbc	r19, r25
     4d4:	26 17       	cp	r18, r22
     4d6:	37 07       	cpc	r19, r23
     4d8:	54 f4       	brge	.+20     	; 0x4ee <joy_direction+0x74>
     4da:	82 e0       	ldi	r24, 0x02	; 2
     4dc:	08 95       	ret
     4de:	85 e0       	ldi	r24, 0x05	; 5
     4e0:	08 95       	ret
     4e2:	84 e0       	ldi	r24, 0x04	; 4
     4e4:	08 95       	ret
     4e6:	81 e0       	ldi	r24, 0x01	; 1
     4e8:	08 95       	ret
     4ea:	80 e0       	ldi	r24, 0x00	; 0
     4ec:	08 95       	ret
     4ee:	83 e0       	ldi	r24, 0x03	; 3
     4f0:	08 95       	ret

000004f2 <joy_get_state>:
     4f2:	cf 93       	push	r28
     4f4:	81 e0       	ldi	r24, 0x01	; 1
     4f6:	9a de       	rcall	.-716    	; 0x22c <adc_read_channel>
     4f8:	c8 2f       	mov	r28, r24
     4fa:	80 e0       	ldi	r24, 0x00	; 0
     4fc:	97 de       	rcall	.-722    	; 0x22c <adc_read_channel>
     4fe:	95 b1       	in	r25, 0x05	; 5
     500:	90 95       	com	r25
     502:	6c 2f       	mov	r22, r28
     504:	78 2f       	mov	r23, r24
     506:	89 2f       	mov	r24, r25
     508:	81 70       	andi	r24, 0x01	; 1
     50a:	cf 91       	pop	r28
     50c:	08 95       	ret

0000050e <joystick_init>:


void joystick_init(void){
	PORTE  |= 1 << CLICK_PIN;    // + PUD=0 gives pull-up
     50e:	38 9a       	sbi	0x07, 0	; 7
	DDRE   &= ~(1 << CLICK_PIN); // input
     510:	30 98       	cbi	0x06, 0	; 6
     512:	08 95       	ret

00000514 <main>:
#include "joystick.h"
#include "game.h"

int main()
{
	cli();
     514:	f8 94       	cli
	// SRAM init
	MCUCR |= (1 << SRE);
     516:	85 b7       	in	r24, 0x35	; 53
     518:	80 68       	ori	r24, 0x80	; 128
     51a:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1 << XMM2);
     51c:	80 b7       	in	r24, 0x30	; 48
     51e:	80 62       	ori	r24, 0x20	; 32
     520:	80 bf       	out	0x30, r24	; 48
	
	uart_init();
     522:	03 d5       	rcall	.+2566   	; 0xf2a <uart_init>
	
	// setup heap
	__malloc_heap_start = (char*)RAM_ADR;
     524:	80 e0       	ldi	r24, 0x00	; 0
     526:	98 e1       	ldi	r25, 0x18	; 24
     528:	90 93 03 01 	sts	0x0103, r25
     52c:	80 93 02 01 	sts	0x0102, r24
	__malloc_heap_end   = (char*)(RAM_ADR + RAM_SIZE);
     530:	80 e0       	ldi	r24, 0x00	; 0
     532:	90 e2       	ldi	r25, 0x20	; 32
     534:	90 93 01 01 	sts	0x0101, r25
     538:	80 93 00 01 	sts	0x0100, r24
	
	adc_init(); // adc init (must be after SRAM init)
     53c:	74 de       	rcall	.-792    	; 0x226 <adc_init>
	oled_init();
     53e:	64 d3       	rcall	.+1736   	; 0xc08 <oled_init>
	menu_init(); // after oled
     540:	0c d1       	rcall	.+536    	; 0x75a <menu_init>
	spi_init();
     542:	61 d4       	rcall	.+2242   	; 0xe06 <spi_init>
	can_init(); // after spi
     544:	37 df       	rcall	.-402    	; 0x3b4 <can_init>
	
	sei();
     546:	78 94       	sei
	
	// setup printf, \note remove?
	stdout = &uart_out; 
     548:	88 e2       	ldi	r24, 0x28	; 40
     54a:	91 e0       	ldi	r25, 0x01	; 1
     54c:	90 93 4f 03 	sts	0x034F, r25
     550:	80 93 4e 03 	sts	0x034E, r24
	stdin  = &uart_in;
     554:	8a e1       	ldi	r24, 0x1A	; 26
     556:	91 e0       	ldi	r25, 0x01	; 1
     558:	90 93 4d 03 	sts	0x034D, r25
     55c:	80 93 4c 03 	sts	0x034C, r24
	
	oled_home();
     560:	7d d2       	rcall	.+1274   	; 0xa5c <oled_home>
	
	game_init(); // after menu_init
     562:	34 df       	rcall	.-408    	; 0x3cc <game_init>
	
	fprintf(&uart_out, "entering loop\n");
     564:	28 e2       	ldi	r18, 0x28	; 40
     566:	31 e0       	ldi	r19, 0x01	; 1
     568:	4e e0       	ldi	r20, 0x0E	; 14
     56a:	50 e0       	ldi	r21, 0x00	; 0
     56c:	61 e0       	ldi	r22, 0x01	; 1
     56e:	70 e0       	ldi	r23, 0x00	; 0
     570:	85 e4       	ldi	r24, 0x45	; 69
     572:	91 e0       	ldi	r25, 0x01	; 1
     574:	61 d6       	rcall	.+3266   	; 0x1238 <fwrite>
	
	uint8_t i = 0;
	
	while (1)
	{	
		if (++i == 0)
     576:	c1 e0       	ldi	r28, 0x01	; 1
     578:	09 c0       	rjmp	.+18     	; 0x58c <main+0x78>
			fprintf(&uart_out, "tick x256\n");
     57a:	28 e2       	ldi	r18, 0x28	; 40
     57c:	31 e0       	ldi	r19, 0x01	; 1
     57e:	4a e0       	ldi	r20, 0x0A	; 10
     580:	50 e0       	ldi	r21, 0x00	; 0
     582:	61 e0       	ldi	r22, 0x01	; 1
     584:	70 e0       	ldi	r23, 0x00	; 0
     586:	84 e5       	ldi	r24, 0x54	; 84
     588:	91 e0       	ldi	r25, 0x01	; 1
     58a:	56 d6       	rcall	.+3244   	; 0x1238 <fwrite>
		
		game_tick();
     58c:	70 df       	rcall	.-288    	; 0x46e <game_tick>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     58e:	8f ef       	ldi	r24, 0xFF	; 255
     590:	9f e2       	ldi	r25, 0x2F	; 47
     592:	01 97       	sbiw	r24, 0x01	; 1
     594:	f1 f7       	brne	.-4      	; 0x592 <main+0x7e>
     596:	00 c0       	rjmp	.+0      	; 0x598 <main+0x84>
     598:	00 00       	nop
	
	uint8_t i = 0;
	
	while (1)
	{	
		if (++i == 0)
     59a:	cf 5f       	subi	r28, 0xFF	; 255
     59c:	b9 f7       	brne	.-18     	; 0x58c <main+0x78>
     59e:	ed cf       	rjmp	.-38     	; 0x57a <main+0x66>

000005a0 <mcp_reset>:
	spi_ss_high();
	
	#ifdef MCP_DEBUG
	fprintf(&uart_out, "MCP_RTS\t%i\n", tx_buffer);
	#endif // MCP_DEBUG
}
     5a0:	2e d4       	rcall	.+2140   	; 0xdfe <spi_ss_low>
     5a2:	80 ec       	ldi	r24, 0xC0	; 192
     5a4:	37 d4       	rcall	.+2158   	; 0xe14 <spi_transmit>
     5a6:	2d d4       	rcall	.+2138   	; 0xe02 <spi_ss_high>
     5a8:	80 e0       	ldi	r24, 0x00	; 0
     5aa:	8f 5f       	subi	r24, 0xFF	; 255
     5ac:	80 38       	cpi	r24, 0x80	; 128
     5ae:	e9 f7       	brne	.-6      	; 0x5aa <mcp_reset+0xa>
     5b0:	08 95       	ret

000005b2 <mcp_read>:
     5b2:	cf 93       	push	r28
     5b4:	c8 2f       	mov	r28, r24
     5b6:	23 d4       	rcall	.+2118   	; 0xdfe <spi_ss_low>
     5b8:	83 e0       	ldi	r24, 0x03	; 3
     5ba:	2c d4       	rcall	.+2136   	; 0xe14 <spi_transmit>
     5bc:	8c 2f       	mov	r24, r28
     5be:	2a d4       	rcall	.+2132   	; 0xe14 <spi_transmit>
     5c0:	80 e0       	ldi	r24, 0x00	; 0
     5c2:	28 d4       	rcall	.+2128   	; 0xe14 <spi_transmit>
     5c4:	c8 2f       	mov	r28, r24
     5c6:	1d d4       	rcall	.+2106   	; 0xe02 <spi_ss_high>
     5c8:	8c 2f       	mov	r24, r28
     5ca:	cf 91       	pop	r28
     5cc:	08 95       	ret

000005ce <mcp_write>:
     5ce:	cf 93       	push	r28
     5d0:	df 93       	push	r29
     5d2:	d8 2f       	mov	r29, r24
     5d4:	c6 2f       	mov	r28, r22
     5d6:	13 d4       	rcall	.+2086   	; 0xdfe <spi_ss_low>
     5d8:	82 e0       	ldi	r24, 0x02	; 2
     5da:	1c d4       	rcall	.+2104   	; 0xe14 <spi_transmit>
     5dc:	8d 2f       	mov	r24, r29
     5de:	1a d4       	rcall	.+2100   	; 0xe14 <spi_transmit>
     5e0:	8c 2f       	mov	r24, r28
     5e2:	18 d4       	rcall	.+2096   	; 0xe14 <spi_transmit>
     5e4:	0e d4       	rcall	.+2076   	; 0xe02 <spi_ss_high>
     5e6:	df 91       	pop	r29
     5e8:	cf 91       	pop	r28
     5ea:	08 95       	ret

000005ec <mcp_readstatus>:

uint8_t mcp_readstatus()
{
     5ec:	cf 93       	push	r28
	spi_ss_low();
     5ee:	07 d4       	rcall	.+2062   	; 0xdfe <spi_ss_low>
	spi_transmit(MCP_READ_STATUS);
     5f0:	80 ea       	ldi	r24, 0xA0	; 160
     5f2:	10 d4       	rcall	.+2080   	; 0xe14 <spi_transmit>
	uint8_t status = spi_transmit(0);
     5f4:	80 e0       	ldi	r24, 0x00	; 0
     5f6:	0e d4       	rcall	.+2076   	; 0xe14 <spi_transmit>
     5f8:	c8 2f       	mov	r28, r24
	spi_ss_high();
     5fa:	03 d4       	rcall	.+2054   	; 0xe02 <spi_ss_high>
	#ifdef MCP_DEBUG
	fprintf(&uart_out, "MCP_READ_STATUS\t%x\n", status);
	#endif // MCP_DEBUG
	
	return status;
}
     5fc:	8c 2f       	mov	r24, r28
     5fe:	cf 91       	pop	r28
     600:	08 95       	ret

00000602 <mcp_bitmodify>:

void mcp_bitmodify(uint8_t adr, uint8_t mask, uint8_t data)
{
     602:	1f 93       	push	r17
     604:	cf 93       	push	r28
     606:	df 93       	push	r29
     608:	18 2f       	mov	r17, r24
     60a:	d6 2f       	mov	r29, r22
     60c:	c4 2f       	mov	r28, r20
	spi_ss_low();
     60e:	f7 d3       	rcall	.+2030   	; 0xdfe <spi_ss_low>
	spi_transmit(MCP_BITMOD);
     610:	85 e0       	ldi	r24, 0x05	; 5
     612:	00 d4       	rcall	.+2048   	; 0xe14 <spi_transmit>
	spi_transmit(adr);
     614:	81 2f       	mov	r24, r17
     616:	fe d3       	rcall	.+2044   	; 0xe14 <spi_transmit>
	spi_transmit(mask);
     618:	8d 2f       	mov	r24, r29
     61a:	fc d3       	rcall	.+2040   	; 0xe14 <spi_transmit>
	spi_transmit(data);
     61c:	8c 2f       	mov	r24, r28
     61e:	fa d3       	rcall	.+2036   	; 0xe14 <spi_transmit>
	spi_ss_high();
     620:	f0 d3       	rcall	.+2016   	; 0xe02 <spi_ss_high>
	
	#ifdef MCP_DEBUG
	fprintf(&uart_out, "MCP_BITMOD\t%x\t%x\t%x\n", adr, mask, data);
	#endif // MCP_DEBUG
}
     622:	df 91       	pop	r29
     624:	cf 91       	pop	r28
     626:	1f 91       	pop	r17
     628:	08 95       	ret

0000062a <mcp_init>:
#include "uart.h"


void mcp_init()
{
	mcp_reset();
     62a:	ba df       	rcall	.-140    	; 0x5a0 <mcp_reset>
	const uint8_t BRP		= 1;	// TQ = 2*Tosc*(BRP+1)  = 250 ns
	const uint8_t PrSeg		= 1;	// tPropSeg = (PrSeg + 1)
	const uint8_t PhSeg1	= 2;	// tPS1 = (PhSeg1 + 1)*TQ
	const uint8_t PhSeg2	= 2;	// tPS2 = (PhSeg2 + 1)*TQ
	
	mcp_write(MCP_CNF1, BRP);
     62c:	61 e0       	ldi	r22, 0x01	; 1
     62e:	8a e2       	ldi	r24, 0x2A	; 42
     630:	ce df       	rcall	.-100    	; 0x5ce <mcp_write>
	mcp_write(MCP_CNF2, PrSeg | (PhSeg1 << 3));
     632:	61 e1       	ldi	r22, 0x11	; 17
     634:	89 e2       	ldi	r24, 0x29	; 41
     636:	cb df       	rcall	.-106    	; 0x5ce <mcp_write>
	mcp_write(MCP_CNF3, PhSeg2);
     638:	62 e0       	ldi	r22, 0x02	; 2
     63a:	88 e2       	ldi	r24, 0x28	; 40
     63c:	c8 df       	rcall	.-112    	; 0x5ce <mcp_write>


	// Setup Rx registers
	//mcp_write(MCP_RXM0SIDH, 0);
	//mcp_write(MCP_RXM0SIDL, 0);
	mcp_bitmodify(MCP_RXB0CTRL, 0x60, 0x60);
     63e:	40 e6       	ldi	r20, 0x60	; 96
     640:	60 e6       	ldi	r22, 0x60	; 96
     642:	80 e6       	ldi	r24, 0x60	; 96
     644:	de df       	rcall	.-68     	; 0x602 <mcp_bitmodify>
	mcp_bitmodify(MCP_RXB1CTRL, 0x60, 0x60);	
     646:	40 e6       	ldi	r20, 0x60	; 96
     648:	60 e6       	ldi	r22, 0x60	; 96
     64a:	80 e7       	ldi	r24, 0x70	; 112
     64c:	da df       	rcall	.-76     	; 0x602 <mcp_bitmodify>
	
	// go to normal mode
	mcp_bitmodify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);
     64e:	40 e0       	ldi	r20, 0x00	; 0
     650:	60 ee       	ldi	r22, 0xE0	; 224
     652:	8f e0       	ldi	r24, 0x0F	; 15
     654:	d6 cf       	rjmp	.-84     	; 0x602 <mcp_bitmodify>
     656:	08 95       	ret

00000658 <menu_action_nothing>:
		///\todo this can't be right?
		// should probably check for parent->submenu[i] != NULL
		if (1)
			free(&parent->submenus[i]);
	}
}
     658:	28 e2       	ldi	r18, 0x28	; 40
     65a:	31 e0       	ldi	r19, 0x01	; 1
     65c:	48 e0       	ldi	r20, 0x08	; 8
     65e:	50 e0       	ldi	r21, 0x00	; 0
     660:	61 e0       	ldi	r22, 0x01	; 1
     662:	70 e0       	ldi	r23, 0x00	; 0
     664:	8f e5       	ldi	r24, 0x5F	; 95
     666:	91 e0       	ldi	r25, 0x01	; 1
     668:	e7 c5       	rjmp	.+3022   	; 0x1238 <fwrite>
     66a:	08 95       	ret

0000066c <menu_init_menu>:
     66c:	cf 92       	push	r12
     66e:	df 92       	push	r13
     670:	ef 92       	push	r14
     672:	ff 92       	push	r15
     674:	0f 93       	push	r16
     676:	1f 93       	push	r17
     678:	cf 93       	push	r28
     67a:	df 93       	push	r29
     67c:	6c 01       	movw	r12, r24
     67e:	7b 01       	movw	r14, r22
     680:	8a 01       	movw	r16, r20
     682:	80 91 c0 02 	lds	r24, 0x02C0
     686:	90 91 c1 02 	lds	r25, 0x02C1
     68a:	68 17       	cp	r22, r24
     68c:	79 07       	cpc	r23, r25
     68e:	c9 f0       	breq	.+50     	; 0x6c2 <menu_init_menu+0x56>
     690:	fb 01       	movw	r30, r22
     692:	84 a1       	ldd	r24, Z+36	; 0x24
     694:	95 a1       	ldd	r25, Z+37	; 0x25
     696:	89 2b       	or	r24, r25
     698:	a1 f0       	breq	.+40     	; 0x6c2 <menu_init_menu+0x56>
     69a:	ff 92       	push	r15
     69c:	6f 93       	push	r22
     69e:	88 e6       	ldi	r24, 0x68	; 104
     6a0:	91 e0       	ldi	r25, 0x01	; 1
     6a2:	9f 93       	push	r25
     6a4:	8f 93       	push	r24
     6a6:	88 e2       	ldi	r24, 0x28	; 40
     6a8:	91 e0       	ldi	r25, 0x01	; 1
     6aa:	9f 93       	push	r25
     6ac:	8f 93       	push	r24
     6ae:	83 d5       	rcall	.+2822   	; 0x11b6 <fprintf>
     6b0:	0f 90       	pop	r0
     6b2:	0f 90       	pop	r0
     6b4:	0f 90       	pop	r0
     6b6:	0f 90       	pop	r0
     6b8:	0f 90       	pop	r0
     6ba:	0f 90       	pop	r0
     6bc:	80 e0       	ldi	r24, 0x00	; 0
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	43 c0       	rjmp	.+134    	; 0x748 <menu_init_menu+0xdc>
     6c2:	8a e2       	ldi	r24, 0x2A	; 42
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	41 d4       	rcall	.+2178   	; 0xf4a <malloc>
     6c8:	ec 01       	movw	r28, r24
     6ca:	fc 01       	movw	r30, r24
     6cc:	80 e0       	ldi	r24, 0x00	; 0
     6ce:	11 92       	st	Z+, r1
     6d0:	8f 5f       	subi	r24, 0xFF	; 255
     6d2:	88 31       	cpi	r24, 0x18	; 24
     6d4:	e1 f7       	brne	.-8      	; 0x6ce <menu_init_menu+0x62>
     6d6:	47 e1       	ldi	r20, 0x17	; 23
     6d8:	50 e0       	ldi	r21, 0x00	; 0
     6da:	b6 01       	movw	r22, r12
     6dc:	ce 01       	movw	r24, r28
     6de:	5c d5       	rcall	.+2744   	; 0x1198 <strncpy>
     6e0:	fe 01       	movw	r30, r28
     6e2:	87 e0       	ldi	r24, 0x07	; 7
     6e4:	11 8e       	std	Z+25, r1	; 0x19
     6e6:	10 8e       	std	Z+24, r1	; 0x18
     6e8:	81 50       	subi	r24, 0x01	; 1
     6ea:	32 96       	adiw	r30, 0x02	; 2
     6ec:	81 11       	cpse	r24, r1
     6ee:	fa cf       	rjmp	.-12     	; 0x6e4 <menu_init_menu+0x78>
     6f0:	e1 14       	cp	r14, r1
     6f2:	f1 04       	cpc	r15, r1
     6f4:	19 f4       	brne	.+6      	; 0x6fc <menu_init_menu+0x90>
     6f6:	df a3       	std	Y+39, r29	; 0x27
     6f8:	ce a3       	std	Y+38, r28	; 0x26
     6fa:	22 c0       	rjmp	.+68     	; 0x740 <menu_init_menu+0xd4>
     6fc:	ff a2       	std	Y+39, r15	; 0x27
     6fe:	ee a2       	std	Y+38, r14	; 0x26
     700:	f7 01       	movw	r30, r14
     702:	80 8d       	ldd	r24, Z+24	; 0x18
     704:	91 8d       	ldd	r25, Z+25	; 0x19
     706:	89 2b       	or	r24, r25
     708:	41 f0       	breq	.+16     	; 0x71a <menu_init_menu+0xae>
     70a:	21 e0       	ldi	r18, 0x01	; 1
     70c:	30 e0       	ldi	r19, 0x00	; 0
     70e:	a9 01       	movw	r20, r18
     710:	82 8d       	ldd	r24, Z+26	; 0x1a
     712:	93 8d       	ldd	r25, Z+27	; 0x1b
     714:	89 2b       	or	r24, r25
     716:	71 f4       	brne	.+28     	; 0x734 <menu_init_menu+0xc8>
     718:	02 c0       	rjmp	.+4      	; 0x71e <menu_init_menu+0xb2>
     71a:	40 e0       	ldi	r20, 0x00	; 0
     71c:	50 e0       	ldi	r21, 0x00	; 0
     71e:	44 5f       	subi	r20, 0xF4	; 244
     720:	5f 4f       	sbci	r21, 0xFF	; 255
     722:	ca 01       	movw	r24, r20
     724:	88 0f       	add	r24, r24
     726:	99 1f       	adc	r25, r25
     728:	f7 01       	movw	r30, r14
     72a:	e8 0f       	add	r30, r24
     72c:	f9 1f       	adc	r31, r25
     72e:	d1 83       	std	Z+1, r29	; 0x01
     730:	c0 83       	st	Z, r28
     732:	06 c0       	rjmp	.+12     	; 0x740 <menu_init_menu+0xd4>
     734:	2f 5f       	subi	r18, 0xFF	; 255
     736:	3f 4f       	sbci	r19, 0xFF	; 255
     738:	32 96       	adiw	r30, 0x02	; 2
     73a:	27 30       	cpi	r18, 0x07	; 7
     73c:	31 05       	cpc	r19, r1
     73e:	39 f7       	brne	.-50     	; 0x70e <menu_init_menu+0xa2>
     740:	19 a7       	std	Y+41, r17	; 0x29
     742:	08 a7       	std	Y+40, r16	; 0x28
     744:	8c 2f       	mov	r24, r28
     746:	9d 2f       	mov	r25, r29
     748:	df 91       	pop	r29
     74a:	cf 91       	pop	r28
     74c:	1f 91       	pop	r17
     74e:	0f 91       	pop	r16
     750:	ff 90       	pop	r15
     752:	ef 90       	pop	r14
     754:	df 90       	pop	r13
     756:	cf 90       	pop	r12
     758:	08 95       	ret

0000075a <menu_init>:
     75a:	cf 93       	push	r28
     75c:	df 93       	push	r29
     75e:	d7 de       	rcall	.-594    	; 0x50e <joystick_init>
     760:	60 91 c0 02 	lds	r22, 0x02C0
     764:	70 91 c1 02 	lds	r23, 0x02C1
     768:	4c e2       	ldi	r20, 0x2C	; 44
     76a:	53 e0       	ldi	r21, 0x03	; 3
     76c:	8c e7       	ldi	r24, 0x7C	; 124
     76e:	91 e0       	ldi	r25, 0x01	; 1
     770:	7d df       	rcall	.-262    	; 0x66c <menu_init_menu>
     772:	90 93 c1 02 	sts	0x02C1, r25
     776:	80 93 c0 02 	sts	0x02C0, r24
     77a:	4b ee       	ldi	r20, 0xEB	; 235
     77c:	51 e0       	ldi	r21, 0x01	; 1
     77e:	bc 01       	movw	r22, r24
     780:	81 e8       	ldi	r24, 0x81	; 129
     782:	91 e0       	ldi	r25, 0x01	; 1
     784:	73 df       	rcall	.-282    	; 0x66c <menu_init_menu>
     786:	60 91 c0 02 	lds	r22, 0x02C0
     78a:	70 91 c1 02 	lds	r23, 0x02C1
     78e:	4c e2       	ldi	r20, 0x2C	; 44
     790:	53 e0       	ldi	r21, 0x03	; 3
     792:	87 e8       	ldi	r24, 0x87	; 135
     794:	91 e0       	ldi	r25, 0x01	; 1
     796:	6a df       	rcall	.-300    	; 0x66c <menu_init_menu>
     798:	60 91 c0 02 	lds	r22, 0x02C0
     79c:	70 91 c1 02 	lds	r23, 0x02C1
     7a0:	4c e2       	ldi	r20, 0x2C	; 44
     7a2:	53 e0       	ldi	r21, 0x03	; 3
     7a4:	82 e9       	ldi	r24, 0x92	; 146
     7a6:	91 e0       	ldi	r25, 0x01	; 1
     7a8:	61 df       	rcall	.-318    	; 0x66c <menu_init_menu>
     7aa:	60 91 c0 02 	lds	r22, 0x02C0
     7ae:	70 91 c1 02 	lds	r23, 0x02C1
     7b2:	4c e2       	ldi	r20, 0x2C	; 44
     7b4:	53 e0       	ldi	r21, 0x03	; 3
     7b6:	8c e9       	ldi	r24, 0x9C	; 156
     7b8:	91 e0       	ldi	r25, 0x01	; 1
     7ba:	58 df       	rcall	.-336    	; 0x66c <menu_init_menu>
     7bc:	ec 01       	movw	r28, r24
     7be:	4c e2       	ldi	r20, 0x2C	; 44
     7c0:	53 e0       	ldi	r21, 0x03	; 3
     7c2:	bc 01       	movw	r22, r24
     7c4:	82 ea       	ldi	r24, 0xA2	; 162
     7c6:	91 e0       	ldi	r25, 0x01	; 1
     7c8:	51 df       	rcall	.-350    	; 0x66c <menu_init_menu>
     7ca:	4c e2       	ldi	r20, 0x2C	; 44
     7cc:	53 e0       	ldi	r21, 0x03	; 3
     7ce:	be 01       	movw	r22, r28
     7d0:	84 eb       	ldi	r24, 0xB4	; 180
     7d2:	91 e0       	ldi	r25, 0x01	; 1
     7d4:	4b df       	rcall	.-362    	; 0x66c <menu_init_menu>
     7d6:	4c e2       	ldi	r20, 0x2C	; 44
     7d8:	53 e0       	ldi	r21, 0x03	; 3
     7da:	be 01       	movw	r22, r28
     7dc:	81 ec       	ldi	r24, 0xC1	; 193
     7de:	91 e0       	ldi	r25, 0x01	; 1
     7e0:	45 df       	rcall	.-374    	; 0x66c <menu_init_menu>
     7e2:	4c e2       	ldi	r20, 0x2C	; 44
     7e4:	53 e0       	ldi	r21, 0x03	; 3
     7e6:	be 01       	movw	r22, r28
     7e8:	8c ec       	ldi	r24, 0xCC	; 204
     7ea:	91 e0       	ldi	r25, 0x01	; 1
     7ec:	3f df       	rcall	.-386    	; 0x66c <menu_init_menu>
     7ee:	80 91 c0 02 	lds	r24, 0x02C0
     7f2:	90 91 c1 02 	lds	r25, 0x02C1
     7f6:	90 93 bf 02 	sts	0x02BF, r25
     7fa:	80 93 be 02 	sts	0x02BE, r24
     7fe:	df 91       	pop	r29
     800:	cf 91       	pop	r28
     802:	08 95       	ret

00000804 <menu_print_current>:
     804:	cf 92       	push	r12
     806:	df 92       	push	r13
     808:	ef 92       	push	r14
     80a:	ff 92       	push	r15
     80c:	0f 93       	push	r16
     80e:	1f 93       	push	r17
     810:	cf 93       	push	r28
     812:	df 93       	push	r29
     814:	23 d1       	rcall	.+582    	; 0xa5c <oled_home>
     816:	80 91 bf 02 	lds	r24, 0x02BF
     81a:	8f 93       	push	r24
     81c:	80 91 be 02 	lds	r24, 0x02BE
     820:	8f 93       	push	r24
     822:	88 e7       	ldi	r24, 0x78	; 120
     824:	91 e0       	ldi	r25, 0x01	; 1
     826:	9f 93       	push	r25
     828:	8f 93       	push	r24
     82a:	88 e0       	ldi	r24, 0x08	; 8
     82c:	91 e0       	ldi	r25, 0x01	; 1
     82e:	9f 93       	push	r25
     830:	8f 93       	push	r24
     832:	c1 d4       	rcall	.+2434   	; 0x11b6 <fprintf>
     834:	0f 90       	pop	r0
     836:	0f 90       	pop	r0
     838:	0f 90       	pop	r0
     83a:	0f 90       	pop	r0
     83c:	0f 90       	pop	r0
     83e:	0f 90       	pop	r0
     840:	c0 e0       	ldi	r28, 0x00	; 0
     842:	d0 e0       	ldi	r29, 0x00	; 0
     844:	0f 2e       	mov	r0, r31
     846:	f8 e7       	ldi	r31, 0x78	; 120
     848:	ef 2e       	mov	r14, r31
     84a:	f1 e0       	ldi	r31, 0x01	; 1
     84c:	ff 2e       	mov	r15, r31
     84e:	f0 2d       	mov	r31, r0
     850:	08 e0       	ldi	r16, 0x08	; 8
     852:	11 e0       	ldi	r17, 0x01	; 1
     854:	6e 01       	movw	r12, r28
     856:	80 91 be 02 	lds	r24, 0x02BE
     85a:	90 91 bf 02 	lds	r25, 0x02BF
     85e:	de 01       	movw	r26, r28
     860:	1c 96       	adiw	r26, 0x0c	; 12
     862:	aa 0f       	add	r26, r26
     864:	bb 1f       	adc	r27, r27
     866:	a8 0f       	add	r26, r24
     868:	b9 1f       	adc	r27, r25
     86a:	8d 91       	ld	r24, X+
     86c:	9c 91       	ld	r25, X
     86e:	89 2b       	or	r24, r25
     870:	79 f1       	breq	.+94     	; 0x8d0 <menu_print_current+0xcc>
     872:	80 91 bd 02 	lds	r24, 0x02BD
     876:	c8 13       	cpse	r28, r24
     878:	09 c0       	rjmp	.+18     	; 0x88c <menu_print_current+0x88>
     87a:	98 01       	movw	r18, r16
     87c:	42 e0       	ldi	r20, 0x02	; 2
     87e:	50 e0       	ldi	r21, 0x00	; 0
     880:	61 e0       	ldi	r22, 0x01	; 1
     882:	70 e0       	ldi	r23, 0x00	; 0
     884:	81 ee       	ldi	r24, 0xE1	; 225
     886:	91 e0       	ldi	r25, 0x01	; 1
     888:	d7 d4       	rcall	.+2478   	; 0x1238 <fwrite>
     88a:	08 c0       	rjmp	.+16     	; 0x89c <menu_print_current+0x98>
     88c:	98 01       	movw	r18, r16
     88e:	42 e0       	ldi	r20, 0x02	; 2
     890:	50 e0       	ldi	r21, 0x00	; 0
     892:	61 e0       	ldi	r22, 0x01	; 1
     894:	70 e0       	ldi	r23, 0x00	; 0
     896:	84 ee       	ldi	r24, 0xE4	; 228
     898:	91 e0       	ldi	r25, 0x01	; 1
     89a:	ce d4       	rcall	.+2460   	; 0x1238 <fwrite>
     89c:	e0 91 be 02 	lds	r30, 0x02BE
     8a0:	f0 91 bf 02 	lds	r31, 0x02BF
     8a4:	8c e0       	ldi	r24, 0x0C	; 12
     8a6:	c8 0e       	add	r12, r24
     8a8:	d1 1c       	adc	r13, r1
     8aa:	cc 0c       	add	r12, r12
     8ac:	dd 1c       	adc	r13, r13
     8ae:	ec 0d       	add	r30, r12
     8b0:	fd 1d       	adc	r31, r13
     8b2:	81 81       	ldd	r24, Z+1	; 0x01
     8b4:	8f 93       	push	r24
     8b6:	80 81       	ld	r24, Z
     8b8:	8f 93       	push	r24
     8ba:	ff 92       	push	r15
     8bc:	ef 92       	push	r14
     8be:	1f 93       	push	r17
     8c0:	0f 93       	push	r16
     8c2:	79 d4       	rcall	.+2290   	; 0x11b6 <fprintf>
     8c4:	0f 90       	pop	r0
     8c6:	0f 90       	pop	r0
     8c8:	0f 90       	pop	r0
     8ca:	0f 90       	pop	r0
     8cc:	0f 90       	pop	r0
     8ce:	0f 90       	pop	r0
     8d0:	21 96       	adiw	r28, 0x01	; 1
     8d2:	c7 30       	cpi	r28, 0x07	; 7
     8d4:	d1 05       	cpc	r29, r1
     8d6:	09 f0       	breq	.+2      	; 0x8da <menu_print_current+0xd6>
     8d8:	bd cf       	rjmp	.-134    	; 0x854 <menu_print_current+0x50>
     8da:	df 91       	pop	r29
     8dc:	cf 91       	pop	r28
     8de:	1f 91       	pop	r17
     8e0:	0f 91       	pop	r16
     8e2:	ff 90       	pop	r15
     8e4:	ef 90       	pop	r14
     8e6:	df 90       	pop	r13
     8e8:	cf 90       	pop	r12
     8ea:	08 95       	ret

000008ec <menu_move_cursor>:
     8ec:	1f 93       	push	r17
     8ee:	cf 93       	push	r28
     8f0:	df 93       	push	r29
     8f2:	10 91 bd 02 	lds	r17, 0x02BD
     8f6:	18 0f       	add	r17, r24
     8f8:	c1 2f       	mov	r28, r17
     8fa:	d0 e0       	ldi	r29, 0x00	; 0
     8fc:	1f 92       	push	r1
     8fe:	1f 93       	push	r17
     900:	27 ee       	ldi	r18, 0xE7	; 231
     902:	31 e0       	ldi	r19, 0x01	; 1
     904:	3f 93       	push	r19
     906:	2f 93       	push	r18
     908:	28 e2       	ldi	r18, 0x28	; 40
     90a:	31 e0       	ldi	r19, 0x01	; 1
     90c:	3f 93       	push	r19
     90e:	2f 93       	push	r18
     910:	52 d4       	rcall	.+2212   	; 0x11b6 <fprintf>
     912:	20 91 be 02 	lds	r18, 0x02BE
     916:	30 91 bf 02 	lds	r19, 0x02BF
     91a:	2c 96       	adiw	r28, 0x0c	; 12
     91c:	cc 0f       	add	r28, r28
     91e:	dd 1f       	adc	r29, r29
     920:	c2 0f       	add	r28, r18
     922:	d3 1f       	adc	r29, r19
     924:	0f 90       	pop	r0
     926:	0f 90       	pop	r0
     928:	0f 90       	pop	r0
     92a:	0f 90       	pop	r0
     92c:	0f 90       	pop	r0
     92e:	0f 90       	pop	r0
     930:	28 81       	ld	r18, Y
     932:	39 81       	ldd	r19, Y+1	; 0x01
     934:	23 2b       	or	r18, r19
     936:	21 f0       	breq	.+8      	; 0x940 <menu_move_cursor+0x54>
     938:	17 30       	cpi	r17, 0x07	; 7
     93a:	10 f4       	brcc	.+4      	; 0x940 <menu_move_cursor+0x54>
     93c:	10 93 bd 02 	sts	0x02BD, r17
     940:	df 91       	pop	r29
     942:	cf 91       	pop	r28
     944:	1f 91       	pop	r17
     946:	08 95       	ret

00000948 <menu_enter_current>:



void menu_enter_current(void)
{
     948:	cf 93       	push	r28
     94a:	df 93       	push	r29
	oled_fill(0x00); // needed if next submenu has fewer menus than current
     94c:	80 e0       	ldi	r24, 0x00	; 0
     94e:	1c d1       	rcall	.+568    	; 0xb88 <oled_fill>
	
	// check if current choice is valid and that current choice has any children
	if (current->submenus[subchoice] != NULL && current->submenus[subchoice]->submenus[0] != NULL){
     950:	80 91 be 02 	lds	r24, 0x02BE
     954:	90 91 bf 02 	lds	r25, 0x02BF
     958:	e0 91 bd 02 	lds	r30, 0x02BD
     95c:	f0 e0       	ldi	r31, 0x00	; 0
     95e:	3c 96       	adiw	r30, 0x0c	; 12
     960:	ee 0f       	add	r30, r30
     962:	ff 1f       	adc	r31, r31
     964:	e8 0f       	add	r30, r24
     966:	f9 1f       	adc	r31, r25
     968:	01 90       	ld	r0, Z+
     96a:	f0 81       	ld	r31, Z
     96c:	e0 2d       	mov	r30, r0
     96e:	30 97       	sbiw	r30, 0x00	; 0
     970:	09 f4       	brne	.+2      	; 0x974 <menu_enter_current+0x2c>
     972:	48 c0       	rjmp	.+144    	; 0xa04 <menu_enter_current+0xbc>
     974:	80 8d       	ldd	r24, Z+24	; 0x18
     976:	91 8d       	ldd	r25, Z+25	; 0x19
     978:	89 2b       	or	r24, r25
     97a:	09 f4       	brne	.+2      	; 0x97e <menu_enter_current+0x36>
     97c:	43 c0       	rjmp	.+134    	; 0xa04 <menu_enter_current+0xbc>
		//fprintf(&uart_out, "current: %p\n", current);
		//fprintf(&uart_out, "next:    %p\n", current->submenus[subchoice]);
	
		fprintf(&uart_out, "nothing: \t%p\n", menu_action_nothing);
     97e:	8c e2       	ldi	r24, 0x2C	; 44
     980:	93 e0       	ldi	r25, 0x03	; 3
     982:	9f 93       	push	r25
     984:	8f 93       	push	r24
     986:	8a ef       	ldi	r24, 0xFA	; 250
     988:	91 e0       	ldi	r25, 0x01	; 1
     98a:	9f 93       	push	r25
     98c:	8f 93       	push	r24
     98e:	c8 e2       	ldi	r28, 0x28	; 40
     990:	d1 e0       	ldi	r29, 0x01	; 1
     992:	df 93       	push	r29
     994:	cf 93       	push	r28
     996:	0f d4       	rcall	.+2078   	; 0x11b6 <fprintf>
		fprintf(&uart_out, "action : \t\t%p\n", (*(current->submenus[subchoice]->action)));
     998:	80 91 be 02 	lds	r24, 0x02BE
     99c:	90 91 bf 02 	lds	r25, 0x02BF
     9a0:	e0 91 bd 02 	lds	r30, 0x02BD
     9a4:	f0 e0       	ldi	r31, 0x00	; 0
     9a6:	3c 96       	adiw	r30, 0x0c	; 12
     9a8:	ee 0f       	add	r30, r30
     9aa:	ff 1f       	adc	r31, r31
     9ac:	e8 0f       	add	r30, r24
     9ae:	f9 1f       	adc	r31, r25
     9b0:	01 90       	ld	r0, Z+
     9b2:	f0 81       	ld	r31, Z
     9b4:	e0 2d       	mov	r30, r0
     9b6:	81 a5       	ldd	r24, Z+41	; 0x29
     9b8:	8f 93       	push	r24
     9ba:	80 a5       	ldd	r24, Z+40	; 0x28
     9bc:	8f 93       	push	r24
     9be:	88 e0       	ldi	r24, 0x08	; 8
     9c0:	92 e0       	ldi	r25, 0x02	; 2
     9c2:	9f 93       	push	r25
     9c4:	8f 93       	push	r24
     9c6:	df 93       	push	r29
     9c8:	cf 93       	push	r28
     9ca:	f5 d3       	rcall	.+2026   	; 0x11b6 <fprintf>
		
		current = current->submenus[subchoice];
     9cc:	80 91 be 02 	lds	r24, 0x02BE
     9d0:	90 91 bf 02 	lds	r25, 0x02BF
     9d4:	e0 91 bd 02 	lds	r30, 0x02BD
     9d8:	f0 e0       	ldi	r31, 0x00	; 0
     9da:	3c 96       	adiw	r30, 0x0c	; 12
     9dc:	ee 0f       	add	r30, r30
     9de:	ff 1f       	adc	r31, r31
     9e0:	e8 0f       	add	r30, r24
     9e2:	f9 1f       	adc	r31, r25
     9e4:	80 81       	ld	r24, Z
     9e6:	91 81       	ldd	r25, Z+1	; 0x01
     9e8:	90 93 bf 02 	sts	0x02BF, r25
     9ec:	80 93 be 02 	sts	0x02BE, r24
		subchoice = 0;
     9f0:	10 92 bd 02 	sts	0x02BD, r1
     9f4:	8d b7       	in	r24, 0x3d	; 61
     9f6:	9e b7       	in	r25, 0x3e	; 62
     9f8:	0c 96       	adiw	r24, 0x0c	; 12
     9fa:	0f b6       	in	r0, 0x3f	; 63
     9fc:	f8 94       	cli
     9fe:	9e bf       	out	0x3e, r25	; 62
     a00:	0f be       	out	0x3f, r0	; 63
     a02:	8d bf       	out	0x3d, r24	; 61
	}
	
	current->submenus[subchoice]->action();
     a04:	80 91 be 02 	lds	r24, 0x02BE
     a08:	90 91 bf 02 	lds	r25, 0x02BF
     a0c:	e0 91 bd 02 	lds	r30, 0x02BD
     a10:	f0 e0       	ldi	r31, 0x00	; 0
     a12:	3c 96       	adiw	r30, 0x0c	; 12
     a14:	ee 0f       	add	r30, r30
     a16:	ff 1f       	adc	r31, r31
     a18:	e8 0f       	add	r30, r24
     a1a:	f9 1f       	adc	r31, r25
     a1c:	01 90       	ld	r0, Z+
     a1e:	f0 81       	ld	r31, Z
     a20:	e0 2d       	mov	r30, r0
     a22:	00 a4       	ldd	r0, Z+40	; 0x28
     a24:	f1 a5       	ldd	r31, Z+41	; 0x29
     a26:	e0 2d       	mov	r30, r0
     a28:	09 95       	icall
}
     a2a:	df 91       	pop	r29
     a2c:	cf 91       	pop	r28
     a2e:	08 95       	ret

00000a30 <menu_enter_parent>:


void menu_enter_parent(void){
	oled_fill(0x00);
     a30:	80 e0       	ldi	r24, 0x00	; 0
     a32:	aa d0       	rcall	.+340    	; 0xb88 <oled_fill>
	
	current = current->parent;
     a34:	e0 91 be 02 	lds	r30, 0x02BE
     a38:	f0 91 bf 02 	lds	r31, 0x02BF
     a3c:	86 a1       	ldd	r24, Z+38	; 0x26
     a3e:	97 a1       	ldd	r25, Z+39	; 0x27
     a40:	90 93 bf 02 	sts	0x02BF, r25
     a44:	80 93 be 02 	sts	0x02BE, r24
     a48:	08 95       	ret

00000a4a <oled_autorefresh_init>:
}

void oled_reset(){
	oled_init();
	oled_fill(0);
	oled_home();
     a4a:	89 b7       	in	r24, 0x39	; 57
     a4c:	82 60       	ori	r24, 0x02	; 2
     a4e:	89 bf       	out	0x39, r24	; 57
     a50:	83 b7       	in	r24, 0x33	; 51
     a52:	85 60       	ori	r24, 0x05	; 5
     a54:	83 bf       	out	0x33, r24	; 51
     a56:	87 e2       	ldi	r24, 0x27	; 39
     a58:	81 bf       	out	0x31, r24	; 49
     a5a:	08 95       	ret

00000a5c <oled_home>:
     a5c:	10 92 c3 02 	sts	0x02C3, r1
     a60:	10 92 c2 02 	sts	0x02C2, r1
     a64:	08 95       	ret

00000a66 <oled_newline>:
     a66:	10 92 c3 02 	sts	0x02C3, r1
     a6a:	80 91 c2 02 	lds	r24, 0x02C2
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	01 96       	adiw	r24, 0x01	; 1
     a72:	87 70       	andi	r24, 0x07	; 7
     a74:	90 78       	andi	r25, 0x80	; 128
     a76:	80 93 c2 02 	sts	0x02C2, r24
     a7a:	08 95       	ret

00000a7c <oled_goto_nextpos>:
     a7c:	20 91 c3 02 	lds	r18, 0x02C3
     a80:	30 e0       	ldi	r19, 0x00	; 0
     a82:	2f 5f       	subi	r18, 0xFF	; 255
     a84:	3f 4f       	sbci	r19, 0xFF	; 255
     a86:	2f 77       	andi	r18, 0x7F	; 127
     a88:	30 78       	andi	r19, 0x80	; 128
     a8a:	20 93 c3 02 	sts	0x02C3, r18
     a8e:	80 91 c2 02 	lds	r24, 0x02C2
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	41 e0       	ldi	r20, 0x01	; 1
     a96:	50 e0       	ldi	r21, 0x00	; 0
     a98:	22 23       	and	r18, r18
     a9a:	11 f0       	breq	.+4      	; 0xaa0 <oled_goto_nextpos+0x24>
     a9c:	40 e0       	ldi	r20, 0x00	; 0
     a9e:	50 e0       	ldi	r21, 0x00	; 0
     aa0:	84 0f       	add	r24, r20
     aa2:	95 1f       	adc	r25, r21
     aa4:	87 70       	andi	r24, 0x07	; 7
     aa6:	90 78       	andi	r25, 0x80	; 128
     aa8:	99 23       	and	r25, r25
     aaa:	24 f4       	brge	.+8      	; 0xab4 <oled_goto_nextpos+0x38>
     aac:	01 97       	sbiw	r24, 0x01	; 1
     aae:	88 6f       	ori	r24, 0xF8	; 248
     ab0:	9f 6f       	ori	r25, 0xFF	; 255
     ab2:	01 96       	adiw	r24, 0x01	; 1
     ab4:	80 93 c2 02 	sts	0x02C2, r24
     ab8:	08 95       	ret

00000aba <oled_buffchar>:
     aba:	0f 93       	push	r16
     abc:	1f 93       	push	r17
     abe:	cf 93       	push	r28
     ac0:	df 93       	push	r29
     ac2:	08 2f       	mov	r16, r24
     ac4:	80 32       	cpi	r24, 0x20	; 32
     ac6:	90 f1       	brcs	.+100    	; 0xb2c <oled_buffchar+0x72>
     ac8:	20 91 c3 02 	lds	r18, 0x02C3
     acc:	22 23       	and	r18, r18
     ace:	74 f1       	brlt	.+92     	; 0xb2c <oled_buffchar+0x72>
     ad0:	80 91 c2 02 	lds	r24, 0x02C2
     ad4:	88 30       	cpi	r24, 0x08	; 8
     ad6:	50 f5       	brcc	.+84     	; 0xb2c <oled_buffchar+0x72>
     ad8:	30 e0       	ldi	r19, 0x00	; 0
     ada:	2c 5f       	subi	r18, 0xFC	; 252
     adc:	3f 4f       	sbci	r19, 0xFF	; 255
     ade:	20 38       	cpi	r18, 0x80	; 128
     ae0:	31 05       	cpc	r19, r1
     ae2:	6c f1       	brlt	.+90     	; 0xb3e <oled_buffchar+0x84>
     ae4:	c0 df       	rcall	.-128    	; 0xa66 <oled_newline>
     ae6:	2b c0       	rjmp	.+86     	; 0xb3e <oled_buffchar+0x84>
     ae8:	80 91 c2 02 	lds	r24, 0x02C2
     aec:	a0 91 c3 02 	lds	r26, 0x02C3
     af0:	b0 e0       	ldi	r27, 0x00	; 0
     af2:	90 e8       	ldi	r25, 0x80	; 128
     af4:	89 9f       	mul	r24, r25
     af6:	a0 0d       	add	r26, r0
     af8:	b1 1d       	adc	r27, r1
     afa:	11 24       	eor	r1, r1
     afc:	80 91 16 01 	lds	r24, 0x0116
     b00:	90 91 17 01 	lds	r25, 0x0117
     b04:	a8 0f       	add	r26, r24
     b06:	b9 1f       	adc	r27, r25
     b08:	ce 01       	movw	r24, r28
     b0a:	80 0f       	add	r24, r16
     b0c:	91 1f       	adc	r25, r17
     b0e:	e0 91 18 01 	lds	r30, 0x0118
     b12:	f0 91 19 01 	lds	r31, 0x0119
     b16:	e8 0f       	add	r30, r24
     b18:	f9 1f       	adc	r31, r25
     b1a:	85 91       	lpm	r24, Z+
     b1c:	94 91       	lpm	r25, Z
     b1e:	8c 93       	st	X, r24
     b20:	ad df       	rcall	.-166    	; 0xa7c <oled_goto_nextpos>
     b22:	21 96       	adiw	r28, 0x01	; 1
     b24:	c4 30       	cpi	r28, 0x04	; 4
     b26:	d1 05       	cpc	r29, r1
     b28:	f9 f6       	brne	.-66     	; 0xae8 <oled_buffchar+0x2e>
     b2a:	13 c0       	rjmp	.+38     	; 0xb52 <oled_buffchar+0x98>
     b2c:	0a 30       	cpi	r16, 0x0A	; 10
     b2e:	11 f4       	brne	.+4      	; 0xb34 <oled_buffchar+0x7a>
     b30:	9a df       	rcall	.-204    	; 0xa66 <oled_newline>
     b32:	21 c0       	rjmp	.+66     	; 0xb76 <oled_buffchar+0xbc>
     b34:	0d 30       	cpi	r16, 0x0D	; 13
     b36:	f9 f4       	brne	.+62     	; 0xb76 <oled_buffchar+0xbc>
     b38:	10 92 c3 02 	sts	0x02C3, r1
     b3c:	1c c0       	rjmp	.+56     	; 0xb76 <oled_buffchar+0xbc>
     b3e:	10 e0       	ldi	r17, 0x00	; 0
     b40:	00 52       	subi	r16, 0x20	; 32
     b42:	11 09       	sbc	r17, r1
     b44:	00 0f       	add	r16, r16
     b46:	11 1f       	adc	r17, r17
     b48:	00 0f       	add	r16, r16
     b4a:	11 1f       	adc	r17, r17
     b4c:	c0 e0       	ldi	r28, 0x00	; 0
     b4e:	d0 e0       	ldi	r29, 0x00	; 0
     b50:	cb cf       	rjmp	.-106    	; 0xae8 <oled_buffchar+0x2e>
     b52:	80 91 c2 02 	lds	r24, 0x02C2
     b56:	e0 91 c3 02 	lds	r30, 0x02C3
     b5a:	f0 e0       	ldi	r31, 0x00	; 0
     b5c:	90 e8       	ldi	r25, 0x80	; 128
     b5e:	89 9f       	mul	r24, r25
     b60:	e0 0d       	add	r30, r0
     b62:	f1 1d       	adc	r31, r1
     b64:	11 24       	eor	r1, r1
     b66:	80 91 16 01 	lds	r24, 0x0116
     b6a:	90 91 17 01 	lds	r25, 0x0117
     b6e:	e8 0f       	add	r30, r24
     b70:	f9 1f       	adc	r31, r25
     b72:	10 82       	st	Z, r1
     b74:	83 df       	rcall	.-250    	; 0xa7c <oled_goto_nextpos>
     b76:	df 91       	pop	r29
     b78:	cf 91       	pop	r28
     b7a:	1f 91       	pop	r17
     b7c:	0f 91       	pop	r16
     b7e:	08 95       	ret

00000b80 <oled_putchar>:
     b80:	9c df       	rcall	.-200    	; 0xaba <oled_buffchar>
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	08 95       	ret

00000b88 <oled_fill>:
     b88:	00 c0       	rjmp	.+0      	; 0xb8a <oled_fill+0x2>
     b8a:	00 c0       	rjmp	.+0      	; 0xb8c <oled_fill+0x4>
     b8c:	00 00       	nop
     b8e:	91 e2       	ldi	r25, 0x21	; 33
     b90:	90 93 00 10 	sts	0x1000, r25
     b94:	00 c0       	rjmp	.+0      	; 0xb96 <oled_fill+0xe>
     b96:	00 c0       	rjmp	.+0      	; 0xb98 <oled_fill+0x10>
     b98:	00 00       	nop
     b9a:	10 92 00 10 	sts	0x1000, r1
     b9e:	00 c0       	rjmp	.+0      	; 0xba0 <oled_fill+0x18>
     ba0:	00 c0       	rjmp	.+0      	; 0xba2 <oled_fill+0x1a>
     ba2:	00 00       	nop
     ba4:	9f e7       	ldi	r25, 0x7F	; 127
     ba6:	90 93 00 10 	sts	0x1000, r25
     baa:	00 c0       	rjmp	.+0      	; 0xbac <oled_fill+0x24>
     bac:	00 c0       	rjmp	.+0      	; 0xbae <oled_fill+0x26>
     bae:	00 00       	nop
     bb0:	92 e2       	ldi	r25, 0x22	; 34
     bb2:	90 93 00 10 	sts	0x1000, r25
     bb6:	00 c0       	rjmp	.+0      	; 0xbb8 <oled_fill+0x30>
     bb8:	00 c0       	rjmp	.+0      	; 0xbba <oled_fill+0x32>
     bba:	00 00       	nop
     bbc:	10 92 00 10 	sts	0x1000, r1
     bc0:	00 c0       	rjmp	.+0      	; 0xbc2 <oled_fill+0x3a>
     bc2:	00 c0       	rjmp	.+0      	; 0xbc4 <oled_fill+0x3c>
     bc4:	00 00       	nop
     bc6:	97 e0       	ldi	r25, 0x07	; 7
     bc8:	90 93 00 10 	sts	0x1000, r25
     bcc:	60 e0       	ldi	r22, 0x00	; 0
     bce:	70 e0       	ldi	r23, 0x00	; 0
     bd0:	a0 e0       	ldi	r26, 0x00	; 0
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	15 c0       	rjmp	.+42     	; 0xc00 <oled_fill+0x78>
     bd6:	a9 01       	movw	r20, r18
     bd8:	46 0f       	add	r20, r22
     bda:	57 1f       	adc	r21, r23
     bdc:	e0 91 16 01 	lds	r30, 0x0116
     be0:	f0 91 17 01 	lds	r31, 0x0117
     be4:	e4 0f       	add	r30, r20
     be6:	f5 1f       	adc	r31, r21
     be8:	80 83       	st	Z, r24
     bea:	2f 5f       	subi	r18, 0xFF	; 255
     bec:	3f 4f       	sbci	r19, 0xFF	; 255
     bee:	20 38       	cpi	r18, 0x80	; 128
     bf0:	31 05       	cpc	r19, r1
     bf2:	89 f7       	brne	.-30     	; 0xbd6 <oled_fill+0x4e>
     bf4:	60 58       	subi	r22, 0x80	; 128
     bf6:	7f 4f       	sbci	r23, 0xFF	; 255
     bf8:	61 15       	cp	r22, r1
     bfa:	24 e0       	ldi	r18, 0x04	; 4
     bfc:	72 07       	cpc	r23, r18
     bfe:	19 f0       	breq	.+6      	; 0xc06 <oled_fill+0x7e>
     c00:	2a 2f       	mov	r18, r26
     c02:	39 2f       	mov	r19, r25
     c04:	e8 cf       	rjmp	.-48     	; 0xbd6 <oled_fill+0x4e>
     c06:	08 95       	ret

00000c08 <oled_init>:
     c08:	f8 94       	cli
     c0a:	00 c0       	rjmp	.+0      	; 0xc0c <oled_init+0x4>
     c0c:	00 c0       	rjmp	.+0      	; 0xc0e <oled_init+0x6>
     c0e:	00 00       	nop
     c10:	8e ea       	ldi	r24, 0xAE	; 174
     c12:	80 93 00 10 	sts	0x1000, r24
     c16:	00 c0       	rjmp	.+0      	; 0xc18 <oled_init+0x10>
     c18:	00 c0       	rjmp	.+0      	; 0xc1a <oled_init+0x12>
     c1a:	00 00       	nop
     c1c:	81 ea       	ldi	r24, 0xA1	; 161
     c1e:	80 93 00 10 	sts	0x1000, r24
     c22:	00 c0       	rjmp	.+0      	; 0xc24 <oled_init+0x1c>
     c24:	00 c0       	rjmp	.+0      	; 0xc26 <oled_init+0x1e>
     c26:	00 00       	nop
     c28:	8a ed       	ldi	r24, 0xDA	; 218
     c2a:	80 93 00 10 	sts	0x1000, r24
     c2e:	00 c0       	rjmp	.+0      	; 0xc30 <oled_init+0x28>
     c30:	00 c0       	rjmp	.+0      	; 0xc32 <oled_init+0x2a>
     c32:	00 00       	nop
     c34:	82 e1       	ldi	r24, 0x12	; 18
     c36:	80 93 00 10 	sts	0x1000, r24
     c3a:	00 c0       	rjmp	.+0      	; 0xc3c <oled_init+0x34>
     c3c:	00 c0       	rjmp	.+0      	; 0xc3e <oled_init+0x36>
     c3e:	00 00       	nop
     c40:	88 ec       	ldi	r24, 0xC8	; 200
     c42:	80 93 00 10 	sts	0x1000, r24
     c46:	00 c0       	rjmp	.+0      	; 0xc48 <oled_init+0x40>
     c48:	00 c0       	rjmp	.+0      	; 0xc4a <oled_init+0x42>
     c4a:	00 00       	nop
     c4c:	88 ea       	ldi	r24, 0xA8	; 168
     c4e:	80 93 00 10 	sts	0x1000, r24
     c52:	00 c0       	rjmp	.+0      	; 0xc54 <oled_init+0x4c>
     c54:	00 c0       	rjmp	.+0      	; 0xc56 <oled_init+0x4e>
     c56:	00 00       	nop
     c58:	8f e3       	ldi	r24, 0x3F	; 63
     c5a:	80 93 00 10 	sts	0x1000, r24
     c5e:	00 c0       	rjmp	.+0      	; 0xc60 <oled_init+0x58>
     c60:	00 c0       	rjmp	.+0      	; 0xc62 <oled_init+0x5a>
     c62:	00 00       	nop
     c64:	85 ed       	ldi	r24, 0xD5	; 213
     c66:	80 93 00 10 	sts	0x1000, r24
     c6a:	00 c0       	rjmp	.+0      	; 0xc6c <oled_init+0x64>
     c6c:	00 c0       	rjmp	.+0      	; 0xc6e <oled_init+0x66>
     c6e:	00 00       	nop
     c70:	80 e8       	ldi	r24, 0x80	; 128
     c72:	80 93 00 10 	sts	0x1000, r24
     c76:	00 c0       	rjmp	.+0      	; 0xc78 <oled_init+0x70>
     c78:	00 c0       	rjmp	.+0      	; 0xc7a <oled_init+0x72>
     c7a:	00 00       	nop
     c7c:	81 e8       	ldi	r24, 0x81	; 129
     c7e:	80 93 00 10 	sts	0x1000, r24
     c82:	00 c0       	rjmp	.+0      	; 0xc84 <oled_init+0x7c>
     c84:	00 c0       	rjmp	.+0      	; 0xc86 <oled_init+0x7e>
     c86:	00 00       	nop
     c88:	80 e5       	ldi	r24, 0x50	; 80
     c8a:	80 93 00 10 	sts	0x1000, r24
     c8e:	00 c0       	rjmp	.+0      	; 0xc90 <oled_init+0x88>
     c90:	00 c0       	rjmp	.+0      	; 0xc92 <oled_init+0x8a>
     c92:	00 00       	nop
     c94:	89 ed       	ldi	r24, 0xD9	; 217
     c96:	80 93 00 10 	sts	0x1000, r24
     c9a:	00 c0       	rjmp	.+0      	; 0xc9c <oled_init+0x94>
     c9c:	00 c0       	rjmp	.+0      	; 0xc9e <oled_init+0x96>
     c9e:	00 00       	nop
     ca0:	81 e2       	ldi	r24, 0x21	; 33
     ca2:	80 93 00 10 	sts	0x1000, r24
     ca6:	00 c0       	rjmp	.+0      	; 0xca8 <oled_init+0xa0>
     ca8:	00 c0       	rjmp	.+0      	; 0xcaa <oled_init+0xa2>
     caa:	00 00       	nop
     cac:	80 e2       	ldi	r24, 0x20	; 32
     cae:	80 93 00 10 	sts	0x1000, r24
     cb2:	00 c0       	rjmp	.+0      	; 0xcb4 <oled_init+0xac>
     cb4:	00 c0       	rjmp	.+0      	; 0xcb6 <oled_init+0xae>
     cb6:	00 00       	nop
     cb8:	10 92 00 10 	sts	0x1000, r1
     cbc:	00 c0       	rjmp	.+0      	; 0xcbe <oled_init+0xb6>
     cbe:	00 c0       	rjmp	.+0      	; 0xcc0 <oled_init+0xb8>
     cc0:	00 00       	nop
     cc2:	8b ed       	ldi	r24, 0xDB	; 219
     cc4:	80 93 00 10 	sts	0x1000, r24
     cc8:	00 c0       	rjmp	.+0      	; 0xcca <oled_init+0xc2>
     cca:	00 c0       	rjmp	.+0      	; 0xccc <oled_init+0xc4>
     ccc:	00 00       	nop
     cce:	80 e3       	ldi	r24, 0x30	; 48
     cd0:	80 93 00 10 	sts	0x1000, r24
     cd4:	00 c0       	rjmp	.+0      	; 0xcd6 <oled_init+0xce>
     cd6:	00 c0       	rjmp	.+0      	; 0xcd8 <oled_init+0xd0>
     cd8:	00 00       	nop
     cda:	8d ea       	ldi	r24, 0xAD	; 173
     cdc:	80 93 00 10 	sts	0x1000, r24
     ce0:	00 c0       	rjmp	.+0      	; 0xce2 <oled_init+0xda>
     ce2:	00 c0       	rjmp	.+0      	; 0xce4 <oled_init+0xdc>
     ce4:	00 00       	nop
     ce6:	10 92 00 10 	sts	0x1000, r1
     cea:	00 c0       	rjmp	.+0      	; 0xcec <oled_init+0xe4>
     cec:	00 c0       	rjmp	.+0      	; 0xcee <oled_init+0xe6>
     cee:	00 00       	nop
     cf0:	84 ea       	ldi	r24, 0xA4	; 164
     cf2:	80 93 00 10 	sts	0x1000, r24
     cf6:	00 c0       	rjmp	.+0      	; 0xcf8 <oled_init+0xf0>
     cf8:	00 c0       	rjmp	.+0      	; 0xcfa <oled_init+0xf2>
     cfa:	00 00       	nop
     cfc:	86 ea       	ldi	r24, 0xA6	; 166
     cfe:	80 93 00 10 	sts	0x1000, r24
     d02:	00 c0       	rjmp	.+0      	; 0xd04 <oled_init+0xfc>
     d04:	00 c0       	rjmp	.+0      	; 0xd06 <oled_init+0xfe>
     d06:	00 00       	nop
     d08:	8f ea       	ldi	r24, 0xAF	; 175
     d0a:	80 93 00 10 	sts	0x1000, r24
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	3b df       	rcall	.-394    	; 0xb88 <oled_fill>
     d12:	a4 de       	rcall	.-696    	; 0xa5c <oled_home>
     d14:	9a ce       	rjmp	.-716    	; 0xa4a <oled_autorefresh_init>
     d16:	08 95       	ret

00000d18 <oled_update>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d18:	00 c0       	rjmp	.+0      	; 0xd1a <oled_update+0x2>
     d1a:	00 c0       	rjmp	.+0      	; 0xd1c <oled_update+0x4>
     d1c:	00 00       	nop
	OCR0 = 39;
}

void write_c(uint8_t cmd){
	_delay_us(1);
	*((uint8_t *)OLED_C_ADR) = cmd;
     d1e:	81 e2       	ldi	r24, 0x21	; 33
     d20:	80 93 00 10 	sts	0x1000, r24
     d24:	00 c0       	rjmp	.+0      	; 0xd26 <oled_update+0xe>
     d26:	00 c0       	rjmp	.+0      	; 0xd28 <oled_update+0x10>
     d28:	00 00       	nop
     d2a:	10 92 00 10 	sts	0x1000, r1
     d2e:	00 c0       	rjmp	.+0      	; 0xd30 <oled_update+0x18>
     d30:	00 c0       	rjmp	.+0      	; 0xd32 <oled_update+0x1a>
     d32:	00 00       	nop
     d34:	8f e7       	ldi	r24, 0x7F	; 127
     d36:	80 93 00 10 	sts	0x1000, r24
     d3a:	00 c0       	rjmp	.+0      	; 0xd3c <oled_update+0x24>
     d3c:	00 c0       	rjmp	.+0      	; 0xd3e <oled_update+0x26>
     d3e:	00 00       	nop
     d40:	82 e2       	ldi	r24, 0x22	; 34
     d42:	80 93 00 10 	sts	0x1000, r24
     d46:	00 c0       	rjmp	.+0      	; 0xd48 <oled_update+0x30>
     d48:	00 c0       	rjmp	.+0      	; 0xd4a <oled_update+0x32>
     d4a:	00 00       	nop
     d4c:	10 92 00 10 	sts	0x1000, r1
     d50:	00 c0       	rjmp	.+0      	; 0xd52 <oled_update+0x3a>
     d52:	00 c0       	rjmp	.+0      	; 0xd54 <oled_update+0x3c>
     d54:	00 00       	nop
     d56:	87 e0       	ldi	r24, 0x07	; 7
     d58:	80 93 00 10 	sts	0x1000, r24
     d5c:	00 c0       	rjmp	.+0      	; 0xd5e <oled_update+0x46>
     d5e:	00 c0       	rjmp	.+0      	; 0xd60 <oled_update+0x48>
     d60:	00 00       	nop
     d62:	10 92 00 10 	sts	0x1000, r1
     d66:	00 c0       	rjmp	.+0      	; 0xd68 <oled_update+0x50>
     d68:	00 c0       	rjmp	.+0      	; 0xd6a <oled_update+0x52>
     d6a:	00 00       	nop
     d6c:	80 e1       	ldi	r24, 0x10	; 16
     d6e:	80 93 00 10 	sts	0x1000, r24
     d72:	40 e0       	ldi	r20, 0x00	; 0
     d74:	50 e0       	ldi	r21, 0x00	; 0
		}
	}
}

//////////////////////////////////////////////////////////////////////////
void oled_update(){
     d76:	70 e0       	ldi	r23, 0x00	; 0
     d78:	60 e0       	ldi	r22, 0x00	; 0
	*((uint8_t *)OLED_C_ADR) = cmd;
}

void write_d(uint8_t data){
	_delay_us(1); // delay may be increased to 1000 to make debug easier, works without any delay
	*((uint8_t *)OLED_D_ADR) = data;
     d7a:	a1 e0       	ldi	r26, 0x01	; 1
     d7c:	b0 e1       	ldi	r27, 0x10	; 16
     d7e:	18 c0       	rjmp	.+48     	; 0xdb0 <oled_update+0x98>
     d80:	9c 01       	movw	r18, r24
     d82:	24 0f       	add	r18, r20
     d84:	35 1f       	adc	r19, r21
	write_c(SET_LOW_COL_ADR  | 0x00);
	write_c(SET_HIGH_COL_ADR | 0x00);
	
	for (int page = 0; page<OLED_PAGES; ++page){
		for (int seg = 0; seg<OLED_WIDTH; ++seg){
			write_d(buffer[page*OLED_WIDTH + seg]);
     d86:	e0 91 16 01 	lds	r30, 0x0116
     d8a:	f0 91 17 01 	lds	r31, 0x0117
     d8e:	e2 0f       	add	r30, r18
     d90:	f3 1f       	adc	r31, r19
     d92:	20 81       	ld	r18, Z
     d94:	00 c0       	rjmp	.+0      	; 0xd96 <oled_update+0x7e>
     d96:	00 c0       	rjmp	.+0      	; 0xd98 <oled_update+0x80>
     d98:	00 00       	nop
	*((uint8_t *)OLED_C_ADR) = cmd;
}

void write_d(uint8_t data){
	_delay_us(1); // delay may be increased to 1000 to make debug easier, works without any delay
	*((uint8_t *)OLED_D_ADR) = data;
     d9a:	2c 93       	st	X, r18
	
	write_c(SET_LOW_COL_ADR  | 0x00);
	write_c(SET_HIGH_COL_ADR | 0x00);
	
	for (int page = 0; page<OLED_PAGES; ++page){
		for (int seg = 0; seg<OLED_WIDTH; ++seg){
     d9c:	01 96       	adiw	r24, 0x01	; 1
     d9e:	80 38       	cpi	r24, 0x80	; 128
     da0:	91 05       	cpc	r25, r1
     da2:	71 f7       	brne	.-36     	; 0xd80 <oled_update+0x68>
     da4:	40 58       	subi	r20, 0x80	; 128
     da6:	5f 4f       	sbci	r21, 0xFF	; 255
	write_c(SET_PAGE_ADR);write_c(0x00); write_c(OLED_PAGES-1);
	
	write_c(SET_LOW_COL_ADR  | 0x00);
	write_c(SET_HIGH_COL_ADR | 0x00);
	
	for (int page = 0; page<OLED_PAGES; ++page){
     da8:	41 15       	cp	r20, r1
     daa:	84 e0       	ldi	r24, 0x04	; 4
     dac:	58 07       	cpc	r21, r24
     dae:	19 f0       	breq	.+6      	; 0xdb6 <oled_update+0x9e>
		}
	}
}

//////////////////////////////////////////////////////////////////////////
void oled_update(){
     db0:	87 2f       	mov	r24, r23
     db2:	96 2f       	mov	r25, r22
     db4:	e5 cf       	rjmp	.-54     	; 0xd80 <oled_update+0x68>
     db6:	08 95       	ret

00000db8 <__vector_17>:
uint8_t xpos = 0;
uint8_t ypos = 0;

FILE oled_out = FDEV_SETUP_STREAM(oled_putchar, NULL, _FDEV_SETUP_WRITE);

ISR(TIMER0_OVF_vect){
     db8:	1f 92       	push	r1
     dba:	0f 92       	push	r0
     dbc:	0f b6       	in	r0, 0x3f	; 63
     dbe:	0f 92       	push	r0
     dc0:	11 24       	eor	r1, r1
     dc2:	2f 93       	push	r18
     dc4:	3f 93       	push	r19
     dc6:	4f 93       	push	r20
     dc8:	5f 93       	push	r21
     dca:	6f 93       	push	r22
     dcc:	7f 93       	push	r23
     dce:	8f 93       	push	r24
     dd0:	9f 93       	push	r25
     dd2:	af 93       	push	r26
     dd4:	bf 93       	push	r27
     dd6:	ef 93       	push	r30
     dd8:	ff 93       	push	r31
	oled_update();
     dda:	9e df       	rcall	.-196    	; 0xd18 <oled_update>
}
     ddc:	ff 91       	pop	r31
     dde:	ef 91       	pop	r30
     de0:	bf 91       	pop	r27
     de2:	af 91       	pop	r26
     de4:	9f 91       	pop	r25
     de6:	8f 91       	pop	r24
     de8:	7f 91       	pop	r23
     dea:	6f 91       	pop	r22
     dec:	5f 91       	pop	r21
     dee:	4f 91       	pop	r20
     df0:	3f 91       	pop	r19
     df2:	2f 91       	pop	r18
     df4:	0f 90       	pop	r0
     df6:	0f be       	out	0x3f, r0	; 63
     df8:	0f 90       	pop	r0
     dfa:	1f 90       	pop	r1
     dfc:	18 95       	reti

00000dfe <spi_ss_low>:
#include "spi_driver.h"
#include "avr/io.h"
#include <stdio.h>

void spi_ss_low(){
	PORTB &= ~(1 << PB4);
     dfe:	c4 98       	cbi	0x18, 4	; 24
     e00:	08 95       	ret

00000e02 <spi_ss_high>:
}

void spi_ss_high(){
	PORTB |= (1 << PB4);
     e02:	c4 9a       	sbi	0x18, 4	; 24
     e04:	08 95       	ret

00000e06 <spi_init>:

/// Initialize Atmega162 as SPI master
void spi_init()
{
	// setup IO pins
	DDRB |= (1<<DDB4 | 1<<DDB5 | 1<<DDB7);
     e06:	87 b3       	in	r24, 0x17	; 23
     e08:	80 6b       	ori	r24, 0xB0	; 176
     e0a:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1<<DDB6); // not necessary
     e0c:	be 98       	cbi	0x17, 6	; 23
	
	// setup SPI
	SPCR = (1<<SPE | 1<<MSTR | 1<<SPR0 | 1<<CPOL | 1<<CPHA) & ~(/*1<<CPOL | 1<<CPHA |*/ 1<<DORD);
     e0e:	8d e5       	ldi	r24, 0x5D	; 93
     e10:	8d b9       	out	0x0d, r24	; 13
     e12:	08 95       	ret

00000e14 <spi_transmit>:
}


uint8_t spi_transmit(uint8_t data)
{
	SPDR = data;
     e14:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
     e16:	77 9b       	sbis	0x0e, 7	; 14
     e18:	fe cf       	rjmp	.-4      	; 0xe16 <spi_transmit+0x2>
	
	return SPDR;
     e1a:	8f b1       	in	r24, 0x0f	; 15
     e1c:	08 95       	ret

00000e1e <uart_send>:

}

/// Busy wait transmission of msg
int uart_send(unsigned char msg){
	while (!(UCSR0A & (1 << UDRE0)));
     e1e:	5d 9b       	sbis	0x0b, 5	; 11
     e20:	fe cf       	rjmp	.-4      	; 0xe1e <uart_send>
	UDR0 = msg;
     e22:	8c b9       	out	0x0c, r24	; 12
	return 0;
}
     e24:	80 e0       	ldi	r24, 0x00	; 0
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	08 95       	ret

00000e2a <uart_recv>:


/// Read data from buffer
unsigned char uart_recv(){
	char returnval = 0;
	if(recvhead != recvtail)
     e2a:	20 91 c6 02 	lds	r18, 0x02C6
     e2e:	30 91 c7 02 	lds	r19, 0x02C7
     e32:	80 91 c4 02 	lds	r24, 0x02C4
     e36:	90 91 c5 02 	lds	r25, 0x02C5
     e3a:	28 17       	cp	r18, r24
     e3c:	39 07       	cpc	r19, r25
     e3e:	11 f1       	breq	.+68     	; 0xe84 <uart_recv+0x5a>
	{
		returnval = recv_buffer[recvtail++];
     e40:	80 91 c4 02 	lds	r24, 0x02C4
     e44:	90 91 c5 02 	lds	r25, 0x02C5
     e48:	9c 01       	movw	r18, r24
     e4a:	2f 5f       	subi	r18, 0xFF	; 255
     e4c:	3f 4f       	sbci	r19, 0xFF	; 255
     e4e:	30 93 c5 02 	sts	0x02C5, r19
     e52:	20 93 c4 02 	sts	0x02C4, r18
     e56:	fc 01       	movw	r30, r24
     e58:	e8 53       	subi	r30, 0x38	; 56
     e5a:	fd 4f       	sbci	r31, 0xFD	; 253
     e5c:	80 81       	ld	r24, Z
		recvtail = recvtail%BUFFER_MAX;
     e5e:	20 91 c4 02 	lds	r18, 0x02C4
     e62:	30 91 c5 02 	lds	r19, 0x02C5
     e66:	2f 77       	andi	r18, 0x7F	; 127
     e68:	30 78       	andi	r19, 0x80	; 128
     e6a:	33 23       	and	r19, r19
     e6c:	34 f4       	brge	.+12     	; 0xe7a <uart_recv+0x50>
     e6e:	21 50       	subi	r18, 0x01	; 1
     e70:	31 09       	sbc	r19, r1
     e72:	20 68       	ori	r18, 0x80	; 128
     e74:	3f 6f       	ori	r19, 0xFF	; 255
     e76:	2f 5f       	subi	r18, 0xFF	; 255
     e78:	3f 4f       	sbci	r19, 0xFF	; 255
     e7a:	30 93 c5 02 	sts	0x02C5, r19
     e7e:	20 93 c4 02 	sts	0x02C4, r18
     e82:	08 95       	ret
}


/// Read data from buffer
unsigned char uart_recv(){
	char returnval = 0;
     e84:	80 e0       	ldi	r24, 0x00	; 0
	{
		returnval = recv_buffer[recvtail++];
		recvtail = recvtail%BUFFER_MAX;
	}
	return returnval;
}
     e86:	08 95       	ret

00000e88 <__vector_19>:
volatile char recv_buffer[BUFFER_MAX]; /*! Buffer for storing recieved data*/
volatile int recvhead = 0; /*! Head of buffer. Where next recieved byte will be placed. */
volatile int recvtail = 0; /*! Tail of buffer. Where next read will occour. */

/// Interrupt vector for Rx. Place recieved data into buffer.
ISR(USART0_RXC_vect){
     e88:	1f 92       	push	r1
     e8a:	0f 92       	push	r0
     e8c:	0f b6       	in	r0, 0x3f	; 63
     e8e:	0f 92       	push	r0
     e90:	11 24       	eor	r1, r1
     e92:	2f 93       	push	r18
     e94:	3f 93       	push	r19
     e96:	4f 93       	push	r20
     e98:	8f 93       	push	r24
     e9a:	9f 93       	push	r25
     e9c:	ef 93       	push	r30
     e9e:	ff 93       	push	r31
	cli();
     ea0:	f8 94       	cli
	char input = UDR0;
     ea2:	4c b1       	in	r20, 0x0c	; 12
	if((recvhead+1)%BUFFER_MAX != recvtail){		// Sjekk at bufferen ikke er full
     ea4:	80 91 c6 02 	lds	r24, 0x02C6
     ea8:	90 91 c7 02 	lds	r25, 0x02C7
     eac:	20 91 c4 02 	lds	r18, 0x02C4
     eb0:	30 91 c5 02 	lds	r19, 0x02C5
     eb4:	01 96       	adiw	r24, 0x01	; 1
     eb6:	8f 77       	andi	r24, 0x7F	; 127
     eb8:	90 78       	andi	r25, 0x80	; 128
     eba:	99 23       	and	r25, r25
     ebc:	24 f4       	brge	.+8      	; 0xec6 <__vector_19+0x3e>
     ebe:	01 97       	sbiw	r24, 0x01	; 1
     ec0:	80 68       	ori	r24, 0x80	; 128
     ec2:	9f 6f       	ori	r25, 0xFF	; 255
     ec4:	01 96       	adiw	r24, 0x01	; 1
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	c1 f0       	breq	.+48     	; 0xefc <__vector_19+0x74>
		recv_buffer[recvhead] = input;				// If so, legg inn byte
     ecc:	e0 91 c6 02 	lds	r30, 0x02C6
     ed0:	f0 91 c7 02 	lds	r31, 0x02C7
     ed4:	e8 53       	subi	r30, 0x38	; 56
     ed6:	fd 4f       	sbci	r31, 0xFD	; 253
     ed8:	40 83       	st	Z, r20
		recvhead = (recvhead+1)%BUFFER_MAX;
     eda:	80 91 c6 02 	lds	r24, 0x02C6
     ede:	90 91 c7 02 	lds	r25, 0x02C7
     ee2:	01 96       	adiw	r24, 0x01	; 1
     ee4:	8f 77       	andi	r24, 0x7F	; 127
     ee6:	90 78       	andi	r25, 0x80	; 128
     ee8:	99 23       	and	r25, r25
     eea:	24 f4       	brge	.+8      	; 0xef4 <__vector_19+0x6c>
     eec:	01 97       	sbiw	r24, 0x01	; 1
     eee:	80 68       	ori	r24, 0x80	; 128
     ef0:	9f 6f       	ori	r25, 0xFF	; 255
     ef2:	01 96       	adiw	r24, 0x01	; 1
     ef4:	90 93 c7 02 	sts	0x02C7, r25
     ef8:	80 93 c6 02 	sts	0x02C6, r24
	}
	sei();
     efc:	78 94       	sei
}
     efe:	ff 91       	pop	r31
     f00:	ef 91       	pop	r30
     f02:	9f 91       	pop	r25
     f04:	8f 91       	pop	r24
     f06:	4f 91       	pop	r20
     f08:	3f 91       	pop	r19
     f0a:	2f 91       	pop	r18
     f0c:	0f 90       	pop	r0
     f0e:	0f be       	out	0x3f, r0	; 63
     f10:	0f 90       	pop	r0
     f12:	1f 90       	pop	r1
     f14:	18 95       	reti

00000f16 <__vector_23>:

///\todo remove interrupt from Tx
ISR(USART0_TXC_vect){
     f16:	1f 92       	push	r1
     f18:	0f 92       	push	r0
     f1a:	0f b6       	in	r0, 0x3f	; 63
     f1c:	0f 92       	push	r0
     f1e:	11 24       	eor	r1, r1
	
}
     f20:	0f 90       	pop	r0
     f22:	0f be       	out	0x3f, r0	; 63
     f24:	0f 90       	pop	r0
     f26:	1f 90       	pop	r1
     f28:	18 95       	reti

00000f2a <uart_init>:

///Initialize uart
void uart_init(){
	// set baud rate
	int timerval = (F_CPU/(16*BAUD) - 1);
	UBRR0L = timerval&0xFF;
     f2a:	8f e1       	ldi	r24, 0x1F	; 31
     f2c:	89 b9       	out	0x09, r24	; 9
	UBRR0H = (timerval>>8)&0x0F;
     f2e:	10 bc       	out	0x20, r1	; 32
	
	// enable interupts on Rx & Tx, and enable Rx & Tx 
	UCSR0B |= (1 << RXCIE0) | (1 << TXCIE0) | (1 << RXEN0) | (1 << TXEN0);
     f30:	8a b1       	in	r24, 0x0a	; 10
     f32:	88 6d       	ori	r24, 0xD8	; 216
     f34:	8a b9       	out	0x0a, r24	; 10
	
	// enable async mode
	UCSR0C &= ~(1 << UMSEL0);
     f36:	80 b5       	in	r24, 0x20	; 32
     f38:	8f 7b       	andi	r24, 0xBF	; 191
     f3a:	80 bd       	out	0x20, r24	; 32
	
	// parity disable
	UCSR0C &= ~((1 << UPM00) | (1 << UPM10));
     f3c:	80 b5       	in	r24, 0x20	; 32
     f3e:	8f 7e       	andi	r24, 0xEF	; 239
     f40:	80 bd       	out	0x20, r24	; 32
	
	// stop bit to 1
	UCSR0C &= ~(1 << USBS0);
     f42:	80 b5       	in	r24, 0x20	; 32
     f44:	87 7f       	andi	r24, 0xF7	; 247
     f46:	80 bd       	out	0x20, r24	; 32
     f48:	08 95       	ret

00000f4a <malloc>:
     f4a:	cf 93       	push	r28
     f4c:	df 93       	push	r29
     f4e:	82 30       	cpi	r24, 0x02	; 2
     f50:	91 05       	cpc	r25, r1
     f52:	10 f4       	brcc	.+4      	; 0xf58 <malloc+0xe>
     f54:	82 e0       	ldi	r24, 0x02	; 2
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	e0 91 4a 03 	lds	r30, 0x034A
     f5c:	f0 91 4b 03 	lds	r31, 0x034B
     f60:	20 e0       	ldi	r18, 0x00	; 0
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	a0 e0       	ldi	r26, 0x00	; 0
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	30 97       	sbiw	r30, 0x00	; 0
     f6a:	39 f1       	breq	.+78     	; 0xfba <malloc+0x70>
     f6c:	40 81       	ld	r20, Z
     f6e:	51 81       	ldd	r21, Z+1	; 0x01
     f70:	48 17       	cp	r20, r24
     f72:	59 07       	cpc	r21, r25
     f74:	b8 f0       	brcs	.+46     	; 0xfa4 <malloc+0x5a>
     f76:	48 17       	cp	r20, r24
     f78:	59 07       	cpc	r21, r25
     f7a:	71 f4       	brne	.+28     	; 0xf98 <malloc+0x4e>
     f7c:	82 81       	ldd	r24, Z+2	; 0x02
     f7e:	93 81       	ldd	r25, Z+3	; 0x03
     f80:	10 97       	sbiw	r26, 0x00	; 0
     f82:	29 f0       	breq	.+10     	; 0xf8e <malloc+0x44>
     f84:	13 96       	adiw	r26, 0x03	; 3
     f86:	9c 93       	st	X, r25
     f88:	8e 93       	st	-X, r24
     f8a:	12 97       	sbiw	r26, 0x02	; 2
     f8c:	2c c0       	rjmp	.+88     	; 0xfe6 <malloc+0x9c>
     f8e:	90 93 4b 03 	sts	0x034B, r25
     f92:	80 93 4a 03 	sts	0x034A, r24
     f96:	27 c0       	rjmp	.+78     	; 0xfe6 <malloc+0x9c>
     f98:	21 15       	cp	r18, r1
     f9a:	31 05       	cpc	r19, r1
     f9c:	31 f0       	breq	.+12     	; 0xfaa <malloc+0x60>
     f9e:	42 17       	cp	r20, r18
     fa0:	53 07       	cpc	r21, r19
     fa2:	18 f0       	brcs	.+6      	; 0xfaa <malloc+0x60>
     fa4:	a9 01       	movw	r20, r18
     fa6:	db 01       	movw	r26, r22
     fa8:	01 c0       	rjmp	.+2      	; 0xfac <malloc+0x62>
     faa:	ef 01       	movw	r28, r30
     fac:	9a 01       	movw	r18, r20
     fae:	bd 01       	movw	r22, r26
     fb0:	df 01       	movw	r26, r30
     fb2:	02 80       	ldd	r0, Z+2	; 0x02
     fb4:	f3 81       	ldd	r31, Z+3	; 0x03
     fb6:	e0 2d       	mov	r30, r0
     fb8:	d7 cf       	rjmp	.-82     	; 0xf68 <malloc+0x1e>
     fba:	21 15       	cp	r18, r1
     fbc:	31 05       	cpc	r19, r1
     fbe:	f9 f0       	breq	.+62     	; 0xffe <malloc+0xb4>
     fc0:	28 1b       	sub	r18, r24
     fc2:	39 0b       	sbc	r19, r25
     fc4:	24 30       	cpi	r18, 0x04	; 4
     fc6:	31 05       	cpc	r19, r1
     fc8:	80 f4       	brcc	.+32     	; 0xfea <malloc+0xa0>
     fca:	8a 81       	ldd	r24, Y+2	; 0x02
     fcc:	9b 81       	ldd	r25, Y+3	; 0x03
     fce:	61 15       	cp	r22, r1
     fd0:	71 05       	cpc	r23, r1
     fd2:	21 f0       	breq	.+8      	; 0xfdc <malloc+0x92>
     fd4:	fb 01       	movw	r30, r22
     fd6:	93 83       	std	Z+3, r25	; 0x03
     fd8:	82 83       	std	Z+2, r24	; 0x02
     fda:	04 c0       	rjmp	.+8      	; 0xfe4 <malloc+0x9a>
     fdc:	90 93 4b 03 	sts	0x034B, r25
     fe0:	80 93 4a 03 	sts	0x034A, r24
     fe4:	fe 01       	movw	r30, r28
     fe6:	32 96       	adiw	r30, 0x02	; 2
     fe8:	44 c0       	rjmp	.+136    	; 0x1072 <malloc+0x128>
     fea:	fe 01       	movw	r30, r28
     fec:	e2 0f       	add	r30, r18
     fee:	f3 1f       	adc	r31, r19
     ff0:	81 93       	st	Z+, r24
     ff2:	91 93       	st	Z+, r25
     ff4:	22 50       	subi	r18, 0x02	; 2
     ff6:	31 09       	sbc	r19, r1
     ff8:	39 83       	std	Y+1, r19	; 0x01
     ffa:	28 83       	st	Y, r18
     ffc:	3a c0       	rjmp	.+116    	; 0x1072 <malloc+0x128>
     ffe:	20 91 48 03 	lds	r18, 0x0348
    1002:	30 91 49 03 	lds	r19, 0x0349
    1006:	23 2b       	or	r18, r19
    1008:	41 f4       	brne	.+16     	; 0x101a <malloc+0xd0>
    100a:	20 91 02 01 	lds	r18, 0x0102
    100e:	30 91 03 01 	lds	r19, 0x0103
    1012:	30 93 49 03 	sts	0x0349, r19
    1016:	20 93 48 03 	sts	0x0348, r18
    101a:	20 91 00 01 	lds	r18, 0x0100
    101e:	30 91 01 01 	lds	r19, 0x0101
    1022:	21 15       	cp	r18, r1
    1024:	31 05       	cpc	r19, r1
    1026:	41 f4       	brne	.+16     	; 0x1038 <malloc+0xee>
    1028:	2d b7       	in	r18, 0x3d	; 61
    102a:	3e b7       	in	r19, 0x3e	; 62
    102c:	40 91 04 01 	lds	r20, 0x0104
    1030:	50 91 05 01 	lds	r21, 0x0105
    1034:	24 1b       	sub	r18, r20
    1036:	35 0b       	sbc	r19, r21
    1038:	e0 91 48 03 	lds	r30, 0x0348
    103c:	f0 91 49 03 	lds	r31, 0x0349
    1040:	e2 17       	cp	r30, r18
    1042:	f3 07       	cpc	r31, r19
    1044:	a0 f4       	brcc	.+40     	; 0x106e <malloc+0x124>
    1046:	2e 1b       	sub	r18, r30
    1048:	3f 0b       	sbc	r19, r31
    104a:	28 17       	cp	r18, r24
    104c:	39 07       	cpc	r19, r25
    104e:	78 f0       	brcs	.+30     	; 0x106e <malloc+0x124>
    1050:	ac 01       	movw	r20, r24
    1052:	4e 5f       	subi	r20, 0xFE	; 254
    1054:	5f 4f       	sbci	r21, 0xFF	; 255
    1056:	24 17       	cp	r18, r20
    1058:	35 07       	cpc	r19, r21
    105a:	48 f0       	brcs	.+18     	; 0x106e <malloc+0x124>
    105c:	4e 0f       	add	r20, r30
    105e:	5f 1f       	adc	r21, r31
    1060:	50 93 49 03 	sts	0x0349, r21
    1064:	40 93 48 03 	sts	0x0348, r20
    1068:	81 93       	st	Z+, r24
    106a:	91 93       	st	Z+, r25
    106c:	02 c0       	rjmp	.+4      	; 0x1072 <malloc+0x128>
    106e:	e0 e0       	ldi	r30, 0x00	; 0
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	cf 01       	movw	r24, r30
    1074:	df 91       	pop	r29
    1076:	cf 91       	pop	r28
    1078:	08 95       	ret

0000107a <free>:
    107a:	cf 93       	push	r28
    107c:	df 93       	push	r29
    107e:	00 97       	sbiw	r24, 0x00	; 0
    1080:	09 f4       	brne	.+2      	; 0x1084 <free+0xa>
    1082:	87 c0       	rjmp	.+270    	; 0x1192 <free+0x118>
    1084:	fc 01       	movw	r30, r24
    1086:	32 97       	sbiw	r30, 0x02	; 2
    1088:	13 82       	std	Z+3, r1	; 0x03
    108a:	12 82       	std	Z+2, r1	; 0x02
    108c:	c0 91 4a 03 	lds	r28, 0x034A
    1090:	d0 91 4b 03 	lds	r29, 0x034B
    1094:	20 97       	sbiw	r28, 0x00	; 0
    1096:	81 f4       	brne	.+32     	; 0x10b8 <free+0x3e>
    1098:	20 81       	ld	r18, Z
    109a:	31 81       	ldd	r19, Z+1	; 0x01
    109c:	28 0f       	add	r18, r24
    109e:	39 1f       	adc	r19, r25
    10a0:	80 91 48 03 	lds	r24, 0x0348
    10a4:	90 91 49 03 	lds	r25, 0x0349
    10a8:	82 17       	cp	r24, r18
    10aa:	93 07       	cpc	r25, r19
    10ac:	79 f5       	brne	.+94     	; 0x110c <free+0x92>
    10ae:	f0 93 49 03 	sts	0x0349, r31
    10b2:	e0 93 48 03 	sts	0x0348, r30
    10b6:	6d c0       	rjmp	.+218    	; 0x1192 <free+0x118>
    10b8:	de 01       	movw	r26, r28
    10ba:	20 e0       	ldi	r18, 0x00	; 0
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	ae 17       	cp	r26, r30
    10c0:	bf 07       	cpc	r27, r31
    10c2:	50 f4       	brcc	.+20     	; 0x10d8 <free+0x5e>
    10c4:	12 96       	adiw	r26, 0x02	; 2
    10c6:	4d 91       	ld	r20, X+
    10c8:	5c 91       	ld	r21, X
    10ca:	13 97       	sbiw	r26, 0x03	; 3
    10cc:	9d 01       	movw	r18, r26
    10ce:	41 15       	cp	r20, r1
    10d0:	51 05       	cpc	r21, r1
    10d2:	09 f1       	breq	.+66     	; 0x1116 <free+0x9c>
    10d4:	da 01       	movw	r26, r20
    10d6:	f3 cf       	rjmp	.-26     	; 0x10be <free+0x44>
    10d8:	b3 83       	std	Z+3, r27	; 0x03
    10da:	a2 83       	std	Z+2, r26	; 0x02
    10dc:	40 81       	ld	r20, Z
    10de:	51 81       	ldd	r21, Z+1	; 0x01
    10e0:	84 0f       	add	r24, r20
    10e2:	95 1f       	adc	r25, r21
    10e4:	8a 17       	cp	r24, r26
    10e6:	9b 07       	cpc	r25, r27
    10e8:	71 f4       	brne	.+28     	; 0x1106 <free+0x8c>
    10ea:	8d 91       	ld	r24, X+
    10ec:	9c 91       	ld	r25, X
    10ee:	11 97       	sbiw	r26, 0x01	; 1
    10f0:	84 0f       	add	r24, r20
    10f2:	95 1f       	adc	r25, r21
    10f4:	02 96       	adiw	r24, 0x02	; 2
    10f6:	91 83       	std	Z+1, r25	; 0x01
    10f8:	80 83       	st	Z, r24
    10fa:	12 96       	adiw	r26, 0x02	; 2
    10fc:	8d 91       	ld	r24, X+
    10fe:	9c 91       	ld	r25, X
    1100:	13 97       	sbiw	r26, 0x03	; 3
    1102:	93 83       	std	Z+3, r25	; 0x03
    1104:	82 83       	std	Z+2, r24	; 0x02
    1106:	21 15       	cp	r18, r1
    1108:	31 05       	cpc	r19, r1
    110a:	29 f4       	brne	.+10     	; 0x1116 <free+0x9c>
    110c:	f0 93 4b 03 	sts	0x034B, r31
    1110:	e0 93 4a 03 	sts	0x034A, r30
    1114:	3e c0       	rjmp	.+124    	; 0x1192 <free+0x118>
    1116:	d9 01       	movw	r26, r18
    1118:	13 96       	adiw	r26, 0x03	; 3
    111a:	fc 93       	st	X, r31
    111c:	ee 93       	st	-X, r30
    111e:	12 97       	sbiw	r26, 0x02	; 2
    1120:	4d 91       	ld	r20, X+
    1122:	5d 91       	ld	r21, X+
    1124:	a4 0f       	add	r26, r20
    1126:	b5 1f       	adc	r27, r21
    1128:	ea 17       	cp	r30, r26
    112a:	fb 07       	cpc	r31, r27
    112c:	79 f4       	brne	.+30     	; 0x114c <free+0xd2>
    112e:	80 81       	ld	r24, Z
    1130:	91 81       	ldd	r25, Z+1	; 0x01
    1132:	84 0f       	add	r24, r20
    1134:	95 1f       	adc	r25, r21
    1136:	02 96       	adiw	r24, 0x02	; 2
    1138:	d9 01       	movw	r26, r18
    113a:	11 96       	adiw	r26, 0x01	; 1
    113c:	9c 93       	st	X, r25
    113e:	8e 93       	st	-X, r24
    1140:	82 81       	ldd	r24, Z+2	; 0x02
    1142:	93 81       	ldd	r25, Z+3	; 0x03
    1144:	13 96       	adiw	r26, 0x03	; 3
    1146:	9c 93       	st	X, r25
    1148:	8e 93       	st	-X, r24
    114a:	12 97       	sbiw	r26, 0x02	; 2
    114c:	e0 e0       	ldi	r30, 0x00	; 0
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	8a 81       	ldd	r24, Y+2	; 0x02
    1152:	9b 81       	ldd	r25, Y+3	; 0x03
    1154:	00 97       	sbiw	r24, 0x00	; 0
    1156:	19 f0       	breq	.+6      	; 0x115e <free+0xe4>
    1158:	fe 01       	movw	r30, r28
    115a:	ec 01       	movw	r28, r24
    115c:	f9 cf       	rjmp	.-14     	; 0x1150 <free+0xd6>
    115e:	ce 01       	movw	r24, r28
    1160:	02 96       	adiw	r24, 0x02	; 2
    1162:	28 81       	ld	r18, Y
    1164:	39 81       	ldd	r19, Y+1	; 0x01
    1166:	82 0f       	add	r24, r18
    1168:	93 1f       	adc	r25, r19
    116a:	20 91 48 03 	lds	r18, 0x0348
    116e:	30 91 49 03 	lds	r19, 0x0349
    1172:	28 17       	cp	r18, r24
    1174:	39 07       	cpc	r19, r25
    1176:	69 f4       	brne	.+26     	; 0x1192 <free+0x118>
    1178:	30 97       	sbiw	r30, 0x00	; 0
    117a:	29 f4       	brne	.+10     	; 0x1186 <free+0x10c>
    117c:	10 92 4b 03 	sts	0x034B, r1
    1180:	10 92 4a 03 	sts	0x034A, r1
    1184:	02 c0       	rjmp	.+4      	; 0x118a <free+0x110>
    1186:	13 82       	std	Z+3, r1	; 0x03
    1188:	12 82       	std	Z+2, r1	; 0x02
    118a:	d0 93 49 03 	sts	0x0349, r29
    118e:	c0 93 48 03 	sts	0x0348, r28
    1192:	df 91       	pop	r29
    1194:	cf 91       	pop	r28
    1196:	08 95       	ret

00001198 <strncpy>:
    1198:	fb 01       	movw	r30, r22
    119a:	dc 01       	movw	r26, r24
    119c:	41 50       	subi	r20, 0x01	; 1
    119e:	50 40       	sbci	r21, 0x00	; 0
    11a0:	48 f0       	brcs	.+18     	; 0x11b4 <strncpy+0x1c>
    11a2:	01 90       	ld	r0, Z+
    11a4:	0d 92       	st	X+, r0
    11a6:	00 20       	and	r0, r0
    11a8:	c9 f7       	brne	.-14     	; 0x119c <strncpy+0x4>
    11aa:	01 c0       	rjmp	.+2      	; 0x11ae <strncpy+0x16>
    11ac:	1d 92       	st	X+, r1
    11ae:	41 50       	subi	r20, 0x01	; 1
    11b0:	50 40       	sbci	r21, 0x00	; 0
    11b2:	e0 f7       	brcc	.-8      	; 0x11ac <strncpy+0x14>
    11b4:	08 95       	ret

000011b6 <fprintf>:
    11b6:	a0 e0       	ldi	r26, 0x00	; 0
    11b8:	b0 e0       	ldi	r27, 0x00	; 0
    11ba:	e0 ee       	ldi	r30, 0xE0	; 224
    11bc:	f8 e0       	ldi	r31, 0x08	; 8
    11be:	b5 c2       	rjmp	.+1386   	; 0x172a <__prologue_saves__+0x20>
    11c0:	ae 01       	movw	r20, r28
    11c2:	47 5f       	subi	r20, 0xF7	; 247
    11c4:	5f 4f       	sbci	r21, 0xFF	; 255
    11c6:	6f 81       	ldd	r22, Y+7	; 0x07
    11c8:	78 85       	ldd	r23, Y+8	; 0x08
    11ca:	8d 81       	ldd	r24, Y+5	; 0x05
    11cc:	9e 81       	ldd	r25, Y+6	; 0x06
    11ce:	66 d0       	rcall	.+204    	; 0x129c <vfprintf>
    11d0:	e2 e0       	ldi	r30, 0x02	; 2
    11d2:	c7 c2       	rjmp	.+1422   	; 0x1762 <__epilogue_restores__+0x20>

000011d4 <fputc>:
    11d4:	0f 93       	push	r16
    11d6:	1f 93       	push	r17
    11d8:	cf 93       	push	r28
    11da:	df 93       	push	r29
    11dc:	18 2f       	mov	r17, r24
    11de:	09 2f       	mov	r16, r25
    11e0:	eb 01       	movw	r28, r22
    11e2:	8b 81       	ldd	r24, Y+3	; 0x03
    11e4:	81 fd       	sbrc	r24, 1
    11e6:	03 c0       	rjmp	.+6      	; 0x11ee <fputc+0x1a>
    11e8:	8f ef       	ldi	r24, 0xFF	; 255
    11ea:	9f ef       	ldi	r25, 0xFF	; 255
    11ec:	20 c0       	rjmp	.+64     	; 0x122e <fputc+0x5a>
    11ee:	82 ff       	sbrs	r24, 2
    11f0:	10 c0       	rjmp	.+32     	; 0x1212 <fputc+0x3e>
    11f2:	4e 81       	ldd	r20, Y+6	; 0x06
    11f4:	5f 81       	ldd	r21, Y+7	; 0x07
    11f6:	2c 81       	ldd	r18, Y+4	; 0x04
    11f8:	3d 81       	ldd	r19, Y+5	; 0x05
    11fa:	42 17       	cp	r20, r18
    11fc:	53 07       	cpc	r21, r19
    11fe:	7c f4       	brge	.+30     	; 0x121e <fputc+0x4a>
    1200:	e8 81       	ld	r30, Y
    1202:	f9 81       	ldd	r31, Y+1	; 0x01
    1204:	9f 01       	movw	r18, r30
    1206:	2f 5f       	subi	r18, 0xFF	; 255
    1208:	3f 4f       	sbci	r19, 0xFF	; 255
    120a:	39 83       	std	Y+1, r19	; 0x01
    120c:	28 83       	st	Y, r18
    120e:	10 83       	st	Z, r17
    1210:	06 c0       	rjmp	.+12     	; 0x121e <fputc+0x4a>
    1212:	e8 85       	ldd	r30, Y+8	; 0x08
    1214:	f9 85       	ldd	r31, Y+9	; 0x09
    1216:	81 2f       	mov	r24, r17
    1218:	09 95       	icall
    121a:	89 2b       	or	r24, r25
    121c:	29 f7       	brne	.-54     	; 0x11e8 <fputc+0x14>
    121e:	2e 81       	ldd	r18, Y+6	; 0x06
    1220:	3f 81       	ldd	r19, Y+7	; 0x07
    1222:	2f 5f       	subi	r18, 0xFF	; 255
    1224:	3f 4f       	sbci	r19, 0xFF	; 255
    1226:	3f 83       	std	Y+7, r19	; 0x07
    1228:	2e 83       	std	Y+6, r18	; 0x06
    122a:	81 2f       	mov	r24, r17
    122c:	90 2f       	mov	r25, r16
    122e:	df 91       	pop	r29
    1230:	cf 91       	pop	r28
    1232:	1f 91       	pop	r17
    1234:	0f 91       	pop	r16
    1236:	08 95       	ret

00001238 <fwrite>:
    1238:	a0 e0       	ldi	r26, 0x00	; 0
    123a:	b0 e0       	ldi	r27, 0x00	; 0
    123c:	e1 e2       	ldi	r30, 0x21	; 33
    123e:	f9 e0       	ldi	r31, 0x09	; 9
    1240:	6a c2       	rjmp	.+1236   	; 0x1716 <__prologue_saves__+0xc>
    1242:	6b 01       	movw	r12, r22
    1244:	4a 01       	movw	r8, r20
    1246:	79 01       	movw	r14, r18
    1248:	d9 01       	movw	r26, r18
    124a:	13 96       	adiw	r26, 0x03	; 3
    124c:	2c 91       	ld	r18, X
    124e:	21 ff       	sbrs	r18, 1
    1250:	1d c0       	rjmp	.+58     	; 0x128c <fwrite+0x54>
    1252:	c0 e0       	ldi	r28, 0x00	; 0
    1254:	d0 e0       	ldi	r29, 0x00	; 0
    1256:	c8 15       	cp	r28, r8
    1258:	d9 05       	cpc	r29, r9
    125a:	d9 f0       	breq	.+54     	; 0x1292 <fwrite+0x5a>
    125c:	8c 01       	movw	r16, r24
    125e:	5c 01       	movw	r10, r24
    1260:	ac 0c       	add	r10, r12
    1262:	bd 1c       	adc	r11, r13
    1264:	c8 01       	movw	r24, r16
    1266:	0a 15       	cp	r16, r10
    1268:	1b 05       	cpc	r17, r11
    126a:	71 f0       	breq	.+28     	; 0x1288 <fwrite+0x50>
    126c:	0f 5f       	subi	r16, 0xFF	; 255
    126e:	1f 4f       	sbci	r17, 0xFF	; 255
    1270:	d7 01       	movw	r26, r14
    1272:	18 96       	adiw	r26, 0x08	; 8
    1274:	ed 91       	ld	r30, X+
    1276:	fc 91       	ld	r31, X
    1278:	19 97       	sbiw	r26, 0x09	; 9
    127a:	b7 01       	movw	r22, r14
    127c:	dc 01       	movw	r26, r24
    127e:	8c 91       	ld	r24, X
    1280:	09 95       	icall
    1282:	89 2b       	or	r24, r25
    1284:	79 f3       	breq	.-34     	; 0x1264 <fwrite+0x2c>
    1286:	05 c0       	rjmp	.+10     	; 0x1292 <fwrite+0x5a>
    1288:	21 96       	adiw	r28, 0x01	; 1
    128a:	e5 cf       	rjmp	.-54     	; 0x1256 <fwrite+0x1e>
    128c:	80 e0       	ldi	r24, 0x00	; 0
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	01 c0       	rjmp	.+2      	; 0x1294 <fwrite+0x5c>
    1292:	ce 01       	movw	r24, r28
    1294:	cd b7       	in	r28, 0x3d	; 61
    1296:	de b7       	in	r29, 0x3e	; 62
    1298:	ec e0       	ldi	r30, 0x0C	; 12
    129a:	59 c2       	rjmp	.+1202   	; 0x174e <__epilogue_restores__+0xc>

0000129c <vfprintf>:
    129c:	ac e0       	ldi	r26, 0x0C	; 12
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	e3 e5       	ldi	r30, 0x53	; 83
    12a2:	f9 e0       	ldi	r31, 0x09	; 9
    12a4:	32 c2       	rjmp	.+1124   	; 0x170a <__prologue_saves__>
    12a6:	7c 01       	movw	r14, r24
    12a8:	6b 01       	movw	r12, r22
    12aa:	8a 01       	movw	r16, r20
    12ac:	fc 01       	movw	r30, r24
    12ae:	17 82       	std	Z+7, r1	; 0x07
    12b0:	16 82       	std	Z+6, r1	; 0x06
    12b2:	83 81       	ldd	r24, Z+3	; 0x03
    12b4:	81 ff       	sbrs	r24, 1
    12b6:	b0 c1       	rjmp	.+864    	; 0x1618 <vfprintf+0x37c>
    12b8:	ce 01       	movw	r24, r28
    12ba:	01 96       	adiw	r24, 0x01	; 1
    12bc:	4c 01       	movw	r8, r24
    12be:	f7 01       	movw	r30, r14
    12c0:	93 81       	ldd	r25, Z+3	; 0x03
    12c2:	f6 01       	movw	r30, r12
    12c4:	93 fd       	sbrc	r25, 3
    12c6:	85 91       	lpm	r24, Z+
    12c8:	93 ff       	sbrs	r25, 3
    12ca:	81 91       	ld	r24, Z+
    12cc:	6f 01       	movw	r12, r30
    12ce:	88 23       	and	r24, r24
    12d0:	09 f4       	brne	.+2      	; 0x12d4 <vfprintf+0x38>
    12d2:	9e c1       	rjmp	.+828    	; 0x1610 <vfprintf+0x374>
    12d4:	85 32       	cpi	r24, 0x25	; 37
    12d6:	39 f4       	brne	.+14     	; 0x12e6 <vfprintf+0x4a>
    12d8:	93 fd       	sbrc	r25, 3
    12da:	85 91       	lpm	r24, Z+
    12dc:	93 ff       	sbrs	r25, 3
    12de:	81 91       	ld	r24, Z+
    12e0:	6f 01       	movw	r12, r30
    12e2:	85 32       	cpi	r24, 0x25	; 37
    12e4:	21 f4       	brne	.+8      	; 0x12ee <vfprintf+0x52>
    12e6:	b7 01       	movw	r22, r14
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	74 df       	rcall	.-280    	; 0x11d4 <fputc>
    12ec:	e8 cf       	rjmp	.-48     	; 0x12be <vfprintf+0x22>
    12ee:	51 2c       	mov	r5, r1
    12f0:	31 2c       	mov	r3, r1
    12f2:	20 e0       	ldi	r18, 0x00	; 0
    12f4:	20 32       	cpi	r18, 0x20	; 32
    12f6:	a0 f4       	brcc	.+40     	; 0x1320 <vfprintf+0x84>
    12f8:	8b 32       	cpi	r24, 0x2B	; 43
    12fa:	69 f0       	breq	.+26     	; 0x1316 <vfprintf+0x7a>
    12fc:	30 f4       	brcc	.+12     	; 0x130a <vfprintf+0x6e>
    12fe:	80 32       	cpi	r24, 0x20	; 32
    1300:	59 f0       	breq	.+22     	; 0x1318 <vfprintf+0x7c>
    1302:	83 32       	cpi	r24, 0x23	; 35
    1304:	69 f4       	brne	.+26     	; 0x1320 <vfprintf+0x84>
    1306:	20 61       	ori	r18, 0x10	; 16
    1308:	2c c0       	rjmp	.+88     	; 0x1362 <vfprintf+0xc6>
    130a:	8d 32       	cpi	r24, 0x2D	; 45
    130c:	39 f0       	breq	.+14     	; 0x131c <vfprintf+0x80>
    130e:	80 33       	cpi	r24, 0x30	; 48
    1310:	39 f4       	brne	.+14     	; 0x1320 <vfprintf+0x84>
    1312:	21 60       	ori	r18, 0x01	; 1
    1314:	26 c0       	rjmp	.+76     	; 0x1362 <vfprintf+0xc6>
    1316:	22 60       	ori	r18, 0x02	; 2
    1318:	24 60       	ori	r18, 0x04	; 4
    131a:	23 c0       	rjmp	.+70     	; 0x1362 <vfprintf+0xc6>
    131c:	28 60       	ori	r18, 0x08	; 8
    131e:	21 c0       	rjmp	.+66     	; 0x1362 <vfprintf+0xc6>
    1320:	27 fd       	sbrc	r18, 7
    1322:	27 c0       	rjmp	.+78     	; 0x1372 <vfprintf+0xd6>
    1324:	30 ed       	ldi	r19, 0xD0	; 208
    1326:	38 0f       	add	r19, r24
    1328:	3a 30       	cpi	r19, 0x0A	; 10
    132a:	78 f4       	brcc	.+30     	; 0x134a <vfprintf+0xae>
    132c:	26 ff       	sbrs	r18, 6
    132e:	06 c0       	rjmp	.+12     	; 0x133c <vfprintf+0xa0>
    1330:	fa e0       	ldi	r31, 0x0A	; 10
    1332:	5f 9e       	mul	r5, r31
    1334:	30 0d       	add	r19, r0
    1336:	11 24       	eor	r1, r1
    1338:	53 2e       	mov	r5, r19
    133a:	13 c0       	rjmp	.+38     	; 0x1362 <vfprintf+0xc6>
    133c:	8a e0       	ldi	r24, 0x0A	; 10
    133e:	38 9e       	mul	r3, r24
    1340:	30 0d       	add	r19, r0
    1342:	11 24       	eor	r1, r1
    1344:	33 2e       	mov	r3, r19
    1346:	20 62       	ori	r18, 0x20	; 32
    1348:	0c c0       	rjmp	.+24     	; 0x1362 <vfprintf+0xc6>
    134a:	8e 32       	cpi	r24, 0x2E	; 46
    134c:	21 f4       	brne	.+8      	; 0x1356 <vfprintf+0xba>
    134e:	26 fd       	sbrc	r18, 6
    1350:	5f c1       	rjmp	.+702    	; 0x1610 <vfprintf+0x374>
    1352:	20 64       	ori	r18, 0x40	; 64
    1354:	06 c0       	rjmp	.+12     	; 0x1362 <vfprintf+0xc6>
    1356:	8c 36       	cpi	r24, 0x6C	; 108
    1358:	11 f4       	brne	.+4      	; 0x135e <vfprintf+0xc2>
    135a:	20 68       	ori	r18, 0x80	; 128
    135c:	02 c0       	rjmp	.+4      	; 0x1362 <vfprintf+0xc6>
    135e:	88 36       	cpi	r24, 0x68	; 104
    1360:	41 f4       	brne	.+16     	; 0x1372 <vfprintf+0xd6>
    1362:	f6 01       	movw	r30, r12
    1364:	93 fd       	sbrc	r25, 3
    1366:	85 91       	lpm	r24, Z+
    1368:	93 ff       	sbrs	r25, 3
    136a:	81 91       	ld	r24, Z+
    136c:	6f 01       	movw	r12, r30
    136e:	81 11       	cpse	r24, r1
    1370:	c1 cf       	rjmp	.-126    	; 0x12f4 <vfprintf+0x58>
    1372:	98 2f       	mov	r25, r24
    1374:	9f 7d       	andi	r25, 0xDF	; 223
    1376:	95 54       	subi	r25, 0x45	; 69
    1378:	93 30       	cpi	r25, 0x03	; 3
    137a:	28 f4       	brcc	.+10     	; 0x1386 <vfprintf+0xea>
    137c:	0c 5f       	subi	r16, 0xFC	; 252
    137e:	1f 4f       	sbci	r17, 0xFF	; 255
    1380:	ff e3       	ldi	r31, 0x3F	; 63
    1382:	f9 83       	std	Y+1, r31	; 0x01
    1384:	0d c0       	rjmp	.+26     	; 0x13a0 <vfprintf+0x104>
    1386:	83 36       	cpi	r24, 0x63	; 99
    1388:	31 f0       	breq	.+12     	; 0x1396 <vfprintf+0xfa>
    138a:	83 37       	cpi	r24, 0x73	; 115
    138c:	71 f0       	breq	.+28     	; 0x13aa <vfprintf+0x10e>
    138e:	83 35       	cpi	r24, 0x53	; 83
    1390:	09 f0       	breq	.+2      	; 0x1394 <vfprintf+0xf8>
    1392:	57 c0       	rjmp	.+174    	; 0x1442 <vfprintf+0x1a6>
    1394:	21 c0       	rjmp	.+66     	; 0x13d8 <vfprintf+0x13c>
    1396:	f8 01       	movw	r30, r16
    1398:	80 81       	ld	r24, Z
    139a:	89 83       	std	Y+1, r24	; 0x01
    139c:	0e 5f       	subi	r16, 0xFE	; 254
    139e:	1f 4f       	sbci	r17, 0xFF	; 255
    13a0:	44 24       	eor	r4, r4
    13a2:	43 94       	inc	r4
    13a4:	51 2c       	mov	r5, r1
    13a6:	54 01       	movw	r10, r8
    13a8:	14 c0       	rjmp	.+40     	; 0x13d2 <vfprintf+0x136>
    13aa:	38 01       	movw	r6, r16
    13ac:	f2 e0       	ldi	r31, 0x02	; 2
    13ae:	6f 0e       	add	r6, r31
    13b0:	71 1c       	adc	r7, r1
    13b2:	f8 01       	movw	r30, r16
    13b4:	a0 80       	ld	r10, Z
    13b6:	b1 80       	ldd	r11, Z+1	; 0x01
    13b8:	26 ff       	sbrs	r18, 6
    13ba:	03 c0       	rjmp	.+6      	; 0x13c2 <vfprintf+0x126>
    13bc:	65 2d       	mov	r22, r5
    13be:	70 e0       	ldi	r23, 0x00	; 0
    13c0:	02 c0       	rjmp	.+4      	; 0x13c6 <vfprintf+0x12a>
    13c2:	6f ef       	ldi	r22, 0xFF	; 255
    13c4:	7f ef       	ldi	r23, 0xFF	; 255
    13c6:	c5 01       	movw	r24, r10
    13c8:	2c 87       	std	Y+12, r18	; 0x0c
    13ca:	36 d1       	rcall	.+620    	; 0x1638 <strnlen>
    13cc:	2c 01       	movw	r4, r24
    13ce:	83 01       	movw	r16, r6
    13d0:	2c 85       	ldd	r18, Y+12	; 0x0c
    13d2:	2f 77       	andi	r18, 0x7F	; 127
    13d4:	22 2e       	mov	r2, r18
    13d6:	16 c0       	rjmp	.+44     	; 0x1404 <vfprintf+0x168>
    13d8:	38 01       	movw	r6, r16
    13da:	f2 e0       	ldi	r31, 0x02	; 2
    13dc:	6f 0e       	add	r6, r31
    13de:	71 1c       	adc	r7, r1
    13e0:	f8 01       	movw	r30, r16
    13e2:	a0 80       	ld	r10, Z
    13e4:	b1 80       	ldd	r11, Z+1	; 0x01
    13e6:	26 ff       	sbrs	r18, 6
    13e8:	03 c0       	rjmp	.+6      	; 0x13f0 <vfprintf+0x154>
    13ea:	65 2d       	mov	r22, r5
    13ec:	70 e0       	ldi	r23, 0x00	; 0
    13ee:	02 c0       	rjmp	.+4      	; 0x13f4 <vfprintf+0x158>
    13f0:	6f ef       	ldi	r22, 0xFF	; 255
    13f2:	7f ef       	ldi	r23, 0xFF	; 255
    13f4:	c5 01       	movw	r24, r10
    13f6:	2c 87       	std	Y+12, r18	; 0x0c
    13f8:	14 d1       	rcall	.+552    	; 0x1622 <strnlen_P>
    13fa:	2c 01       	movw	r4, r24
    13fc:	2c 85       	ldd	r18, Y+12	; 0x0c
    13fe:	20 68       	ori	r18, 0x80	; 128
    1400:	22 2e       	mov	r2, r18
    1402:	83 01       	movw	r16, r6
    1404:	23 fc       	sbrc	r2, 3
    1406:	19 c0       	rjmp	.+50     	; 0x143a <vfprintf+0x19e>
    1408:	83 2d       	mov	r24, r3
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	48 16       	cp	r4, r24
    140e:	59 06       	cpc	r5, r25
    1410:	a0 f4       	brcc	.+40     	; 0x143a <vfprintf+0x19e>
    1412:	b7 01       	movw	r22, r14
    1414:	80 e2       	ldi	r24, 0x20	; 32
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	dd de       	rcall	.-582    	; 0x11d4 <fputc>
    141a:	3a 94       	dec	r3
    141c:	f5 cf       	rjmp	.-22     	; 0x1408 <vfprintf+0x16c>
    141e:	f5 01       	movw	r30, r10
    1420:	27 fc       	sbrc	r2, 7
    1422:	85 91       	lpm	r24, Z+
    1424:	27 fe       	sbrs	r2, 7
    1426:	81 91       	ld	r24, Z+
    1428:	5f 01       	movw	r10, r30
    142a:	b7 01       	movw	r22, r14
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	d2 de       	rcall	.-604    	; 0x11d4 <fputc>
    1430:	31 10       	cpse	r3, r1
    1432:	3a 94       	dec	r3
    1434:	f1 e0       	ldi	r31, 0x01	; 1
    1436:	4f 1a       	sub	r4, r31
    1438:	51 08       	sbc	r5, r1
    143a:	41 14       	cp	r4, r1
    143c:	51 04       	cpc	r5, r1
    143e:	79 f7       	brne	.-34     	; 0x141e <vfprintf+0x182>
    1440:	de c0       	rjmp	.+444    	; 0x15fe <vfprintf+0x362>
    1442:	84 36       	cpi	r24, 0x64	; 100
    1444:	11 f0       	breq	.+4      	; 0x144a <vfprintf+0x1ae>
    1446:	89 36       	cpi	r24, 0x69	; 105
    1448:	31 f5       	brne	.+76     	; 0x1496 <vfprintf+0x1fa>
    144a:	f8 01       	movw	r30, r16
    144c:	27 ff       	sbrs	r18, 7
    144e:	07 c0       	rjmp	.+14     	; 0x145e <vfprintf+0x1c2>
    1450:	60 81       	ld	r22, Z
    1452:	71 81       	ldd	r23, Z+1	; 0x01
    1454:	82 81       	ldd	r24, Z+2	; 0x02
    1456:	93 81       	ldd	r25, Z+3	; 0x03
    1458:	0c 5f       	subi	r16, 0xFC	; 252
    145a:	1f 4f       	sbci	r17, 0xFF	; 255
    145c:	08 c0       	rjmp	.+16     	; 0x146e <vfprintf+0x1d2>
    145e:	60 81       	ld	r22, Z
    1460:	71 81       	ldd	r23, Z+1	; 0x01
    1462:	88 27       	eor	r24, r24
    1464:	77 fd       	sbrc	r23, 7
    1466:	80 95       	com	r24
    1468:	98 2f       	mov	r25, r24
    146a:	0e 5f       	subi	r16, 0xFE	; 254
    146c:	1f 4f       	sbci	r17, 0xFF	; 255
    146e:	2f 76       	andi	r18, 0x6F	; 111
    1470:	b2 2e       	mov	r11, r18
    1472:	97 ff       	sbrs	r25, 7
    1474:	09 c0       	rjmp	.+18     	; 0x1488 <vfprintf+0x1ec>
    1476:	90 95       	com	r25
    1478:	80 95       	com	r24
    147a:	70 95       	com	r23
    147c:	61 95       	neg	r22
    147e:	7f 4f       	sbci	r23, 0xFF	; 255
    1480:	8f 4f       	sbci	r24, 0xFF	; 255
    1482:	9f 4f       	sbci	r25, 0xFF	; 255
    1484:	20 68       	ori	r18, 0x80	; 128
    1486:	b2 2e       	mov	r11, r18
    1488:	2a e0       	ldi	r18, 0x0A	; 10
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	a4 01       	movw	r20, r8
    148e:	df d0       	rcall	.+446    	; 0x164e <__ultoa_invert>
    1490:	a8 2e       	mov	r10, r24
    1492:	a8 18       	sub	r10, r8
    1494:	43 c0       	rjmp	.+134    	; 0x151c <vfprintf+0x280>
    1496:	85 37       	cpi	r24, 0x75	; 117
    1498:	29 f4       	brne	.+10     	; 0x14a4 <vfprintf+0x208>
    149a:	2f 7e       	andi	r18, 0xEF	; 239
    149c:	b2 2e       	mov	r11, r18
    149e:	2a e0       	ldi	r18, 0x0A	; 10
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	25 c0       	rjmp	.+74     	; 0x14ee <vfprintf+0x252>
    14a4:	f2 2f       	mov	r31, r18
    14a6:	f9 7f       	andi	r31, 0xF9	; 249
    14a8:	bf 2e       	mov	r11, r31
    14aa:	8f 36       	cpi	r24, 0x6F	; 111
    14ac:	c1 f0       	breq	.+48     	; 0x14de <vfprintf+0x242>
    14ae:	18 f4       	brcc	.+6      	; 0x14b6 <vfprintf+0x21a>
    14b0:	88 35       	cpi	r24, 0x58	; 88
    14b2:	79 f0       	breq	.+30     	; 0x14d2 <vfprintf+0x236>
    14b4:	ad c0       	rjmp	.+346    	; 0x1610 <vfprintf+0x374>
    14b6:	80 37       	cpi	r24, 0x70	; 112
    14b8:	19 f0       	breq	.+6      	; 0x14c0 <vfprintf+0x224>
    14ba:	88 37       	cpi	r24, 0x78	; 120
    14bc:	21 f0       	breq	.+8      	; 0x14c6 <vfprintf+0x22a>
    14be:	a8 c0       	rjmp	.+336    	; 0x1610 <vfprintf+0x374>
    14c0:	2f 2f       	mov	r18, r31
    14c2:	20 61       	ori	r18, 0x10	; 16
    14c4:	b2 2e       	mov	r11, r18
    14c6:	b4 fe       	sbrs	r11, 4
    14c8:	0d c0       	rjmp	.+26     	; 0x14e4 <vfprintf+0x248>
    14ca:	8b 2d       	mov	r24, r11
    14cc:	84 60       	ori	r24, 0x04	; 4
    14ce:	b8 2e       	mov	r11, r24
    14d0:	09 c0       	rjmp	.+18     	; 0x14e4 <vfprintf+0x248>
    14d2:	24 ff       	sbrs	r18, 4
    14d4:	0a c0       	rjmp	.+20     	; 0x14ea <vfprintf+0x24e>
    14d6:	9f 2f       	mov	r25, r31
    14d8:	96 60       	ori	r25, 0x06	; 6
    14da:	b9 2e       	mov	r11, r25
    14dc:	06 c0       	rjmp	.+12     	; 0x14ea <vfprintf+0x24e>
    14de:	28 e0       	ldi	r18, 0x08	; 8
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	05 c0       	rjmp	.+10     	; 0x14ee <vfprintf+0x252>
    14e4:	20 e1       	ldi	r18, 0x10	; 16
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	02 c0       	rjmp	.+4      	; 0x14ee <vfprintf+0x252>
    14ea:	20 e1       	ldi	r18, 0x10	; 16
    14ec:	32 e0       	ldi	r19, 0x02	; 2
    14ee:	f8 01       	movw	r30, r16
    14f0:	b7 fe       	sbrs	r11, 7
    14f2:	07 c0       	rjmp	.+14     	; 0x1502 <vfprintf+0x266>
    14f4:	60 81       	ld	r22, Z
    14f6:	71 81       	ldd	r23, Z+1	; 0x01
    14f8:	82 81       	ldd	r24, Z+2	; 0x02
    14fa:	93 81       	ldd	r25, Z+3	; 0x03
    14fc:	0c 5f       	subi	r16, 0xFC	; 252
    14fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1500:	06 c0       	rjmp	.+12     	; 0x150e <vfprintf+0x272>
    1502:	60 81       	ld	r22, Z
    1504:	71 81       	ldd	r23, Z+1	; 0x01
    1506:	80 e0       	ldi	r24, 0x00	; 0
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	0e 5f       	subi	r16, 0xFE	; 254
    150c:	1f 4f       	sbci	r17, 0xFF	; 255
    150e:	a4 01       	movw	r20, r8
    1510:	9e d0       	rcall	.+316    	; 0x164e <__ultoa_invert>
    1512:	a8 2e       	mov	r10, r24
    1514:	a8 18       	sub	r10, r8
    1516:	fb 2d       	mov	r31, r11
    1518:	ff 77       	andi	r31, 0x7F	; 127
    151a:	bf 2e       	mov	r11, r31
    151c:	b6 fe       	sbrs	r11, 6
    151e:	0b c0       	rjmp	.+22     	; 0x1536 <vfprintf+0x29a>
    1520:	2b 2d       	mov	r18, r11
    1522:	2e 7f       	andi	r18, 0xFE	; 254
    1524:	a5 14       	cp	r10, r5
    1526:	50 f4       	brcc	.+20     	; 0x153c <vfprintf+0x2a0>
    1528:	b4 fe       	sbrs	r11, 4
    152a:	0a c0       	rjmp	.+20     	; 0x1540 <vfprintf+0x2a4>
    152c:	b2 fc       	sbrc	r11, 2
    152e:	08 c0       	rjmp	.+16     	; 0x1540 <vfprintf+0x2a4>
    1530:	2b 2d       	mov	r18, r11
    1532:	2e 7e       	andi	r18, 0xEE	; 238
    1534:	05 c0       	rjmp	.+10     	; 0x1540 <vfprintf+0x2a4>
    1536:	7a 2c       	mov	r7, r10
    1538:	2b 2d       	mov	r18, r11
    153a:	03 c0       	rjmp	.+6      	; 0x1542 <vfprintf+0x2a6>
    153c:	7a 2c       	mov	r7, r10
    153e:	01 c0       	rjmp	.+2      	; 0x1542 <vfprintf+0x2a6>
    1540:	75 2c       	mov	r7, r5
    1542:	24 ff       	sbrs	r18, 4
    1544:	0d c0       	rjmp	.+26     	; 0x1560 <vfprintf+0x2c4>
    1546:	fe 01       	movw	r30, r28
    1548:	ea 0d       	add	r30, r10
    154a:	f1 1d       	adc	r31, r1
    154c:	80 81       	ld	r24, Z
    154e:	80 33       	cpi	r24, 0x30	; 48
    1550:	11 f4       	brne	.+4      	; 0x1556 <vfprintf+0x2ba>
    1552:	29 7e       	andi	r18, 0xE9	; 233
    1554:	09 c0       	rjmp	.+18     	; 0x1568 <vfprintf+0x2cc>
    1556:	22 ff       	sbrs	r18, 2
    1558:	06 c0       	rjmp	.+12     	; 0x1566 <vfprintf+0x2ca>
    155a:	73 94       	inc	r7
    155c:	73 94       	inc	r7
    155e:	04 c0       	rjmp	.+8      	; 0x1568 <vfprintf+0x2cc>
    1560:	82 2f       	mov	r24, r18
    1562:	86 78       	andi	r24, 0x86	; 134
    1564:	09 f0       	breq	.+2      	; 0x1568 <vfprintf+0x2cc>
    1566:	73 94       	inc	r7
    1568:	23 fd       	sbrc	r18, 3
    156a:	12 c0       	rjmp	.+36     	; 0x1590 <vfprintf+0x2f4>
    156c:	20 ff       	sbrs	r18, 0
    156e:	06 c0       	rjmp	.+12     	; 0x157c <vfprintf+0x2e0>
    1570:	5a 2c       	mov	r5, r10
    1572:	73 14       	cp	r7, r3
    1574:	18 f4       	brcc	.+6      	; 0x157c <vfprintf+0x2e0>
    1576:	53 0c       	add	r5, r3
    1578:	57 18       	sub	r5, r7
    157a:	73 2c       	mov	r7, r3
    157c:	73 14       	cp	r7, r3
    157e:	60 f4       	brcc	.+24     	; 0x1598 <vfprintf+0x2fc>
    1580:	b7 01       	movw	r22, r14
    1582:	80 e2       	ldi	r24, 0x20	; 32
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	2c 87       	std	Y+12, r18	; 0x0c
    1588:	25 de       	rcall	.-950    	; 0x11d4 <fputc>
    158a:	73 94       	inc	r7
    158c:	2c 85       	ldd	r18, Y+12	; 0x0c
    158e:	f6 cf       	rjmp	.-20     	; 0x157c <vfprintf+0x2e0>
    1590:	73 14       	cp	r7, r3
    1592:	10 f4       	brcc	.+4      	; 0x1598 <vfprintf+0x2fc>
    1594:	37 18       	sub	r3, r7
    1596:	01 c0       	rjmp	.+2      	; 0x159a <vfprintf+0x2fe>
    1598:	31 2c       	mov	r3, r1
    159a:	24 ff       	sbrs	r18, 4
    159c:	11 c0       	rjmp	.+34     	; 0x15c0 <vfprintf+0x324>
    159e:	b7 01       	movw	r22, r14
    15a0:	80 e3       	ldi	r24, 0x30	; 48
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	2c 87       	std	Y+12, r18	; 0x0c
    15a6:	16 de       	rcall	.-980    	; 0x11d4 <fputc>
    15a8:	2c 85       	ldd	r18, Y+12	; 0x0c
    15aa:	22 ff       	sbrs	r18, 2
    15ac:	16 c0       	rjmp	.+44     	; 0x15da <vfprintf+0x33e>
    15ae:	21 ff       	sbrs	r18, 1
    15b0:	03 c0       	rjmp	.+6      	; 0x15b8 <vfprintf+0x31c>
    15b2:	88 e5       	ldi	r24, 0x58	; 88
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	02 c0       	rjmp	.+4      	; 0x15bc <vfprintf+0x320>
    15b8:	88 e7       	ldi	r24, 0x78	; 120
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	b7 01       	movw	r22, r14
    15be:	0c c0       	rjmp	.+24     	; 0x15d8 <vfprintf+0x33c>
    15c0:	82 2f       	mov	r24, r18
    15c2:	86 78       	andi	r24, 0x86	; 134
    15c4:	51 f0       	breq	.+20     	; 0x15da <vfprintf+0x33e>
    15c6:	21 fd       	sbrc	r18, 1
    15c8:	02 c0       	rjmp	.+4      	; 0x15ce <vfprintf+0x332>
    15ca:	80 e2       	ldi	r24, 0x20	; 32
    15cc:	01 c0       	rjmp	.+2      	; 0x15d0 <vfprintf+0x334>
    15ce:	8b e2       	ldi	r24, 0x2B	; 43
    15d0:	27 fd       	sbrc	r18, 7
    15d2:	8d e2       	ldi	r24, 0x2D	; 45
    15d4:	b7 01       	movw	r22, r14
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	fd dd       	rcall	.-1030   	; 0x11d4 <fputc>
    15da:	a5 14       	cp	r10, r5
    15dc:	30 f4       	brcc	.+12     	; 0x15ea <vfprintf+0x34e>
    15de:	b7 01       	movw	r22, r14
    15e0:	80 e3       	ldi	r24, 0x30	; 48
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	f7 dd       	rcall	.-1042   	; 0x11d4 <fputc>
    15e6:	5a 94       	dec	r5
    15e8:	f8 cf       	rjmp	.-16     	; 0x15da <vfprintf+0x33e>
    15ea:	aa 94       	dec	r10
    15ec:	f4 01       	movw	r30, r8
    15ee:	ea 0d       	add	r30, r10
    15f0:	f1 1d       	adc	r31, r1
    15f2:	80 81       	ld	r24, Z
    15f4:	b7 01       	movw	r22, r14
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	ed dd       	rcall	.-1062   	; 0x11d4 <fputc>
    15fa:	a1 10       	cpse	r10, r1
    15fc:	f6 cf       	rjmp	.-20     	; 0x15ea <vfprintf+0x34e>
    15fe:	33 20       	and	r3, r3
    1600:	09 f4       	brne	.+2      	; 0x1604 <vfprintf+0x368>
    1602:	5d ce       	rjmp	.-838    	; 0x12be <vfprintf+0x22>
    1604:	b7 01       	movw	r22, r14
    1606:	80 e2       	ldi	r24, 0x20	; 32
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	e4 dd       	rcall	.-1080   	; 0x11d4 <fputc>
    160c:	3a 94       	dec	r3
    160e:	f7 cf       	rjmp	.-18     	; 0x15fe <vfprintf+0x362>
    1610:	f7 01       	movw	r30, r14
    1612:	86 81       	ldd	r24, Z+6	; 0x06
    1614:	97 81       	ldd	r25, Z+7	; 0x07
    1616:	02 c0       	rjmp	.+4      	; 0x161c <vfprintf+0x380>
    1618:	8f ef       	ldi	r24, 0xFF	; 255
    161a:	9f ef       	ldi	r25, 0xFF	; 255
    161c:	2c 96       	adiw	r28, 0x0c	; 12
    161e:	e2 e1       	ldi	r30, 0x12	; 18
    1620:	90 c0       	rjmp	.+288    	; 0x1742 <__epilogue_restores__>

00001622 <strnlen_P>:
    1622:	fc 01       	movw	r30, r24
    1624:	05 90       	lpm	r0, Z+
    1626:	61 50       	subi	r22, 0x01	; 1
    1628:	70 40       	sbci	r23, 0x00	; 0
    162a:	01 10       	cpse	r0, r1
    162c:	d8 f7       	brcc	.-10     	; 0x1624 <strnlen_P+0x2>
    162e:	80 95       	com	r24
    1630:	90 95       	com	r25
    1632:	8e 0f       	add	r24, r30
    1634:	9f 1f       	adc	r25, r31
    1636:	08 95       	ret

00001638 <strnlen>:
    1638:	fc 01       	movw	r30, r24
    163a:	61 50       	subi	r22, 0x01	; 1
    163c:	70 40       	sbci	r23, 0x00	; 0
    163e:	01 90       	ld	r0, Z+
    1640:	01 10       	cpse	r0, r1
    1642:	d8 f7       	brcc	.-10     	; 0x163a <strnlen+0x2>
    1644:	80 95       	com	r24
    1646:	90 95       	com	r25
    1648:	8e 0f       	add	r24, r30
    164a:	9f 1f       	adc	r25, r31
    164c:	08 95       	ret

0000164e <__ultoa_invert>:
    164e:	fa 01       	movw	r30, r20
    1650:	aa 27       	eor	r26, r26
    1652:	28 30       	cpi	r18, 0x08	; 8
    1654:	51 f1       	breq	.+84     	; 0x16aa <__ultoa_invert+0x5c>
    1656:	20 31       	cpi	r18, 0x10	; 16
    1658:	81 f1       	breq	.+96     	; 0x16ba <__ultoa_invert+0x6c>
    165a:	e8 94       	clt
    165c:	6f 93       	push	r22
    165e:	6e 7f       	andi	r22, 0xFE	; 254
    1660:	6e 5f       	subi	r22, 0xFE	; 254
    1662:	7f 4f       	sbci	r23, 0xFF	; 255
    1664:	8f 4f       	sbci	r24, 0xFF	; 255
    1666:	9f 4f       	sbci	r25, 0xFF	; 255
    1668:	af 4f       	sbci	r26, 0xFF	; 255
    166a:	b1 e0       	ldi	r27, 0x01	; 1
    166c:	3e d0       	rcall	.+124    	; 0x16ea <__ultoa_invert+0x9c>
    166e:	b4 e0       	ldi	r27, 0x04	; 4
    1670:	3c d0       	rcall	.+120    	; 0x16ea <__ultoa_invert+0x9c>
    1672:	67 0f       	add	r22, r23
    1674:	78 1f       	adc	r23, r24
    1676:	89 1f       	adc	r24, r25
    1678:	9a 1f       	adc	r25, r26
    167a:	a1 1d       	adc	r26, r1
    167c:	68 0f       	add	r22, r24
    167e:	79 1f       	adc	r23, r25
    1680:	8a 1f       	adc	r24, r26
    1682:	91 1d       	adc	r25, r1
    1684:	a1 1d       	adc	r26, r1
    1686:	6a 0f       	add	r22, r26
    1688:	71 1d       	adc	r23, r1
    168a:	81 1d       	adc	r24, r1
    168c:	91 1d       	adc	r25, r1
    168e:	a1 1d       	adc	r26, r1
    1690:	20 d0       	rcall	.+64     	; 0x16d2 <__ultoa_invert+0x84>
    1692:	09 f4       	brne	.+2      	; 0x1696 <__ultoa_invert+0x48>
    1694:	68 94       	set
    1696:	3f 91       	pop	r19
    1698:	2a e0       	ldi	r18, 0x0A	; 10
    169a:	26 9f       	mul	r18, r22
    169c:	11 24       	eor	r1, r1
    169e:	30 19       	sub	r19, r0
    16a0:	30 5d       	subi	r19, 0xD0	; 208
    16a2:	31 93       	st	Z+, r19
    16a4:	de f6       	brtc	.-74     	; 0x165c <__ultoa_invert+0xe>
    16a6:	cf 01       	movw	r24, r30
    16a8:	08 95       	ret
    16aa:	46 2f       	mov	r20, r22
    16ac:	47 70       	andi	r20, 0x07	; 7
    16ae:	40 5d       	subi	r20, 0xD0	; 208
    16b0:	41 93       	st	Z+, r20
    16b2:	b3 e0       	ldi	r27, 0x03	; 3
    16b4:	0f d0       	rcall	.+30     	; 0x16d4 <__ultoa_invert+0x86>
    16b6:	c9 f7       	brne	.-14     	; 0x16aa <__ultoa_invert+0x5c>
    16b8:	f6 cf       	rjmp	.-20     	; 0x16a6 <__ultoa_invert+0x58>
    16ba:	46 2f       	mov	r20, r22
    16bc:	4f 70       	andi	r20, 0x0F	; 15
    16be:	40 5d       	subi	r20, 0xD0	; 208
    16c0:	4a 33       	cpi	r20, 0x3A	; 58
    16c2:	18 f0       	brcs	.+6      	; 0x16ca <__ultoa_invert+0x7c>
    16c4:	49 5d       	subi	r20, 0xD9	; 217
    16c6:	31 fd       	sbrc	r19, 1
    16c8:	40 52       	subi	r20, 0x20	; 32
    16ca:	41 93       	st	Z+, r20
    16cc:	02 d0       	rcall	.+4      	; 0x16d2 <__ultoa_invert+0x84>
    16ce:	a9 f7       	brne	.-22     	; 0x16ba <__ultoa_invert+0x6c>
    16d0:	ea cf       	rjmp	.-44     	; 0x16a6 <__ultoa_invert+0x58>
    16d2:	b4 e0       	ldi	r27, 0x04	; 4
    16d4:	a6 95       	lsr	r26
    16d6:	97 95       	ror	r25
    16d8:	87 95       	ror	r24
    16da:	77 95       	ror	r23
    16dc:	67 95       	ror	r22
    16de:	ba 95       	dec	r27
    16e0:	c9 f7       	brne	.-14     	; 0x16d4 <__ultoa_invert+0x86>
    16e2:	00 97       	sbiw	r24, 0x00	; 0
    16e4:	61 05       	cpc	r22, r1
    16e6:	71 05       	cpc	r23, r1
    16e8:	08 95       	ret
    16ea:	9b 01       	movw	r18, r22
    16ec:	ac 01       	movw	r20, r24
    16ee:	0a 2e       	mov	r0, r26
    16f0:	06 94       	lsr	r0
    16f2:	57 95       	ror	r21
    16f4:	47 95       	ror	r20
    16f6:	37 95       	ror	r19
    16f8:	27 95       	ror	r18
    16fa:	ba 95       	dec	r27
    16fc:	c9 f7       	brne	.-14     	; 0x16f0 <__ultoa_invert+0xa2>
    16fe:	62 0f       	add	r22, r18
    1700:	73 1f       	adc	r23, r19
    1702:	84 1f       	adc	r24, r20
    1704:	95 1f       	adc	r25, r21
    1706:	a0 1d       	adc	r26, r0
    1708:	08 95       	ret

0000170a <__prologue_saves__>:
    170a:	2f 92       	push	r2
    170c:	3f 92       	push	r3
    170e:	4f 92       	push	r4
    1710:	5f 92       	push	r5
    1712:	6f 92       	push	r6
    1714:	7f 92       	push	r7
    1716:	8f 92       	push	r8
    1718:	9f 92       	push	r9
    171a:	af 92       	push	r10
    171c:	bf 92       	push	r11
    171e:	cf 92       	push	r12
    1720:	df 92       	push	r13
    1722:	ef 92       	push	r14
    1724:	ff 92       	push	r15
    1726:	0f 93       	push	r16
    1728:	1f 93       	push	r17
    172a:	cf 93       	push	r28
    172c:	df 93       	push	r29
    172e:	cd b7       	in	r28, 0x3d	; 61
    1730:	de b7       	in	r29, 0x3e	; 62
    1732:	ca 1b       	sub	r28, r26
    1734:	db 0b       	sbc	r29, r27
    1736:	0f b6       	in	r0, 0x3f	; 63
    1738:	f8 94       	cli
    173a:	de bf       	out	0x3e, r29	; 62
    173c:	0f be       	out	0x3f, r0	; 63
    173e:	cd bf       	out	0x3d, r28	; 61
    1740:	09 94       	ijmp

00001742 <__epilogue_restores__>:
    1742:	2a 88       	ldd	r2, Y+18	; 0x12
    1744:	39 88       	ldd	r3, Y+17	; 0x11
    1746:	48 88       	ldd	r4, Y+16	; 0x10
    1748:	5f 84       	ldd	r5, Y+15	; 0x0f
    174a:	6e 84       	ldd	r6, Y+14	; 0x0e
    174c:	7d 84       	ldd	r7, Y+13	; 0x0d
    174e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1750:	9b 84       	ldd	r9, Y+11	; 0x0b
    1752:	aa 84       	ldd	r10, Y+10	; 0x0a
    1754:	b9 84       	ldd	r11, Y+9	; 0x09
    1756:	c8 84       	ldd	r12, Y+8	; 0x08
    1758:	df 80       	ldd	r13, Y+7	; 0x07
    175a:	ee 80       	ldd	r14, Y+6	; 0x06
    175c:	fd 80       	ldd	r15, Y+5	; 0x05
    175e:	0c 81       	ldd	r16, Y+4	; 0x04
    1760:	1b 81       	ldd	r17, Y+3	; 0x03
    1762:	aa 81       	ldd	r26, Y+2	; 0x02
    1764:	b9 81       	ldd	r27, Y+1	; 0x01
    1766:	ce 0f       	add	r28, r30
    1768:	d1 1d       	adc	r29, r1
    176a:	0f b6       	in	r0, 0x3f	; 63
    176c:	f8 94       	cli
    176e:	de bf       	out	0x3e, r29	; 62
    1770:	0f be       	out	0x3f, r0	; 63
    1772:	cd bf       	out	0x3d, r28	; 61
    1774:	ed 01       	movw	r28, r26
    1776:	08 95       	ret

00001778 <_exit>:
    1778:	f8 94       	cli

0000177a <__stop_program>:
    177a:	ff cf       	rjmp	.-2      	; 0x177a <__stop_program>
