
Node1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000da  00800100  00001608  0000169c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001608  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000013a  008001da  008001da  00001776  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001776  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002f8  00000000  00000000  000017d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003595  00000000  00000000  00001aca  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000011df  00000000  00000000  0000505f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000193a  00000000  00000000  0000623e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000007b8  00000000  00000000  00007b78  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000085b  00000000  00000000  00008330  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000148e  00000000  00000000  00008b8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002a0  00000000  00000000  0000a019  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	f5 c0       	rjmp	.+490    	; 0x1ec <__ctors_end>
       2:	00 00       	nop
       4:	0f c1       	rjmp	.+542    	; 0x224 <__bad_interrupt>
       6:	00 00       	nop
       8:	19 c1       	rjmp	.+562    	; 0x23c <__vector_2>
       a:	00 00       	nop
       c:	0b c1       	rjmp	.+534    	; 0x224 <__bad_interrupt>
       e:	00 00       	nop
      10:	09 c1       	rjmp	.+530    	; 0x224 <__bad_interrupt>
      12:	00 00       	nop
      14:	07 c1       	rjmp	.+526    	; 0x224 <__bad_interrupt>
      16:	00 00       	nop
      18:	05 c1       	rjmp	.+522    	; 0x224 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	03 c1       	rjmp	.+518    	; 0x224 <__bad_interrupt>
      1e:	00 00       	nop
      20:	01 c1       	rjmp	.+514    	; 0x224 <__bad_interrupt>
      22:	00 00       	nop
      24:	ff c0       	rjmp	.+510    	; 0x224 <__bad_interrupt>
      26:	00 00       	nop
      28:	fd c0       	rjmp	.+506    	; 0x224 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	fb c0       	rjmp	.+502    	; 0x224 <__bad_interrupt>
      2e:	00 00       	nop
      30:	f9 c0       	rjmp	.+498    	; 0x224 <__bad_interrupt>
      32:	00 00       	nop
      34:	f7 c0       	rjmp	.+494    	; 0x224 <__bad_interrupt>
      36:	00 00       	nop
      38:	f5 c0       	rjmp	.+490    	; 0x224 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	f3 c0       	rjmp	.+486    	; 0x224 <__bad_interrupt>
      3e:	00 00       	nop
      40:	f1 c0       	rjmp	.+482    	; 0x224 <__bad_interrupt>
      42:	00 00       	nop
      44:	d8 c5       	rjmp	.+2992   	; 0xbf6 <__vector_17>
      46:	00 00       	nop
      48:	ed c0       	rjmp	.+474    	; 0x224 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3c c6       	rjmp	.+3192   	; 0xcc6 <__vector_19>
      4e:	00 00       	nop
      50:	e9 c0       	rjmp	.+466    	; 0x224 <__bad_interrupt>
      52:	00 00       	nop
      54:	e7 c0       	rjmp	.+462    	; 0x224 <__bad_interrupt>
      56:	00 00       	nop
      58:	e5 c0       	rjmp	.+458    	; 0x224 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	7b c6       	rjmp	.+3318   	; 0xd54 <__vector_23>
      5e:	00 00       	nop
      60:	e1 c0       	rjmp	.+450    	; 0x224 <__bad_interrupt>
      62:	00 00       	nop
      64:	df c0       	rjmp	.+446    	; 0x224 <__bad_interrupt>
      66:	00 00       	nop
      68:	dd c0       	rjmp	.+442    	; 0x224 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	db c0       	rjmp	.+438    	; 0x224 <__bad_interrupt>
	...

00000070 <__trampolines_end>:
      70:	00 00       	nop
      72:	00 00       	nop
      74:	00 5c       	subi	r16, 0xC0	; 192
      76:	00 00       	nop
      78:	0c 00       	.word	0x000c	; ????
      7a:	0c 00       	.word	0x000c	; ????
      7c:	7c 28       	or	r7, r12
      7e:	7c 28       	or	r7, r12
      80:	58 dc       	rcall	.-1872   	; 0xfffff932 <__eeprom_end+0xff7ef932>
      82:	68 00       	.word	0x0068	; ????
      84:	24 10       	cpse	r2, r4
      86:	48 00       	.word	0x0048	; ????
      88:	28 54       	subi	r18, 0x48	; 72
      8a:	28 40       	sbci	r18, 0x08	; 8
      8c:	00 0c       	add	r0, r0
      8e:	00 00       	nop
      90:	00 78       	andi	r16, 0x80	; 128
      92:	84 00       	.word	0x0084	; ????
      94:	84 78       	andi	r24, 0x84	; 132
      96:	00 00       	nop
      98:	54 38       	cpi	r21, 0x84	; 132
      9a:	54 00       	.word	0x0054	; ????
      9c:	10 7c       	andi	r17, 0xC0	; 192
      9e:	10 00       	.word	0x0010	; ????
      a0:	80 40       	sbci	r24, 0x00	; 0
      a2:	00 00       	nop
      a4:	10 10       	cpse	r1, r0
      a6:	10 00       	.word	0x0010	; ????
      a8:	00 40       	sbci	r16, 0x00	; 0
      aa:	00 00       	nop
      ac:	60 10       	cpse	r6, r0
      ae:	0c 00       	.word	0x000c	; ????
      b0:	38 54       	subi	r19, 0x48	; 72
      b2:	38 00       	.word	0x0038	; ????
      b4:	48 7c       	andi	r20, 0xC8	; 200
      b6:	40 00       	.word	0x0040	; ????
      b8:	48 64       	ori	r20, 0x48	; 72
      ba:	58 00       	.word	0x0058	; ????
      bc:	44 54       	subi	r20, 0x44	; 68
      be:	2c 00       	.word	0x002c	; ????
      c0:	1c 10       	cpse	r1, r12
      c2:	7c 00       	.word	0x007c	; ????
      c4:	5c 54       	subi	r21, 0x4C	; 76
      c6:	24 00       	.word	0x0024	; ????
      c8:	38 54       	subi	r19, 0x48	; 72
      ca:	24 00       	.word	0x0024	; ????
      cc:	64 14       	cp	r6, r4
      ce:	0c 00       	.word	0x000c	; ????
      d0:	68 54       	subi	r22, 0x48	; 72
      d2:	2c 00       	.word	0x002c	; ????
      d4:	48 54       	subi	r20, 0x48	; 72
      d6:	38 00       	.word	0x0038	; ????
      d8:	00 48       	sbci	r16, 0x80	; 128
      da:	00 00       	nop
      dc:	80 48       	sbci	r24, 0x80	; 128
      de:	00 00       	nop
      e0:	10 28       	or	r1, r0
      e2:	44 00       	.word	0x0044	; ????
      e4:	28 28       	or	r2, r8
      e6:	28 00       	.word	0x0028	; ????
      e8:	44 28       	or	r4, r4
      ea:	10 00       	.word	0x0010	; ????
      ec:	04 54       	subi	r16, 0x44	; 68
      ee:	08 00       	.word	0x0008	; ????
      f0:	38 44       	sbci	r19, 0x48	; 72
      f2:	5c 00       	.word	0x005c	; ????
      f4:	78 14       	cp	r7, r8
      f6:	78 00       	.word	0x0078	; ????
      f8:	7c 54       	subi	r23, 0x4C	; 76
      fa:	28 00       	.word	0x0028	; ????
      fc:	38 44       	sbci	r19, 0x48	; 72
      fe:	28 00       	.word	0x0028	; ????
     100:	7c 44       	sbci	r23, 0x4C	; 76
     102:	38 00       	.word	0x0038	; ????
     104:	7c 54       	subi	r23, 0x4C	; 76
     106:	44 00       	.word	0x0044	; ????
     108:	7c 14       	cp	r7, r12
     10a:	04 00       	.word	0x0004	; ????
     10c:	38 44       	sbci	r19, 0x48	; 72
     10e:	74 00       	.word	0x0074	; ????
     110:	7c 10       	cpse	r7, r12
     112:	7c 00       	.word	0x007c	; ????
     114:	44 7c       	andi	r20, 0xC4	; 196
     116:	44 00       	.word	0x0044	; ????
     118:	20 40       	sbci	r18, 0x00	; 0
     11a:	3c 00       	.word	0x003c	; ????
     11c:	7c 10       	cpse	r7, r12
     11e:	6c 00       	.word	0x006c	; ????
     120:	7c 40       	sbci	r23, 0x0C	; 12
     122:	40 00       	.word	0x0040	; ????
     124:	7c 18       	sub	r7, r12
     126:	7c 00       	.word	0x007c	; ????
     128:	78 10       	cpse	r7, r8
     12a:	3c 00       	.word	0x003c	; ????
     12c:	38 44       	sbci	r19, 0x48	; 72
     12e:	38 00       	.word	0x0038	; ????
     130:	7c 14       	cp	r7, r12
     132:	08 00       	.word	0x0008	; ????
     134:	38 44       	sbci	r19, 0x48	; 72
     136:	b8 00       	.word	0x00b8	; ????
     138:	7c 14       	cp	r7, r12
     13a:	68 00       	.word	0x0068	; ????
     13c:	48 54       	subi	r20, 0x48	; 72
     13e:	24 00       	.word	0x0024	; ????
     140:	04 7c       	andi	r16, 0xC4	; 196
     142:	04 00       	.word	0x0004	; ????
     144:	7c 40       	sbci	r23, 0x0C	; 12
     146:	7c 00       	.word	0x007c	; ????
     148:	3c 60       	ori	r19, 0x0C	; 12
     14a:	3c 00       	.word	0x003c	; ????
     14c:	7c 30       	cpi	r23, 0x0C	; 12
     14e:	7c 00       	.word	0x007c	; ????
     150:	6c 10       	cpse	r6, r12
     152:	6c 00       	.word	0x006c	; ????
     154:	0c 70       	andi	r16, 0x0C	; 12
     156:	0c 00       	.word	0x000c	; ????
     158:	64 54       	subi	r22, 0x44	; 68
     15a:	4c 00       	.word	0x004c	; ????
     15c:	00 7c       	andi	r16, 0xC0	; 192
     15e:	44 00       	.word	0x0044	; ????
     160:	0c 10       	cpse	r0, r12
     162:	60 00       	.word	0x0060	; ????
     164:	44 7c       	andi	r20, 0xC4	; 196
     166:	00 00       	nop
     168:	08 04       	cpc	r0, r8
     16a:	08 00       	.word	0x0008	; ????
     16c:	80 80       	ld	r8, Z
     16e:	80 00       	.word	0x0080	; ????
     170:	00 04       	cpc	r0, r0
     172:	08 00       	.word	0x0008	; ????
     174:	30 48       	sbci	r19, 0x80	; 128
     176:	78 00       	.word	0x0078	; ????
     178:	7c 48       	sbci	r23, 0x8C	; 140
     17a:	30 00       	.word	0x0030	; ????
     17c:	30 48       	sbci	r19, 0x80	; 128
     17e:	48 00       	.word	0x0048	; ????
     180:	30 48       	sbci	r19, 0x80	; 128
     182:	7c 00       	.word	0x007c	; ????
     184:	30 68       	ori	r19, 0x80	; 128
     186:	50 00       	.word	0x0050	; ????
     188:	10 78       	andi	r17, 0x80	; 128
     18a:	14 00       	.word	0x0014	; ????
     18c:	90 a8       	ldd	r9, Z+48	; 0x30
     18e:	78 00       	.word	0x0078	; ????
     190:	7c 08       	sbc	r7, r12
     192:	70 00       	.word	0x0070	; ????
     194:	50 74       	andi	r21, 0x40	; 64
     196:	40 00       	.word	0x0040	; ????
     198:	80 80       	ld	r8, Z
     19a:	74 00       	.word	0x0074	; ????
     19c:	7c 10       	cpse	r7, r12
     19e:	68 00       	.word	0x0068	; ????
     1a0:	44 7c       	andi	r20, 0xC4	; 196
     1a2:	40 00       	.word	0x0040	; ????
     1a4:	78 10       	cpse	r7, r8
     1a6:	78 00       	.word	0x0078	; ????
     1a8:	78 08       	sbc	r7, r8
     1aa:	70 00       	.word	0x0070	; ????
     1ac:	30 48       	sbci	r19, 0x80	; 128
     1ae:	30 00       	.word	0x0030	; ????
     1b0:	f8 28       	or	r15, r8
     1b2:	10 00       	.word	0x0010	; ????
     1b4:	30 48       	sbci	r19, 0x80	; 128
     1b6:	f8 00       	.word	0x00f8	; ????
     1b8:	78 10       	cpse	r7, r8
     1ba:	08 00       	.word	0x0008	; ????
     1bc:	50 58       	subi	r21, 0x80	; 128
     1be:	28 00       	.word	0x0028	; ????
     1c0:	08 3c       	cpi	r16, 0xC8	; 200
     1c2:	48 00       	.word	0x0048	; ????
     1c4:	38 40       	sbci	r19, 0x08	; 8
     1c6:	78 00       	.word	0x0078	; ????
     1c8:	38 40       	sbci	r19, 0x08	; 8
     1ca:	38 00       	.word	0x0038	; ????
     1cc:	78 20       	and	r7, r8
     1ce:	78 00       	.word	0x0078	; ????
     1d0:	48 30       	cpi	r20, 0x08	; 8
     1d2:	48 00       	.word	0x0048	; ????
     1d4:	98 a0       	ldd	r9, Y+32	; 0x20
     1d6:	78 00       	.word	0x0078	; ????
     1d8:	48 68       	ori	r20, 0x88	; 136
     1da:	58 00       	.word	0x0058	; ????
     1dc:	10 78       	andi	r17, 0x80	; 128
     1de:	84 00       	.word	0x0084	; ????
     1e0:	00 7c       	andi	r16, 0xC0	; 192
     1e2:	00 00       	nop
     1e4:	84 78       	andi	r24, 0x84	; 132
     1e6:	10 00       	.word	0x0010	; ????
     1e8:	08 04       	cpc	r0, r8
     1ea:	08 04       	cpc	r0, r8

000001ec <__ctors_end>:
     1ec:	11 24       	eor	r1, r1
     1ee:	1f be       	out	0x3f, r1	; 63
     1f0:	cf ef       	ldi	r28, 0xFF	; 255
     1f2:	d4 e0       	ldi	r29, 0x04	; 4
     1f4:	de bf       	out	0x3e, r29	; 62
     1f6:	cd bf       	out	0x3d, r28	; 61

000001f8 <__do_copy_data>:
     1f8:	11 e0       	ldi	r17, 0x01	; 1
     1fa:	a0 e0       	ldi	r26, 0x00	; 0
     1fc:	b1 e0       	ldi	r27, 0x01	; 1
     1fe:	e8 e0       	ldi	r30, 0x08	; 8
     200:	f6 e1       	ldi	r31, 0x16	; 22
     202:	02 c0       	rjmp	.+4      	; 0x208 <__do_copy_data+0x10>
     204:	05 90       	lpm	r0, Z+
     206:	0d 92       	st	X+, r0
     208:	aa 3d       	cpi	r26, 0xDA	; 218
     20a:	b1 07       	cpc	r27, r17
     20c:	d9 f7       	brne	.-10     	; 0x204 <__do_copy_data+0xc>

0000020e <__do_clear_bss>:
     20e:	23 e0       	ldi	r18, 0x03	; 3
     210:	aa ed       	ldi	r26, 0xDA	; 218
     212:	b1 e0       	ldi	r27, 0x01	; 1
     214:	01 c0       	rjmp	.+2      	; 0x218 <.do_clear_bss_start>

00000216 <.do_clear_bss_loop>:
     216:	1d 92       	st	X+, r1

00000218 <.do_clear_bss_start>:
     218:	a4 31       	cpi	r26, 0x14	; 20
     21a:	b2 07       	cpc	r27, r18
     21c:	e1 f7       	brne	.-8      	; 0x216 <.do_clear_bss_loop>
     21e:	44 d1       	rcall	.+648    	; 0x4a8 <main>
     220:	0c 94 02 0b 	jmp	0x1604	; 0x1604 <_exit>

00000224 <__bad_interrupt>:
     224:	ed ce       	rjmp	.-550    	; 0x0 <__vectors>

00000226 <adc_init>:
/*!
 * Initialize atmega162 to interface with the interrupt signal
 * of the ADC through Port D pin 2
 */
void adc_init(void){
	DDRD  &= ~(1 << DDD2);
     226:	8a 98       	cbi	0x11, 2	; 17
	PORTD |= (1 << PD2);
     228:	92 9a       	sbi	0x12, 2	; 18
     22a:	08 95       	ret

0000022c <adc_read_channel>:
 * @param[in] ch analog channel to perform conversion on
 * @return digital read of analog signal
 */
uint8_t adc_read_channel(uint8_t ch)
{	
	*adc_adr = (ch | 0b0100);
     22c:	84 60       	ori	r24, 0x04	; 4
     22e:	80 93 00 11 	sts	0x1100, r24
	
	while ((PIND & (1<<PIND2))); // wait until pin is high, adc read complete when pin is high
     232:	82 99       	sbic	0x10, 2	; 16
     234:	fe cf       	rjmp	.-4      	; 0x232 <adc_read_channel+0x6>
	
	return *adc_adr;
     236:	80 91 00 11 	lds	r24, 0x1100
}
     23a:	08 95       	ret

0000023c <__vector_2>:
 * the interrupt. \n
 * If there is no room in the buffer, then the interrupt is cleared and message
 * is ignored. 
   \todo Implement better overflow handling? Maybe oldest values should be discardeded. Can be as easy as doing head++, tail++
 */
ISR(INT1_vect){
     23c:	1f 92       	push	r1
     23e:	0f 92       	push	r0
     240:	0f b6       	in	r0, 0x3f	; 63
     242:	0f 92       	push	r0
     244:	11 24       	eor	r1, r1
     246:	ff 92       	push	r15
     248:	0f 93       	push	r16
     24a:	1f 93       	push	r17
     24c:	2f 93       	push	r18
     24e:	3f 93       	push	r19
     250:	4f 93       	push	r20
     252:	5f 93       	push	r21
     254:	6f 93       	push	r22
     256:	7f 93       	push	r23
     258:	8f 93       	push	r24
     25a:	9f 93       	push	r25
     25c:	af 93       	push	r26
     25e:	bf 93       	push	r27
     260:	ef 93       	push	r30
     262:	ff 93       	push	r31
     264:	cf 93       	push	r28
     266:	df 93       	push	r29
     268:	cd b7       	in	r28, 0x3d	; 61
     26a:	de b7       	in	r29, 0x3e	; 62
     26c:	2e 97       	sbiw	r28, 0x0e	; 14
     26e:	de bf       	out	0x3e, r29	; 62
     270:	cd bf       	out	0x3d, r28	; 61
	cli();	
     272:	f8 94       	cli
	///\todo implement overflow such that new data replaces old?
	// pick correct buffer, RXB1 has highest priority now
	volatile uint8_t n			  = 0;
     274:	19 82       	std	Y+1, r1	; 0x01
	volatile uint8_t MCP_RXBn	  = MCP_RXB0;
     276:	80 e6       	ldi	r24, 0x60	; 96
     278:	8a 83       	std	Y+2, r24	; 0x02
	volatile uint8_t MCP_READ_RXn = MCP_READ_RX0;
     27a:	80 e9       	ldi	r24, 0x90	; 144
     27c:	8b 83       	std	Y+3, r24	; 0x03
	volatile uint8_t MCP_RXnIF    = MCP_RX0IF;
     27e:	81 e0       	ldi	r24, 0x01	; 1
     280:	8c 83       	std	Y+4, r24	; 0x04
	if (mcp_readstatus() & 0x02)
     282:	7d d1       	rcall	.+762    	; 0x57e <mcp_readstatus>
     284:	81 ff       	sbrs	r24, 1
     286:	08 c0       	rjmp	.+16     	; 0x298 <__vector_2+0x5c>
	{	
		n = 1;
     288:	81 e0       	ldi	r24, 0x01	; 1
     28a:	89 83       	std	Y+1, r24	; 0x01
		MCP_RXBn	 = MCP_RXB1;
     28c:	80 e7       	ldi	r24, 0x70	; 112
     28e:	8a 83       	std	Y+2, r24	; 0x02
		MCP_READ_RXn = MCP_READ_RX1;
     290:	84 e9       	ldi	r24, 0x94	; 148
     292:	8b 83       	std	Y+3, r24	; 0x03
		MCP_RXnIF     = MCP_RX1IF;
     294:	82 e0       	ldi	r24, 0x02	; 2
     296:	8c 83       	std	Y+4, r24	; 0x04
			
	}
	
	// if there is room in buffer first
	if ((rx_head[n]+1)%RX_BUFFER_MAX != rx_tail[n]){
     298:	e9 81       	ldd	r30, Y+1	; 0x01
     29a:	f0 e0       	ldi	r31, 0x00	; 0
     29c:	e4 52       	subi	r30, 0x24	; 36
     29e:	fe 4f       	sbci	r31, 0xFE	; 254
     2a0:	20 81       	ld	r18, Z
     2a2:	e9 81       	ldd	r30, Y+1	; 0x01
     2a4:	f0 e0       	ldi	r31, 0x00	; 0
     2a6:	e6 52       	subi	r30, 0x26	; 38
     2a8:	fe 4f       	sbci	r31, 0xFE	; 254
     2aa:	80 81       	ld	r24, Z
     2ac:	30 e0       	ldi	r19, 0x00	; 0
     2ae:	2f 5f       	subi	r18, 0xFF	; 255
     2b0:	3f 4f       	sbci	r19, 0xFF	; 255
     2b2:	27 70       	andi	r18, 0x07	; 7
     2b4:	30 78       	andi	r19, 0x80	; 128
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	28 17       	cp	r18, r24
     2ba:	39 07       	cpc	r19, r25
     2bc:	09 f4       	brne	.+2      	; 0x2c0 <__vector_2+0x84>
     2be:	59 c0       	rjmp	.+178    	; 0x372 <__vector_2+0x136>
    	volatile can_msg_t msg = {};
     2c0:	fe 01       	movw	r30, r28
     2c2:	35 96       	adiw	r30, 0x05	; 5
     2c4:	8a e0       	ldi	r24, 0x0A	; 10
     2c6:	df 01       	movw	r26, r30
     2c8:	1d 92       	st	X+, r1
     2ca:	8a 95       	dec	r24
     2cc:	e9 f7       	brne	.-6      	; 0x2c8 <__vector_2+0x8c>
    	
    	msg.length = mcp_read(MCP_RXBn | MCP_RXBnDLC) & MCP_DLC_MASK;
     2ce:	8a 81       	ldd	r24, Y+2	; 0x02
     2d0:	85 66       	ori	r24, 0x65	; 101
     2d2:	38 d1       	rcall	.+624    	; 0x544 <mcp_read>
     2d4:	8f 70       	andi	r24, 0x0F	; 15
     2d6:	8e 83       	std	Y+6, r24	; 0x06
    	
    	spi_ss_low();
     2d8:	b1 d4       	rcall	.+2402   	; 0xc3c <spi_ss_low>
    	spi_transmit(MCP_READ_RXn | 0x00); // sid
     2da:	8b 81       	ldd	r24, Y+3	; 0x03
     2dc:	ba d4       	rcall	.+2420   	; 0xc52 <spi_transmit>
    	msg.sid = spi_transmit(0);
     2de:	80 e0       	ldi	r24, 0x00	; 0
     2e0:	b8 d4       	rcall	.+2416   	; 0xc52 <spi_transmit>
     2e2:	8d 83       	std	Y+5, r24	; 0x05
    	spi_ss_high();
     2e4:	ad d4       	rcall	.+2394   	; 0xc40 <spi_ss_high>
    	
    	spi_ss_low();
     2e6:	aa d4       	rcall	.+2388   	; 0xc3c <spi_ss_low>
    	spi_transmit(MCP_READ_RXn | 0x02);
     2e8:	8b 81       	ldd	r24, Y+3	; 0x03
     2ea:	82 60       	ori	r24, 0x02	; 2
     2ec:	b2 d4       	rcall	.+2404   	; 0xc52 <spi_transmit>
    	
    	for (uint8_t i = 0; i < msg.length; ++i)
     2ee:	8e 81       	ldd	r24, Y+6	; 0x06
     2f0:	88 23       	and	r24, r24
     2f2:	81 f0       	breq	.+32     	; 0x314 <__vector_2+0xd8>
     2f4:	f1 2c       	mov	r15, r1
    	{
    		msg.data[i] = spi_transmit(0);
     2f6:	0f 2d       	mov	r16, r15
     2f8:	10 e0       	ldi	r17, 0x00	; 0
     2fa:	80 e0       	ldi	r24, 0x00	; 0
     2fc:	aa d4       	rcall	.+2388   	; 0xc52 <spi_transmit>
     2fe:	e7 e0       	ldi	r30, 0x07	; 7
     300:	f0 e0       	ldi	r31, 0x00	; 0
     302:	ec 0f       	add	r30, r28
     304:	fd 1f       	adc	r31, r29
     306:	e0 0f       	add	r30, r16
     308:	f1 1f       	adc	r31, r17
     30a:	80 83       	st	Z, r24
    	spi_ss_high();
    	
    	spi_ss_low();
    	spi_transmit(MCP_READ_RXn | 0x02);
    	
    	for (uint8_t i = 0; i < msg.length; ++i)
     30c:	f3 94       	inc	r15
     30e:	8e 81       	ldd	r24, Y+6	; 0x06
     310:	f8 16       	cp	r15, r24
     312:	88 f3       	brcs	.-30     	; 0x2f6 <__vector_2+0xba>
    	{
    		msg.data[i] = spi_transmit(0);
    	}
    	spi_ss_high();
     314:	95 d4       	rcall	.+2346   	; 0xc40 <spi_ss_high>
        
    	rx_buffer[n][rx_head[n]] = msg;
     316:	29 81       	ldd	r18, Y+1	; 0x01
     318:	e9 81       	ldd	r30, Y+1	; 0x01
     31a:	f0 e0       	ldi	r31, 0x00	; 0
     31c:	e4 52       	subi	r30, 0x24	; 36
     31e:	fe 4f       	sbci	r31, 0xFE	; 254
     320:	80 81       	ld	r24, Z
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	dc 01       	movw	r26, r24
     326:	aa 0f       	add	r26, r26
     328:	bb 1f       	adc	r27, r27
     32a:	88 0f       	add	r24, r24
     32c:	99 1f       	adc	r25, r25
     32e:	88 0f       	add	r24, r24
     330:	99 1f       	adc	r25, r25
     332:	88 0f       	add	r24, r24
     334:	99 1f       	adc	r25, r25
     336:	a8 0f       	add	r26, r24
     338:	b9 1f       	adc	r27, r25
     33a:	80 e5       	ldi	r24, 0x50	; 80
     33c:	28 9f       	mul	r18, r24
     33e:	a0 0d       	add	r26, r0
     340:	b1 1d       	adc	r27, r1
     342:	11 24       	eor	r1, r1
     344:	a2 52       	subi	r26, 0x22	; 34
     346:	be 4f       	sbci	r27, 0xFE	; 254
     348:	8a e0       	ldi	r24, 0x0A	; 10
     34a:	fe 01       	movw	r30, r28
     34c:	35 96       	adiw	r30, 0x05	; 5
     34e:	01 90       	ld	r0, Z+
     350:	0d 92       	st	X+, r0
     352:	8a 95       	dec	r24
     354:	e1 f7       	brne	.-8      	; 0x34e <__vector_2+0x112>
    	rx_head[n] = (rx_head[n]+1) % RX_BUFFER_MAX;
     356:	e9 81       	ldd	r30, Y+1	; 0x01
     358:	f0 e0       	ldi	r31, 0x00	; 0
     35a:	a9 81       	ldd	r26, Y+1	; 0x01
     35c:	b0 e0       	ldi	r27, 0x00	; 0
     35e:	a4 52       	subi	r26, 0x24	; 36
     360:	be 4f       	sbci	r27, 0xFE	; 254
     362:	8c 91       	ld	r24, X
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	01 96       	adiw	r24, 0x01	; 1
     368:	87 70       	andi	r24, 0x07	; 7
     36a:	90 78       	andi	r25, 0x80	; 128
     36c:	e4 52       	subi	r30, 0x24	; 36
     36e:	fe 4f       	sbci	r31, 0xFE	; 254
     370:	80 83       	st	Z, r24
	}

    mcp_bitmodify(MCP_CANINTF, MCP_RXnIF, 0);
     372:	6c 81       	ldd	r22, Y+4	; 0x04
     374:	40 e0       	ldi	r20, 0x00	; 0
     376:	8c e2       	ldi	r24, 0x2C	; 44
     378:	0d d1       	rcall	.+538    	; 0x594 <mcp_bitmodify>
	sei();
     37a:	78 94       	sei
}
     37c:	2e 96       	adiw	r28, 0x0e	; 14
     37e:	0f b6       	in	r0, 0x3f	; 63
     380:	f8 94       	cli
     382:	de bf       	out	0x3e, r29	; 62
     384:	0f be       	out	0x3f, r0	; 63
     386:	cd bf       	out	0x3d, r28	; 61
     388:	df 91       	pop	r29
     38a:	cf 91       	pop	r28
     38c:	ff 91       	pop	r31
     38e:	ef 91       	pop	r30
     390:	bf 91       	pop	r27
     392:	af 91       	pop	r26
     394:	9f 91       	pop	r25
     396:	8f 91       	pop	r24
     398:	7f 91       	pop	r23
     39a:	6f 91       	pop	r22
     39c:	5f 91       	pop	r21
     39e:	4f 91       	pop	r20
     3a0:	3f 91       	pop	r19
     3a2:	2f 91       	pop	r18
     3a4:	1f 91       	pop	r17
     3a6:	0f 91       	pop	r16
     3a8:	ff 90       	pop	r15
     3aa:	0f 90       	pop	r0
     3ac:	0f be       	out	0x3f, r0	; 63
     3ae:	0f 90       	pop	r0
     3b0:	1f 90       	pop	r1
     3b2:	18 95       	reti

000003b4 <can_init>:
/*!
 * Initialize can controller and mcp. 
 */
void can_init()
{
	mcp_init();
     3b4:	03 d1       	rcall	.+518    	; 0x5bc <mcp_init>
	
	// enable interupt
	mcp_bitmodify(MCP_CANINTE, MCP_RX_INT, MCP_RX_INT);
     3b6:	43 e0       	ldi	r20, 0x03	; 3
     3b8:	63 e0       	ldi	r22, 0x03	; 3
     3ba:	8b e2       	ldi	r24, 0x2B	; 43
     3bc:	eb d0       	rcall	.+470    	; 0x594 <mcp_bitmodify>
	GICR |= (1 << INT1); 
     3be:	8b b7       	in	r24, 0x3b	; 59
     3c0:	80 68       	ori	r24, 0x80	; 128
     3c2:	8b bf       	out	0x3b, r24	; 59
     3c4:	08 95       	ret

000003c6 <game_init_menu>:
	game_state = IN_MENU;
}

void game_init_menu(){
	
	menu_move_cursor(0);
     3c6:	80 e0       	ldi	r24, 0x00	; 0
     3c8:	29 c2       	rjmp	.+1106   	; 0x81c <menu_move_cursor>
     3ca:	08 95       	ret

000003cc <game_init>:

static game_state_t game_state = INVALID;


void game_init(){
	game_init_menu();
     3cc:	fc df       	rcall	.-8      	; 0x3c6 <game_init_menu>
	
	game_state = IN_MENU;
     3ce:	81 e0       	ldi	r24, 0x01	; 1
     3d0:	80 93 7e 02 	sts	0x027E, r24
     3d4:	08 95       	ret

000003d6 <game_start>:
	menu_move_cursor(0);
	
}

void game_start(){
	fprintf(&uart_out, "game starting!");
     3d6:	28 e2       	ldi	r18, 0x28	; 40
     3d8:	31 e0       	ldi	r19, 0x01	; 1
     3da:	4e e0       	ldi	r20, 0x0E	; 14
     3dc:	50 e0       	ldi	r21, 0x00	; 0
     3de:	61 e0       	ldi	r22, 0x01	; 1
     3e0:	70 e0       	ldi	r23, 0x00	; 0
     3e2:	86 e3       	ldi	r24, 0x36	; 54
     3e4:	91 e0       	ldi	r25, 0x01	; 1
     3e6:	6e c6       	rjmp	.+3292   	; 0x10c4 <fwrite>
     3e8:	08 95       	ret

000003ea <game_tick_menu>:
		default:
			break;
	}
}

void game_tick_menu(){
     3ea:	cf 93       	push	r28
     3ec:	df 93       	push	r29
	static BOOL click_released = TRUE;
	static BOOL joy_released = TRUE;
	
	menu_print_current();
     3ee:	a4 d1       	rcall	.+840    	; 0x738 <menu_print_current>
	
	joystick_t joy = joy_get_state();
     3f0:	4a d0       	rcall	.+148    	; 0x486 <joy_get_state>
     3f2:	c7 2f       	mov	r28, r23
     3f4:	d7 2f       	mov	r29, r23
	
	
	if (joy.click && !!click_released){
     3f6:	88 23       	and	r24, r24
     3f8:	41 f0       	breq	.+16     	; 0x40a <game_tick_menu+0x20>
     3fa:	80 91 07 01 	lds	r24, 0x0107
     3fe:	88 23       	and	r24, r24
     400:	21 f0       	breq	.+8      	; 0x40a <game_tick_menu+0x20>
		click_released = FALSE;
     402:	10 92 07 01 	sts	0x0107, r1
		menu_enter_current();
     406:	27 d2       	rcall	.+1102   	; 0x856 <menu_enter_current>
     408:	35 c0       	rjmp	.+106    	; 0x474 <game_tick_menu+0x8a>
	} 
	else {
		click_released = TRUE;
     40a:	81 e0       	ldi	r24, 0x01	; 1
     40c:	80 93 07 01 	sts	0x0107, r24
		
		fprintf(&uart_out, "\tjoy: %u\tjoy_rel: %u\t", joy.y, joy_released);
     410:	80 91 06 01 	lds	r24, 0x0106
     414:	1f 92       	push	r1
     416:	8f 93       	push	r24
     418:	1f 92       	push	r1
     41a:	cf 93       	push	r28
     41c:	85 e4       	ldi	r24, 0x45	; 69
     41e:	91 e0       	ldi	r25, 0x01	; 1
     420:	9f 93       	push	r25
     422:	8f 93       	push	r24
     424:	88 e2       	ldi	r24, 0x28	; 40
     426:	91 e0       	ldi	r25, 0x01	; 1
     428:	9f 93       	push	r25
     42a:	8f 93       	push	r24
     42c:	0a d6       	rcall	.+3092   	; 0x1042 <fprintf>
		if ((joy.y < (128 - JOY_Y_TRESHOLD)) && joy_released){
     42e:	8d b7       	in	r24, 0x3d	; 61
     430:	9e b7       	in	r25, 0x3e	; 62
     432:	08 96       	adiw	r24, 0x08	; 8
     434:	0f b6       	in	r0, 0x3f	; 63
     436:	f8 94       	cli
     438:	9e bf       	out	0x3e, r25	; 62
     43a:	0f be       	out	0x3f, r0	; 63
     43c:	8d bf       	out	0x3d, r24	; 61
     43e:	d0 36       	cpi	r29, 0x60	; 96
     440:	48 f4       	brcc	.+18     	; 0x454 <game_tick_menu+0x6a>
     442:	80 91 06 01 	lds	r24, 0x0106
     446:	88 23       	and	r24, r24
     448:	29 f0       	breq	.+10     	; 0x454 <game_tick_menu+0x6a>
			joy_released = FALSE;
     44a:	10 92 06 01 	sts	0x0106, r1
			menu_move_cursor(1);
     44e:	81 e0       	ldi	r24, 0x01	; 1
     450:	e5 d1       	rcall	.+970    	; 0x81c <menu_move_cursor>
     452:	0a c0       	rjmp	.+20     	; 0x468 <game_tick_menu+0x7e>
		} 
		else if ((joy.y > (128 + JOY_Y_TRESHOLD)) && joy_released){
     454:	d1 3a       	cpi	r29, 0xA1	; 161
     456:	40 f0       	brcs	.+16     	; 0x468 <game_tick_menu+0x7e>
     458:	80 91 06 01 	lds	r24, 0x0106
     45c:	88 23       	and	r24, r24
     45e:	21 f0       	breq	.+8      	; 0x468 <game_tick_menu+0x7e>
			joy_released = FALSE;
     460:	10 92 06 01 	sts	0x0106, r1
			menu_move_cursor(-1);
     464:	8f ef       	ldi	r24, 0xFF	; 255
     466:	da d1       	rcall	.+948    	; 0x81c <menu_move_cursor>
		}
		
		if (128 - JOY_Y_TRESHOLD < joy.y && joy.y < 128 + JOY_Y_TRESHOLD){
     468:	c1 56       	subi	r28, 0x61	; 97
     46a:	cf 33       	cpi	r28, 0x3F	; 63
     46c:	18 f4       	brcc	.+6      	; 0x474 <game_tick_menu+0x8a>
			joy_released = TRUE;
     46e:	81 e0       	ldi	r24, 0x01	; 1
     470:	80 93 06 01 	sts	0x0106, r24
		}
		
	}
	

}
     474:	df 91       	pop	r29
     476:	cf 91       	pop	r28
     478:	08 95       	ret

0000047a <game_tick>:
}


void game_tick(){
	
	switch (game_state){
     47a:	80 91 7e 02 	lds	r24, 0x027E
     47e:	81 30       	cpi	r24, 0x01	; 1
     480:	09 f4       	brne	.+2      	; 0x484 <game_tick+0xa>
		
		
		
			break;
		case IN_MENU:
			game_tick_menu();
     482:	b3 cf       	rjmp	.-154    	; 0x3ea <game_tick_menu>
     484:	08 95       	ret

00000486 <joy_get_state>:
	msg.length = 4;
	
	fprintf(&uart_out, "joy sent: %i\t%i\t%i\t%i\n",   joy_xs, joy_ys, joy_dir, joy_click);
	
	can_send(msg, 0);
}
     486:	cf 93       	push	r28
     488:	81 e0       	ldi	r24, 0x01	; 1
     48a:	d0 de       	rcall	.-608    	; 0x22c <adc_read_channel>
     48c:	c8 2f       	mov	r28, r24
     48e:	80 e0       	ldi	r24, 0x00	; 0
     490:	cd de       	rcall	.-614    	; 0x22c <adc_read_channel>
     492:	95 b1       	in	r25, 0x05	; 5
     494:	90 95       	com	r25
     496:	6c 2f       	mov	r22, r28
     498:	78 2f       	mov	r23, r24
     49a:	89 2f       	mov	r24, r25
     49c:	81 70       	andi	r24, 0x01	; 1
     49e:	cf 91       	pop	r28
     4a0:	08 95       	ret

000004a2 <joystick_init>:


void joystick_init(void){
	PORTE  |= 1 << CLICK_PIN;    // + PUD=0 gives pull-up
     4a2:	38 9a       	sbi	0x07, 0	; 7
	DDRE   &= ~(1 << CLICK_PIN); // input
     4a4:	30 98       	cbi	0x06, 0	; 6
     4a6:	08 95       	ret

000004a8 <main>:
#include "joystick.h"
#include "game.h"

int main()
{
	cli();
     4a8:	f8 94       	cli
	// SRAM init
	MCUCR |= (1 << SRE);
     4aa:	85 b7       	in	r24, 0x35	; 53
     4ac:	80 68       	ori	r24, 0x80	; 128
     4ae:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1 << XMM2);
     4b0:	80 b7       	in	r24, 0x30	; 48
     4b2:	80 62       	ori	r24, 0x20	; 32
     4b4:	80 bf       	out	0x30, r24	; 48
	
	uart_init();
     4b6:	58 d4       	rcall	.+2224   	; 0xd68 <uart_init>
	
	// setup heap
	__malloc_heap_start = (char*)RAM_ADR;
     4b8:	80 e0       	ldi	r24, 0x00	; 0
     4ba:	98 e1       	ldi	r25, 0x18	; 24
     4bc:	90 93 03 01 	sts	0x0103, r25
     4c0:	80 93 02 01 	sts	0x0102, r24
	__malloc_heap_end   = (char*)(RAM_ADR + RAM_SIZE);
     4c4:	80 e0       	ldi	r24, 0x00	; 0
     4c6:	90 e2       	ldi	r25, 0x20	; 32
     4c8:	90 93 01 01 	sts	0x0101, r25
     4cc:	80 93 00 01 	sts	0x0100, r24
	
	adc_init(); // adc init (must be after SRAM init)
     4d0:	aa de       	rcall	.-684    	; 0x226 <adc_init>
	oled_init();
     4d2:	b9 d2       	rcall	.+1394   	; 0xa46 <oled_init>
	menu_init(); // after oled
     4d4:	ea d0       	rcall	.+468    	; 0x6aa <menu_init>
	spi_init();
     4d6:	b6 d3       	rcall	.+1900   	; 0xc44 <spi_init>
	can_init(); // after spi
     4d8:	6d df       	rcall	.-294    	; 0x3b4 <can_init>
	
	sei();
     4da:	78 94       	sei
	
	// setup printf
	stdout = &uart_out; // printf defaults to oled
     4dc:	88 e2       	ldi	r24, 0x28	; 40
     4de:	91 e0       	ldi	r25, 0x01	; 1
     4e0:	90 93 11 03 	sts	0x0311, r25
     4e4:	80 93 10 03 	sts	0x0310, r24
	stdin  = &uart_in;
     4e8:	8a e1       	ldi	r24, 0x1A	; 26
     4ea:	91 e0       	ldi	r25, 0x01	; 1
     4ec:	90 93 0f 03 	sts	0x030F, r25
     4f0:	80 93 0e 03 	sts	0x030E, r24

	
	oled_home();
     4f4:	d2 d1       	rcall	.+932    	; 0x89a <oled_home>
	
	game_init(); // after menu_init
     4f6:	6a df       	rcall	.-300    	; 0x3cc <game_init>
	
	fprintf(&uart_out, "entering loop\n");
     4f8:	28 e2       	ldi	r18, 0x28	; 40
     4fa:	31 e0       	ldi	r19, 0x01	; 1
     4fc:	4e e0       	ldi	r20, 0x0E	; 14
     4fe:	50 e0       	ldi	r21, 0x00	; 0
     500:	61 e0       	ldi	r22, 0x01	; 1
     502:	70 e0       	ldi	r23, 0x00	; 0
     504:	8b e5       	ldi	r24, 0x5B	; 91
     506:	91 e0       	ldi	r25, 0x01	; 1
     508:	dd d5       	rcall	.+3002   	; 0x10c4 <fwrite>
	
	while (1)
	{	
		fprintf(&uart_out, "tick\n");
     50a:	28 e2       	ldi	r18, 0x28	; 40
     50c:	31 e0       	ldi	r19, 0x01	; 1
     50e:	45 e0       	ldi	r20, 0x05	; 5
     510:	50 e0       	ldi	r21, 0x00	; 0
     512:	61 e0       	ldi	r22, 0x01	; 1
     514:	70 e0       	ldi	r23, 0x00	; 0
     516:	8a e6       	ldi	r24, 0x6A	; 106
     518:	91 e0       	ldi	r25, 0x01	; 1
     51a:	d4 d5       	rcall	.+2984   	; 0x10c4 <fwrite>
		
		game_tick();
     51c:	ae df       	rcall	.-164    	; 0x47a <game_tick>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     51e:	2f ef       	ldi	r18, 0xFF	; 255
     520:	8f eb       	ldi	r24, 0xBF	; 191
     522:	93 e0       	ldi	r25, 0x03	; 3
     524:	21 50       	subi	r18, 0x01	; 1
     526:	80 40       	sbci	r24, 0x00	; 0
     528:	90 40       	sbci	r25, 0x00	; 0
     52a:	e1 f7       	brne	.-8      	; 0x524 <__stack+0x25>
     52c:	00 c0       	rjmp	.+0      	; 0x52e <__stack+0x2f>
     52e:	00 00       	nop
     530:	ec cf       	rjmp	.-40     	; 0x50a <__stack+0xb>

00000532 <mcp_reset>:
	spi_ss_high();
	
	#ifdef MCP_DEBUG
	fprintf(&uart_out, "MCP_RTS\t%i\n", tx_buffer);
	#endif // MCP_DEBUG
}
     532:	84 d3       	rcall	.+1800   	; 0xc3c <spi_ss_low>
     534:	80 ec       	ldi	r24, 0xC0	; 192
     536:	8d d3       	rcall	.+1818   	; 0xc52 <spi_transmit>
     538:	83 d3       	rcall	.+1798   	; 0xc40 <spi_ss_high>
     53a:	80 e0       	ldi	r24, 0x00	; 0
     53c:	8f 5f       	subi	r24, 0xFF	; 255
     53e:	80 38       	cpi	r24, 0x80	; 128
     540:	e9 f7       	brne	.-6      	; 0x53c <mcp_reset+0xa>
     542:	08 95       	ret

00000544 <mcp_read>:
     544:	cf 93       	push	r28
     546:	c8 2f       	mov	r28, r24
     548:	79 d3       	rcall	.+1778   	; 0xc3c <spi_ss_low>
     54a:	83 e0       	ldi	r24, 0x03	; 3
     54c:	82 d3       	rcall	.+1796   	; 0xc52 <spi_transmit>
     54e:	8c 2f       	mov	r24, r28
     550:	80 d3       	rcall	.+1792   	; 0xc52 <spi_transmit>
     552:	80 e0       	ldi	r24, 0x00	; 0
     554:	7e d3       	rcall	.+1788   	; 0xc52 <spi_transmit>
     556:	c8 2f       	mov	r28, r24
     558:	73 d3       	rcall	.+1766   	; 0xc40 <spi_ss_high>
     55a:	8c 2f       	mov	r24, r28
     55c:	cf 91       	pop	r28
     55e:	08 95       	ret

00000560 <mcp_write>:
     560:	cf 93       	push	r28
     562:	df 93       	push	r29
     564:	d8 2f       	mov	r29, r24
     566:	c6 2f       	mov	r28, r22
     568:	69 d3       	rcall	.+1746   	; 0xc3c <spi_ss_low>
     56a:	82 e0       	ldi	r24, 0x02	; 2
     56c:	72 d3       	rcall	.+1764   	; 0xc52 <spi_transmit>
     56e:	8d 2f       	mov	r24, r29
     570:	70 d3       	rcall	.+1760   	; 0xc52 <spi_transmit>
     572:	8c 2f       	mov	r24, r28
     574:	6e d3       	rcall	.+1756   	; 0xc52 <spi_transmit>
     576:	64 d3       	rcall	.+1736   	; 0xc40 <spi_ss_high>
     578:	df 91       	pop	r29
     57a:	cf 91       	pop	r28
     57c:	08 95       	ret

0000057e <mcp_readstatus>:

uint8_t mcp_readstatus()
{
     57e:	cf 93       	push	r28
	spi_ss_low();
     580:	5d d3       	rcall	.+1722   	; 0xc3c <spi_ss_low>
	spi_transmit(MCP_READ_STATUS);
     582:	80 ea       	ldi	r24, 0xA0	; 160
     584:	66 d3       	rcall	.+1740   	; 0xc52 <spi_transmit>
	uint8_t status = spi_transmit(0);
     586:	80 e0       	ldi	r24, 0x00	; 0
     588:	64 d3       	rcall	.+1736   	; 0xc52 <spi_transmit>
     58a:	c8 2f       	mov	r28, r24
	spi_ss_high();
     58c:	59 d3       	rcall	.+1714   	; 0xc40 <spi_ss_high>
	#ifdef MCP_DEBUG
	fprintf(&uart_out, "MCP_READ_STATUS\t%x\n", status);
	#endif // MCP_DEBUG
	
	return status;
}
     58e:	8c 2f       	mov	r24, r28
     590:	cf 91       	pop	r28
     592:	08 95       	ret

00000594 <mcp_bitmodify>:

void mcp_bitmodify(uint8_t adr, uint8_t mask, uint8_t data)
{
     594:	1f 93       	push	r17
     596:	cf 93       	push	r28
     598:	df 93       	push	r29
     59a:	18 2f       	mov	r17, r24
     59c:	d6 2f       	mov	r29, r22
     59e:	c4 2f       	mov	r28, r20
	spi_ss_low();
     5a0:	4d d3       	rcall	.+1690   	; 0xc3c <spi_ss_low>
	spi_transmit(MCP_BITMOD);
     5a2:	85 e0       	ldi	r24, 0x05	; 5
     5a4:	56 d3       	rcall	.+1708   	; 0xc52 <spi_transmit>
	spi_transmit(adr);
     5a6:	81 2f       	mov	r24, r17
     5a8:	54 d3       	rcall	.+1704   	; 0xc52 <spi_transmit>
	spi_transmit(mask);
     5aa:	8d 2f       	mov	r24, r29
     5ac:	52 d3       	rcall	.+1700   	; 0xc52 <spi_transmit>
	spi_transmit(data);
     5ae:	8c 2f       	mov	r24, r28
     5b0:	50 d3       	rcall	.+1696   	; 0xc52 <spi_transmit>
	spi_ss_high();
     5b2:	46 d3       	rcall	.+1676   	; 0xc40 <spi_ss_high>
	
	#ifdef MCP_DEBUG
	fprintf(&uart_out, "MCP_BITMOD\t%x\t%x\t%x\n", adr, mask, data);
	#endif // MCP_DEBUG
}
     5b4:	df 91       	pop	r29
     5b6:	cf 91       	pop	r28
     5b8:	1f 91       	pop	r17
     5ba:	08 95       	ret

000005bc <mcp_init>:
#include "uart.h"


void mcp_init()
{
	mcp_reset();
     5bc:	ba df       	rcall	.-140    	; 0x532 <mcp_reset>
	const uint8_t BRP		= 1;	// TQ = 2*Tosc*(BRP+1)  = 250 ns
	const uint8_t PrSeg		= 1;	// tPropSeg = (PrSeg + 1)
	const uint8_t PhSeg1	= 2;	// tPS1 = (PhSeg1 + 1)*TQ
	const uint8_t PhSeg2	= 2;	// tPS2 = (PhSeg2 + 1)*TQ
	
	mcp_write(MCP_CNF1, BRP);
     5be:	61 e0       	ldi	r22, 0x01	; 1
     5c0:	8a e2       	ldi	r24, 0x2A	; 42
     5c2:	ce df       	rcall	.-100    	; 0x560 <mcp_write>
	mcp_write(MCP_CNF2, PrSeg | (PhSeg1 << 3));
     5c4:	61 e1       	ldi	r22, 0x11	; 17
     5c6:	89 e2       	ldi	r24, 0x29	; 41
     5c8:	cb df       	rcall	.-106    	; 0x560 <mcp_write>
	mcp_write(MCP_CNF3, PhSeg2);
     5ca:	62 e0       	ldi	r22, 0x02	; 2
     5cc:	88 e2       	ldi	r24, 0x28	; 40
     5ce:	c8 df       	rcall	.-112    	; 0x560 <mcp_write>


	// Setup Rx registers
	//mcp_write(MCP_RXM0SIDH, 0);
	//mcp_write(MCP_RXM0SIDL, 0);
	mcp_bitmodify(MCP_RXB0CTRL, 0x60, 0x60);
     5d0:	40 e6       	ldi	r20, 0x60	; 96
     5d2:	60 e6       	ldi	r22, 0x60	; 96
     5d4:	80 e6       	ldi	r24, 0x60	; 96
     5d6:	de df       	rcall	.-68     	; 0x594 <mcp_bitmodify>
	mcp_bitmodify(MCP_RXB1CTRL, 0x60, 0x60);	
     5d8:	40 e6       	ldi	r20, 0x60	; 96
     5da:	60 e6       	ldi	r22, 0x60	; 96
     5dc:	80 e7       	ldi	r24, 0x70	; 112
     5de:	da df       	rcall	.-76     	; 0x594 <mcp_bitmodify>
	
	// go to normal mode
	mcp_bitmodify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);
     5e0:	40 e0       	ldi	r20, 0x00	; 0
     5e2:	60 ee       	ldi	r22, 0xE0	; 224
     5e4:	8f e0       	ldi	r24, 0x0F	; 15
     5e6:	d6 cf       	rjmp	.-84     	; 0x594 <mcp_bitmodify>
     5e8:	08 95       	ret

000005ea <menu_action_nothing>:
		///\todo this can't be right?
		// should probably check for parent->submenu[i] != NULL
		if (1)
			free(&parent->submenus[i]);
	}
}
     5ea:	28 e2       	ldi	r18, 0x28	; 40
     5ec:	31 e0       	ldi	r19, 0x01	; 1
     5ee:	48 e0       	ldi	r20, 0x08	; 8
     5f0:	50 e0       	ldi	r21, 0x00	; 0
     5f2:	61 e0       	ldi	r22, 0x01	; 1
     5f4:	70 e0       	ldi	r23, 0x00	; 0
     5f6:	80 e7       	ldi	r24, 0x70	; 112
     5f8:	91 e0       	ldi	r25, 0x01	; 1
     5fa:	64 c5       	rjmp	.+2760   	; 0x10c4 <fwrite>
     5fc:	08 95       	ret

000005fe <menu_init_menu>:
     5fe:	cf 92       	push	r12
     600:	df 92       	push	r13
     602:	ef 92       	push	r14
     604:	ff 92       	push	r15
     606:	0f 93       	push	r16
     608:	1f 93       	push	r17
     60a:	cf 93       	push	r28
     60c:	df 93       	push	r29
     60e:	6c 01       	movw	r12, r24
     610:	eb 01       	movw	r28, r22
     612:	7a 01       	movw	r14, r20
     614:	89 e2       	ldi	r24, 0x29	; 41
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	de d3       	rcall	.+1980   	; 0xdd6 <malloc>
     61a:	8c 01       	movw	r16, r24
     61c:	fc 01       	movw	r30, r24
     61e:	88 e1       	ldi	r24, 0x18	; 24
     620:	11 92       	st	Z+, r1
     622:	81 50       	subi	r24, 0x01	; 1
     624:	e9 f7       	brne	.-6      	; 0x620 <menu_init_menu+0x22>
     626:	47 e1       	ldi	r20, 0x17	; 23
     628:	50 e0       	ldi	r21, 0x00	; 0
     62a:	b6 01       	movw	r22, r12
     62c:	c8 01       	movw	r24, r16
     62e:	fa d4       	rcall	.+2548   	; 0x1024 <strncpy>
     630:	f8 01       	movw	r30, r16
     632:	80 e0       	ldi	r24, 0x00	; 0
     634:	10 8e       	std	Z+24, r1	; 0x18
     636:	17 8a       	std	Z+23, r1	; 0x17
     638:	8f 5f       	subi	r24, 0xFF	; 255
     63a:	32 96       	adiw	r30, 0x02	; 2
     63c:	87 30       	cpi	r24, 0x07	; 7
     63e:	d1 f7       	brne	.-12     	; 0x634 <menu_init_menu+0x36>
     640:	20 97       	sbiw	r28, 0x00	; 0
     642:	41 f4       	brne	.+16     	; 0x654 <menu_init_menu+0x56>
     644:	f8 01       	movw	r30, r16
     646:	16 a3       	std	Z+38, r17	; 0x26
     648:	05 a3       	std	Z+37, r16	; 0x25
     64a:	f0 a6       	std	Z+40, r15	; 0x28
     64c:	e7 a2       	std	Z+39, r14	; 0x27
     64e:	80 2f       	mov	r24, r16
     650:	91 2f       	mov	r25, r17
     652:	22 c0       	rjmp	.+68     	; 0x698 <menu_init_menu+0x9a>
     654:	f8 01       	movw	r30, r16
     656:	d6 a3       	std	Z+38, r29	; 0x26
     658:	c5 a3       	std	Z+37, r28	; 0x25
     65a:	8f 89       	ldd	r24, Y+23	; 0x17
     65c:	98 8d       	ldd	r25, Y+24	; 0x18
     65e:	89 2b       	or	r24, r25
     660:	41 f0       	breq	.+16     	; 0x672 <menu_init_menu+0x74>
     662:	fe 01       	movw	r30, r28
     664:	21 e0       	ldi	r18, 0x01	; 1
     666:	30 e0       	ldi	r19, 0x00	; 0
     668:	81 8d       	ldd	r24, Z+25	; 0x19
     66a:	92 8d       	ldd	r25, Z+26	; 0x1a
     66c:	89 2b       	or	r24, r25
     66e:	61 f4       	brne	.+24     	; 0x688 <menu_init_menu+0x8a>
     670:	02 c0       	rjmp	.+4      	; 0x676 <menu_init_menu+0x78>
     672:	20 e0       	ldi	r18, 0x00	; 0
     674:	30 e0       	ldi	r19, 0x00	; 0
     676:	22 0f       	add	r18, r18
     678:	33 1f       	adc	r19, r19
     67a:	c2 0f       	add	r28, r18
     67c:	d3 1f       	adc	r29, r19
     67e:	18 8f       	std	Y+24, r17	; 0x18
     680:	0f 8b       	std	Y+23, r16	; 0x17
     682:	80 2f       	mov	r24, r16
     684:	91 2f       	mov	r25, r17
     686:	08 c0       	rjmp	.+16     	; 0x698 <menu_init_menu+0x9a>
     688:	2f 5f       	subi	r18, 0xFF	; 255
     68a:	3f 4f       	sbci	r19, 0xFF	; 255
     68c:	32 96       	adiw	r30, 0x02	; 2
     68e:	27 30       	cpi	r18, 0x07	; 7
     690:	31 05       	cpc	r19, r1
     692:	51 f7       	brne	.-44     	; 0x668 <menu_init_menu+0x6a>
     694:	80 e0       	ldi	r24, 0x00	; 0
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	df 91       	pop	r29
     69a:	cf 91       	pop	r28
     69c:	1f 91       	pop	r17
     69e:	0f 91       	pop	r16
     6a0:	ff 90       	pop	r15
     6a2:	ef 90       	pop	r14
     6a4:	df 90       	pop	r13
     6a6:	cf 90       	pop	r12
     6a8:	08 95       	ret

000006aa <menu_init>:
     6aa:	0f 93       	push	r16
     6ac:	1f 93       	push	r17
     6ae:	cf 93       	push	r28
     6b0:	df 93       	push	r29
     6b2:	f7 de       	rcall	.-530    	; 0x4a2 <joystick_init>
     6b4:	60 91 82 02 	lds	r22, 0x0282
     6b8:	70 91 83 02 	lds	r23, 0x0283
     6bc:	45 ef       	ldi	r20, 0xF5	; 245
     6be:	52 e0       	ldi	r21, 0x02	; 2
     6c0:	89 e7       	ldi	r24, 0x79	; 121
     6c2:	91 e0       	ldi	r25, 0x01	; 1
     6c4:	9c df       	rcall	.-200    	; 0x5fe <menu_init_menu>
     6c6:	ec 01       	movw	r28, r24
     6c8:	90 93 83 02 	sts	0x0283, r25
     6cc:	80 93 82 02 	sts	0x0282, r24
     6d0:	4b ee       	ldi	r20, 0xEB	; 235
     6d2:	51 e0       	ldi	r21, 0x01	; 1
     6d4:	bc 01       	movw	r22, r24
     6d6:	8e e7       	ldi	r24, 0x7E	; 126
     6d8:	91 e0       	ldi	r25, 0x01	; 1
     6da:	91 df       	rcall	.-222    	; 0x5fe <menu_init_menu>
     6dc:	45 ef       	ldi	r20, 0xF5	; 245
     6de:	52 e0       	ldi	r21, 0x02	; 2
     6e0:	be 01       	movw	r22, r28
     6e2:	84 e8       	ldi	r24, 0x84	; 132
     6e4:	91 e0       	ldi	r25, 0x01	; 1
     6e6:	8b df       	rcall	.-234    	; 0x5fe <menu_init_menu>
     6e8:	45 ef       	ldi	r20, 0xF5	; 245
     6ea:	52 e0       	ldi	r21, 0x02	; 2
     6ec:	be 01       	movw	r22, r28
     6ee:	8f e8       	ldi	r24, 0x8F	; 143
     6f0:	91 e0       	ldi	r25, 0x01	; 1
     6f2:	85 df       	rcall	.-246    	; 0x5fe <menu_init_menu>
     6f4:	8c 01       	movw	r16, r24
     6f6:	45 ef       	ldi	r20, 0xF5	; 245
     6f8:	52 e0       	ldi	r21, 0x02	; 2
     6fa:	bc 01       	movw	r22, r24
     6fc:	85 e9       	ldi	r24, 0x95	; 149
     6fe:	91 e0       	ldi	r25, 0x01	; 1
     700:	7e df       	rcall	.-260    	; 0x5fe <menu_init_menu>
     702:	45 ef       	ldi	r20, 0xF5	; 245
     704:	52 e0       	ldi	r21, 0x02	; 2
     706:	b8 01       	movw	r22, r16
     708:	87 ea       	ldi	r24, 0xA7	; 167
     70a:	91 e0       	ldi	r25, 0x01	; 1
     70c:	78 df       	rcall	.-272    	; 0x5fe <menu_init_menu>
     70e:	45 ef       	ldi	r20, 0xF5	; 245
     710:	52 e0       	ldi	r21, 0x02	; 2
     712:	b8 01       	movw	r22, r16
     714:	84 eb       	ldi	r24, 0xB4	; 180
     716:	91 e0       	ldi	r25, 0x01	; 1
     718:	72 df       	rcall	.-284    	; 0x5fe <menu_init_menu>
     71a:	45 ef       	ldi	r20, 0xF5	; 245
     71c:	52 e0       	ldi	r21, 0x02	; 2
     71e:	b8 01       	movw	r22, r16
     720:	8f eb       	ldi	r24, 0xBF	; 191
     722:	91 e0       	ldi	r25, 0x01	; 1
     724:	6c df       	rcall	.-296    	; 0x5fe <menu_init_menu>
     726:	d0 93 81 02 	sts	0x0281, r29
     72a:	c0 93 80 02 	sts	0x0280, r28
     72e:	df 91       	pop	r29
     730:	cf 91       	pop	r28
     732:	1f 91       	pop	r17
     734:	0f 91       	pop	r16
     736:	08 95       	ret

00000738 <menu_print_current>:
     738:	cf 92       	push	r12
     73a:	df 92       	push	r13
     73c:	ef 92       	push	r14
     73e:	ff 92       	push	r15
     740:	0f 93       	push	r16
     742:	1f 93       	push	r17
     744:	cf 93       	push	r28
     746:	df 93       	push	r29
     748:	a8 d0       	rcall	.+336    	; 0x89a <oled_home>
     74a:	80 91 81 02 	lds	r24, 0x0281
     74e:	8f 93       	push	r24
     750:	80 91 80 02 	lds	r24, 0x0280
     754:	8f 93       	push	r24
     756:	80 ed       	ldi	r24, 0xD0	; 208
     758:	91 e0       	ldi	r25, 0x01	; 1
     75a:	9f 93       	push	r25
     75c:	8f 93       	push	r24
     75e:	88 e0       	ldi	r24, 0x08	; 8
     760:	91 e0       	ldi	r25, 0x01	; 1
     762:	9f 93       	push	r25
     764:	8f 93       	push	r24
     766:	6d d4       	rcall	.+2266   	; 0x1042 <fprintf>
     768:	0f 90       	pop	r0
     76a:	0f 90       	pop	r0
     76c:	0f 90       	pop	r0
     76e:	0f 90       	pop	r0
     770:	0f 90       	pop	r0
     772:	0f 90       	pop	r0
     774:	c0 e0       	ldi	r28, 0x00	; 0
     776:	d0 e0       	ldi	r29, 0x00	; 0
     778:	0f 2e       	mov	r0, r31
     77a:	f0 ed       	ldi	r31, 0xD0	; 208
     77c:	ef 2e       	mov	r14, r31
     77e:	f1 e0       	ldi	r31, 0x01	; 1
     780:	ff 2e       	mov	r15, r31
     782:	f0 2d       	mov	r31, r0
     784:	08 e0       	ldi	r16, 0x08	; 8
     786:	11 e0       	ldi	r17, 0x01	; 1
     788:	6e 01       	movw	r12, r28
     78a:	a0 91 80 02 	lds	r26, 0x0280
     78e:	b0 91 81 02 	lds	r27, 0x0281
     792:	ce 01       	movw	r24, r28
     794:	88 0f       	add	r24, r24
     796:	99 1f       	adc	r25, r25
     798:	a8 0f       	add	r26, r24
     79a:	b9 1f       	adc	r27, r25
     79c:	57 96       	adiw	r26, 0x17	; 23
     79e:	8d 91       	ld	r24, X+
     7a0:	9c 91       	ld	r25, X
     7a2:	58 97       	sbiw	r26, 0x18	; 24
     7a4:	89 2b       	or	r24, r25
     7a6:	61 f1       	breq	.+88     	; 0x800 <menu_print_current+0xc8>
     7a8:	80 91 7f 02 	lds	r24, 0x027F
     7ac:	c8 13       	cpse	r28, r24
     7ae:	09 c0       	rjmp	.+18     	; 0x7c2 <menu_print_current+0x8a>
     7b0:	98 01       	movw	r18, r16
     7b2:	42 e0       	ldi	r20, 0x02	; 2
     7b4:	50 e0       	ldi	r21, 0x00	; 0
     7b6:	61 e0       	ldi	r22, 0x01	; 1
     7b8:	70 e0       	ldi	r23, 0x00	; 0
     7ba:	84 ed       	ldi	r24, 0xD4	; 212
     7bc:	91 e0       	ldi	r25, 0x01	; 1
     7be:	82 d4       	rcall	.+2308   	; 0x10c4 <fwrite>
     7c0:	08 c0       	rjmp	.+16     	; 0x7d2 <menu_print_current+0x9a>
     7c2:	98 01       	movw	r18, r16
     7c4:	42 e0       	ldi	r20, 0x02	; 2
     7c6:	50 e0       	ldi	r21, 0x00	; 0
     7c8:	61 e0       	ldi	r22, 0x01	; 1
     7ca:	70 e0       	ldi	r23, 0x00	; 0
     7cc:	87 ed       	ldi	r24, 0xD7	; 215
     7ce:	91 e0       	ldi	r25, 0x01	; 1
     7d0:	79 d4       	rcall	.+2290   	; 0x10c4 <fwrite>
     7d2:	e0 91 80 02 	lds	r30, 0x0280
     7d6:	f0 91 81 02 	lds	r31, 0x0281
     7da:	cc 0c       	add	r12, r12
     7dc:	dd 1c       	adc	r13, r13
     7de:	ec 0d       	add	r30, r12
     7e0:	fd 1d       	adc	r31, r13
     7e2:	80 8d       	ldd	r24, Z+24	; 0x18
     7e4:	8f 93       	push	r24
     7e6:	87 89       	ldd	r24, Z+23	; 0x17
     7e8:	8f 93       	push	r24
     7ea:	ff 92       	push	r15
     7ec:	ef 92       	push	r14
     7ee:	1f 93       	push	r17
     7f0:	0f 93       	push	r16
     7f2:	27 d4       	rcall	.+2126   	; 0x1042 <fprintf>
     7f4:	0f 90       	pop	r0
     7f6:	0f 90       	pop	r0
     7f8:	0f 90       	pop	r0
     7fa:	0f 90       	pop	r0
     7fc:	0f 90       	pop	r0
     7fe:	0f 90       	pop	r0
     800:	21 96       	adiw	r28, 0x01	; 1
     802:	c7 30       	cpi	r28, 0x07	; 7
     804:	d1 05       	cpc	r29, r1
     806:	09 f0       	breq	.+2      	; 0x80a <menu_print_current+0xd2>
     808:	bf cf       	rjmp	.-130    	; 0x788 <menu_print_current+0x50>
     80a:	df 91       	pop	r29
     80c:	cf 91       	pop	r28
     80e:	1f 91       	pop	r17
     810:	0f 91       	pop	r16
     812:	ff 90       	pop	r15
     814:	ef 90       	pop	r14
     816:	df 90       	pop	r13
     818:	cf 90       	pop	r12
     81a:	08 95       	ret

0000081c <menu_move_cursor>:
     81c:	20 91 7f 02 	lds	r18, 0x027F
     820:	99 27       	eor	r25, r25
     822:	87 fd       	sbrc	r24, 7
     824:	90 95       	com	r25
     826:	82 0f       	add	r24, r18
     828:	91 1d       	adc	r25, r1
     82a:	27 fd       	sbrc	r18, 7
     82c:	9a 95       	dec	r25
     82e:	67 e0       	ldi	r22, 0x07	; 7
     830:	70 e0       	ldi	r23, 0x00	; 0
     832:	aa d2       	rcall	.+1364   	; 0xd88 <__divmodhi4>
     834:	20 91 80 02 	lds	r18, 0x0280
     838:	30 91 81 02 	lds	r19, 0x0281
     83c:	fc 01       	movw	r30, r24
     83e:	ff 27       	eor	r31, r31
     840:	ee 0f       	add	r30, r30
     842:	ff 1f       	adc	r31, r31
     844:	e2 0f       	add	r30, r18
     846:	f3 1f       	adc	r31, r19
     848:	27 89       	ldd	r18, Z+23	; 0x17
     84a:	30 8d       	ldd	r19, Z+24	; 0x18
     84c:	23 2b       	or	r18, r19
     84e:	11 f0       	breq	.+4      	; 0x854 <menu_move_cursor+0x38>
     850:	80 93 7f 02 	sts	0x027F, r24
     854:	08 95       	ret

00000856 <menu_enter_current>:



void menu_enter_current(void)
{
	current = current->submenus[subchoice];
     856:	80 91 80 02 	lds	r24, 0x0280
     85a:	90 91 81 02 	lds	r25, 0x0281
     85e:	e0 91 7f 02 	lds	r30, 0x027F
     862:	f0 e0       	ldi	r31, 0x00	; 0
     864:	ee 0f       	add	r30, r30
     866:	ff 1f       	adc	r31, r31
     868:	e8 0f       	add	r30, r24
     86a:	f9 1f       	adc	r31, r25
     86c:	07 88       	ldd	r0, Z+23	; 0x17
     86e:	f0 8d       	ldd	r31, Z+24	; 0x18
     870:	e0 2d       	mov	r30, r0
     872:	f0 93 81 02 	sts	0x0281, r31
     876:	e0 93 80 02 	sts	0x0280, r30
	current->action();
     87a:	07 a0       	ldd	r0, Z+39	; 0x27
     87c:	f0 a5       	ldd	r31, Z+40	; 0x28
     87e:	e0 2d       	mov	r30, r0
     880:	09 95       	icall
	subchoice = 0;
     882:	10 92 7f 02 	sts	0x027F, r1
     886:	08 95       	ret

00000888 <oled_autorefresh_init>:
}

void oled_reset(){
	oled_init();
	oled_fill(0);
	oled_home();
     888:	89 b7       	in	r24, 0x39	; 57
     88a:	82 60       	ori	r24, 0x02	; 2
     88c:	89 bf       	out	0x39, r24	; 57
     88e:	83 b7       	in	r24, 0x33	; 51
     890:	85 60       	ori	r24, 0x05	; 5
     892:	83 bf       	out	0x33, r24	; 51
     894:	87 e2       	ldi	r24, 0x27	; 39
     896:	81 bf       	out	0x31, r24	; 49
     898:	08 95       	ret

0000089a <oled_home>:
     89a:	10 92 85 02 	sts	0x0285, r1
     89e:	10 92 84 02 	sts	0x0284, r1
     8a2:	08 95       	ret

000008a4 <oled_newline>:
     8a4:	10 92 85 02 	sts	0x0285, r1
     8a8:	80 91 84 02 	lds	r24, 0x0284
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	01 96       	adiw	r24, 0x01	; 1
     8b0:	87 70       	andi	r24, 0x07	; 7
     8b2:	90 78       	andi	r25, 0x80	; 128
     8b4:	80 93 84 02 	sts	0x0284, r24
     8b8:	08 95       	ret

000008ba <oled_goto_nextpos>:
     8ba:	20 91 85 02 	lds	r18, 0x0285
     8be:	30 e0       	ldi	r19, 0x00	; 0
     8c0:	2f 5f       	subi	r18, 0xFF	; 255
     8c2:	3f 4f       	sbci	r19, 0xFF	; 255
     8c4:	2f 77       	andi	r18, 0x7F	; 127
     8c6:	30 78       	andi	r19, 0x80	; 128
     8c8:	20 93 85 02 	sts	0x0285, r18
     8cc:	80 91 84 02 	lds	r24, 0x0284
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	41 e0       	ldi	r20, 0x01	; 1
     8d4:	50 e0       	ldi	r21, 0x00	; 0
     8d6:	22 23       	and	r18, r18
     8d8:	11 f0       	breq	.+4      	; 0x8de <oled_goto_nextpos+0x24>
     8da:	40 e0       	ldi	r20, 0x00	; 0
     8dc:	50 e0       	ldi	r21, 0x00	; 0
     8de:	84 0f       	add	r24, r20
     8e0:	95 1f       	adc	r25, r21
     8e2:	87 70       	andi	r24, 0x07	; 7
     8e4:	90 78       	andi	r25, 0x80	; 128
     8e6:	99 23       	and	r25, r25
     8e8:	24 f4       	brge	.+8      	; 0x8f2 <oled_goto_nextpos+0x38>
     8ea:	01 97       	sbiw	r24, 0x01	; 1
     8ec:	88 6f       	ori	r24, 0xF8	; 248
     8ee:	9f 6f       	ori	r25, 0xFF	; 255
     8f0:	01 96       	adiw	r24, 0x01	; 1
     8f2:	80 93 84 02 	sts	0x0284, r24
     8f6:	08 95       	ret

000008f8 <oled_buffchar>:
     8f8:	0f 93       	push	r16
     8fa:	1f 93       	push	r17
     8fc:	cf 93       	push	r28
     8fe:	df 93       	push	r29
     900:	08 2f       	mov	r16, r24
     902:	80 32       	cpi	r24, 0x20	; 32
     904:	90 f1       	brcs	.+100    	; 0x96a <oled_buffchar+0x72>
     906:	20 91 85 02 	lds	r18, 0x0285
     90a:	22 23       	and	r18, r18
     90c:	74 f1       	brlt	.+92     	; 0x96a <oled_buffchar+0x72>
     90e:	80 91 84 02 	lds	r24, 0x0284
     912:	88 30       	cpi	r24, 0x08	; 8
     914:	50 f5       	brcc	.+84     	; 0x96a <oled_buffchar+0x72>
     916:	30 e0       	ldi	r19, 0x00	; 0
     918:	2c 5f       	subi	r18, 0xFC	; 252
     91a:	3f 4f       	sbci	r19, 0xFF	; 255
     91c:	20 38       	cpi	r18, 0x80	; 128
     91e:	31 05       	cpc	r19, r1
     920:	6c f1       	brlt	.+90     	; 0x97c <oled_buffchar+0x84>
     922:	c0 df       	rcall	.-128    	; 0x8a4 <oled_newline>
     924:	2b c0       	rjmp	.+86     	; 0x97c <oled_buffchar+0x84>
     926:	80 91 84 02 	lds	r24, 0x0284
     92a:	a0 91 85 02 	lds	r26, 0x0285
     92e:	b0 e0       	ldi	r27, 0x00	; 0
     930:	90 e8       	ldi	r25, 0x80	; 128
     932:	89 9f       	mul	r24, r25
     934:	a0 0d       	add	r26, r0
     936:	b1 1d       	adc	r27, r1
     938:	11 24       	eor	r1, r1
     93a:	80 91 16 01 	lds	r24, 0x0116
     93e:	90 91 17 01 	lds	r25, 0x0117
     942:	a8 0f       	add	r26, r24
     944:	b9 1f       	adc	r27, r25
     946:	ce 01       	movw	r24, r28
     948:	80 0f       	add	r24, r16
     94a:	91 1f       	adc	r25, r17
     94c:	e0 91 18 01 	lds	r30, 0x0118
     950:	f0 91 19 01 	lds	r31, 0x0119
     954:	e8 0f       	add	r30, r24
     956:	f9 1f       	adc	r31, r25
     958:	85 91       	lpm	r24, Z+
     95a:	94 91       	lpm	r25, Z
     95c:	8c 93       	st	X, r24
     95e:	ad df       	rcall	.-166    	; 0x8ba <oled_goto_nextpos>
     960:	21 96       	adiw	r28, 0x01	; 1
     962:	c4 30       	cpi	r28, 0x04	; 4
     964:	d1 05       	cpc	r29, r1
     966:	f9 f6       	brne	.-66     	; 0x926 <oled_buffchar+0x2e>
     968:	13 c0       	rjmp	.+38     	; 0x990 <oled_buffchar+0x98>
     96a:	0a 30       	cpi	r16, 0x0A	; 10
     96c:	11 f4       	brne	.+4      	; 0x972 <oled_buffchar+0x7a>
     96e:	9a df       	rcall	.-204    	; 0x8a4 <oled_newline>
     970:	21 c0       	rjmp	.+66     	; 0x9b4 <oled_buffchar+0xbc>
     972:	0d 30       	cpi	r16, 0x0D	; 13
     974:	f9 f4       	brne	.+62     	; 0x9b4 <oled_buffchar+0xbc>
     976:	10 92 85 02 	sts	0x0285, r1
     97a:	1c c0       	rjmp	.+56     	; 0x9b4 <oled_buffchar+0xbc>
     97c:	10 e0       	ldi	r17, 0x00	; 0
     97e:	00 52       	subi	r16, 0x20	; 32
     980:	11 09       	sbc	r17, r1
     982:	00 0f       	add	r16, r16
     984:	11 1f       	adc	r17, r17
     986:	00 0f       	add	r16, r16
     988:	11 1f       	adc	r17, r17
     98a:	c0 e0       	ldi	r28, 0x00	; 0
     98c:	d0 e0       	ldi	r29, 0x00	; 0
     98e:	cb cf       	rjmp	.-106    	; 0x926 <oled_buffchar+0x2e>
     990:	80 91 84 02 	lds	r24, 0x0284
     994:	e0 91 85 02 	lds	r30, 0x0285
     998:	f0 e0       	ldi	r31, 0x00	; 0
     99a:	90 e8       	ldi	r25, 0x80	; 128
     99c:	89 9f       	mul	r24, r25
     99e:	e0 0d       	add	r30, r0
     9a0:	f1 1d       	adc	r31, r1
     9a2:	11 24       	eor	r1, r1
     9a4:	80 91 16 01 	lds	r24, 0x0116
     9a8:	90 91 17 01 	lds	r25, 0x0117
     9ac:	e8 0f       	add	r30, r24
     9ae:	f9 1f       	adc	r31, r25
     9b0:	10 82       	st	Z, r1
     9b2:	83 df       	rcall	.-250    	; 0x8ba <oled_goto_nextpos>
     9b4:	df 91       	pop	r29
     9b6:	cf 91       	pop	r28
     9b8:	1f 91       	pop	r17
     9ba:	0f 91       	pop	r16
     9bc:	08 95       	ret

000009be <oled_putchar>:
     9be:	9c df       	rcall	.-200    	; 0x8f8 <oled_buffchar>
     9c0:	80 e0       	ldi	r24, 0x00	; 0
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	08 95       	ret

000009c6 <oled_fill>:
     9c6:	00 c0       	rjmp	.+0      	; 0x9c8 <oled_fill+0x2>
     9c8:	00 c0       	rjmp	.+0      	; 0x9ca <oled_fill+0x4>
     9ca:	00 00       	nop
     9cc:	91 e2       	ldi	r25, 0x21	; 33
     9ce:	90 93 00 10 	sts	0x1000, r25
     9d2:	00 c0       	rjmp	.+0      	; 0x9d4 <oled_fill+0xe>
     9d4:	00 c0       	rjmp	.+0      	; 0x9d6 <oled_fill+0x10>
     9d6:	00 00       	nop
     9d8:	10 92 00 10 	sts	0x1000, r1
     9dc:	00 c0       	rjmp	.+0      	; 0x9de <oled_fill+0x18>
     9de:	00 c0       	rjmp	.+0      	; 0x9e0 <oled_fill+0x1a>
     9e0:	00 00       	nop
     9e2:	9f e7       	ldi	r25, 0x7F	; 127
     9e4:	90 93 00 10 	sts	0x1000, r25
     9e8:	00 c0       	rjmp	.+0      	; 0x9ea <oled_fill+0x24>
     9ea:	00 c0       	rjmp	.+0      	; 0x9ec <oled_fill+0x26>
     9ec:	00 00       	nop
     9ee:	92 e2       	ldi	r25, 0x22	; 34
     9f0:	90 93 00 10 	sts	0x1000, r25
     9f4:	00 c0       	rjmp	.+0      	; 0x9f6 <oled_fill+0x30>
     9f6:	00 c0       	rjmp	.+0      	; 0x9f8 <oled_fill+0x32>
     9f8:	00 00       	nop
     9fa:	10 92 00 10 	sts	0x1000, r1
     9fe:	00 c0       	rjmp	.+0      	; 0xa00 <oled_fill+0x3a>
     a00:	00 c0       	rjmp	.+0      	; 0xa02 <oled_fill+0x3c>
     a02:	00 00       	nop
     a04:	97 e0       	ldi	r25, 0x07	; 7
     a06:	90 93 00 10 	sts	0x1000, r25
     a0a:	60 e0       	ldi	r22, 0x00	; 0
     a0c:	70 e0       	ldi	r23, 0x00	; 0
     a0e:	a0 e0       	ldi	r26, 0x00	; 0
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	15 c0       	rjmp	.+42     	; 0xa3e <oled_fill+0x78>
     a14:	a9 01       	movw	r20, r18
     a16:	46 0f       	add	r20, r22
     a18:	57 1f       	adc	r21, r23
     a1a:	e0 91 16 01 	lds	r30, 0x0116
     a1e:	f0 91 17 01 	lds	r31, 0x0117
     a22:	e4 0f       	add	r30, r20
     a24:	f5 1f       	adc	r31, r21
     a26:	80 83       	st	Z, r24
     a28:	2f 5f       	subi	r18, 0xFF	; 255
     a2a:	3f 4f       	sbci	r19, 0xFF	; 255
     a2c:	20 38       	cpi	r18, 0x80	; 128
     a2e:	31 05       	cpc	r19, r1
     a30:	89 f7       	brne	.-30     	; 0xa14 <oled_fill+0x4e>
     a32:	60 58       	subi	r22, 0x80	; 128
     a34:	7f 4f       	sbci	r23, 0xFF	; 255
     a36:	61 15       	cp	r22, r1
     a38:	24 e0       	ldi	r18, 0x04	; 4
     a3a:	72 07       	cpc	r23, r18
     a3c:	19 f0       	breq	.+6      	; 0xa44 <oled_fill+0x7e>
     a3e:	2a 2f       	mov	r18, r26
     a40:	39 2f       	mov	r19, r25
     a42:	e8 cf       	rjmp	.-48     	; 0xa14 <oled_fill+0x4e>
     a44:	08 95       	ret

00000a46 <oled_init>:
     a46:	f8 94       	cli
     a48:	00 c0       	rjmp	.+0      	; 0xa4a <oled_init+0x4>
     a4a:	00 c0       	rjmp	.+0      	; 0xa4c <oled_init+0x6>
     a4c:	00 00       	nop
     a4e:	8e ea       	ldi	r24, 0xAE	; 174
     a50:	80 93 00 10 	sts	0x1000, r24
     a54:	00 c0       	rjmp	.+0      	; 0xa56 <oled_init+0x10>
     a56:	00 c0       	rjmp	.+0      	; 0xa58 <oled_init+0x12>
     a58:	00 00       	nop
     a5a:	81 ea       	ldi	r24, 0xA1	; 161
     a5c:	80 93 00 10 	sts	0x1000, r24
     a60:	00 c0       	rjmp	.+0      	; 0xa62 <oled_init+0x1c>
     a62:	00 c0       	rjmp	.+0      	; 0xa64 <oled_init+0x1e>
     a64:	00 00       	nop
     a66:	8a ed       	ldi	r24, 0xDA	; 218
     a68:	80 93 00 10 	sts	0x1000, r24
     a6c:	00 c0       	rjmp	.+0      	; 0xa6e <oled_init+0x28>
     a6e:	00 c0       	rjmp	.+0      	; 0xa70 <oled_init+0x2a>
     a70:	00 00       	nop
     a72:	82 e1       	ldi	r24, 0x12	; 18
     a74:	80 93 00 10 	sts	0x1000, r24
     a78:	00 c0       	rjmp	.+0      	; 0xa7a <oled_init+0x34>
     a7a:	00 c0       	rjmp	.+0      	; 0xa7c <oled_init+0x36>
     a7c:	00 00       	nop
     a7e:	88 ec       	ldi	r24, 0xC8	; 200
     a80:	80 93 00 10 	sts	0x1000, r24
     a84:	00 c0       	rjmp	.+0      	; 0xa86 <oled_init+0x40>
     a86:	00 c0       	rjmp	.+0      	; 0xa88 <oled_init+0x42>
     a88:	00 00       	nop
     a8a:	88 ea       	ldi	r24, 0xA8	; 168
     a8c:	80 93 00 10 	sts	0x1000, r24
     a90:	00 c0       	rjmp	.+0      	; 0xa92 <oled_init+0x4c>
     a92:	00 c0       	rjmp	.+0      	; 0xa94 <oled_init+0x4e>
     a94:	00 00       	nop
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	80 93 00 10 	sts	0x1000, r24
     a9c:	00 c0       	rjmp	.+0      	; 0xa9e <oled_init+0x58>
     a9e:	00 c0       	rjmp	.+0      	; 0xaa0 <oled_init+0x5a>
     aa0:	00 00       	nop
     aa2:	85 ed       	ldi	r24, 0xD5	; 213
     aa4:	80 93 00 10 	sts	0x1000, r24
     aa8:	00 c0       	rjmp	.+0      	; 0xaaa <oled_init+0x64>
     aaa:	00 c0       	rjmp	.+0      	; 0xaac <oled_init+0x66>
     aac:	00 00       	nop
     aae:	80 e8       	ldi	r24, 0x80	; 128
     ab0:	80 93 00 10 	sts	0x1000, r24
     ab4:	00 c0       	rjmp	.+0      	; 0xab6 <oled_init+0x70>
     ab6:	00 c0       	rjmp	.+0      	; 0xab8 <oled_init+0x72>
     ab8:	00 00       	nop
     aba:	81 e8       	ldi	r24, 0x81	; 129
     abc:	80 93 00 10 	sts	0x1000, r24
     ac0:	00 c0       	rjmp	.+0      	; 0xac2 <oled_init+0x7c>
     ac2:	00 c0       	rjmp	.+0      	; 0xac4 <oled_init+0x7e>
     ac4:	00 00       	nop
     ac6:	80 e5       	ldi	r24, 0x50	; 80
     ac8:	80 93 00 10 	sts	0x1000, r24
     acc:	00 c0       	rjmp	.+0      	; 0xace <oled_init+0x88>
     ace:	00 c0       	rjmp	.+0      	; 0xad0 <oled_init+0x8a>
     ad0:	00 00       	nop
     ad2:	89 ed       	ldi	r24, 0xD9	; 217
     ad4:	80 93 00 10 	sts	0x1000, r24
     ad8:	00 c0       	rjmp	.+0      	; 0xada <oled_init+0x94>
     ada:	00 c0       	rjmp	.+0      	; 0xadc <oled_init+0x96>
     adc:	00 00       	nop
     ade:	81 e2       	ldi	r24, 0x21	; 33
     ae0:	80 93 00 10 	sts	0x1000, r24
     ae4:	00 c0       	rjmp	.+0      	; 0xae6 <oled_init+0xa0>
     ae6:	00 c0       	rjmp	.+0      	; 0xae8 <oled_init+0xa2>
     ae8:	00 00       	nop
     aea:	80 e2       	ldi	r24, 0x20	; 32
     aec:	80 93 00 10 	sts	0x1000, r24
     af0:	00 c0       	rjmp	.+0      	; 0xaf2 <oled_init+0xac>
     af2:	00 c0       	rjmp	.+0      	; 0xaf4 <oled_init+0xae>
     af4:	00 00       	nop
     af6:	10 92 00 10 	sts	0x1000, r1
     afa:	00 c0       	rjmp	.+0      	; 0xafc <oled_init+0xb6>
     afc:	00 c0       	rjmp	.+0      	; 0xafe <oled_init+0xb8>
     afe:	00 00       	nop
     b00:	8b ed       	ldi	r24, 0xDB	; 219
     b02:	80 93 00 10 	sts	0x1000, r24
     b06:	00 c0       	rjmp	.+0      	; 0xb08 <oled_init+0xc2>
     b08:	00 c0       	rjmp	.+0      	; 0xb0a <oled_init+0xc4>
     b0a:	00 00       	nop
     b0c:	80 e3       	ldi	r24, 0x30	; 48
     b0e:	80 93 00 10 	sts	0x1000, r24
     b12:	00 c0       	rjmp	.+0      	; 0xb14 <oled_init+0xce>
     b14:	00 c0       	rjmp	.+0      	; 0xb16 <oled_init+0xd0>
     b16:	00 00       	nop
     b18:	8d ea       	ldi	r24, 0xAD	; 173
     b1a:	80 93 00 10 	sts	0x1000, r24
     b1e:	00 c0       	rjmp	.+0      	; 0xb20 <oled_init+0xda>
     b20:	00 c0       	rjmp	.+0      	; 0xb22 <oled_init+0xdc>
     b22:	00 00       	nop
     b24:	10 92 00 10 	sts	0x1000, r1
     b28:	00 c0       	rjmp	.+0      	; 0xb2a <oled_init+0xe4>
     b2a:	00 c0       	rjmp	.+0      	; 0xb2c <oled_init+0xe6>
     b2c:	00 00       	nop
     b2e:	84 ea       	ldi	r24, 0xA4	; 164
     b30:	80 93 00 10 	sts	0x1000, r24
     b34:	00 c0       	rjmp	.+0      	; 0xb36 <oled_init+0xf0>
     b36:	00 c0       	rjmp	.+0      	; 0xb38 <oled_init+0xf2>
     b38:	00 00       	nop
     b3a:	86 ea       	ldi	r24, 0xA6	; 166
     b3c:	80 93 00 10 	sts	0x1000, r24
     b40:	00 c0       	rjmp	.+0      	; 0xb42 <oled_init+0xfc>
     b42:	00 c0       	rjmp	.+0      	; 0xb44 <oled_init+0xfe>
     b44:	00 00       	nop
     b46:	8f ea       	ldi	r24, 0xAF	; 175
     b48:	80 93 00 10 	sts	0x1000, r24
     b4c:	80 e0       	ldi	r24, 0x00	; 0
     b4e:	3b df       	rcall	.-394    	; 0x9c6 <oled_fill>
     b50:	a4 de       	rcall	.-696    	; 0x89a <oled_home>
     b52:	9a ce       	rjmp	.-716    	; 0x888 <oled_autorefresh_init>
     b54:	08 95       	ret

00000b56 <oled_update>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b56:	00 c0       	rjmp	.+0      	; 0xb58 <oled_update+0x2>
     b58:	00 c0       	rjmp	.+0      	; 0xb5a <oled_update+0x4>
     b5a:	00 00       	nop
	OCR0 = 39;
}

void write_c(uint8_t cmd){
	_delay_us(1);
	*((uint8_t *)OLED_C_ADR) = cmd;
     b5c:	81 e2       	ldi	r24, 0x21	; 33
     b5e:	80 93 00 10 	sts	0x1000, r24
     b62:	00 c0       	rjmp	.+0      	; 0xb64 <oled_update+0xe>
     b64:	00 c0       	rjmp	.+0      	; 0xb66 <oled_update+0x10>
     b66:	00 00       	nop
     b68:	10 92 00 10 	sts	0x1000, r1
     b6c:	00 c0       	rjmp	.+0      	; 0xb6e <oled_update+0x18>
     b6e:	00 c0       	rjmp	.+0      	; 0xb70 <oled_update+0x1a>
     b70:	00 00       	nop
     b72:	8f e7       	ldi	r24, 0x7F	; 127
     b74:	80 93 00 10 	sts	0x1000, r24
     b78:	00 c0       	rjmp	.+0      	; 0xb7a <oled_update+0x24>
     b7a:	00 c0       	rjmp	.+0      	; 0xb7c <oled_update+0x26>
     b7c:	00 00       	nop
     b7e:	82 e2       	ldi	r24, 0x22	; 34
     b80:	80 93 00 10 	sts	0x1000, r24
     b84:	00 c0       	rjmp	.+0      	; 0xb86 <oled_update+0x30>
     b86:	00 c0       	rjmp	.+0      	; 0xb88 <oled_update+0x32>
     b88:	00 00       	nop
     b8a:	10 92 00 10 	sts	0x1000, r1
     b8e:	00 c0       	rjmp	.+0      	; 0xb90 <oled_update+0x3a>
     b90:	00 c0       	rjmp	.+0      	; 0xb92 <oled_update+0x3c>
     b92:	00 00       	nop
     b94:	87 e0       	ldi	r24, 0x07	; 7
     b96:	80 93 00 10 	sts	0x1000, r24
     b9a:	00 c0       	rjmp	.+0      	; 0xb9c <oled_update+0x46>
     b9c:	00 c0       	rjmp	.+0      	; 0xb9e <oled_update+0x48>
     b9e:	00 00       	nop
     ba0:	10 92 00 10 	sts	0x1000, r1
     ba4:	00 c0       	rjmp	.+0      	; 0xba6 <oled_update+0x50>
     ba6:	00 c0       	rjmp	.+0      	; 0xba8 <oled_update+0x52>
     ba8:	00 00       	nop
     baa:	80 e1       	ldi	r24, 0x10	; 16
     bac:	80 93 00 10 	sts	0x1000, r24
     bb0:	40 e0       	ldi	r20, 0x00	; 0
     bb2:	50 e0       	ldi	r21, 0x00	; 0
		}
	}
}

//////////////////////////////////////////////////////////////////////////
void oled_update(){
     bb4:	70 e0       	ldi	r23, 0x00	; 0
     bb6:	60 e0       	ldi	r22, 0x00	; 0
	*((uint8_t *)OLED_C_ADR) = cmd;
}

void write_d(uint8_t data){
	_delay_us(1); // delay may be increased to 1000 to make debug easier, works without any delay
	*((uint8_t *)OLED_D_ADR) = data;
     bb8:	a1 e0       	ldi	r26, 0x01	; 1
     bba:	b0 e1       	ldi	r27, 0x10	; 16
     bbc:	18 c0       	rjmp	.+48     	; 0xbee <oled_update+0x98>
     bbe:	9c 01       	movw	r18, r24
     bc0:	24 0f       	add	r18, r20
     bc2:	35 1f       	adc	r19, r21
	write_c(SET_LOW_COL_ADR  | 0x00);
	write_c(SET_HIGH_COL_ADR | 0x00);
	
	for (int page = 0; page<OLED_PAGES; ++page){
		for (int seg = 0; seg<OLED_WIDTH; ++seg){
			write_d(buffer[page*OLED_WIDTH + seg]);
     bc4:	e0 91 16 01 	lds	r30, 0x0116
     bc8:	f0 91 17 01 	lds	r31, 0x0117
     bcc:	e2 0f       	add	r30, r18
     bce:	f3 1f       	adc	r31, r19
     bd0:	20 81       	ld	r18, Z
     bd2:	00 c0       	rjmp	.+0      	; 0xbd4 <oled_update+0x7e>
     bd4:	00 c0       	rjmp	.+0      	; 0xbd6 <oled_update+0x80>
     bd6:	00 00       	nop
	*((uint8_t *)OLED_C_ADR) = cmd;
}

void write_d(uint8_t data){
	_delay_us(1); // delay may be increased to 1000 to make debug easier, works without any delay
	*((uint8_t *)OLED_D_ADR) = data;
     bd8:	2c 93       	st	X, r18
	
	write_c(SET_LOW_COL_ADR  | 0x00);
	write_c(SET_HIGH_COL_ADR | 0x00);
	
	for (int page = 0; page<OLED_PAGES; ++page){
		for (int seg = 0; seg<OLED_WIDTH; ++seg){
     bda:	01 96       	adiw	r24, 0x01	; 1
     bdc:	80 38       	cpi	r24, 0x80	; 128
     bde:	91 05       	cpc	r25, r1
     be0:	71 f7       	brne	.-36     	; 0xbbe <oled_update+0x68>
     be2:	40 58       	subi	r20, 0x80	; 128
     be4:	5f 4f       	sbci	r21, 0xFF	; 255
	write_c(SET_PAGE_ADR);write_c(0x00); write_c(OLED_PAGES-1);
	
	write_c(SET_LOW_COL_ADR  | 0x00);
	write_c(SET_HIGH_COL_ADR | 0x00);
	
	for (int page = 0; page<OLED_PAGES; ++page){
     be6:	41 15       	cp	r20, r1
     be8:	84 e0       	ldi	r24, 0x04	; 4
     bea:	58 07       	cpc	r21, r24
     bec:	19 f0       	breq	.+6      	; 0xbf4 <oled_update+0x9e>
		}
	}
}

//////////////////////////////////////////////////////////////////////////
void oled_update(){
     bee:	87 2f       	mov	r24, r23
     bf0:	96 2f       	mov	r25, r22
     bf2:	e5 cf       	rjmp	.-54     	; 0xbbe <oled_update+0x68>
     bf4:	08 95       	ret

00000bf6 <__vector_17>:
uint8_t xpos = 0;
uint8_t ypos = 0;

FILE oled_out = FDEV_SETUP_STREAM(oled_putchar, NULL, _FDEV_SETUP_WRITE);

ISR(TIMER0_OVF_vect){
     bf6:	1f 92       	push	r1
     bf8:	0f 92       	push	r0
     bfa:	0f b6       	in	r0, 0x3f	; 63
     bfc:	0f 92       	push	r0
     bfe:	11 24       	eor	r1, r1
     c00:	2f 93       	push	r18
     c02:	3f 93       	push	r19
     c04:	4f 93       	push	r20
     c06:	5f 93       	push	r21
     c08:	6f 93       	push	r22
     c0a:	7f 93       	push	r23
     c0c:	8f 93       	push	r24
     c0e:	9f 93       	push	r25
     c10:	af 93       	push	r26
     c12:	bf 93       	push	r27
     c14:	ef 93       	push	r30
     c16:	ff 93       	push	r31
	oled_update();
     c18:	9e df       	rcall	.-196    	; 0xb56 <oled_update>
}
     c1a:	ff 91       	pop	r31
     c1c:	ef 91       	pop	r30
     c1e:	bf 91       	pop	r27
     c20:	af 91       	pop	r26
     c22:	9f 91       	pop	r25
     c24:	8f 91       	pop	r24
     c26:	7f 91       	pop	r23
     c28:	6f 91       	pop	r22
     c2a:	5f 91       	pop	r21
     c2c:	4f 91       	pop	r20
     c2e:	3f 91       	pop	r19
     c30:	2f 91       	pop	r18
     c32:	0f 90       	pop	r0
     c34:	0f be       	out	0x3f, r0	; 63
     c36:	0f 90       	pop	r0
     c38:	1f 90       	pop	r1
     c3a:	18 95       	reti

00000c3c <spi_ss_low>:
#include "spi_driver.h"
#include "avr/io.h"
#include <stdio.h>

void spi_ss_low(){
	PORTB &= ~(1 << PB4);
     c3c:	c4 98       	cbi	0x18, 4	; 24
     c3e:	08 95       	ret

00000c40 <spi_ss_high>:
}

void spi_ss_high(){
	PORTB |= (1 << PB4);
     c40:	c4 9a       	sbi	0x18, 4	; 24
     c42:	08 95       	ret

00000c44 <spi_init>:

/// Initialize Atmega162 as SPI master
void spi_init()
{
	// setup IO pins
	DDRB |= (1<<DDB4 | 1<<DDB5 | 1<<DDB7);
     c44:	87 b3       	in	r24, 0x17	; 23
     c46:	80 6b       	ori	r24, 0xB0	; 176
     c48:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1<<DDB6); // not necessary
     c4a:	be 98       	cbi	0x17, 6	; 23
	
	// setup SPI
	SPCR = (1<<SPE | 1<<MSTR | 1<<SPR0 | 1<<CPOL | 1<<CPHA) & ~(/*1<<CPOL | 1<<CPHA |*/ 1<<DORD);
     c4c:	8d e5       	ldi	r24, 0x5D	; 93
     c4e:	8d b9       	out	0x0d, r24	; 13
     c50:	08 95       	ret

00000c52 <spi_transmit>:
}


uint8_t spi_transmit(uint8_t data)
{
	SPDR = data;
     c52:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
     c54:	77 9b       	sbis	0x0e, 7	; 14
     c56:	fe cf       	rjmp	.-4      	; 0xc54 <spi_transmit+0x2>
	
	return SPDR;
     c58:	8f b1       	in	r24, 0x0f	; 15
     c5a:	08 95       	ret

00000c5c <uart_send>:

}

/// Busy wait transmission of msg
int uart_send(unsigned char msg){
	while (!(UCSR0A & (1 << UDRE0)));
     c5c:	5d 9b       	sbis	0x0b, 5	; 11
     c5e:	fe cf       	rjmp	.-4      	; 0xc5c <uart_send>
	UDR0 = msg;
     c60:	8c b9       	out	0x0c, r24	; 12
	return 0;
}
     c62:	80 e0       	ldi	r24, 0x00	; 0
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	08 95       	ret

00000c68 <uart_recv>:


/// Read data from buffer
unsigned char uart_recv(){
	char returnval = 0;
	if(recvhead != recvtail)
     c68:	20 91 88 02 	lds	r18, 0x0288
     c6c:	30 91 89 02 	lds	r19, 0x0289
     c70:	80 91 86 02 	lds	r24, 0x0286
     c74:	90 91 87 02 	lds	r25, 0x0287
     c78:	28 17       	cp	r18, r24
     c7a:	39 07       	cpc	r19, r25
     c7c:	11 f1       	breq	.+68     	; 0xcc2 <uart_recv+0x5a>
	{
		returnval = recv_buffer[recvtail++];
     c7e:	80 91 86 02 	lds	r24, 0x0286
     c82:	90 91 87 02 	lds	r25, 0x0287
     c86:	9c 01       	movw	r18, r24
     c88:	2f 5f       	subi	r18, 0xFF	; 255
     c8a:	3f 4f       	sbci	r19, 0xFF	; 255
     c8c:	30 93 87 02 	sts	0x0287, r19
     c90:	20 93 86 02 	sts	0x0286, r18
     c94:	fc 01       	movw	r30, r24
     c96:	e6 57       	subi	r30, 0x76	; 118
     c98:	fd 4f       	sbci	r31, 0xFD	; 253
     c9a:	80 81       	ld	r24, Z
		recvtail = recvtail%BUFFER_MAX;
     c9c:	20 91 86 02 	lds	r18, 0x0286
     ca0:	30 91 87 02 	lds	r19, 0x0287
     ca4:	2f 77       	andi	r18, 0x7F	; 127
     ca6:	30 78       	andi	r19, 0x80	; 128
     ca8:	33 23       	and	r19, r19
     caa:	34 f4       	brge	.+12     	; 0xcb8 <uart_recv+0x50>
     cac:	21 50       	subi	r18, 0x01	; 1
     cae:	31 09       	sbc	r19, r1
     cb0:	20 68       	ori	r18, 0x80	; 128
     cb2:	3f 6f       	ori	r19, 0xFF	; 255
     cb4:	2f 5f       	subi	r18, 0xFF	; 255
     cb6:	3f 4f       	sbci	r19, 0xFF	; 255
     cb8:	30 93 87 02 	sts	0x0287, r19
     cbc:	20 93 86 02 	sts	0x0286, r18
     cc0:	08 95       	ret
}


/// Read data from buffer
unsigned char uart_recv(){
	char returnval = 0;
     cc2:	80 e0       	ldi	r24, 0x00	; 0
	{
		returnval = recv_buffer[recvtail++];
		recvtail = recvtail%BUFFER_MAX;
	}
	return returnval;
}
     cc4:	08 95       	ret

00000cc6 <__vector_19>:
volatile char recv_buffer[BUFFER_MAX]; /*! Buffer for storing recieved data*/
volatile int recvhead = 0; /*! Head of buffer. Where next recieved byte will be placed. */
volatile int recvtail = 0; /*! Tail of buffer. Where next read will occour. */

/// Interrupt vector for Rx. Place recieved data into buffer.
ISR(USART0_RXC_vect){
     cc6:	1f 92       	push	r1
     cc8:	0f 92       	push	r0
     cca:	0f b6       	in	r0, 0x3f	; 63
     ccc:	0f 92       	push	r0
     cce:	11 24       	eor	r1, r1
     cd0:	2f 93       	push	r18
     cd2:	3f 93       	push	r19
     cd4:	4f 93       	push	r20
     cd6:	8f 93       	push	r24
     cd8:	9f 93       	push	r25
     cda:	ef 93       	push	r30
     cdc:	ff 93       	push	r31
	cli();
     cde:	f8 94       	cli
	char input = UDR0;
     ce0:	4c b1       	in	r20, 0x0c	; 12
	if((recvhead+1)%BUFFER_MAX != recvtail){		// Sjekk at bufferen ikke er full
     ce2:	80 91 88 02 	lds	r24, 0x0288
     ce6:	90 91 89 02 	lds	r25, 0x0289
     cea:	20 91 86 02 	lds	r18, 0x0286
     cee:	30 91 87 02 	lds	r19, 0x0287
     cf2:	01 96       	adiw	r24, 0x01	; 1
     cf4:	8f 77       	andi	r24, 0x7F	; 127
     cf6:	90 78       	andi	r25, 0x80	; 128
     cf8:	99 23       	and	r25, r25
     cfa:	24 f4       	brge	.+8      	; 0xd04 <__vector_19+0x3e>
     cfc:	01 97       	sbiw	r24, 0x01	; 1
     cfe:	80 68       	ori	r24, 0x80	; 128
     d00:	9f 6f       	ori	r25, 0xFF	; 255
     d02:	01 96       	adiw	r24, 0x01	; 1
     d04:	82 17       	cp	r24, r18
     d06:	93 07       	cpc	r25, r19
     d08:	c1 f0       	breq	.+48     	; 0xd3a <__vector_19+0x74>
		recv_buffer[recvhead] = input;				// If so, legg inn byte
     d0a:	e0 91 88 02 	lds	r30, 0x0288
     d0e:	f0 91 89 02 	lds	r31, 0x0289
     d12:	e6 57       	subi	r30, 0x76	; 118
     d14:	fd 4f       	sbci	r31, 0xFD	; 253
     d16:	40 83       	st	Z, r20
		recvhead = (recvhead+1)%BUFFER_MAX;
     d18:	80 91 88 02 	lds	r24, 0x0288
     d1c:	90 91 89 02 	lds	r25, 0x0289
     d20:	01 96       	adiw	r24, 0x01	; 1
     d22:	8f 77       	andi	r24, 0x7F	; 127
     d24:	90 78       	andi	r25, 0x80	; 128
     d26:	99 23       	and	r25, r25
     d28:	24 f4       	brge	.+8      	; 0xd32 <__vector_19+0x6c>
     d2a:	01 97       	sbiw	r24, 0x01	; 1
     d2c:	80 68       	ori	r24, 0x80	; 128
     d2e:	9f 6f       	ori	r25, 0xFF	; 255
     d30:	01 96       	adiw	r24, 0x01	; 1
     d32:	90 93 89 02 	sts	0x0289, r25
     d36:	80 93 88 02 	sts	0x0288, r24
	}
	sei();
     d3a:	78 94       	sei
}
     d3c:	ff 91       	pop	r31
     d3e:	ef 91       	pop	r30
     d40:	9f 91       	pop	r25
     d42:	8f 91       	pop	r24
     d44:	4f 91       	pop	r20
     d46:	3f 91       	pop	r19
     d48:	2f 91       	pop	r18
     d4a:	0f 90       	pop	r0
     d4c:	0f be       	out	0x3f, r0	; 63
     d4e:	0f 90       	pop	r0
     d50:	1f 90       	pop	r1
     d52:	18 95       	reti

00000d54 <__vector_23>:

///\todo remove interrupt from Tx
ISR(USART0_TXC_vect){
     d54:	1f 92       	push	r1
     d56:	0f 92       	push	r0
     d58:	0f b6       	in	r0, 0x3f	; 63
     d5a:	0f 92       	push	r0
     d5c:	11 24       	eor	r1, r1
	
}
     d5e:	0f 90       	pop	r0
     d60:	0f be       	out	0x3f, r0	; 63
     d62:	0f 90       	pop	r0
     d64:	1f 90       	pop	r1
     d66:	18 95       	reti

00000d68 <uart_init>:

///Initialize uart
void uart_init(){
	// set baud rate
	int timerval = (F_CPU/(16*BAUD) - 1);
	UBRR0L = timerval&0xFF;
     d68:	8f e1       	ldi	r24, 0x1F	; 31
     d6a:	89 b9       	out	0x09, r24	; 9
	UBRR0H = (timerval>>8)&0x0F;
     d6c:	10 bc       	out	0x20, r1	; 32
	
	// enable interupts on Rx & Tx, and enable Rx & Tx 
	UCSR0B |= (1 << RXCIE0) | (1 << TXCIE0) | (1 << RXEN0) | (1 << TXEN0);
     d6e:	8a b1       	in	r24, 0x0a	; 10
     d70:	88 6d       	ori	r24, 0xD8	; 216
     d72:	8a b9       	out	0x0a, r24	; 10
	
	// enable async mode
	UCSR0C &= ~(1 << UMSEL0);
     d74:	80 b5       	in	r24, 0x20	; 32
     d76:	8f 7b       	andi	r24, 0xBF	; 191
     d78:	80 bd       	out	0x20, r24	; 32
	
	// parity disable
	UCSR0C &= ~((1 << UPM00) | (1 << UPM10));
     d7a:	80 b5       	in	r24, 0x20	; 32
     d7c:	8f 7e       	andi	r24, 0xEF	; 239
     d7e:	80 bd       	out	0x20, r24	; 32
	
	// stop bit to 1
	UCSR0C &= ~(1 << USBS0);
     d80:	80 b5       	in	r24, 0x20	; 32
     d82:	87 7f       	andi	r24, 0xF7	; 247
     d84:	80 bd       	out	0x20, r24	; 32
     d86:	08 95       	ret

00000d88 <__divmodhi4>:
     d88:	97 fb       	bst	r25, 7
     d8a:	07 2e       	mov	r0, r23
     d8c:	16 f4       	brtc	.+4      	; 0xd92 <__divmodhi4+0xa>
     d8e:	00 94       	com	r0
     d90:	06 d0       	rcall	.+12     	; 0xd9e <__divmodhi4_neg1>
     d92:	77 fd       	sbrc	r23, 7
     d94:	08 d0       	rcall	.+16     	; 0xda6 <__divmodhi4_neg2>
     d96:	0b d0       	rcall	.+22     	; 0xdae <__udivmodhi4>
     d98:	07 fc       	sbrc	r0, 7
     d9a:	05 d0       	rcall	.+10     	; 0xda6 <__divmodhi4_neg2>
     d9c:	3e f4       	brtc	.+14     	; 0xdac <__divmodhi4_exit>

00000d9e <__divmodhi4_neg1>:
     d9e:	90 95       	com	r25
     da0:	81 95       	neg	r24
     da2:	9f 4f       	sbci	r25, 0xFF	; 255
     da4:	08 95       	ret

00000da6 <__divmodhi4_neg2>:
     da6:	70 95       	com	r23
     da8:	61 95       	neg	r22
     daa:	7f 4f       	sbci	r23, 0xFF	; 255

00000dac <__divmodhi4_exit>:
     dac:	08 95       	ret

00000dae <__udivmodhi4>:
     dae:	aa 1b       	sub	r26, r26
     db0:	bb 1b       	sub	r27, r27
     db2:	51 e1       	ldi	r21, 0x11	; 17
     db4:	07 c0       	rjmp	.+14     	; 0xdc4 <__udivmodhi4_ep>

00000db6 <__udivmodhi4_loop>:
     db6:	aa 1f       	adc	r26, r26
     db8:	bb 1f       	adc	r27, r27
     dba:	a6 17       	cp	r26, r22
     dbc:	b7 07       	cpc	r27, r23
     dbe:	10 f0       	brcs	.+4      	; 0xdc4 <__udivmodhi4_ep>
     dc0:	a6 1b       	sub	r26, r22
     dc2:	b7 0b       	sbc	r27, r23

00000dc4 <__udivmodhi4_ep>:
     dc4:	88 1f       	adc	r24, r24
     dc6:	99 1f       	adc	r25, r25
     dc8:	5a 95       	dec	r21
     dca:	a9 f7       	brne	.-22     	; 0xdb6 <__udivmodhi4_loop>
     dcc:	80 95       	com	r24
     dce:	90 95       	com	r25
     dd0:	bc 01       	movw	r22, r24
     dd2:	cd 01       	movw	r24, r26
     dd4:	08 95       	ret

00000dd6 <malloc>:
     dd6:	cf 93       	push	r28
     dd8:	df 93       	push	r29
     dda:	82 30       	cpi	r24, 0x02	; 2
     ddc:	91 05       	cpc	r25, r1
     dde:	10 f4       	brcc	.+4      	; 0xde4 <malloc+0xe>
     de0:	82 e0       	ldi	r24, 0x02	; 2
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	e0 91 0c 03 	lds	r30, 0x030C
     de8:	f0 91 0d 03 	lds	r31, 0x030D
     dec:	20 e0       	ldi	r18, 0x00	; 0
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	a0 e0       	ldi	r26, 0x00	; 0
     df2:	b0 e0       	ldi	r27, 0x00	; 0
     df4:	30 97       	sbiw	r30, 0x00	; 0
     df6:	39 f1       	breq	.+78     	; 0xe46 <malloc+0x70>
     df8:	40 81       	ld	r20, Z
     dfa:	51 81       	ldd	r21, Z+1	; 0x01
     dfc:	48 17       	cp	r20, r24
     dfe:	59 07       	cpc	r21, r25
     e00:	b8 f0       	brcs	.+46     	; 0xe30 <malloc+0x5a>
     e02:	48 17       	cp	r20, r24
     e04:	59 07       	cpc	r21, r25
     e06:	71 f4       	brne	.+28     	; 0xe24 <malloc+0x4e>
     e08:	82 81       	ldd	r24, Z+2	; 0x02
     e0a:	93 81       	ldd	r25, Z+3	; 0x03
     e0c:	10 97       	sbiw	r26, 0x00	; 0
     e0e:	29 f0       	breq	.+10     	; 0xe1a <malloc+0x44>
     e10:	13 96       	adiw	r26, 0x03	; 3
     e12:	9c 93       	st	X, r25
     e14:	8e 93       	st	-X, r24
     e16:	12 97       	sbiw	r26, 0x02	; 2
     e18:	2c c0       	rjmp	.+88     	; 0xe72 <malloc+0x9c>
     e1a:	90 93 0d 03 	sts	0x030D, r25
     e1e:	80 93 0c 03 	sts	0x030C, r24
     e22:	27 c0       	rjmp	.+78     	; 0xe72 <malloc+0x9c>
     e24:	21 15       	cp	r18, r1
     e26:	31 05       	cpc	r19, r1
     e28:	31 f0       	breq	.+12     	; 0xe36 <malloc+0x60>
     e2a:	42 17       	cp	r20, r18
     e2c:	53 07       	cpc	r21, r19
     e2e:	18 f0       	brcs	.+6      	; 0xe36 <malloc+0x60>
     e30:	a9 01       	movw	r20, r18
     e32:	db 01       	movw	r26, r22
     e34:	01 c0       	rjmp	.+2      	; 0xe38 <malloc+0x62>
     e36:	ef 01       	movw	r28, r30
     e38:	9a 01       	movw	r18, r20
     e3a:	bd 01       	movw	r22, r26
     e3c:	df 01       	movw	r26, r30
     e3e:	02 80       	ldd	r0, Z+2	; 0x02
     e40:	f3 81       	ldd	r31, Z+3	; 0x03
     e42:	e0 2d       	mov	r30, r0
     e44:	d7 cf       	rjmp	.-82     	; 0xdf4 <malloc+0x1e>
     e46:	21 15       	cp	r18, r1
     e48:	31 05       	cpc	r19, r1
     e4a:	f9 f0       	breq	.+62     	; 0xe8a <malloc+0xb4>
     e4c:	28 1b       	sub	r18, r24
     e4e:	39 0b       	sbc	r19, r25
     e50:	24 30       	cpi	r18, 0x04	; 4
     e52:	31 05       	cpc	r19, r1
     e54:	80 f4       	brcc	.+32     	; 0xe76 <malloc+0xa0>
     e56:	8a 81       	ldd	r24, Y+2	; 0x02
     e58:	9b 81       	ldd	r25, Y+3	; 0x03
     e5a:	61 15       	cp	r22, r1
     e5c:	71 05       	cpc	r23, r1
     e5e:	21 f0       	breq	.+8      	; 0xe68 <malloc+0x92>
     e60:	fb 01       	movw	r30, r22
     e62:	93 83       	std	Z+3, r25	; 0x03
     e64:	82 83       	std	Z+2, r24	; 0x02
     e66:	04 c0       	rjmp	.+8      	; 0xe70 <malloc+0x9a>
     e68:	90 93 0d 03 	sts	0x030D, r25
     e6c:	80 93 0c 03 	sts	0x030C, r24
     e70:	fe 01       	movw	r30, r28
     e72:	32 96       	adiw	r30, 0x02	; 2
     e74:	44 c0       	rjmp	.+136    	; 0xefe <malloc+0x128>
     e76:	fe 01       	movw	r30, r28
     e78:	e2 0f       	add	r30, r18
     e7a:	f3 1f       	adc	r31, r19
     e7c:	81 93       	st	Z+, r24
     e7e:	91 93       	st	Z+, r25
     e80:	22 50       	subi	r18, 0x02	; 2
     e82:	31 09       	sbc	r19, r1
     e84:	39 83       	std	Y+1, r19	; 0x01
     e86:	28 83       	st	Y, r18
     e88:	3a c0       	rjmp	.+116    	; 0xefe <malloc+0x128>
     e8a:	20 91 0a 03 	lds	r18, 0x030A
     e8e:	30 91 0b 03 	lds	r19, 0x030B
     e92:	23 2b       	or	r18, r19
     e94:	41 f4       	brne	.+16     	; 0xea6 <malloc+0xd0>
     e96:	20 91 02 01 	lds	r18, 0x0102
     e9a:	30 91 03 01 	lds	r19, 0x0103
     e9e:	30 93 0b 03 	sts	0x030B, r19
     ea2:	20 93 0a 03 	sts	0x030A, r18
     ea6:	20 91 00 01 	lds	r18, 0x0100
     eaa:	30 91 01 01 	lds	r19, 0x0101
     eae:	21 15       	cp	r18, r1
     eb0:	31 05       	cpc	r19, r1
     eb2:	41 f4       	brne	.+16     	; 0xec4 <malloc+0xee>
     eb4:	2d b7       	in	r18, 0x3d	; 61
     eb6:	3e b7       	in	r19, 0x3e	; 62
     eb8:	40 91 04 01 	lds	r20, 0x0104
     ebc:	50 91 05 01 	lds	r21, 0x0105
     ec0:	24 1b       	sub	r18, r20
     ec2:	35 0b       	sbc	r19, r21
     ec4:	e0 91 0a 03 	lds	r30, 0x030A
     ec8:	f0 91 0b 03 	lds	r31, 0x030B
     ecc:	e2 17       	cp	r30, r18
     ece:	f3 07       	cpc	r31, r19
     ed0:	a0 f4       	brcc	.+40     	; 0xefa <malloc+0x124>
     ed2:	2e 1b       	sub	r18, r30
     ed4:	3f 0b       	sbc	r19, r31
     ed6:	28 17       	cp	r18, r24
     ed8:	39 07       	cpc	r19, r25
     eda:	78 f0       	brcs	.+30     	; 0xefa <malloc+0x124>
     edc:	ac 01       	movw	r20, r24
     ede:	4e 5f       	subi	r20, 0xFE	; 254
     ee0:	5f 4f       	sbci	r21, 0xFF	; 255
     ee2:	24 17       	cp	r18, r20
     ee4:	35 07       	cpc	r19, r21
     ee6:	48 f0       	brcs	.+18     	; 0xefa <malloc+0x124>
     ee8:	4e 0f       	add	r20, r30
     eea:	5f 1f       	adc	r21, r31
     eec:	50 93 0b 03 	sts	0x030B, r21
     ef0:	40 93 0a 03 	sts	0x030A, r20
     ef4:	81 93       	st	Z+, r24
     ef6:	91 93       	st	Z+, r25
     ef8:	02 c0       	rjmp	.+4      	; 0xefe <malloc+0x128>
     efa:	e0 e0       	ldi	r30, 0x00	; 0
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	cf 01       	movw	r24, r30
     f00:	df 91       	pop	r29
     f02:	cf 91       	pop	r28
     f04:	08 95       	ret

00000f06 <free>:
     f06:	cf 93       	push	r28
     f08:	df 93       	push	r29
     f0a:	00 97       	sbiw	r24, 0x00	; 0
     f0c:	09 f4       	brne	.+2      	; 0xf10 <free+0xa>
     f0e:	87 c0       	rjmp	.+270    	; 0x101e <free+0x118>
     f10:	fc 01       	movw	r30, r24
     f12:	32 97       	sbiw	r30, 0x02	; 2
     f14:	13 82       	std	Z+3, r1	; 0x03
     f16:	12 82       	std	Z+2, r1	; 0x02
     f18:	c0 91 0c 03 	lds	r28, 0x030C
     f1c:	d0 91 0d 03 	lds	r29, 0x030D
     f20:	20 97       	sbiw	r28, 0x00	; 0
     f22:	81 f4       	brne	.+32     	; 0xf44 <free+0x3e>
     f24:	20 81       	ld	r18, Z
     f26:	31 81       	ldd	r19, Z+1	; 0x01
     f28:	28 0f       	add	r18, r24
     f2a:	39 1f       	adc	r19, r25
     f2c:	80 91 0a 03 	lds	r24, 0x030A
     f30:	90 91 0b 03 	lds	r25, 0x030B
     f34:	82 17       	cp	r24, r18
     f36:	93 07       	cpc	r25, r19
     f38:	79 f5       	brne	.+94     	; 0xf98 <free+0x92>
     f3a:	f0 93 0b 03 	sts	0x030B, r31
     f3e:	e0 93 0a 03 	sts	0x030A, r30
     f42:	6d c0       	rjmp	.+218    	; 0x101e <free+0x118>
     f44:	de 01       	movw	r26, r28
     f46:	20 e0       	ldi	r18, 0x00	; 0
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	ae 17       	cp	r26, r30
     f4c:	bf 07       	cpc	r27, r31
     f4e:	50 f4       	brcc	.+20     	; 0xf64 <free+0x5e>
     f50:	12 96       	adiw	r26, 0x02	; 2
     f52:	4d 91       	ld	r20, X+
     f54:	5c 91       	ld	r21, X
     f56:	13 97       	sbiw	r26, 0x03	; 3
     f58:	9d 01       	movw	r18, r26
     f5a:	41 15       	cp	r20, r1
     f5c:	51 05       	cpc	r21, r1
     f5e:	09 f1       	breq	.+66     	; 0xfa2 <free+0x9c>
     f60:	da 01       	movw	r26, r20
     f62:	f3 cf       	rjmp	.-26     	; 0xf4a <free+0x44>
     f64:	b3 83       	std	Z+3, r27	; 0x03
     f66:	a2 83       	std	Z+2, r26	; 0x02
     f68:	40 81       	ld	r20, Z
     f6a:	51 81       	ldd	r21, Z+1	; 0x01
     f6c:	84 0f       	add	r24, r20
     f6e:	95 1f       	adc	r25, r21
     f70:	8a 17       	cp	r24, r26
     f72:	9b 07       	cpc	r25, r27
     f74:	71 f4       	brne	.+28     	; 0xf92 <free+0x8c>
     f76:	8d 91       	ld	r24, X+
     f78:	9c 91       	ld	r25, X
     f7a:	11 97       	sbiw	r26, 0x01	; 1
     f7c:	84 0f       	add	r24, r20
     f7e:	95 1f       	adc	r25, r21
     f80:	02 96       	adiw	r24, 0x02	; 2
     f82:	91 83       	std	Z+1, r25	; 0x01
     f84:	80 83       	st	Z, r24
     f86:	12 96       	adiw	r26, 0x02	; 2
     f88:	8d 91       	ld	r24, X+
     f8a:	9c 91       	ld	r25, X
     f8c:	13 97       	sbiw	r26, 0x03	; 3
     f8e:	93 83       	std	Z+3, r25	; 0x03
     f90:	82 83       	std	Z+2, r24	; 0x02
     f92:	21 15       	cp	r18, r1
     f94:	31 05       	cpc	r19, r1
     f96:	29 f4       	brne	.+10     	; 0xfa2 <free+0x9c>
     f98:	f0 93 0d 03 	sts	0x030D, r31
     f9c:	e0 93 0c 03 	sts	0x030C, r30
     fa0:	3e c0       	rjmp	.+124    	; 0x101e <free+0x118>
     fa2:	d9 01       	movw	r26, r18
     fa4:	13 96       	adiw	r26, 0x03	; 3
     fa6:	fc 93       	st	X, r31
     fa8:	ee 93       	st	-X, r30
     faa:	12 97       	sbiw	r26, 0x02	; 2
     fac:	4d 91       	ld	r20, X+
     fae:	5d 91       	ld	r21, X+
     fb0:	a4 0f       	add	r26, r20
     fb2:	b5 1f       	adc	r27, r21
     fb4:	ea 17       	cp	r30, r26
     fb6:	fb 07       	cpc	r31, r27
     fb8:	79 f4       	brne	.+30     	; 0xfd8 <free+0xd2>
     fba:	80 81       	ld	r24, Z
     fbc:	91 81       	ldd	r25, Z+1	; 0x01
     fbe:	84 0f       	add	r24, r20
     fc0:	95 1f       	adc	r25, r21
     fc2:	02 96       	adiw	r24, 0x02	; 2
     fc4:	d9 01       	movw	r26, r18
     fc6:	11 96       	adiw	r26, 0x01	; 1
     fc8:	9c 93       	st	X, r25
     fca:	8e 93       	st	-X, r24
     fcc:	82 81       	ldd	r24, Z+2	; 0x02
     fce:	93 81       	ldd	r25, Z+3	; 0x03
     fd0:	13 96       	adiw	r26, 0x03	; 3
     fd2:	9c 93       	st	X, r25
     fd4:	8e 93       	st	-X, r24
     fd6:	12 97       	sbiw	r26, 0x02	; 2
     fd8:	e0 e0       	ldi	r30, 0x00	; 0
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	8a 81       	ldd	r24, Y+2	; 0x02
     fde:	9b 81       	ldd	r25, Y+3	; 0x03
     fe0:	00 97       	sbiw	r24, 0x00	; 0
     fe2:	19 f0       	breq	.+6      	; 0xfea <free+0xe4>
     fe4:	fe 01       	movw	r30, r28
     fe6:	ec 01       	movw	r28, r24
     fe8:	f9 cf       	rjmp	.-14     	; 0xfdc <free+0xd6>
     fea:	ce 01       	movw	r24, r28
     fec:	02 96       	adiw	r24, 0x02	; 2
     fee:	28 81       	ld	r18, Y
     ff0:	39 81       	ldd	r19, Y+1	; 0x01
     ff2:	82 0f       	add	r24, r18
     ff4:	93 1f       	adc	r25, r19
     ff6:	20 91 0a 03 	lds	r18, 0x030A
     ffa:	30 91 0b 03 	lds	r19, 0x030B
     ffe:	28 17       	cp	r18, r24
    1000:	39 07       	cpc	r19, r25
    1002:	69 f4       	brne	.+26     	; 0x101e <free+0x118>
    1004:	30 97       	sbiw	r30, 0x00	; 0
    1006:	29 f4       	brne	.+10     	; 0x1012 <free+0x10c>
    1008:	10 92 0d 03 	sts	0x030D, r1
    100c:	10 92 0c 03 	sts	0x030C, r1
    1010:	02 c0       	rjmp	.+4      	; 0x1016 <free+0x110>
    1012:	13 82       	std	Z+3, r1	; 0x03
    1014:	12 82       	std	Z+2, r1	; 0x02
    1016:	d0 93 0b 03 	sts	0x030B, r29
    101a:	c0 93 0a 03 	sts	0x030A, r28
    101e:	df 91       	pop	r29
    1020:	cf 91       	pop	r28
    1022:	08 95       	ret

00001024 <strncpy>:
    1024:	fb 01       	movw	r30, r22
    1026:	dc 01       	movw	r26, r24
    1028:	41 50       	subi	r20, 0x01	; 1
    102a:	50 40       	sbci	r21, 0x00	; 0
    102c:	48 f0       	brcs	.+18     	; 0x1040 <strncpy+0x1c>
    102e:	01 90       	ld	r0, Z+
    1030:	0d 92       	st	X+, r0
    1032:	00 20       	and	r0, r0
    1034:	c9 f7       	brne	.-14     	; 0x1028 <strncpy+0x4>
    1036:	01 c0       	rjmp	.+2      	; 0x103a <strncpy+0x16>
    1038:	1d 92       	st	X+, r1
    103a:	41 50       	subi	r20, 0x01	; 1
    103c:	50 40       	sbci	r21, 0x00	; 0
    103e:	e0 f7       	brcc	.-8      	; 0x1038 <strncpy+0x14>
    1040:	08 95       	ret

00001042 <fprintf>:
    1042:	a0 e0       	ldi	r26, 0x00	; 0
    1044:	b0 e0       	ldi	r27, 0x00	; 0
    1046:	e6 e2       	ldi	r30, 0x26	; 38
    1048:	f8 e0       	ldi	r31, 0x08	; 8
    104a:	b5 c2       	rjmp	.+1386   	; 0x15b6 <__prologue_saves__+0x20>
    104c:	ae 01       	movw	r20, r28
    104e:	47 5f       	subi	r20, 0xF7	; 247
    1050:	5f 4f       	sbci	r21, 0xFF	; 255
    1052:	6f 81       	ldd	r22, Y+7	; 0x07
    1054:	78 85       	ldd	r23, Y+8	; 0x08
    1056:	8d 81       	ldd	r24, Y+5	; 0x05
    1058:	9e 81       	ldd	r25, Y+6	; 0x06
    105a:	66 d0       	rcall	.+204    	; 0x1128 <vfprintf>
    105c:	e2 e0       	ldi	r30, 0x02	; 2
    105e:	c7 c2       	rjmp	.+1422   	; 0x15ee <__epilogue_restores__+0x20>

00001060 <fputc>:
    1060:	0f 93       	push	r16
    1062:	1f 93       	push	r17
    1064:	cf 93       	push	r28
    1066:	df 93       	push	r29
    1068:	18 2f       	mov	r17, r24
    106a:	09 2f       	mov	r16, r25
    106c:	eb 01       	movw	r28, r22
    106e:	8b 81       	ldd	r24, Y+3	; 0x03
    1070:	81 fd       	sbrc	r24, 1
    1072:	03 c0       	rjmp	.+6      	; 0x107a <fputc+0x1a>
    1074:	8f ef       	ldi	r24, 0xFF	; 255
    1076:	9f ef       	ldi	r25, 0xFF	; 255
    1078:	20 c0       	rjmp	.+64     	; 0x10ba <fputc+0x5a>
    107a:	82 ff       	sbrs	r24, 2
    107c:	10 c0       	rjmp	.+32     	; 0x109e <fputc+0x3e>
    107e:	4e 81       	ldd	r20, Y+6	; 0x06
    1080:	5f 81       	ldd	r21, Y+7	; 0x07
    1082:	2c 81       	ldd	r18, Y+4	; 0x04
    1084:	3d 81       	ldd	r19, Y+5	; 0x05
    1086:	42 17       	cp	r20, r18
    1088:	53 07       	cpc	r21, r19
    108a:	7c f4       	brge	.+30     	; 0x10aa <fputc+0x4a>
    108c:	e8 81       	ld	r30, Y
    108e:	f9 81       	ldd	r31, Y+1	; 0x01
    1090:	9f 01       	movw	r18, r30
    1092:	2f 5f       	subi	r18, 0xFF	; 255
    1094:	3f 4f       	sbci	r19, 0xFF	; 255
    1096:	39 83       	std	Y+1, r19	; 0x01
    1098:	28 83       	st	Y, r18
    109a:	10 83       	st	Z, r17
    109c:	06 c0       	rjmp	.+12     	; 0x10aa <fputc+0x4a>
    109e:	e8 85       	ldd	r30, Y+8	; 0x08
    10a0:	f9 85       	ldd	r31, Y+9	; 0x09
    10a2:	81 2f       	mov	r24, r17
    10a4:	09 95       	icall
    10a6:	89 2b       	or	r24, r25
    10a8:	29 f7       	brne	.-54     	; 0x1074 <fputc+0x14>
    10aa:	2e 81       	ldd	r18, Y+6	; 0x06
    10ac:	3f 81       	ldd	r19, Y+7	; 0x07
    10ae:	2f 5f       	subi	r18, 0xFF	; 255
    10b0:	3f 4f       	sbci	r19, 0xFF	; 255
    10b2:	3f 83       	std	Y+7, r19	; 0x07
    10b4:	2e 83       	std	Y+6, r18	; 0x06
    10b6:	81 2f       	mov	r24, r17
    10b8:	90 2f       	mov	r25, r16
    10ba:	df 91       	pop	r29
    10bc:	cf 91       	pop	r28
    10be:	1f 91       	pop	r17
    10c0:	0f 91       	pop	r16
    10c2:	08 95       	ret

000010c4 <fwrite>:
    10c4:	a0 e0       	ldi	r26, 0x00	; 0
    10c6:	b0 e0       	ldi	r27, 0x00	; 0
    10c8:	e7 e6       	ldi	r30, 0x67	; 103
    10ca:	f8 e0       	ldi	r31, 0x08	; 8
    10cc:	6a c2       	rjmp	.+1236   	; 0x15a2 <__prologue_saves__+0xc>
    10ce:	6b 01       	movw	r12, r22
    10d0:	4a 01       	movw	r8, r20
    10d2:	79 01       	movw	r14, r18
    10d4:	d9 01       	movw	r26, r18
    10d6:	13 96       	adiw	r26, 0x03	; 3
    10d8:	2c 91       	ld	r18, X
    10da:	21 ff       	sbrs	r18, 1
    10dc:	1d c0       	rjmp	.+58     	; 0x1118 <fwrite+0x54>
    10de:	c0 e0       	ldi	r28, 0x00	; 0
    10e0:	d0 e0       	ldi	r29, 0x00	; 0
    10e2:	c8 15       	cp	r28, r8
    10e4:	d9 05       	cpc	r29, r9
    10e6:	d9 f0       	breq	.+54     	; 0x111e <fwrite+0x5a>
    10e8:	8c 01       	movw	r16, r24
    10ea:	5c 01       	movw	r10, r24
    10ec:	ac 0c       	add	r10, r12
    10ee:	bd 1c       	adc	r11, r13
    10f0:	c8 01       	movw	r24, r16
    10f2:	0a 15       	cp	r16, r10
    10f4:	1b 05       	cpc	r17, r11
    10f6:	71 f0       	breq	.+28     	; 0x1114 <fwrite+0x50>
    10f8:	0f 5f       	subi	r16, 0xFF	; 255
    10fa:	1f 4f       	sbci	r17, 0xFF	; 255
    10fc:	d7 01       	movw	r26, r14
    10fe:	18 96       	adiw	r26, 0x08	; 8
    1100:	ed 91       	ld	r30, X+
    1102:	fc 91       	ld	r31, X
    1104:	19 97       	sbiw	r26, 0x09	; 9
    1106:	b7 01       	movw	r22, r14
    1108:	dc 01       	movw	r26, r24
    110a:	8c 91       	ld	r24, X
    110c:	09 95       	icall
    110e:	89 2b       	or	r24, r25
    1110:	79 f3       	breq	.-34     	; 0x10f0 <fwrite+0x2c>
    1112:	05 c0       	rjmp	.+10     	; 0x111e <fwrite+0x5a>
    1114:	21 96       	adiw	r28, 0x01	; 1
    1116:	e5 cf       	rjmp	.-54     	; 0x10e2 <fwrite+0x1e>
    1118:	80 e0       	ldi	r24, 0x00	; 0
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	01 c0       	rjmp	.+2      	; 0x1120 <fwrite+0x5c>
    111e:	ce 01       	movw	r24, r28
    1120:	cd b7       	in	r28, 0x3d	; 61
    1122:	de b7       	in	r29, 0x3e	; 62
    1124:	ec e0       	ldi	r30, 0x0C	; 12
    1126:	59 c2       	rjmp	.+1202   	; 0x15da <__epilogue_restores__+0xc>

00001128 <vfprintf>:
    1128:	ac e0       	ldi	r26, 0x0C	; 12
    112a:	b0 e0       	ldi	r27, 0x00	; 0
    112c:	e9 e9       	ldi	r30, 0x99	; 153
    112e:	f8 e0       	ldi	r31, 0x08	; 8
    1130:	32 c2       	rjmp	.+1124   	; 0x1596 <__prologue_saves__>
    1132:	7c 01       	movw	r14, r24
    1134:	6b 01       	movw	r12, r22
    1136:	8a 01       	movw	r16, r20
    1138:	fc 01       	movw	r30, r24
    113a:	17 82       	std	Z+7, r1	; 0x07
    113c:	16 82       	std	Z+6, r1	; 0x06
    113e:	83 81       	ldd	r24, Z+3	; 0x03
    1140:	81 ff       	sbrs	r24, 1
    1142:	b0 c1       	rjmp	.+864    	; 0x14a4 <vfprintf+0x37c>
    1144:	ce 01       	movw	r24, r28
    1146:	01 96       	adiw	r24, 0x01	; 1
    1148:	4c 01       	movw	r8, r24
    114a:	f7 01       	movw	r30, r14
    114c:	93 81       	ldd	r25, Z+3	; 0x03
    114e:	f6 01       	movw	r30, r12
    1150:	93 fd       	sbrc	r25, 3
    1152:	85 91       	lpm	r24, Z+
    1154:	93 ff       	sbrs	r25, 3
    1156:	81 91       	ld	r24, Z+
    1158:	6f 01       	movw	r12, r30
    115a:	88 23       	and	r24, r24
    115c:	09 f4       	brne	.+2      	; 0x1160 <vfprintf+0x38>
    115e:	9e c1       	rjmp	.+828    	; 0x149c <vfprintf+0x374>
    1160:	85 32       	cpi	r24, 0x25	; 37
    1162:	39 f4       	brne	.+14     	; 0x1172 <vfprintf+0x4a>
    1164:	93 fd       	sbrc	r25, 3
    1166:	85 91       	lpm	r24, Z+
    1168:	93 ff       	sbrs	r25, 3
    116a:	81 91       	ld	r24, Z+
    116c:	6f 01       	movw	r12, r30
    116e:	85 32       	cpi	r24, 0x25	; 37
    1170:	21 f4       	brne	.+8      	; 0x117a <vfprintf+0x52>
    1172:	b7 01       	movw	r22, r14
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	74 df       	rcall	.-280    	; 0x1060 <fputc>
    1178:	e8 cf       	rjmp	.-48     	; 0x114a <vfprintf+0x22>
    117a:	51 2c       	mov	r5, r1
    117c:	31 2c       	mov	r3, r1
    117e:	20 e0       	ldi	r18, 0x00	; 0
    1180:	20 32       	cpi	r18, 0x20	; 32
    1182:	a0 f4       	brcc	.+40     	; 0x11ac <vfprintf+0x84>
    1184:	8b 32       	cpi	r24, 0x2B	; 43
    1186:	69 f0       	breq	.+26     	; 0x11a2 <vfprintf+0x7a>
    1188:	30 f4       	brcc	.+12     	; 0x1196 <vfprintf+0x6e>
    118a:	80 32       	cpi	r24, 0x20	; 32
    118c:	59 f0       	breq	.+22     	; 0x11a4 <vfprintf+0x7c>
    118e:	83 32       	cpi	r24, 0x23	; 35
    1190:	69 f4       	brne	.+26     	; 0x11ac <vfprintf+0x84>
    1192:	20 61       	ori	r18, 0x10	; 16
    1194:	2c c0       	rjmp	.+88     	; 0x11ee <vfprintf+0xc6>
    1196:	8d 32       	cpi	r24, 0x2D	; 45
    1198:	39 f0       	breq	.+14     	; 0x11a8 <vfprintf+0x80>
    119a:	80 33       	cpi	r24, 0x30	; 48
    119c:	39 f4       	brne	.+14     	; 0x11ac <vfprintf+0x84>
    119e:	21 60       	ori	r18, 0x01	; 1
    11a0:	26 c0       	rjmp	.+76     	; 0x11ee <vfprintf+0xc6>
    11a2:	22 60       	ori	r18, 0x02	; 2
    11a4:	24 60       	ori	r18, 0x04	; 4
    11a6:	23 c0       	rjmp	.+70     	; 0x11ee <vfprintf+0xc6>
    11a8:	28 60       	ori	r18, 0x08	; 8
    11aa:	21 c0       	rjmp	.+66     	; 0x11ee <vfprintf+0xc6>
    11ac:	27 fd       	sbrc	r18, 7
    11ae:	27 c0       	rjmp	.+78     	; 0x11fe <vfprintf+0xd6>
    11b0:	30 ed       	ldi	r19, 0xD0	; 208
    11b2:	38 0f       	add	r19, r24
    11b4:	3a 30       	cpi	r19, 0x0A	; 10
    11b6:	78 f4       	brcc	.+30     	; 0x11d6 <vfprintf+0xae>
    11b8:	26 ff       	sbrs	r18, 6
    11ba:	06 c0       	rjmp	.+12     	; 0x11c8 <vfprintf+0xa0>
    11bc:	fa e0       	ldi	r31, 0x0A	; 10
    11be:	5f 9e       	mul	r5, r31
    11c0:	30 0d       	add	r19, r0
    11c2:	11 24       	eor	r1, r1
    11c4:	53 2e       	mov	r5, r19
    11c6:	13 c0       	rjmp	.+38     	; 0x11ee <vfprintf+0xc6>
    11c8:	8a e0       	ldi	r24, 0x0A	; 10
    11ca:	38 9e       	mul	r3, r24
    11cc:	30 0d       	add	r19, r0
    11ce:	11 24       	eor	r1, r1
    11d0:	33 2e       	mov	r3, r19
    11d2:	20 62       	ori	r18, 0x20	; 32
    11d4:	0c c0       	rjmp	.+24     	; 0x11ee <vfprintf+0xc6>
    11d6:	8e 32       	cpi	r24, 0x2E	; 46
    11d8:	21 f4       	brne	.+8      	; 0x11e2 <vfprintf+0xba>
    11da:	26 fd       	sbrc	r18, 6
    11dc:	5f c1       	rjmp	.+702    	; 0x149c <vfprintf+0x374>
    11de:	20 64       	ori	r18, 0x40	; 64
    11e0:	06 c0       	rjmp	.+12     	; 0x11ee <vfprintf+0xc6>
    11e2:	8c 36       	cpi	r24, 0x6C	; 108
    11e4:	11 f4       	brne	.+4      	; 0x11ea <vfprintf+0xc2>
    11e6:	20 68       	ori	r18, 0x80	; 128
    11e8:	02 c0       	rjmp	.+4      	; 0x11ee <vfprintf+0xc6>
    11ea:	88 36       	cpi	r24, 0x68	; 104
    11ec:	41 f4       	brne	.+16     	; 0x11fe <vfprintf+0xd6>
    11ee:	f6 01       	movw	r30, r12
    11f0:	93 fd       	sbrc	r25, 3
    11f2:	85 91       	lpm	r24, Z+
    11f4:	93 ff       	sbrs	r25, 3
    11f6:	81 91       	ld	r24, Z+
    11f8:	6f 01       	movw	r12, r30
    11fa:	81 11       	cpse	r24, r1
    11fc:	c1 cf       	rjmp	.-126    	; 0x1180 <vfprintf+0x58>
    11fe:	98 2f       	mov	r25, r24
    1200:	9f 7d       	andi	r25, 0xDF	; 223
    1202:	95 54       	subi	r25, 0x45	; 69
    1204:	93 30       	cpi	r25, 0x03	; 3
    1206:	28 f4       	brcc	.+10     	; 0x1212 <vfprintf+0xea>
    1208:	0c 5f       	subi	r16, 0xFC	; 252
    120a:	1f 4f       	sbci	r17, 0xFF	; 255
    120c:	ff e3       	ldi	r31, 0x3F	; 63
    120e:	f9 83       	std	Y+1, r31	; 0x01
    1210:	0d c0       	rjmp	.+26     	; 0x122c <vfprintf+0x104>
    1212:	83 36       	cpi	r24, 0x63	; 99
    1214:	31 f0       	breq	.+12     	; 0x1222 <vfprintf+0xfa>
    1216:	83 37       	cpi	r24, 0x73	; 115
    1218:	71 f0       	breq	.+28     	; 0x1236 <vfprintf+0x10e>
    121a:	83 35       	cpi	r24, 0x53	; 83
    121c:	09 f0       	breq	.+2      	; 0x1220 <vfprintf+0xf8>
    121e:	57 c0       	rjmp	.+174    	; 0x12ce <vfprintf+0x1a6>
    1220:	21 c0       	rjmp	.+66     	; 0x1264 <vfprintf+0x13c>
    1222:	f8 01       	movw	r30, r16
    1224:	80 81       	ld	r24, Z
    1226:	89 83       	std	Y+1, r24	; 0x01
    1228:	0e 5f       	subi	r16, 0xFE	; 254
    122a:	1f 4f       	sbci	r17, 0xFF	; 255
    122c:	44 24       	eor	r4, r4
    122e:	43 94       	inc	r4
    1230:	51 2c       	mov	r5, r1
    1232:	54 01       	movw	r10, r8
    1234:	14 c0       	rjmp	.+40     	; 0x125e <vfprintf+0x136>
    1236:	38 01       	movw	r6, r16
    1238:	f2 e0       	ldi	r31, 0x02	; 2
    123a:	6f 0e       	add	r6, r31
    123c:	71 1c       	adc	r7, r1
    123e:	f8 01       	movw	r30, r16
    1240:	a0 80       	ld	r10, Z
    1242:	b1 80       	ldd	r11, Z+1	; 0x01
    1244:	26 ff       	sbrs	r18, 6
    1246:	03 c0       	rjmp	.+6      	; 0x124e <vfprintf+0x126>
    1248:	65 2d       	mov	r22, r5
    124a:	70 e0       	ldi	r23, 0x00	; 0
    124c:	02 c0       	rjmp	.+4      	; 0x1252 <vfprintf+0x12a>
    124e:	6f ef       	ldi	r22, 0xFF	; 255
    1250:	7f ef       	ldi	r23, 0xFF	; 255
    1252:	c5 01       	movw	r24, r10
    1254:	2c 87       	std	Y+12, r18	; 0x0c
    1256:	36 d1       	rcall	.+620    	; 0x14c4 <strnlen>
    1258:	2c 01       	movw	r4, r24
    125a:	83 01       	movw	r16, r6
    125c:	2c 85       	ldd	r18, Y+12	; 0x0c
    125e:	2f 77       	andi	r18, 0x7F	; 127
    1260:	22 2e       	mov	r2, r18
    1262:	16 c0       	rjmp	.+44     	; 0x1290 <vfprintf+0x168>
    1264:	38 01       	movw	r6, r16
    1266:	f2 e0       	ldi	r31, 0x02	; 2
    1268:	6f 0e       	add	r6, r31
    126a:	71 1c       	adc	r7, r1
    126c:	f8 01       	movw	r30, r16
    126e:	a0 80       	ld	r10, Z
    1270:	b1 80       	ldd	r11, Z+1	; 0x01
    1272:	26 ff       	sbrs	r18, 6
    1274:	03 c0       	rjmp	.+6      	; 0x127c <vfprintf+0x154>
    1276:	65 2d       	mov	r22, r5
    1278:	70 e0       	ldi	r23, 0x00	; 0
    127a:	02 c0       	rjmp	.+4      	; 0x1280 <vfprintf+0x158>
    127c:	6f ef       	ldi	r22, 0xFF	; 255
    127e:	7f ef       	ldi	r23, 0xFF	; 255
    1280:	c5 01       	movw	r24, r10
    1282:	2c 87       	std	Y+12, r18	; 0x0c
    1284:	14 d1       	rcall	.+552    	; 0x14ae <strnlen_P>
    1286:	2c 01       	movw	r4, r24
    1288:	2c 85       	ldd	r18, Y+12	; 0x0c
    128a:	20 68       	ori	r18, 0x80	; 128
    128c:	22 2e       	mov	r2, r18
    128e:	83 01       	movw	r16, r6
    1290:	23 fc       	sbrc	r2, 3
    1292:	19 c0       	rjmp	.+50     	; 0x12c6 <vfprintf+0x19e>
    1294:	83 2d       	mov	r24, r3
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	48 16       	cp	r4, r24
    129a:	59 06       	cpc	r5, r25
    129c:	a0 f4       	brcc	.+40     	; 0x12c6 <vfprintf+0x19e>
    129e:	b7 01       	movw	r22, r14
    12a0:	80 e2       	ldi	r24, 0x20	; 32
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	dd de       	rcall	.-582    	; 0x1060 <fputc>
    12a6:	3a 94       	dec	r3
    12a8:	f5 cf       	rjmp	.-22     	; 0x1294 <vfprintf+0x16c>
    12aa:	f5 01       	movw	r30, r10
    12ac:	27 fc       	sbrc	r2, 7
    12ae:	85 91       	lpm	r24, Z+
    12b0:	27 fe       	sbrs	r2, 7
    12b2:	81 91       	ld	r24, Z+
    12b4:	5f 01       	movw	r10, r30
    12b6:	b7 01       	movw	r22, r14
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	d2 de       	rcall	.-604    	; 0x1060 <fputc>
    12bc:	31 10       	cpse	r3, r1
    12be:	3a 94       	dec	r3
    12c0:	f1 e0       	ldi	r31, 0x01	; 1
    12c2:	4f 1a       	sub	r4, r31
    12c4:	51 08       	sbc	r5, r1
    12c6:	41 14       	cp	r4, r1
    12c8:	51 04       	cpc	r5, r1
    12ca:	79 f7       	brne	.-34     	; 0x12aa <vfprintf+0x182>
    12cc:	de c0       	rjmp	.+444    	; 0x148a <vfprintf+0x362>
    12ce:	84 36       	cpi	r24, 0x64	; 100
    12d0:	11 f0       	breq	.+4      	; 0x12d6 <vfprintf+0x1ae>
    12d2:	89 36       	cpi	r24, 0x69	; 105
    12d4:	31 f5       	brne	.+76     	; 0x1322 <vfprintf+0x1fa>
    12d6:	f8 01       	movw	r30, r16
    12d8:	27 ff       	sbrs	r18, 7
    12da:	07 c0       	rjmp	.+14     	; 0x12ea <vfprintf+0x1c2>
    12dc:	60 81       	ld	r22, Z
    12de:	71 81       	ldd	r23, Z+1	; 0x01
    12e0:	82 81       	ldd	r24, Z+2	; 0x02
    12e2:	93 81       	ldd	r25, Z+3	; 0x03
    12e4:	0c 5f       	subi	r16, 0xFC	; 252
    12e6:	1f 4f       	sbci	r17, 0xFF	; 255
    12e8:	08 c0       	rjmp	.+16     	; 0x12fa <vfprintf+0x1d2>
    12ea:	60 81       	ld	r22, Z
    12ec:	71 81       	ldd	r23, Z+1	; 0x01
    12ee:	88 27       	eor	r24, r24
    12f0:	77 fd       	sbrc	r23, 7
    12f2:	80 95       	com	r24
    12f4:	98 2f       	mov	r25, r24
    12f6:	0e 5f       	subi	r16, 0xFE	; 254
    12f8:	1f 4f       	sbci	r17, 0xFF	; 255
    12fa:	2f 76       	andi	r18, 0x6F	; 111
    12fc:	b2 2e       	mov	r11, r18
    12fe:	97 ff       	sbrs	r25, 7
    1300:	09 c0       	rjmp	.+18     	; 0x1314 <vfprintf+0x1ec>
    1302:	90 95       	com	r25
    1304:	80 95       	com	r24
    1306:	70 95       	com	r23
    1308:	61 95       	neg	r22
    130a:	7f 4f       	sbci	r23, 0xFF	; 255
    130c:	8f 4f       	sbci	r24, 0xFF	; 255
    130e:	9f 4f       	sbci	r25, 0xFF	; 255
    1310:	20 68       	ori	r18, 0x80	; 128
    1312:	b2 2e       	mov	r11, r18
    1314:	2a e0       	ldi	r18, 0x0A	; 10
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	a4 01       	movw	r20, r8
    131a:	df d0       	rcall	.+446    	; 0x14da <__ultoa_invert>
    131c:	a8 2e       	mov	r10, r24
    131e:	a8 18       	sub	r10, r8
    1320:	43 c0       	rjmp	.+134    	; 0x13a8 <vfprintf+0x280>
    1322:	85 37       	cpi	r24, 0x75	; 117
    1324:	29 f4       	brne	.+10     	; 0x1330 <vfprintf+0x208>
    1326:	2f 7e       	andi	r18, 0xEF	; 239
    1328:	b2 2e       	mov	r11, r18
    132a:	2a e0       	ldi	r18, 0x0A	; 10
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	25 c0       	rjmp	.+74     	; 0x137a <vfprintf+0x252>
    1330:	f2 2f       	mov	r31, r18
    1332:	f9 7f       	andi	r31, 0xF9	; 249
    1334:	bf 2e       	mov	r11, r31
    1336:	8f 36       	cpi	r24, 0x6F	; 111
    1338:	c1 f0       	breq	.+48     	; 0x136a <vfprintf+0x242>
    133a:	18 f4       	brcc	.+6      	; 0x1342 <vfprintf+0x21a>
    133c:	88 35       	cpi	r24, 0x58	; 88
    133e:	79 f0       	breq	.+30     	; 0x135e <vfprintf+0x236>
    1340:	ad c0       	rjmp	.+346    	; 0x149c <vfprintf+0x374>
    1342:	80 37       	cpi	r24, 0x70	; 112
    1344:	19 f0       	breq	.+6      	; 0x134c <vfprintf+0x224>
    1346:	88 37       	cpi	r24, 0x78	; 120
    1348:	21 f0       	breq	.+8      	; 0x1352 <vfprintf+0x22a>
    134a:	a8 c0       	rjmp	.+336    	; 0x149c <vfprintf+0x374>
    134c:	2f 2f       	mov	r18, r31
    134e:	20 61       	ori	r18, 0x10	; 16
    1350:	b2 2e       	mov	r11, r18
    1352:	b4 fe       	sbrs	r11, 4
    1354:	0d c0       	rjmp	.+26     	; 0x1370 <vfprintf+0x248>
    1356:	8b 2d       	mov	r24, r11
    1358:	84 60       	ori	r24, 0x04	; 4
    135a:	b8 2e       	mov	r11, r24
    135c:	09 c0       	rjmp	.+18     	; 0x1370 <vfprintf+0x248>
    135e:	24 ff       	sbrs	r18, 4
    1360:	0a c0       	rjmp	.+20     	; 0x1376 <vfprintf+0x24e>
    1362:	9f 2f       	mov	r25, r31
    1364:	96 60       	ori	r25, 0x06	; 6
    1366:	b9 2e       	mov	r11, r25
    1368:	06 c0       	rjmp	.+12     	; 0x1376 <vfprintf+0x24e>
    136a:	28 e0       	ldi	r18, 0x08	; 8
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	05 c0       	rjmp	.+10     	; 0x137a <vfprintf+0x252>
    1370:	20 e1       	ldi	r18, 0x10	; 16
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	02 c0       	rjmp	.+4      	; 0x137a <vfprintf+0x252>
    1376:	20 e1       	ldi	r18, 0x10	; 16
    1378:	32 e0       	ldi	r19, 0x02	; 2
    137a:	f8 01       	movw	r30, r16
    137c:	b7 fe       	sbrs	r11, 7
    137e:	07 c0       	rjmp	.+14     	; 0x138e <vfprintf+0x266>
    1380:	60 81       	ld	r22, Z
    1382:	71 81       	ldd	r23, Z+1	; 0x01
    1384:	82 81       	ldd	r24, Z+2	; 0x02
    1386:	93 81       	ldd	r25, Z+3	; 0x03
    1388:	0c 5f       	subi	r16, 0xFC	; 252
    138a:	1f 4f       	sbci	r17, 0xFF	; 255
    138c:	06 c0       	rjmp	.+12     	; 0x139a <vfprintf+0x272>
    138e:	60 81       	ld	r22, Z
    1390:	71 81       	ldd	r23, Z+1	; 0x01
    1392:	80 e0       	ldi	r24, 0x00	; 0
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	0e 5f       	subi	r16, 0xFE	; 254
    1398:	1f 4f       	sbci	r17, 0xFF	; 255
    139a:	a4 01       	movw	r20, r8
    139c:	9e d0       	rcall	.+316    	; 0x14da <__ultoa_invert>
    139e:	a8 2e       	mov	r10, r24
    13a0:	a8 18       	sub	r10, r8
    13a2:	fb 2d       	mov	r31, r11
    13a4:	ff 77       	andi	r31, 0x7F	; 127
    13a6:	bf 2e       	mov	r11, r31
    13a8:	b6 fe       	sbrs	r11, 6
    13aa:	0b c0       	rjmp	.+22     	; 0x13c2 <vfprintf+0x29a>
    13ac:	2b 2d       	mov	r18, r11
    13ae:	2e 7f       	andi	r18, 0xFE	; 254
    13b0:	a5 14       	cp	r10, r5
    13b2:	50 f4       	brcc	.+20     	; 0x13c8 <vfprintf+0x2a0>
    13b4:	b4 fe       	sbrs	r11, 4
    13b6:	0a c0       	rjmp	.+20     	; 0x13cc <vfprintf+0x2a4>
    13b8:	b2 fc       	sbrc	r11, 2
    13ba:	08 c0       	rjmp	.+16     	; 0x13cc <vfprintf+0x2a4>
    13bc:	2b 2d       	mov	r18, r11
    13be:	2e 7e       	andi	r18, 0xEE	; 238
    13c0:	05 c0       	rjmp	.+10     	; 0x13cc <vfprintf+0x2a4>
    13c2:	7a 2c       	mov	r7, r10
    13c4:	2b 2d       	mov	r18, r11
    13c6:	03 c0       	rjmp	.+6      	; 0x13ce <vfprintf+0x2a6>
    13c8:	7a 2c       	mov	r7, r10
    13ca:	01 c0       	rjmp	.+2      	; 0x13ce <vfprintf+0x2a6>
    13cc:	75 2c       	mov	r7, r5
    13ce:	24 ff       	sbrs	r18, 4
    13d0:	0d c0       	rjmp	.+26     	; 0x13ec <vfprintf+0x2c4>
    13d2:	fe 01       	movw	r30, r28
    13d4:	ea 0d       	add	r30, r10
    13d6:	f1 1d       	adc	r31, r1
    13d8:	80 81       	ld	r24, Z
    13da:	80 33       	cpi	r24, 0x30	; 48
    13dc:	11 f4       	brne	.+4      	; 0x13e2 <vfprintf+0x2ba>
    13de:	29 7e       	andi	r18, 0xE9	; 233
    13e0:	09 c0       	rjmp	.+18     	; 0x13f4 <vfprintf+0x2cc>
    13e2:	22 ff       	sbrs	r18, 2
    13e4:	06 c0       	rjmp	.+12     	; 0x13f2 <vfprintf+0x2ca>
    13e6:	73 94       	inc	r7
    13e8:	73 94       	inc	r7
    13ea:	04 c0       	rjmp	.+8      	; 0x13f4 <vfprintf+0x2cc>
    13ec:	82 2f       	mov	r24, r18
    13ee:	86 78       	andi	r24, 0x86	; 134
    13f0:	09 f0       	breq	.+2      	; 0x13f4 <vfprintf+0x2cc>
    13f2:	73 94       	inc	r7
    13f4:	23 fd       	sbrc	r18, 3
    13f6:	12 c0       	rjmp	.+36     	; 0x141c <vfprintf+0x2f4>
    13f8:	20 ff       	sbrs	r18, 0
    13fa:	06 c0       	rjmp	.+12     	; 0x1408 <vfprintf+0x2e0>
    13fc:	5a 2c       	mov	r5, r10
    13fe:	73 14       	cp	r7, r3
    1400:	18 f4       	brcc	.+6      	; 0x1408 <vfprintf+0x2e0>
    1402:	53 0c       	add	r5, r3
    1404:	57 18       	sub	r5, r7
    1406:	73 2c       	mov	r7, r3
    1408:	73 14       	cp	r7, r3
    140a:	60 f4       	brcc	.+24     	; 0x1424 <vfprintf+0x2fc>
    140c:	b7 01       	movw	r22, r14
    140e:	80 e2       	ldi	r24, 0x20	; 32
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	2c 87       	std	Y+12, r18	; 0x0c
    1414:	25 de       	rcall	.-950    	; 0x1060 <fputc>
    1416:	73 94       	inc	r7
    1418:	2c 85       	ldd	r18, Y+12	; 0x0c
    141a:	f6 cf       	rjmp	.-20     	; 0x1408 <vfprintf+0x2e0>
    141c:	73 14       	cp	r7, r3
    141e:	10 f4       	brcc	.+4      	; 0x1424 <vfprintf+0x2fc>
    1420:	37 18       	sub	r3, r7
    1422:	01 c0       	rjmp	.+2      	; 0x1426 <vfprintf+0x2fe>
    1424:	31 2c       	mov	r3, r1
    1426:	24 ff       	sbrs	r18, 4
    1428:	11 c0       	rjmp	.+34     	; 0x144c <vfprintf+0x324>
    142a:	b7 01       	movw	r22, r14
    142c:	80 e3       	ldi	r24, 0x30	; 48
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	2c 87       	std	Y+12, r18	; 0x0c
    1432:	16 de       	rcall	.-980    	; 0x1060 <fputc>
    1434:	2c 85       	ldd	r18, Y+12	; 0x0c
    1436:	22 ff       	sbrs	r18, 2
    1438:	16 c0       	rjmp	.+44     	; 0x1466 <vfprintf+0x33e>
    143a:	21 ff       	sbrs	r18, 1
    143c:	03 c0       	rjmp	.+6      	; 0x1444 <vfprintf+0x31c>
    143e:	88 e5       	ldi	r24, 0x58	; 88
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	02 c0       	rjmp	.+4      	; 0x1448 <vfprintf+0x320>
    1444:	88 e7       	ldi	r24, 0x78	; 120
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	b7 01       	movw	r22, r14
    144a:	0c c0       	rjmp	.+24     	; 0x1464 <vfprintf+0x33c>
    144c:	82 2f       	mov	r24, r18
    144e:	86 78       	andi	r24, 0x86	; 134
    1450:	51 f0       	breq	.+20     	; 0x1466 <vfprintf+0x33e>
    1452:	21 fd       	sbrc	r18, 1
    1454:	02 c0       	rjmp	.+4      	; 0x145a <vfprintf+0x332>
    1456:	80 e2       	ldi	r24, 0x20	; 32
    1458:	01 c0       	rjmp	.+2      	; 0x145c <vfprintf+0x334>
    145a:	8b e2       	ldi	r24, 0x2B	; 43
    145c:	27 fd       	sbrc	r18, 7
    145e:	8d e2       	ldi	r24, 0x2D	; 45
    1460:	b7 01       	movw	r22, r14
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	fd dd       	rcall	.-1030   	; 0x1060 <fputc>
    1466:	a5 14       	cp	r10, r5
    1468:	30 f4       	brcc	.+12     	; 0x1476 <vfprintf+0x34e>
    146a:	b7 01       	movw	r22, r14
    146c:	80 e3       	ldi	r24, 0x30	; 48
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	f7 dd       	rcall	.-1042   	; 0x1060 <fputc>
    1472:	5a 94       	dec	r5
    1474:	f8 cf       	rjmp	.-16     	; 0x1466 <vfprintf+0x33e>
    1476:	aa 94       	dec	r10
    1478:	f4 01       	movw	r30, r8
    147a:	ea 0d       	add	r30, r10
    147c:	f1 1d       	adc	r31, r1
    147e:	80 81       	ld	r24, Z
    1480:	b7 01       	movw	r22, r14
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	ed dd       	rcall	.-1062   	; 0x1060 <fputc>
    1486:	a1 10       	cpse	r10, r1
    1488:	f6 cf       	rjmp	.-20     	; 0x1476 <vfprintf+0x34e>
    148a:	33 20       	and	r3, r3
    148c:	09 f4       	brne	.+2      	; 0x1490 <vfprintf+0x368>
    148e:	5d ce       	rjmp	.-838    	; 0x114a <vfprintf+0x22>
    1490:	b7 01       	movw	r22, r14
    1492:	80 e2       	ldi	r24, 0x20	; 32
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	e4 dd       	rcall	.-1080   	; 0x1060 <fputc>
    1498:	3a 94       	dec	r3
    149a:	f7 cf       	rjmp	.-18     	; 0x148a <vfprintf+0x362>
    149c:	f7 01       	movw	r30, r14
    149e:	86 81       	ldd	r24, Z+6	; 0x06
    14a0:	97 81       	ldd	r25, Z+7	; 0x07
    14a2:	02 c0       	rjmp	.+4      	; 0x14a8 <vfprintf+0x380>
    14a4:	8f ef       	ldi	r24, 0xFF	; 255
    14a6:	9f ef       	ldi	r25, 0xFF	; 255
    14a8:	2c 96       	adiw	r28, 0x0c	; 12
    14aa:	e2 e1       	ldi	r30, 0x12	; 18
    14ac:	90 c0       	rjmp	.+288    	; 0x15ce <__epilogue_restores__>

000014ae <strnlen_P>:
    14ae:	fc 01       	movw	r30, r24
    14b0:	05 90       	lpm	r0, Z+
    14b2:	61 50       	subi	r22, 0x01	; 1
    14b4:	70 40       	sbci	r23, 0x00	; 0
    14b6:	01 10       	cpse	r0, r1
    14b8:	d8 f7       	brcc	.-10     	; 0x14b0 <strnlen_P+0x2>
    14ba:	80 95       	com	r24
    14bc:	90 95       	com	r25
    14be:	8e 0f       	add	r24, r30
    14c0:	9f 1f       	adc	r25, r31
    14c2:	08 95       	ret

000014c4 <strnlen>:
    14c4:	fc 01       	movw	r30, r24
    14c6:	61 50       	subi	r22, 0x01	; 1
    14c8:	70 40       	sbci	r23, 0x00	; 0
    14ca:	01 90       	ld	r0, Z+
    14cc:	01 10       	cpse	r0, r1
    14ce:	d8 f7       	brcc	.-10     	; 0x14c6 <strnlen+0x2>
    14d0:	80 95       	com	r24
    14d2:	90 95       	com	r25
    14d4:	8e 0f       	add	r24, r30
    14d6:	9f 1f       	adc	r25, r31
    14d8:	08 95       	ret

000014da <__ultoa_invert>:
    14da:	fa 01       	movw	r30, r20
    14dc:	aa 27       	eor	r26, r26
    14de:	28 30       	cpi	r18, 0x08	; 8
    14e0:	51 f1       	breq	.+84     	; 0x1536 <__ultoa_invert+0x5c>
    14e2:	20 31       	cpi	r18, 0x10	; 16
    14e4:	81 f1       	breq	.+96     	; 0x1546 <__ultoa_invert+0x6c>
    14e6:	e8 94       	clt
    14e8:	6f 93       	push	r22
    14ea:	6e 7f       	andi	r22, 0xFE	; 254
    14ec:	6e 5f       	subi	r22, 0xFE	; 254
    14ee:	7f 4f       	sbci	r23, 0xFF	; 255
    14f0:	8f 4f       	sbci	r24, 0xFF	; 255
    14f2:	9f 4f       	sbci	r25, 0xFF	; 255
    14f4:	af 4f       	sbci	r26, 0xFF	; 255
    14f6:	b1 e0       	ldi	r27, 0x01	; 1
    14f8:	3e d0       	rcall	.+124    	; 0x1576 <__ultoa_invert+0x9c>
    14fa:	b4 e0       	ldi	r27, 0x04	; 4
    14fc:	3c d0       	rcall	.+120    	; 0x1576 <__ultoa_invert+0x9c>
    14fe:	67 0f       	add	r22, r23
    1500:	78 1f       	adc	r23, r24
    1502:	89 1f       	adc	r24, r25
    1504:	9a 1f       	adc	r25, r26
    1506:	a1 1d       	adc	r26, r1
    1508:	68 0f       	add	r22, r24
    150a:	79 1f       	adc	r23, r25
    150c:	8a 1f       	adc	r24, r26
    150e:	91 1d       	adc	r25, r1
    1510:	a1 1d       	adc	r26, r1
    1512:	6a 0f       	add	r22, r26
    1514:	71 1d       	adc	r23, r1
    1516:	81 1d       	adc	r24, r1
    1518:	91 1d       	adc	r25, r1
    151a:	a1 1d       	adc	r26, r1
    151c:	20 d0       	rcall	.+64     	; 0x155e <__ultoa_invert+0x84>
    151e:	09 f4       	brne	.+2      	; 0x1522 <__ultoa_invert+0x48>
    1520:	68 94       	set
    1522:	3f 91       	pop	r19
    1524:	2a e0       	ldi	r18, 0x0A	; 10
    1526:	26 9f       	mul	r18, r22
    1528:	11 24       	eor	r1, r1
    152a:	30 19       	sub	r19, r0
    152c:	30 5d       	subi	r19, 0xD0	; 208
    152e:	31 93       	st	Z+, r19
    1530:	de f6       	brtc	.-74     	; 0x14e8 <__ultoa_invert+0xe>
    1532:	cf 01       	movw	r24, r30
    1534:	08 95       	ret
    1536:	46 2f       	mov	r20, r22
    1538:	47 70       	andi	r20, 0x07	; 7
    153a:	40 5d       	subi	r20, 0xD0	; 208
    153c:	41 93       	st	Z+, r20
    153e:	b3 e0       	ldi	r27, 0x03	; 3
    1540:	0f d0       	rcall	.+30     	; 0x1560 <__ultoa_invert+0x86>
    1542:	c9 f7       	brne	.-14     	; 0x1536 <__ultoa_invert+0x5c>
    1544:	f6 cf       	rjmp	.-20     	; 0x1532 <__ultoa_invert+0x58>
    1546:	46 2f       	mov	r20, r22
    1548:	4f 70       	andi	r20, 0x0F	; 15
    154a:	40 5d       	subi	r20, 0xD0	; 208
    154c:	4a 33       	cpi	r20, 0x3A	; 58
    154e:	18 f0       	brcs	.+6      	; 0x1556 <__ultoa_invert+0x7c>
    1550:	49 5d       	subi	r20, 0xD9	; 217
    1552:	31 fd       	sbrc	r19, 1
    1554:	40 52       	subi	r20, 0x20	; 32
    1556:	41 93       	st	Z+, r20
    1558:	02 d0       	rcall	.+4      	; 0x155e <__ultoa_invert+0x84>
    155a:	a9 f7       	brne	.-22     	; 0x1546 <__ultoa_invert+0x6c>
    155c:	ea cf       	rjmp	.-44     	; 0x1532 <__ultoa_invert+0x58>
    155e:	b4 e0       	ldi	r27, 0x04	; 4
    1560:	a6 95       	lsr	r26
    1562:	97 95       	ror	r25
    1564:	87 95       	ror	r24
    1566:	77 95       	ror	r23
    1568:	67 95       	ror	r22
    156a:	ba 95       	dec	r27
    156c:	c9 f7       	brne	.-14     	; 0x1560 <__ultoa_invert+0x86>
    156e:	00 97       	sbiw	r24, 0x00	; 0
    1570:	61 05       	cpc	r22, r1
    1572:	71 05       	cpc	r23, r1
    1574:	08 95       	ret
    1576:	9b 01       	movw	r18, r22
    1578:	ac 01       	movw	r20, r24
    157a:	0a 2e       	mov	r0, r26
    157c:	06 94       	lsr	r0
    157e:	57 95       	ror	r21
    1580:	47 95       	ror	r20
    1582:	37 95       	ror	r19
    1584:	27 95       	ror	r18
    1586:	ba 95       	dec	r27
    1588:	c9 f7       	brne	.-14     	; 0x157c <__ultoa_invert+0xa2>
    158a:	62 0f       	add	r22, r18
    158c:	73 1f       	adc	r23, r19
    158e:	84 1f       	adc	r24, r20
    1590:	95 1f       	adc	r25, r21
    1592:	a0 1d       	adc	r26, r0
    1594:	08 95       	ret

00001596 <__prologue_saves__>:
    1596:	2f 92       	push	r2
    1598:	3f 92       	push	r3
    159a:	4f 92       	push	r4
    159c:	5f 92       	push	r5
    159e:	6f 92       	push	r6
    15a0:	7f 92       	push	r7
    15a2:	8f 92       	push	r8
    15a4:	9f 92       	push	r9
    15a6:	af 92       	push	r10
    15a8:	bf 92       	push	r11
    15aa:	cf 92       	push	r12
    15ac:	df 92       	push	r13
    15ae:	ef 92       	push	r14
    15b0:	ff 92       	push	r15
    15b2:	0f 93       	push	r16
    15b4:	1f 93       	push	r17
    15b6:	cf 93       	push	r28
    15b8:	df 93       	push	r29
    15ba:	cd b7       	in	r28, 0x3d	; 61
    15bc:	de b7       	in	r29, 0x3e	; 62
    15be:	ca 1b       	sub	r28, r26
    15c0:	db 0b       	sbc	r29, r27
    15c2:	0f b6       	in	r0, 0x3f	; 63
    15c4:	f8 94       	cli
    15c6:	de bf       	out	0x3e, r29	; 62
    15c8:	0f be       	out	0x3f, r0	; 63
    15ca:	cd bf       	out	0x3d, r28	; 61
    15cc:	09 94       	ijmp

000015ce <__epilogue_restores__>:
    15ce:	2a 88       	ldd	r2, Y+18	; 0x12
    15d0:	39 88       	ldd	r3, Y+17	; 0x11
    15d2:	48 88       	ldd	r4, Y+16	; 0x10
    15d4:	5f 84       	ldd	r5, Y+15	; 0x0f
    15d6:	6e 84       	ldd	r6, Y+14	; 0x0e
    15d8:	7d 84       	ldd	r7, Y+13	; 0x0d
    15da:	8c 84       	ldd	r8, Y+12	; 0x0c
    15dc:	9b 84       	ldd	r9, Y+11	; 0x0b
    15de:	aa 84       	ldd	r10, Y+10	; 0x0a
    15e0:	b9 84       	ldd	r11, Y+9	; 0x09
    15e2:	c8 84       	ldd	r12, Y+8	; 0x08
    15e4:	df 80       	ldd	r13, Y+7	; 0x07
    15e6:	ee 80       	ldd	r14, Y+6	; 0x06
    15e8:	fd 80       	ldd	r15, Y+5	; 0x05
    15ea:	0c 81       	ldd	r16, Y+4	; 0x04
    15ec:	1b 81       	ldd	r17, Y+3	; 0x03
    15ee:	aa 81       	ldd	r26, Y+2	; 0x02
    15f0:	b9 81       	ldd	r27, Y+1	; 0x01
    15f2:	ce 0f       	add	r28, r30
    15f4:	d1 1d       	adc	r29, r1
    15f6:	0f b6       	in	r0, 0x3f	; 63
    15f8:	f8 94       	cli
    15fa:	de bf       	out	0x3e, r29	; 62
    15fc:	0f be       	out	0x3f, r0	; 63
    15fe:	cd bf       	out	0x3d, r28	; 61
    1600:	ed 01       	movw	r28, r26
    1602:	08 95       	ret

00001604 <_exit>:
    1604:	f8 94       	cli

00001606 <__stop_program>:
    1606:	ff cf       	rjmp	.-2      	; 0x1606 <__stop_program>
