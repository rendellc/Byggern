
Node1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000010a  00800100  00001764  000017f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001764  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000013a  0080020a  0080020a  00001902  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001902  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000300  00000000  00000000  0000195e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000036a1  00000000  00000000  00001c5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001255  00000000  00000000  000052ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000019b8  00000000  00000000  00006554  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000810  00000000  00000000  00007f0c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000086e  00000000  00000000  0000871c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000016e2  00000000  00000000  00008f8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002a8  00000000  00000000  0000a66c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	f5 c0       	rjmp	.+490    	; 0x1ec <__ctors_end>
       2:	00 00       	nop
       4:	0f c1       	rjmp	.+542    	; 0x224 <__bad_interrupt>
       6:	00 00       	nop
       8:	19 c1       	rjmp	.+562    	; 0x23c <__vector_2>
       a:	00 00       	nop
       c:	0b c1       	rjmp	.+534    	; 0x224 <__bad_interrupt>
       e:	00 00       	nop
      10:	09 c1       	rjmp	.+530    	; 0x224 <__bad_interrupt>
      12:	00 00       	nop
      14:	07 c1       	rjmp	.+526    	; 0x224 <__bad_interrupt>
      16:	00 00       	nop
      18:	05 c1       	rjmp	.+522    	; 0x224 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	03 c1       	rjmp	.+518    	; 0x224 <__bad_interrupt>
      1e:	00 00       	nop
      20:	01 c1       	rjmp	.+514    	; 0x224 <__bad_interrupt>
      22:	00 00       	nop
      24:	ff c0       	rjmp	.+510    	; 0x224 <__bad_interrupt>
      26:	00 00       	nop
      28:	fd c0       	rjmp	.+506    	; 0x224 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	fb c0       	rjmp	.+502    	; 0x224 <__bad_interrupt>
      2e:	00 00       	nop
      30:	f9 c0       	rjmp	.+498    	; 0x224 <__bad_interrupt>
      32:	00 00       	nop
      34:	f7 c0       	rjmp	.+494    	; 0x224 <__bad_interrupt>
      36:	00 00       	nop
      38:	f5 c0       	rjmp	.+490    	; 0x224 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	f3 c0       	rjmp	.+486    	; 0x224 <__bad_interrupt>
      3e:	00 00       	nop
      40:	f1 c0       	rjmp	.+482    	; 0x224 <__bad_interrupt>
      42:	00 00       	nop
      44:	ad c6       	rjmp	.+3418   	; 0xda0 <__vector_17>
      46:	00 00       	nop
      48:	ed c0       	rjmp	.+474    	; 0x224 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	11 c7       	rjmp	.+3618   	; 0xe70 <__vector_19>
      4e:	00 00       	nop
      50:	e9 c0       	rjmp	.+466    	; 0x224 <__bad_interrupt>
      52:	00 00       	nop
      54:	e7 c0       	rjmp	.+462    	; 0x224 <__bad_interrupt>
      56:	00 00       	nop
      58:	e5 c0       	rjmp	.+458    	; 0x224 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	50 c7       	rjmp	.+3744   	; 0xefe <__vector_23>
      5e:	00 00       	nop
      60:	e1 c0       	rjmp	.+450    	; 0x224 <__bad_interrupt>
      62:	00 00       	nop
      64:	df c0       	rjmp	.+446    	; 0x224 <__bad_interrupt>
      66:	00 00       	nop
      68:	dd c0       	rjmp	.+442    	; 0x224 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	db c0       	rjmp	.+438    	; 0x224 <__bad_interrupt>
	...

00000070 <__trampolines_end>:
      70:	00 00       	nop
      72:	00 00       	nop
      74:	00 5c       	subi	r16, 0xC0	; 192
      76:	00 00       	nop
      78:	0c 00       	.word	0x000c	; ????
      7a:	0c 00       	.word	0x000c	; ????
      7c:	7c 28       	or	r7, r12
      7e:	7c 28       	or	r7, r12
      80:	58 dc       	rcall	.-1872   	; 0xfffff932 <__eeprom_end+0xff7ef932>
      82:	68 00       	.word	0x0068	; ????
      84:	24 10       	cpse	r2, r4
      86:	48 00       	.word	0x0048	; ????
      88:	28 54       	subi	r18, 0x48	; 72
      8a:	28 40       	sbci	r18, 0x08	; 8
      8c:	00 0c       	add	r0, r0
      8e:	00 00       	nop
      90:	00 78       	andi	r16, 0x80	; 128
      92:	84 00       	.word	0x0084	; ????
      94:	84 78       	andi	r24, 0x84	; 132
      96:	00 00       	nop
      98:	54 38       	cpi	r21, 0x84	; 132
      9a:	54 00       	.word	0x0054	; ????
      9c:	10 7c       	andi	r17, 0xC0	; 192
      9e:	10 00       	.word	0x0010	; ????
      a0:	80 40       	sbci	r24, 0x00	; 0
      a2:	00 00       	nop
      a4:	10 10       	cpse	r1, r0
      a6:	10 00       	.word	0x0010	; ????
      a8:	00 40       	sbci	r16, 0x00	; 0
      aa:	00 00       	nop
      ac:	60 10       	cpse	r6, r0
      ae:	0c 00       	.word	0x000c	; ????
      b0:	38 54       	subi	r19, 0x48	; 72
      b2:	38 00       	.word	0x0038	; ????
      b4:	48 7c       	andi	r20, 0xC8	; 200
      b6:	40 00       	.word	0x0040	; ????
      b8:	48 64       	ori	r20, 0x48	; 72
      ba:	58 00       	.word	0x0058	; ????
      bc:	44 54       	subi	r20, 0x44	; 68
      be:	2c 00       	.word	0x002c	; ????
      c0:	1c 10       	cpse	r1, r12
      c2:	7c 00       	.word	0x007c	; ????
      c4:	5c 54       	subi	r21, 0x4C	; 76
      c6:	24 00       	.word	0x0024	; ????
      c8:	38 54       	subi	r19, 0x48	; 72
      ca:	24 00       	.word	0x0024	; ????
      cc:	64 14       	cp	r6, r4
      ce:	0c 00       	.word	0x000c	; ????
      d0:	68 54       	subi	r22, 0x48	; 72
      d2:	2c 00       	.word	0x002c	; ????
      d4:	48 54       	subi	r20, 0x48	; 72
      d6:	38 00       	.word	0x0038	; ????
      d8:	00 48       	sbci	r16, 0x80	; 128
      da:	00 00       	nop
      dc:	80 48       	sbci	r24, 0x80	; 128
      de:	00 00       	nop
      e0:	10 28       	or	r1, r0
      e2:	44 00       	.word	0x0044	; ????
      e4:	28 28       	or	r2, r8
      e6:	28 00       	.word	0x0028	; ????
      e8:	44 28       	or	r4, r4
      ea:	10 00       	.word	0x0010	; ????
      ec:	04 54       	subi	r16, 0x44	; 68
      ee:	08 00       	.word	0x0008	; ????
      f0:	38 44       	sbci	r19, 0x48	; 72
      f2:	5c 00       	.word	0x005c	; ????
      f4:	78 14       	cp	r7, r8
      f6:	78 00       	.word	0x0078	; ????
      f8:	7c 54       	subi	r23, 0x4C	; 76
      fa:	28 00       	.word	0x0028	; ????
      fc:	38 44       	sbci	r19, 0x48	; 72
      fe:	28 00       	.word	0x0028	; ????
     100:	7c 44       	sbci	r23, 0x4C	; 76
     102:	38 00       	.word	0x0038	; ????
     104:	7c 54       	subi	r23, 0x4C	; 76
     106:	44 00       	.word	0x0044	; ????
     108:	7c 14       	cp	r7, r12
     10a:	04 00       	.word	0x0004	; ????
     10c:	38 44       	sbci	r19, 0x48	; 72
     10e:	74 00       	.word	0x0074	; ????
     110:	7c 10       	cpse	r7, r12
     112:	7c 00       	.word	0x007c	; ????
     114:	44 7c       	andi	r20, 0xC4	; 196
     116:	44 00       	.word	0x0044	; ????
     118:	20 40       	sbci	r18, 0x00	; 0
     11a:	3c 00       	.word	0x003c	; ????
     11c:	7c 10       	cpse	r7, r12
     11e:	6c 00       	.word	0x006c	; ????
     120:	7c 40       	sbci	r23, 0x0C	; 12
     122:	40 00       	.word	0x0040	; ????
     124:	7c 18       	sub	r7, r12
     126:	7c 00       	.word	0x007c	; ????
     128:	78 10       	cpse	r7, r8
     12a:	3c 00       	.word	0x003c	; ????
     12c:	38 44       	sbci	r19, 0x48	; 72
     12e:	38 00       	.word	0x0038	; ????
     130:	7c 14       	cp	r7, r12
     132:	08 00       	.word	0x0008	; ????
     134:	38 44       	sbci	r19, 0x48	; 72
     136:	b8 00       	.word	0x00b8	; ????
     138:	7c 14       	cp	r7, r12
     13a:	68 00       	.word	0x0068	; ????
     13c:	48 54       	subi	r20, 0x48	; 72
     13e:	24 00       	.word	0x0024	; ????
     140:	04 7c       	andi	r16, 0xC4	; 196
     142:	04 00       	.word	0x0004	; ????
     144:	7c 40       	sbci	r23, 0x0C	; 12
     146:	7c 00       	.word	0x007c	; ????
     148:	3c 60       	ori	r19, 0x0C	; 12
     14a:	3c 00       	.word	0x003c	; ????
     14c:	7c 30       	cpi	r23, 0x0C	; 12
     14e:	7c 00       	.word	0x007c	; ????
     150:	6c 10       	cpse	r6, r12
     152:	6c 00       	.word	0x006c	; ????
     154:	0c 70       	andi	r16, 0x0C	; 12
     156:	0c 00       	.word	0x000c	; ????
     158:	64 54       	subi	r22, 0x44	; 68
     15a:	4c 00       	.word	0x004c	; ????
     15c:	00 7c       	andi	r16, 0xC0	; 192
     15e:	44 00       	.word	0x0044	; ????
     160:	0c 10       	cpse	r0, r12
     162:	60 00       	.word	0x0060	; ????
     164:	44 7c       	andi	r20, 0xC4	; 196
     166:	00 00       	nop
     168:	08 04       	cpc	r0, r8
     16a:	08 00       	.word	0x0008	; ????
     16c:	80 80       	ld	r8, Z
     16e:	80 00       	.word	0x0080	; ????
     170:	00 04       	cpc	r0, r0
     172:	08 00       	.word	0x0008	; ????
     174:	30 48       	sbci	r19, 0x80	; 128
     176:	78 00       	.word	0x0078	; ????
     178:	7c 48       	sbci	r23, 0x8C	; 140
     17a:	30 00       	.word	0x0030	; ????
     17c:	30 48       	sbci	r19, 0x80	; 128
     17e:	48 00       	.word	0x0048	; ????
     180:	30 48       	sbci	r19, 0x80	; 128
     182:	7c 00       	.word	0x007c	; ????
     184:	30 68       	ori	r19, 0x80	; 128
     186:	50 00       	.word	0x0050	; ????
     188:	10 78       	andi	r17, 0x80	; 128
     18a:	14 00       	.word	0x0014	; ????
     18c:	90 a8       	ldd	r9, Z+48	; 0x30
     18e:	78 00       	.word	0x0078	; ????
     190:	7c 08       	sbc	r7, r12
     192:	70 00       	.word	0x0070	; ????
     194:	50 74       	andi	r21, 0x40	; 64
     196:	40 00       	.word	0x0040	; ????
     198:	80 80       	ld	r8, Z
     19a:	74 00       	.word	0x0074	; ????
     19c:	7c 10       	cpse	r7, r12
     19e:	68 00       	.word	0x0068	; ????
     1a0:	44 7c       	andi	r20, 0xC4	; 196
     1a2:	40 00       	.word	0x0040	; ????
     1a4:	78 10       	cpse	r7, r8
     1a6:	78 00       	.word	0x0078	; ????
     1a8:	78 08       	sbc	r7, r8
     1aa:	70 00       	.word	0x0070	; ????
     1ac:	30 48       	sbci	r19, 0x80	; 128
     1ae:	30 00       	.word	0x0030	; ????
     1b0:	f8 28       	or	r15, r8
     1b2:	10 00       	.word	0x0010	; ????
     1b4:	30 48       	sbci	r19, 0x80	; 128
     1b6:	f8 00       	.word	0x00f8	; ????
     1b8:	78 10       	cpse	r7, r8
     1ba:	08 00       	.word	0x0008	; ????
     1bc:	50 58       	subi	r21, 0x80	; 128
     1be:	28 00       	.word	0x0028	; ????
     1c0:	08 3c       	cpi	r16, 0xC8	; 200
     1c2:	48 00       	.word	0x0048	; ????
     1c4:	38 40       	sbci	r19, 0x08	; 8
     1c6:	78 00       	.word	0x0078	; ????
     1c8:	38 40       	sbci	r19, 0x08	; 8
     1ca:	38 00       	.word	0x0038	; ????
     1cc:	78 20       	and	r7, r8
     1ce:	78 00       	.word	0x0078	; ????
     1d0:	48 30       	cpi	r20, 0x08	; 8
     1d2:	48 00       	.word	0x0048	; ????
     1d4:	98 a0       	ldd	r9, Y+32	; 0x20
     1d6:	78 00       	.word	0x0078	; ????
     1d8:	48 68       	ori	r20, 0x88	; 136
     1da:	58 00       	.word	0x0058	; ????
     1dc:	10 78       	andi	r17, 0x80	; 128
     1de:	84 00       	.word	0x0084	; ????
     1e0:	00 7c       	andi	r16, 0xC0	; 192
     1e2:	00 00       	nop
     1e4:	84 78       	andi	r24, 0x84	; 132
     1e6:	10 00       	.word	0x0010	; ????
     1e8:	08 04       	cpc	r0, r8
     1ea:	08 04       	cpc	r0, r8

000001ec <__ctors_end>:
     1ec:	11 24       	eor	r1, r1
     1ee:	1f be       	out	0x3f, r1	; 63
     1f0:	cf ef       	ldi	r28, 0xFF	; 255
     1f2:	d4 e0       	ldi	r29, 0x04	; 4
     1f4:	de bf       	out	0x3e, r29	; 62
     1f6:	cd bf       	out	0x3d, r28	; 61

000001f8 <__do_copy_data>:
     1f8:	12 e0       	ldi	r17, 0x02	; 2
     1fa:	a0 e0       	ldi	r26, 0x00	; 0
     1fc:	b1 e0       	ldi	r27, 0x01	; 1
     1fe:	e4 e6       	ldi	r30, 0x64	; 100
     200:	f7 e1       	ldi	r31, 0x17	; 23
     202:	02 c0       	rjmp	.+4      	; 0x208 <__do_copy_data+0x10>
     204:	05 90       	lpm	r0, Z+
     206:	0d 92       	st	X+, r0
     208:	aa 30       	cpi	r26, 0x0A	; 10
     20a:	b1 07       	cpc	r27, r17
     20c:	d9 f7       	brne	.-10     	; 0x204 <__do_copy_data+0xc>

0000020e <__do_clear_bss>:
     20e:	23 e0       	ldi	r18, 0x03	; 3
     210:	aa e0       	ldi	r26, 0x0A	; 10
     212:	b2 e0       	ldi	r27, 0x02	; 2
     214:	01 c0       	rjmp	.+2      	; 0x218 <.do_clear_bss_start>

00000216 <.do_clear_bss_loop>:
     216:	1d 92       	st	X+, r1

00000218 <.do_clear_bss_start>:
     218:	a4 34       	cpi	r26, 0x44	; 68
     21a:	b2 07       	cpc	r27, r18
     21c:	e1 f7       	brne	.-8      	; 0x216 <.do_clear_bss_loop>
     21e:	77 d1       	rcall	.+750    	; 0x50e <main>
     220:	0c 94 b0 0b 	jmp	0x1760	; 0x1760 <_exit>

00000224 <__bad_interrupt>:
     224:	ed ce       	rjmp	.-550    	; 0x0 <__vectors>

00000226 <adc_init>:
/*!
 * Initialize atmega162 to interface with the interrupt signal
 * of the ADC through Port D pin 2
 */
void adc_init(void){
	DDRD  &= ~(1 << DDD2);
     226:	8a 98       	cbi	0x11, 2	; 17
	PORTD |= (1 << PD2);
     228:	92 9a       	sbi	0x12, 2	; 18
     22a:	08 95       	ret

0000022c <adc_read_channel>:
 * @param[in] ch analog channel to perform conversion on
 * @return digital read of analog signal
 */
uint8_t adc_read_channel(uint8_t ch)
{	
	*adc_adr = (ch | 0b0100);
     22c:	84 60       	ori	r24, 0x04	; 4
     22e:	80 93 00 11 	sts	0x1100, r24
	
	while ((PIND & (1<<PIND2))); // wait until pin is high, adc read complete when pin is high
     232:	82 99       	sbic	0x10, 2	; 16
     234:	fe cf       	rjmp	.-4      	; 0x232 <adc_read_channel+0x6>
	
	return *adc_adr;
     236:	80 91 00 11 	lds	r24, 0x1100
}
     23a:	08 95       	ret

0000023c <__vector_2>:
 * the interrupt. \n
 * If there is no room in the buffer, then the interrupt is cleared and message
 * is ignored. 
   \todo Implement better overflow handling? Maybe oldest values should be discardeded. Can be as easy as doing head++, tail++
 */
ISR(INT1_vect){
     23c:	1f 92       	push	r1
     23e:	0f 92       	push	r0
     240:	0f b6       	in	r0, 0x3f	; 63
     242:	0f 92       	push	r0
     244:	11 24       	eor	r1, r1
     246:	ff 92       	push	r15
     248:	0f 93       	push	r16
     24a:	1f 93       	push	r17
     24c:	2f 93       	push	r18
     24e:	3f 93       	push	r19
     250:	4f 93       	push	r20
     252:	5f 93       	push	r21
     254:	6f 93       	push	r22
     256:	7f 93       	push	r23
     258:	8f 93       	push	r24
     25a:	9f 93       	push	r25
     25c:	af 93       	push	r26
     25e:	bf 93       	push	r27
     260:	ef 93       	push	r30
     262:	ff 93       	push	r31
     264:	cf 93       	push	r28
     266:	df 93       	push	r29
     268:	cd b7       	in	r28, 0x3d	; 61
     26a:	de b7       	in	r29, 0x3e	; 62
     26c:	2e 97       	sbiw	r28, 0x0e	; 14
     26e:	de bf       	out	0x3e, r29	; 62
     270:	cd bf       	out	0x3d, r28	; 61
	cli();	
     272:	f8 94       	cli
	///\todo implement overflow such that new data replaces old?
	// pick correct buffer, RXB1 has highest priority now
	volatile uint8_t n			  = 0;
     274:	19 82       	std	Y+1, r1	; 0x01
	volatile uint8_t MCP_RXBn	  = MCP_RXB0;
     276:	80 e6       	ldi	r24, 0x60	; 96
     278:	8a 83       	std	Y+2, r24	; 0x02
	volatile uint8_t MCP_READ_RXn = MCP_READ_RX0;
     27a:	80 e9       	ldi	r24, 0x90	; 144
     27c:	8b 83       	std	Y+3, r24	; 0x03
	volatile uint8_t MCP_RXnIF    = MCP_RX0IF;
     27e:	81 e0       	ldi	r24, 0x01	; 1
     280:	8c 83       	std	Y+4, r24	; 0x04
	if (mcp_readstatus() & 0x02)
     282:	b1 d1       	rcall	.+866    	; 0x5e6 <mcp_readstatus>
     284:	81 ff       	sbrs	r24, 1
     286:	08 c0       	rjmp	.+16     	; 0x298 <__vector_2+0x5c>
	{	
		n = 1;
     288:	81 e0       	ldi	r24, 0x01	; 1
     28a:	89 83       	std	Y+1, r24	; 0x01
		MCP_RXBn	 = MCP_RXB1;
     28c:	80 e7       	ldi	r24, 0x70	; 112
     28e:	8a 83       	std	Y+2, r24	; 0x02
		MCP_READ_RXn = MCP_READ_RX1;
     290:	84 e9       	ldi	r24, 0x94	; 148
     292:	8b 83       	std	Y+3, r24	; 0x03
		MCP_RXnIF    = MCP_RX1IF;
     294:	82 e0       	ldi	r24, 0x02	; 2
     296:	8c 83       	std	Y+4, r24	; 0x04
	}
	
	// if there is room in buffer first
	if ((rx_head[n]+1)%RX_BUFFER_MAX != rx_tail[n]){
     298:	e9 81       	ldd	r30, Y+1	; 0x01
     29a:	f0 e0       	ldi	r31, 0x00	; 0
     29c:	e4 5f       	subi	r30, 0xF4	; 244
     29e:	fd 4f       	sbci	r31, 0xFD	; 253
     2a0:	20 81       	ld	r18, Z
     2a2:	e9 81       	ldd	r30, Y+1	; 0x01
     2a4:	f0 e0       	ldi	r31, 0x00	; 0
     2a6:	e6 5f       	subi	r30, 0xF6	; 246
     2a8:	fd 4f       	sbci	r31, 0xFD	; 253
     2aa:	80 81       	ld	r24, Z
     2ac:	30 e0       	ldi	r19, 0x00	; 0
     2ae:	2f 5f       	subi	r18, 0xFF	; 255
     2b0:	3f 4f       	sbci	r19, 0xFF	; 255
     2b2:	27 70       	andi	r18, 0x07	; 7
     2b4:	30 78       	andi	r19, 0x80	; 128
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	28 17       	cp	r18, r24
     2ba:	39 07       	cpc	r19, r25
     2bc:	09 f4       	brne	.+2      	; 0x2c0 <__vector_2+0x84>
     2be:	59 c0       	rjmp	.+178    	; 0x372 <__vector_2+0x136>
    	volatile can_msg_t msg = {};
     2c0:	fe 01       	movw	r30, r28
     2c2:	35 96       	adiw	r30, 0x05	; 5
     2c4:	8a e0       	ldi	r24, 0x0A	; 10
     2c6:	df 01       	movw	r26, r30
     2c8:	1d 92       	st	X+, r1
     2ca:	8a 95       	dec	r24
     2cc:	e9 f7       	brne	.-6      	; 0x2c8 <__vector_2+0x8c>
    	
    	msg.length = mcp_read(MCP_RXBn | MCP_RXBnDLC) & MCP_DLC_MASK;
     2ce:	8a 81       	ldd	r24, Y+2	; 0x02
     2d0:	85 66       	ori	r24, 0x65	; 101
     2d2:	6c d1       	rcall	.+728    	; 0x5ac <mcp_read>
     2d4:	8f 70       	andi	r24, 0x0F	; 15
     2d6:	8e 83       	std	Y+6, r24	; 0x06
    	
    	spi_ss_low();
     2d8:	86 d5       	rcall	.+2828   	; 0xde6 <spi_ss_low>
    	spi_transmit(MCP_READ_RXn | 0x00); // sid
     2da:	8b 81       	ldd	r24, Y+3	; 0x03
     2dc:	8f d5       	rcall	.+2846   	; 0xdfc <spi_transmit>
    	msg.sid = spi_transmit(0);
     2de:	80 e0       	ldi	r24, 0x00	; 0
     2e0:	8d d5       	rcall	.+2842   	; 0xdfc <spi_transmit>
     2e2:	8d 83       	std	Y+5, r24	; 0x05
    	spi_ss_high();
     2e4:	82 d5       	rcall	.+2820   	; 0xdea <spi_ss_high>
    	
    	spi_ss_low();
     2e6:	7f d5       	rcall	.+2814   	; 0xde6 <spi_ss_low>
    	spi_transmit(MCP_READ_RXn | 0x02);
     2e8:	8b 81       	ldd	r24, Y+3	; 0x03
     2ea:	82 60       	ori	r24, 0x02	; 2
     2ec:	87 d5       	rcall	.+2830   	; 0xdfc <spi_transmit>
    	
    	for (uint8_t i = 0; i < msg.length; ++i)
     2ee:	8e 81       	ldd	r24, Y+6	; 0x06
     2f0:	88 23       	and	r24, r24
     2f2:	81 f0       	breq	.+32     	; 0x314 <__vector_2+0xd8>
     2f4:	f1 2c       	mov	r15, r1
    	{
    		msg.data[i] = spi_transmit(0);
     2f6:	0f 2d       	mov	r16, r15
     2f8:	10 e0       	ldi	r17, 0x00	; 0
     2fa:	80 e0       	ldi	r24, 0x00	; 0
     2fc:	7f d5       	rcall	.+2814   	; 0xdfc <spi_transmit>
     2fe:	e7 e0       	ldi	r30, 0x07	; 7
     300:	f0 e0       	ldi	r31, 0x00	; 0
     302:	ec 0f       	add	r30, r28
     304:	fd 1f       	adc	r31, r29
     306:	e0 0f       	add	r30, r16
     308:	f1 1f       	adc	r31, r17
     30a:	80 83       	st	Z, r24
    	spi_ss_high();
    	
    	spi_ss_low();
    	spi_transmit(MCP_READ_RXn | 0x02);
    	
    	for (uint8_t i = 0; i < msg.length; ++i)
     30c:	f3 94       	inc	r15
     30e:	8e 81       	ldd	r24, Y+6	; 0x06
     310:	f8 16       	cp	r15, r24
     312:	88 f3       	brcs	.-30     	; 0x2f6 <__vector_2+0xba>
    	{
    		msg.data[i] = spi_transmit(0);
    	}
    	spi_ss_high();
     314:	6a d5       	rcall	.+2772   	; 0xdea <spi_ss_high>
        
    	rx_buffer[n][rx_head[n]] = msg;
     316:	29 81       	ldd	r18, Y+1	; 0x01
     318:	e9 81       	ldd	r30, Y+1	; 0x01
     31a:	f0 e0       	ldi	r31, 0x00	; 0
     31c:	e4 5f       	subi	r30, 0xF4	; 244
     31e:	fd 4f       	sbci	r31, 0xFD	; 253
     320:	80 81       	ld	r24, Z
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	dc 01       	movw	r26, r24
     326:	aa 0f       	add	r26, r26
     328:	bb 1f       	adc	r27, r27
     32a:	88 0f       	add	r24, r24
     32c:	99 1f       	adc	r25, r25
     32e:	88 0f       	add	r24, r24
     330:	99 1f       	adc	r25, r25
     332:	88 0f       	add	r24, r24
     334:	99 1f       	adc	r25, r25
     336:	a8 0f       	add	r26, r24
     338:	b9 1f       	adc	r27, r25
     33a:	80 e5       	ldi	r24, 0x50	; 80
     33c:	28 9f       	mul	r18, r24
     33e:	a0 0d       	add	r26, r0
     340:	b1 1d       	adc	r27, r1
     342:	11 24       	eor	r1, r1
     344:	a2 5f       	subi	r26, 0xF2	; 242
     346:	bd 4f       	sbci	r27, 0xFD	; 253
     348:	8a e0       	ldi	r24, 0x0A	; 10
     34a:	fe 01       	movw	r30, r28
     34c:	35 96       	adiw	r30, 0x05	; 5
     34e:	01 90       	ld	r0, Z+
     350:	0d 92       	st	X+, r0
     352:	8a 95       	dec	r24
     354:	e1 f7       	brne	.-8      	; 0x34e <__vector_2+0x112>
    	rx_head[n] = (rx_head[n]+1) % RX_BUFFER_MAX;
     356:	e9 81       	ldd	r30, Y+1	; 0x01
     358:	f0 e0       	ldi	r31, 0x00	; 0
     35a:	a9 81       	ldd	r26, Y+1	; 0x01
     35c:	b0 e0       	ldi	r27, 0x00	; 0
     35e:	a4 5f       	subi	r26, 0xF4	; 244
     360:	bd 4f       	sbci	r27, 0xFD	; 253
     362:	8c 91       	ld	r24, X
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	01 96       	adiw	r24, 0x01	; 1
     368:	87 70       	andi	r24, 0x07	; 7
     36a:	90 78       	andi	r25, 0x80	; 128
     36c:	e4 5f       	subi	r30, 0xF4	; 244
     36e:	fd 4f       	sbci	r31, 0xFD	; 253
     370:	80 83       	st	Z, r24
	}

    mcp_bitmodify(MCP_CANINTF, MCP_RXnIF, 0);
     372:	6c 81       	ldd	r22, Y+4	; 0x04
     374:	40 e0       	ldi	r20, 0x00	; 0
     376:	8c e2       	ldi	r24, 0x2C	; 44
     378:	41 d1       	rcall	.+642    	; 0x5fc <mcp_bitmodify>
	sei();
     37a:	78 94       	sei
}
     37c:	2e 96       	adiw	r28, 0x0e	; 14
     37e:	0f b6       	in	r0, 0x3f	; 63
     380:	f8 94       	cli
     382:	de bf       	out	0x3e, r29	; 62
     384:	0f be       	out	0x3f, r0	; 63
     386:	cd bf       	out	0x3d, r28	; 61
     388:	df 91       	pop	r29
     38a:	cf 91       	pop	r28
     38c:	ff 91       	pop	r31
     38e:	ef 91       	pop	r30
     390:	bf 91       	pop	r27
     392:	af 91       	pop	r26
     394:	9f 91       	pop	r25
     396:	8f 91       	pop	r24
     398:	7f 91       	pop	r23
     39a:	6f 91       	pop	r22
     39c:	5f 91       	pop	r21
     39e:	4f 91       	pop	r20
     3a0:	3f 91       	pop	r19
     3a2:	2f 91       	pop	r18
     3a4:	1f 91       	pop	r17
     3a6:	0f 91       	pop	r16
     3a8:	ff 90       	pop	r15
     3aa:	0f 90       	pop	r0
     3ac:	0f be       	out	0x3f, r0	; 63
     3ae:	0f 90       	pop	r0
     3b0:	1f 90       	pop	r1
     3b2:	18 95       	reti

000003b4 <can_init>:
/*!
 * Initialize can controller and mcp. 
 */
void can_init()
{
	mcp_init();
     3b4:	37 d1       	rcall	.+622    	; 0x624 <mcp_init>
	
	// enable interupt
	mcp_bitmodify(MCP_CANINTE, MCP_RX_INT, MCP_RX_INT);
     3b6:	43 e0       	ldi	r20, 0x03	; 3
     3b8:	63 e0       	ldi	r22, 0x03	; 3
     3ba:	8b e2       	ldi	r24, 0x2B	; 43
     3bc:	1f d1       	rcall	.+574    	; 0x5fc <mcp_bitmodify>
	GICR |= (1 << INT1); 
     3be:	8b b7       	in	r24, 0x3b	; 59
     3c0:	80 68       	ori	r24, 0x80	; 128
     3c2:	8b bf       	out	0x3b, r24	; 59
     3c4:	08 95       	ret

000003c6 <game_init_menu>:
	game_state = IN_MENU;
}

void game_init_menu(){
	
	menu_move_cursor(0);
     3c6:	80 e0       	ldi	r24, 0x00	; 0
     3c8:	85 c2       	rjmp	.+1290   	; 0x8d4 <menu_move_cursor>
     3ca:	08 95       	ret

000003cc <game_init>:

static game_state_t game_state = INVALID;


void game_init(){
	game_init_menu();
     3cc:	fc df       	rcall	.-8      	; 0x3c6 <game_init_menu>
	
	game_state = IN_MENU;
     3ce:	81 e0       	ldi	r24, 0x01	; 1
     3d0:	80 93 ae 02 	sts	0x02AE, r24
     3d4:	08 95       	ret

000003d6 <game_start>:
	menu_move_cursor(0);
	
}

void game_start(){
	fprintf(&uart_out, "game starting!");
     3d6:	28 e2       	ldi	r18, 0x28	; 40
     3d8:	31 e0       	ldi	r19, 0x01	; 1
     3da:	4e e0       	ldi	r20, 0x0E	; 14
     3dc:	50 e0       	ldi	r21, 0x00	; 0
     3de:	61 e0       	ldi	r22, 0x01	; 1
     3e0:	70 e0       	ldi	r23, 0x00	; 0
     3e2:	86 e3       	ldi	r24, 0x36	; 54
     3e4:	91 e0       	ldi	r25, 0x01	; 1
     3e6:	1c c7       	rjmp	.+3640   	; 0x1220 <fwrite>
     3e8:	08 95       	ret

000003ea <game_tick_menu>:
		default:
			break;
	}
}

void game_tick_menu(){
     3ea:	cf 93       	push	r28
	static BOOL click_released = TRUE;
	static BOOL joy_released = TRUE;
	
	menu_print_current();
     3ec:	ff d1       	rcall	.+1022   	; 0x7ec <menu_print_current>
	
	joystick_t joy = joy_get_state();
     3ee:	7e d0       	rcall	.+252    	; 0x4ec <joy_get_state>
     3f0:	96 2f       	mov	r25, r22
     3f2:	67 2f       	mov	r22, r23
     3f4:	c8 2f       	mov	r28, r24
	
	direction_t joy_dir = joy_direction(joy.x, joy.y);
     3f6:	89 2f       	mov	r24, r25
     3f8:	3d d0       	rcall	.+122    	; 0x474 <joy_direction>
	
	
	switch (joy_dir){
     3fa:	83 30       	cpi	r24, 0x03	; 3
     3fc:	d9 f0       	breq	.+54     	; 0x434 <game_tick_menu+0x4a>
     3fe:	28 f4       	brcc	.+10     	; 0x40a <game_tick_menu+0x20>
     400:	88 23       	and	r24, r24
     402:	09 f1       	breq	.+66     	; 0x446 <game_tick_menu+0x5c>
     404:	82 30       	cpi	r24, 0x02	; 2
     406:	69 f0       	breq	.+26     	; 0x422 <game_tick_menu+0x38>
     408:	2d c0       	rjmp	.+90     	; 0x464 <game_tick_menu+0x7a>
     40a:	84 30       	cpi	r24, 0x04	; 4
     40c:	21 f1       	breq	.+72     	; 0x456 <game_tick_menu+0x6c>
     40e:	85 30       	cpi	r24, 0x05	; 5
     410:	49 f5       	brne	.+82     	; 0x464 <game_tick_menu+0x7a>
		case CLICKED:
			if (click_released){
     412:	80 91 07 01 	lds	r24, 0x0107
     416:	88 23       	and	r24, r24
     418:	29 f1       	breq	.+74     	; 0x464 <game_tick_menu+0x7a>
				click_released = FALSE;
     41a:	10 92 07 01 	sts	0x0107, r1
				menu_enter_current();
     41e:	88 d2       	rcall	.+1296   	; 0x930 <menu_enter_current>
     420:	21 c0       	rjmp	.+66     	; 0x464 <game_tick_menu+0x7a>
			} 
			break;
			
		case UP:
			if (joy_released){
     422:	80 91 06 01 	lds	r24, 0x0106
     426:	88 23       	and	r24, r24
     428:	e9 f0       	breq	.+58     	; 0x464 <game_tick_menu+0x7a>
				joy_released = FALSE;
     42a:	10 92 06 01 	sts	0x0106, r1
				menu_move_cursor(-1);
     42e:	8f ef       	ldi	r24, 0xFF	; 255
     430:	51 d2       	rcall	.+1186   	; 0x8d4 <menu_move_cursor>
     432:	18 c0       	rjmp	.+48     	; 0x464 <game_tick_menu+0x7a>
			}
			break;
		case DOWN:
			if (joy_released){
     434:	80 91 06 01 	lds	r24, 0x0106
     438:	88 23       	and	r24, r24
     43a:	a1 f0       	breq	.+40     	; 0x464 <game_tick_menu+0x7a>
				joy_released = FALSE;
     43c:	10 92 06 01 	sts	0x0106, r1
				menu_move_cursor(1);
     440:	81 e0       	ldi	r24, 0x01	; 1
     442:	48 d2       	rcall	.+1168   	; 0x8d4 <menu_move_cursor>
     444:	0f c0       	rjmp	.+30     	; 0x464 <game_tick_menu+0x7a>
			}
		case RIGHT:
			break;
		
		case LEFT:
			if (joy_released){
     446:	80 91 06 01 	lds	r24, 0x0106
     44a:	88 23       	and	r24, r24
     44c:	59 f0       	breq	.+22     	; 0x464 <game_tick_menu+0x7a>
				joy_released = FALSE;
     44e:	10 92 06 01 	sts	0x0106, r1
				menu_enter_parent();
     452:	e2 d2       	rcall	.+1476   	; 0xa18 <menu_enter_parent>
     454:	07 c0       	rjmp	.+14     	; 0x464 <game_tick_menu+0x7a>
			}
		
			break;
		
		case NEUTRAL:
			joy_released = TRUE;
     456:	81 e0       	ldi	r24, 0x01	; 1
     458:	80 93 06 01 	sts	0x0106, r24
			click_released = !joy.click;
     45c:	c1 11       	cpse	r28, r1
     45e:	80 e0       	ldi	r24, 0x00	; 0
     460:	80 93 07 01 	sts	0x0107, r24
		}
		

	}
	*/
}
     464:	cf 91       	pop	r28
     466:	08 95       	ret

00000468 <game_tick>:
}


void game_tick(){
	
	switch (game_state){
     468:	80 91 ae 02 	lds	r24, 0x02AE
     46c:	81 30       	cpi	r24, 0x01	; 1
     46e:	09 f4       	brne	.+2      	; 0x472 <game_tick+0xa>
		
		
		
			break;
		case IN_MENU:
			game_tick_menu();
     470:	bc cf       	rjmp	.-136    	; 0x3ea <game_tick_menu>
     472:	08 95       	ret

00000474 <joy_direction>:
	msg.length = 4;
	
	fprintf(&uart_out, "joy sent: %i\t%i\t%i\t%i\n",   joy_xs, joy_ys, joy_dir, joy_click);
	
	can_send(msg, 0);
}
     474:	28 9b       	sbis	0x05, 0	; 5
     476:	30 c0       	rjmp	.+96     	; 0x4d8 <joy_direction+0x64>
     478:	28 2f       	mov	r18, r24
     47a:	30 e0       	ldi	r19, 0x00	; 0
     47c:	28 56       	subi	r18, 0x68	; 104
     47e:	31 09       	sbc	r19, r1
     480:	21 33       	cpi	r18, 0x31	; 49
     482:	31 05       	cpc	r19, r1
     484:	38 f4       	brcc	.+14     	; 0x494 <joy_direction+0x20>
     486:	26 2f       	mov	r18, r22
     488:	30 e0       	ldi	r19, 0x00	; 0
     48a:	28 56       	subi	r18, 0x68	; 104
     48c:	31 09       	sbc	r19, r1
     48e:	21 33       	cpi	r18, 0x31	; 49
     490:	31 05       	cpc	r19, r1
     492:	20 f1       	brcs	.+72     	; 0x4dc <joy_direction+0x68>
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	80 58       	subi	r24, 0x80	; 128
     498:	91 09       	sbc	r25, r1
     49a:	70 e0       	ldi	r23, 0x00	; 0
     49c:	60 58       	subi	r22, 0x80	; 128
     49e:	71 09       	sbc	r23, r1
     4a0:	9b 01       	movw	r18, r22
     4a2:	77 23       	and	r23, r23
     4a4:	24 f4       	brge	.+8      	; 0x4ae <joy_direction+0x3a>
     4a6:	22 27       	eor	r18, r18
     4a8:	33 27       	eor	r19, r19
     4aa:	26 1b       	sub	r18, r22
     4ac:	37 0b       	sbc	r19, r23
     4ae:	28 17       	cp	r18, r24
     4b0:	39 07       	cpc	r19, r25
     4b2:	b4 f0       	brlt	.+44     	; 0x4e0 <joy_direction+0x6c>
     4b4:	31 95       	neg	r19
     4b6:	21 95       	neg	r18
     4b8:	31 09       	sbc	r19, r1
     4ba:	82 17       	cp	r24, r18
     4bc:	93 07       	cpc	r25, r19
     4be:	94 f0       	brlt	.+36     	; 0x4e4 <joy_direction+0x70>
     4c0:	9c 01       	movw	r18, r24
     4c2:	99 23       	and	r25, r25
     4c4:	24 f4       	brge	.+8      	; 0x4ce <joy_direction+0x5a>
     4c6:	22 27       	eor	r18, r18
     4c8:	33 27       	eor	r19, r19
     4ca:	28 1b       	sub	r18, r24
     4cc:	39 0b       	sbc	r19, r25
     4ce:	26 17       	cp	r18, r22
     4d0:	37 07       	cpc	r19, r23
     4d2:	54 f4       	brge	.+20     	; 0x4e8 <joy_direction+0x74>
     4d4:	82 e0       	ldi	r24, 0x02	; 2
     4d6:	08 95       	ret
     4d8:	85 e0       	ldi	r24, 0x05	; 5
     4da:	08 95       	ret
     4dc:	84 e0       	ldi	r24, 0x04	; 4
     4de:	08 95       	ret
     4e0:	81 e0       	ldi	r24, 0x01	; 1
     4e2:	08 95       	ret
     4e4:	80 e0       	ldi	r24, 0x00	; 0
     4e6:	08 95       	ret
     4e8:	83 e0       	ldi	r24, 0x03	; 3
     4ea:	08 95       	ret

000004ec <joy_get_state>:
     4ec:	cf 93       	push	r28
     4ee:	81 e0       	ldi	r24, 0x01	; 1
     4f0:	9d de       	rcall	.-710    	; 0x22c <adc_read_channel>
     4f2:	c8 2f       	mov	r28, r24
     4f4:	80 e0       	ldi	r24, 0x00	; 0
     4f6:	9a de       	rcall	.-716    	; 0x22c <adc_read_channel>
     4f8:	95 b1       	in	r25, 0x05	; 5
     4fa:	90 95       	com	r25
     4fc:	6c 2f       	mov	r22, r28
     4fe:	78 2f       	mov	r23, r24
     500:	89 2f       	mov	r24, r25
     502:	81 70       	andi	r24, 0x01	; 1
     504:	cf 91       	pop	r28
     506:	08 95       	ret

00000508 <joystick_init>:


void joystick_init(void){
	PORTE  |= 1 << CLICK_PIN;    // + PUD=0 gives pull-up
     508:	38 9a       	sbi	0x07, 0	; 7
	DDRE   &= ~(1 << CLICK_PIN); // input
     50a:	30 98       	cbi	0x06, 0	; 6
     50c:	08 95       	ret

0000050e <main>:
#include "joystick.h"
#include "game.h"

int main()
{
	cli();
     50e:	f8 94       	cli
	// SRAM init
	MCUCR |= (1 << SRE);
     510:	85 b7       	in	r24, 0x35	; 53
     512:	80 68       	ori	r24, 0x80	; 128
     514:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1 << XMM2);
     516:	80 b7       	in	r24, 0x30	; 48
     518:	80 62       	ori	r24, 0x20	; 32
     51a:	80 bf       	out	0x30, r24	; 48
	
	uart_init();
     51c:	fa d4       	rcall	.+2548   	; 0xf12 <uart_init>
	
	// setup heap
	__malloc_heap_start = (char*)RAM_ADR;
     51e:	80 e0       	ldi	r24, 0x00	; 0
     520:	98 e1       	ldi	r25, 0x18	; 24
     522:	90 93 03 01 	sts	0x0103, r25
     526:	80 93 02 01 	sts	0x0102, r24
	__malloc_heap_end   = (char*)(RAM_ADR + RAM_SIZE);
     52a:	80 e0       	ldi	r24, 0x00	; 0
     52c:	90 e2       	ldi	r25, 0x20	; 32
     52e:	90 93 01 01 	sts	0x0101, r25
     532:	80 93 00 01 	sts	0x0100, r24
	
	adc_init(); // adc init (must be after SRAM init)
     536:	77 de       	rcall	.-786    	; 0x226 <adc_init>
	oled_init();
     538:	5b d3       	rcall	.+1718   	; 0xbf0 <oled_init>
	menu_init(); // after oled
     53a:	0c d1       	rcall	.+536    	; 0x754 <menu_init>
	spi_init();
     53c:	58 d4       	rcall	.+2224   	; 0xdee <spi_init>
	can_init(); // after spi
     53e:	3a df       	rcall	.-396    	; 0x3b4 <can_init>
	
	sei();
     540:	78 94       	sei
	
	// setup printf
	stdout = &uart_out; // printf defaults to oled
     542:	88 e2       	ldi	r24, 0x28	; 40
     544:	91 e0       	ldi	r25, 0x01	; 1
     546:	90 93 41 03 	sts	0x0341, r25
     54a:	80 93 40 03 	sts	0x0340, r24
	stdin  = &uart_in;
     54e:	8a e1       	ldi	r24, 0x1A	; 26
     550:	91 e0       	ldi	r25, 0x01	; 1
     552:	90 93 3f 03 	sts	0x033F, r25
     556:	80 93 3e 03 	sts	0x033E, r24

	
	oled_home();
     55a:	74 d2       	rcall	.+1256   	; 0xa44 <oled_home>
	
	game_init(); // after menu_init
     55c:	37 df       	rcall	.-402    	; 0x3cc <game_init>
	
	fprintf(&uart_out, "entering loop\n");
     55e:	28 e2       	ldi	r18, 0x28	; 40
     560:	31 e0       	ldi	r19, 0x01	; 1
     562:	4e e0       	ldi	r20, 0x0E	; 14
     564:	50 e0       	ldi	r21, 0x00	; 0
     566:	61 e0       	ldi	r22, 0x01	; 1
     568:	70 e0       	ldi	r23, 0x00	; 0
     56a:	85 e4       	ldi	r24, 0x45	; 69
     56c:	91 e0       	ldi	r25, 0x01	; 1
     56e:	58 d6       	rcall	.+3248   	; 0x1220 <fwrite>
	
	uint8_t i = 0;
	
	while (1)
	{	
		if (++i == 0)
     570:	c1 e0       	ldi	r28, 0x01	; 1
     572:	09 c0       	rjmp	.+18     	; 0x586 <main+0x78>
			fprintf(&uart_out, "tick x256\n");
     574:	28 e2       	ldi	r18, 0x28	; 40
     576:	31 e0       	ldi	r19, 0x01	; 1
     578:	4a e0       	ldi	r20, 0x0A	; 10
     57a:	50 e0       	ldi	r21, 0x00	; 0
     57c:	61 e0       	ldi	r22, 0x01	; 1
     57e:	70 e0       	ldi	r23, 0x00	; 0
     580:	84 e5       	ldi	r24, 0x54	; 84
     582:	91 e0       	ldi	r25, 0x01	; 1
     584:	4d d6       	rcall	.+3226   	; 0x1220 <fwrite>
		
		game_tick();
     586:	70 df       	rcall	.-288    	; 0x468 <game_tick>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     588:	8f ef       	ldi	r24, 0xFF	; 255
     58a:	9f e2       	ldi	r25, 0x2F	; 47
     58c:	01 97       	sbiw	r24, 0x01	; 1
     58e:	f1 f7       	brne	.-4      	; 0x58c <main+0x7e>
     590:	00 c0       	rjmp	.+0      	; 0x592 <main+0x84>
     592:	00 00       	nop
	
	uint8_t i = 0;
	
	while (1)
	{	
		if (++i == 0)
     594:	cf 5f       	subi	r28, 0xFF	; 255
     596:	b9 f7       	brne	.-18     	; 0x586 <main+0x78>
     598:	ed cf       	rjmp	.-38     	; 0x574 <main+0x66>

0000059a <mcp_reset>:
	spi_ss_high();
	
	#ifdef MCP_DEBUG
	fprintf(&uart_out, "MCP_RTS\t%i\n", tx_buffer);
	#endif // MCP_DEBUG
}
     59a:	25 d4       	rcall	.+2122   	; 0xde6 <spi_ss_low>
     59c:	80 ec       	ldi	r24, 0xC0	; 192
     59e:	2e d4       	rcall	.+2140   	; 0xdfc <spi_transmit>
     5a0:	24 d4       	rcall	.+2120   	; 0xdea <spi_ss_high>
     5a2:	80 e0       	ldi	r24, 0x00	; 0
     5a4:	8f 5f       	subi	r24, 0xFF	; 255
     5a6:	80 38       	cpi	r24, 0x80	; 128
     5a8:	e9 f7       	brne	.-6      	; 0x5a4 <mcp_reset+0xa>
     5aa:	08 95       	ret

000005ac <mcp_read>:
     5ac:	cf 93       	push	r28
     5ae:	c8 2f       	mov	r28, r24
     5b0:	1a d4       	rcall	.+2100   	; 0xde6 <spi_ss_low>
     5b2:	83 e0       	ldi	r24, 0x03	; 3
     5b4:	23 d4       	rcall	.+2118   	; 0xdfc <spi_transmit>
     5b6:	8c 2f       	mov	r24, r28
     5b8:	21 d4       	rcall	.+2114   	; 0xdfc <spi_transmit>
     5ba:	80 e0       	ldi	r24, 0x00	; 0
     5bc:	1f d4       	rcall	.+2110   	; 0xdfc <spi_transmit>
     5be:	c8 2f       	mov	r28, r24
     5c0:	14 d4       	rcall	.+2088   	; 0xdea <spi_ss_high>
     5c2:	8c 2f       	mov	r24, r28
     5c4:	cf 91       	pop	r28
     5c6:	08 95       	ret

000005c8 <mcp_write>:
     5c8:	cf 93       	push	r28
     5ca:	df 93       	push	r29
     5cc:	d8 2f       	mov	r29, r24
     5ce:	c6 2f       	mov	r28, r22
     5d0:	0a d4       	rcall	.+2068   	; 0xde6 <spi_ss_low>
     5d2:	82 e0       	ldi	r24, 0x02	; 2
     5d4:	13 d4       	rcall	.+2086   	; 0xdfc <spi_transmit>
     5d6:	8d 2f       	mov	r24, r29
     5d8:	11 d4       	rcall	.+2082   	; 0xdfc <spi_transmit>
     5da:	8c 2f       	mov	r24, r28
     5dc:	0f d4       	rcall	.+2078   	; 0xdfc <spi_transmit>
     5de:	05 d4       	rcall	.+2058   	; 0xdea <spi_ss_high>
     5e0:	df 91       	pop	r29
     5e2:	cf 91       	pop	r28
     5e4:	08 95       	ret

000005e6 <mcp_readstatus>:

uint8_t mcp_readstatus()
{
     5e6:	cf 93       	push	r28
	spi_ss_low();
     5e8:	fe d3       	rcall	.+2044   	; 0xde6 <spi_ss_low>
	spi_transmit(MCP_READ_STATUS);
     5ea:	80 ea       	ldi	r24, 0xA0	; 160
     5ec:	07 d4       	rcall	.+2062   	; 0xdfc <spi_transmit>
	uint8_t status = spi_transmit(0);
     5ee:	80 e0       	ldi	r24, 0x00	; 0
     5f0:	05 d4       	rcall	.+2058   	; 0xdfc <spi_transmit>
     5f2:	c8 2f       	mov	r28, r24
	spi_ss_high();
     5f4:	fa d3       	rcall	.+2036   	; 0xdea <spi_ss_high>
	#ifdef MCP_DEBUG
	fprintf(&uart_out, "MCP_READ_STATUS\t%x\n", status);
	#endif // MCP_DEBUG
	
	return status;
}
     5f6:	8c 2f       	mov	r24, r28
     5f8:	cf 91       	pop	r28
     5fa:	08 95       	ret

000005fc <mcp_bitmodify>:

void mcp_bitmodify(uint8_t adr, uint8_t mask, uint8_t data)
{
     5fc:	1f 93       	push	r17
     5fe:	cf 93       	push	r28
     600:	df 93       	push	r29
     602:	18 2f       	mov	r17, r24
     604:	d6 2f       	mov	r29, r22
     606:	c4 2f       	mov	r28, r20
	spi_ss_low();
     608:	ee d3       	rcall	.+2012   	; 0xde6 <spi_ss_low>
	spi_transmit(MCP_BITMOD);
     60a:	85 e0       	ldi	r24, 0x05	; 5
     60c:	f7 d3       	rcall	.+2030   	; 0xdfc <spi_transmit>
	spi_transmit(adr);
     60e:	81 2f       	mov	r24, r17
     610:	f5 d3       	rcall	.+2026   	; 0xdfc <spi_transmit>
	spi_transmit(mask);
     612:	8d 2f       	mov	r24, r29
     614:	f3 d3       	rcall	.+2022   	; 0xdfc <spi_transmit>
	spi_transmit(data);
     616:	8c 2f       	mov	r24, r28
     618:	f1 d3       	rcall	.+2018   	; 0xdfc <spi_transmit>
	spi_ss_high();
     61a:	e7 d3       	rcall	.+1998   	; 0xdea <spi_ss_high>
	
	#ifdef MCP_DEBUG
	fprintf(&uart_out, "MCP_BITMOD\t%x\t%x\t%x\n", adr, mask, data);
	#endif // MCP_DEBUG
}
     61c:	df 91       	pop	r29
     61e:	cf 91       	pop	r28
     620:	1f 91       	pop	r17
     622:	08 95       	ret

00000624 <mcp_init>:
#include "uart.h"


void mcp_init()
{
	mcp_reset();
     624:	ba df       	rcall	.-140    	; 0x59a <mcp_reset>
	const uint8_t BRP		= 1;	// TQ = 2*Tosc*(BRP+1)  = 250 ns
	const uint8_t PrSeg		= 1;	// tPropSeg = (PrSeg + 1)
	const uint8_t PhSeg1	= 2;	// tPS1 = (PhSeg1 + 1)*TQ
	const uint8_t PhSeg2	= 2;	// tPS2 = (PhSeg2 + 1)*TQ
	
	mcp_write(MCP_CNF1, BRP);
     626:	61 e0       	ldi	r22, 0x01	; 1
     628:	8a e2       	ldi	r24, 0x2A	; 42
     62a:	ce df       	rcall	.-100    	; 0x5c8 <mcp_write>
	mcp_write(MCP_CNF2, PrSeg | (PhSeg1 << 3));
     62c:	61 e1       	ldi	r22, 0x11	; 17
     62e:	89 e2       	ldi	r24, 0x29	; 41
     630:	cb df       	rcall	.-106    	; 0x5c8 <mcp_write>
	mcp_write(MCP_CNF3, PhSeg2);
     632:	62 e0       	ldi	r22, 0x02	; 2
     634:	88 e2       	ldi	r24, 0x28	; 40
     636:	c8 df       	rcall	.-112    	; 0x5c8 <mcp_write>


	// Setup Rx registers
	//mcp_write(MCP_RXM0SIDH, 0);
	//mcp_write(MCP_RXM0SIDL, 0);
	mcp_bitmodify(MCP_RXB0CTRL, 0x60, 0x60);
     638:	40 e6       	ldi	r20, 0x60	; 96
     63a:	60 e6       	ldi	r22, 0x60	; 96
     63c:	80 e6       	ldi	r24, 0x60	; 96
     63e:	de df       	rcall	.-68     	; 0x5fc <mcp_bitmodify>
	mcp_bitmodify(MCP_RXB1CTRL, 0x60, 0x60);	
     640:	40 e6       	ldi	r20, 0x60	; 96
     642:	60 e6       	ldi	r22, 0x60	; 96
     644:	80 e7       	ldi	r24, 0x70	; 112
     646:	da df       	rcall	.-76     	; 0x5fc <mcp_bitmodify>
	
	// go to normal mode
	mcp_bitmodify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);
     648:	40 e0       	ldi	r20, 0x00	; 0
     64a:	60 ee       	ldi	r22, 0xE0	; 224
     64c:	8f e0       	ldi	r24, 0x0F	; 15
     64e:	d6 cf       	rjmp	.-84     	; 0x5fc <mcp_bitmodify>
     650:	08 95       	ret

00000652 <menu_action_nothing>:
		///\todo this can't be right?
		// should probably check for parent->submenu[i] != NULL
		if (1)
			free(&parent->submenus[i]);
	}
}
     652:	28 e2       	ldi	r18, 0x28	; 40
     654:	31 e0       	ldi	r19, 0x01	; 1
     656:	48 e0       	ldi	r20, 0x08	; 8
     658:	50 e0       	ldi	r21, 0x00	; 0
     65a:	61 e0       	ldi	r22, 0x01	; 1
     65c:	70 e0       	ldi	r23, 0x00	; 0
     65e:	8f e5       	ldi	r24, 0x5F	; 95
     660:	91 e0       	ldi	r25, 0x01	; 1
     662:	de c5       	rjmp	.+3004   	; 0x1220 <fwrite>
     664:	08 95       	ret

00000666 <menu_init_menu>:
     666:	cf 92       	push	r12
     668:	df 92       	push	r13
     66a:	ef 92       	push	r14
     66c:	ff 92       	push	r15
     66e:	0f 93       	push	r16
     670:	1f 93       	push	r17
     672:	cf 93       	push	r28
     674:	df 93       	push	r29
     676:	6c 01       	movw	r12, r24
     678:	7b 01       	movw	r14, r22
     67a:	8a 01       	movw	r16, r20
     67c:	80 91 b2 02 	lds	r24, 0x02B2
     680:	90 91 b3 02 	lds	r25, 0x02B3
     684:	68 17       	cp	r22, r24
     686:	79 07       	cpc	r23, r25
     688:	c9 f0       	breq	.+50     	; 0x6bc <menu_init_menu+0x56>
     68a:	fb 01       	movw	r30, r22
     68c:	84 a1       	ldd	r24, Z+36	; 0x24
     68e:	95 a1       	ldd	r25, Z+37	; 0x25
     690:	89 2b       	or	r24, r25
     692:	a1 f0       	breq	.+40     	; 0x6bc <menu_init_menu+0x56>
     694:	ff 92       	push	r15
     696:	6f 93       	push	r22
     698:	88 e6       	ldi	r24, 0x68	; 104
     69a:	91 e0       	ldi	r25, 0x01	; 1
     69c:	9f 93       	push	r25
     69e:	8f 93       	push	r24
     6a0:	88 e2       	ldi	r24, 0x28	; 40
     6a2:	91 e0       	ldi	r25, 0x01	; 1
     6a4:	9f 93       	push	r25
     6a6:	8f 93       	push	r24
     6a8:	7a d5       	rcall	.+2804   	; 0x119e <fprintf>
     6aa:	0f 90       	pop	r0
     6ac:	0f 90       	pop	r0
     6ae:	0f 90       	pop	r0
     6b0:	0f 90       	pop	r0
     6b2:	0f 90       	pop	r0
     6b4:	0f 90       	pop	r0
     6b6:	80 e0       	ldi	r24, 0x00	; 0
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	43 c0       	rjmp	.+134    	; 0x742 <menu_init_menu+0xdc>
     6bc:	8a e2       	ldi	r24, 0x2A	; 42
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	38 d4       	rcall	.+2160   	; 0xf32 <malloc>
     6c2:	ec 01       	movw	r28, r24
     6c4:	fc 01       	movw	r30, r24
     6c6:	80 e0       	ldi	r24, 0x00	; 0
     6c8:	11 92       	st	Z+, r1
     6ca:	8f 5f       	subi	r24, 0xFF	; 255
     6cc:	88 31       	cpi	r24, 0x18	; 24
     6ce:	e1 f7       	brne	.-8      	; 0x6c8 <menu_init_menu+0x62>
     6d0:	47 e1       	ldi	r20, 0x17	; 23
     6d2:	50 e0       	ldi	r21, 0x00	; 0
     6d4:	b6 01       	movw	r22, r12
     6d6:	ce 01       	movw	r24, r28
     6d8:	53 d5       	rcall	.+2726   	; 0x1180 <strncpy>
     6da:	fe 01       	movw	r30, r28
     6dc:	87 e0       	ldi	r24, 0x07	; 7
     6de:	11 8e       	std	Z+25, r1	; 0x19
     6e0:	10 8e       	std	Z+24, r1	; 0x18
     6e2:	81 50       	subi	r24, 0x01	; 1
     6e4:	32 96       	adiw	r30, 0x02	; 2
     6e6:	81 11       	cpse	r24, r1
     6e8:	fa cf       	rjmp	.-12     	; 0x6de <menu_init_menu+0x78>
     6ea:	e1 14       	cp	r14, r1
     6ec:	f1 04       	cpc	r15, r1
     6ee:	19 f4       	brne	.+6      	; 0x6f6 <menu_init_menu+0x90>
     6f0:	df a3       	std	Y+39, r29	; 0x27
     6f2:	ce a3       	std	Y+38, r28	; 0x26
     6f4:	22 c0       	rjmp	.+68     	; 0x73a <menu_init_menu+0xd4>
     6f6:	ff a2       	std	Y+39, r15	; 0x27
     6f8:	ee a2       	std	Y+38, r14	; 0x26
     6fa:	f7 01       	movw	r30, r14
     6fc:	80 8d       	ldd	r24, Z+24	; 0x18
     6fe:	91 8d       	ldd	r25, Z+25	; 0x19
     700:	89 2b       	or	r24, r25
     702:	41 f0       	breq	.+16     	; 0x714 <menu_init_menu+0xae>
     704:	21 e0       	ldi	r18, 0x01	; 1
     706:	30 e0       	ldi	r19, 0x00	; 0
     708:	a9 01       	movw	r20, r18
     70a:	82 8d       	ldd	r24, Z+26	; 0x1a
     70c:	93 8d       	ldd	r25, Z+27	; 0x1b
     70e:	89 2b       	or	r24, r25
     710:	71 f4       	brne	.+28     	; 0x72e <menu_init_menu+0xc8>
     712:	02 c0       	rjmp	.+4      	; 0x718 <menu_init_menu+0xb2>
     714:	40 e0       	ldi	r20, 0x00	; 0
     716:	50 e0       	ldi	r21, 0x00	; 0
     718:	44 5f       	subi	r20, 0xF4	; 244
     71a:	5f 4f       	sbci	r21, 0xFF	; 255
     71c:	ca 01       	movw	r24, r20
     71e:	88 0f       	add	r24, r24
     720:	99 1f       	adc	r25, r25
     722:	f7 01       	movw	r30, r14
     724:	e8 0f       	add	r30, r24
     726:	f9 1f       	adc	r31, r25
     728:	d1 83       	std	Z+1, r29	; 0x01
     72a:	c0 83       	st	Z, r28
     72c:	06 c0       	rjmp	.+12     	; 0x73a <menu_init_menu+0xd4>
     72e:	2f 5f       	subi	r18, 0xFF	; 255
     730:	3f 4f       	sbci	r19, 0xFF	; 255
     732:	32 96       	adiw	r30, 0x02	; 2
     734:	27 30       	cpi	r18, 0x07	; 7
     736:	31 05       	cpc	r19, r1
     738:	39 f7       	brne	.-50     	; 0x708 <menu_init_menu+0xa2>
     73a:	19 a7       	std	Y+41, r17	; 0x29
     73c:	08 a7       	std	Y+40, r16	; 0x28
     73e:	8c 2f       	mov	r24, r28
     740:	9d 2f       	mov	r25, r29
     742:	df 91       	pop	r29
     744:	cf 91       	pop	r28
     746:	1f 91       	pop	r17
     748:	0f 91       	pop	r16
     74a:	ff 90       	pop	r15
     74c:	ef 90       	pop	r14
     74e:	df 90       	pop	r13
     750:	cf 90       	pop	r12
     752:	08 95       	ret

00000754 <menu_init>:
     754:	cf 93       	push	r28
     756:	df 93       	push	r29
     758:	d7 de       	rcall	.-594    	; 0x508 <joystick_init>
     75a:	60 91 b2 02 	lds	r22, 0x02B2
     75e:	70 91 b3 02 	lds	r23, 0x02B3
     762:	49 e2       	ldi	r20, 0x29	; 41
     764:	53 e0       	ldi	r21, 0x03	; 3
     766:	8c e7       	ldi	r24, 0x7C	; 124
     768:	91 e0       	ldi	r25, 0x01	; 1
     76a:	7d df       	rcall	.-262    	; 0x666 <menu_init_menu>
     76c:	90 93 b3 02 	sts	0x02B3, r25
     770:	80 93 b2 02 	sts	0x02B2, r24
     774:	4b ee       	ldi	r20, 0xEB	; 235
     776:	51 e0       	ldi	r21, 0x01	; 1
     778:	bc 01       	movw	r22, r24
     77a:	81 e8       	ldi	r24, 0x81	; 129
     77c:	91 e0       	ldi	r25, 0x01	; 1
     77e:	73 df       	rcall	.-282    	; 0x666 <menu_init_menu>
     780:	60 91 b2 02 	lds	r22, 0x02B2
     784:	70 91 b3 02 	lds	r23, 0x02B3
     788:	49 e2       	ldi	r20, 0x29	; 41
     78a:	53 e0       	ldi	r21, 0x03	; 3
     78c:	87 e8       	ldi	r24, 0x87	; 135
     78e:	91 e0       	ldi	r25, 0x01	; 1
     790:	6a df       	rcall	.-300    	; 0x666 <menu_init_menu>
     792:	60 91 b2 02 	lds	r22, 0x02B2
     796:	70 91 b3 02 	lds	r23, 0x02B3
     79a:	49 e2       	ldi	r20, 0x29	; 41
     79c:	53 e0       	ldi	r21, 0x03	; 3
     79e:	82 e9       	ldi	r24, 0x92	; 146
     7a0:	91 e0       	ldi	r25, 0x01	; 1
     7a2:	61 df       	rcall	.-318    	; 0x666 <menu_init_menu>
     7a4:	ec 01       	movw	r28, r24
     7a6:	49 e2       	ldi	r20, 0x29	; 41
     7a8:	53 e0       	ldi	r21, 0x03	; 3
     7aa:	bc 01       	movw	r22, r24
     7ac:	88 e9       	ldi	r24, 0x98	; 152
     7ae:	91 e0       	ldi	r25, 0x01	; 1
     7b0:	5a df       	rcall	.-332    	; 0x666 <menu_init_menu>
     7b2:	49 e2       	ldi	r20, 0x29	; 41
     7b4:	53 e0       	ldi	r21, 0x03	; 3
     7b6:	be 01       	movw	r22, r28
     7b8:	8a ea       	ldi	r24, 0xAA	; 170
     7ba:	91 e0       	ldi	r25, 0x01	; 1
     7bc:	54 df       	rcall	.-344    	; 0x666 <menu_init_menu>
     7be:	49 e2       	ldi	r20, 0x29	; 41
     7c0:	53 e0       	ldi	r21, 0x03	; 3
     7c2:	be 01       	movw	r22, r28
     7c4:	87 eb       	ldi	r24, 0xB7	; 183
     7c6:	91 e0       	ldi	r25, 0x01	; 1
     7c8:	4e df       	rcall	.-356    	; 0x666 <menu_init_menu>
     7ca:	49 e2       	ldi	r20, 0x29	; 41
     7cc:	53 e0       	ldi	r21, 0x03	; 3
     7ce:	be 01       	movw	r22, r28
     7d0:	82 ec       	ldi	r24, 0xC2	; 194
     7d2:	91 e0       	ldi	r25, 0x01	; 1
     7d4:	48 df       	rcall	.-368    	; 0x666 <menu_init_menu>
     7d6:	80 91 b2 02 	lds	r24, 0x02B2
     7da:	90 91 b3 02 	lds	r25, 0x02B3
     7de:	90 93 b1 02 	sts	0x02B1, r25
     7e2:	80 93 b0 02 	sts	0x02B0, r24
     7e6:	df 91       	pop	r29
     7e8:	cf 91       	pop	r28
     7ea:	08 95       	ret

000007ec <menu_print_current>:
     7ec:	cf 92       	push	r12
     7ee:	df 92       	push	r13
     7f0:	ef 92       	push	r14
     7f2:	ff 92       	push	r15
     7f4:	0f 93       	push	r16
     7f6:	1f 93       	push	r17
     7f8:	cf 93       	push	r28
     7fa:	df 93       	push	r29
     7fc:	23 d1       	rcall	.+582    	; 0xa44 <oled_home>
     7fe:	80 91 b1 02 	lds	r24, 0x02B1
     802:	8f 93       	push	r24
     804:	80 91 b0 02 	lds	r24, 0x02B0
     808:	8f 93       	push	r24
     80a:	88 e7       	ldi	r24, 0x78	; 120
     80c:	91 e0       	ldi	r25, 0x01	; 1
     80e:	9f 93       	push	r25
     810:	8f 93       	push	r24
     812:	88 e0       	ldi	r24, 0x08	; 8
     814:	91 e0       	ldi	r25, 0x01	; 1
     816:	9f 93       	push	r25
     818:	8f 93       	push	r24
     81a:	c1 d4       	rcall	.+2434   	; 0x119e <fprintf>
     81c:	0f 90       	pop	r0
     81e:	0f 90       	pop	r0
     820:	0f 90       	pop	r0
     822:	0f 90       	pop	r0
     824:	0f 90       	pop	r0
     826:	0f 90       	pop	r0
     828:	c0 e0       	ldi	r28, 0x00	; 0
     82a:	d0 e0       	ldi	r29, 0x00	; 0
     82c:	0f 2e       	mov	r0, r31
     82e:	f8 e7       	ldi	r31, 0x78	; 120
     830:	ef 2e       	mov	r14, r31
     832:	f1 e0       	ldi	r31, 0x01	; 1
     834:	ff 2e       	mov	r15, r31
     836:	f0 2d       	mov	r31, r0
     838:	08 e0       	ldi	r16, 0x08	; 8
     83a:	11 e0       	ldi	r17, 0x01	; 1
     83c:	6e 01       	movw	r12, r28
     83e:	80 91 b0 02 	lds	r24, 0x02B0
     842:	90 91 b1 02 	lds	r25, 0x02B1
     846:	de 01       	movw	r26, r28
     848:	1c 96       	adiw	r26, 0x0c	; 12
     84a:	aa 0f       	add	r26, r26
     84c:	bb 1f       	adc	r27, r27
     84e:	a8 0f       	add	r26, r24
     850:	b9 1f       	adc	r27, r25
     852:	8d 91       	ld	r24, X+
     854:	9c 91       	ld	r25, X
     856:	89 2b       	or	r24, r25
     858:	79 f1       	breq	.+94     	; 0x8b8 <menu_print_current+0xcc>
     85a:	80 91 af 02 	lds	r24, 0x02AF
     85e:	c8 13       	cpse	r28, r24
     860:	09 c0       	rjmp	.+18     	; 0x874 <menu_print_current+0x88>
     862:	98 01       	movw	r18, r16
     864:	42 e0       	ldi	r20, 0x02	; 2
     866:	50 e0       	ldi	r21, 0x00	; 0
     868:	61 e0       	ldi	r22, 0x01	; 1
     86a:	70 e0       	ldi	r23, 0x00	; 0
     86c:	83 ed       	ldi	r24, 0xD3	; 211
     86e:	91 e0       	ldi	r25, 0x01	; 1
     870:	d7 d4       	rcall	.+2478   	; 0x1220 <fwrite>
     872:	08 c0       	rjmp	.+16     	; 0x884 <menu_print_current+0x98>
     874:	98 01       	movw	r18, r16
     876:	42 e0       	ldi	r20, 0x02	; 2
     878:	50 e0       	ldi	r21, 0x00	; 0
     87a:	61 e0       	ldi	r22, 0x01	; 1
     87c:	70 e0       	ldi	r23, 0x00	; 0
     87e:	86 ed       	ldi	r24, 0xD6	; 214
     880:	91 e0       	ldi	r25, 0x01	; 1
     882:	ce d4       	rcall	.+2460   	; 0x1220 <fwrite>
     884:	e0 91 b0 02 	lds	r30, 0x02B0
     888:	f0 91 b1 02 	lds	r31, 0x02B1
     88c:	8c e0       	ldi	r24, 0x0C	; 12
     88e:	c8 0e       	add	r12, r24
     890:	d1 1c       	adc	r13, r1
     892:	cc 0c       	add	r12, r12
     894:	dd 1c       	adc	r13, r13
     896:	ec 0d       	add	r30, r12
     898:	fd 1d       	adc	r31, r13
     89a:	81 81       	ldd	r24, Z+1	; 0x01
     89c:	8f 93       	push	r24
     89e:	80 81       	ld	r24, Z
     8a0:	8f 93       	push	r24
     8a2:	ff 92       	push	r15
     8a4:	ef 92       	push	r14
     8a6:	1f 93       	push	r17
     8a8:	0f 93       	push	r16
     8aa:	79 d4       	rcall	.+2290   	; 0x119e <fprintf>
     8ac:	0f 90       	pop	r0
     8ae:	0f 90       	pop	r0
     8b0:	0f 90       	pop	r0
     8b2:	0f 90       	pop	r0
     8b4:	0f 90       	pop	r0
     8b6:	0f 90       	pop	r0
     8b8:	21 96       	adiw	r28, 0x01	; 1
     8ba:	c7 30       	cpi	r28, 0x07	; 7
     8bc:	d1 05       	cpc	r29, r1
     8be:	09 f0       	breq	.+2      	; 0x8c2 <menu_print_current+0xd6>
     8c0:	bd cf       	rjmp	.-134    	; 0x83c <menu_print_current+0x50>
     8c2:	df 91       	pop	r29
     8c4:	cf 91       	pop	r28
     8c6:	1f 91       	pop	r17
     8c8:	0f 91       	pop	r16
     8ca:	ff 90       	pop	r15
     8cc:	ef 90       	pop	r14
     8ce:	df 90       	pop	r13
     8d0:	cf 90       	pop	r12
     8d2:	08 95       	ret

000008d4 <menu_move_cursor>:
     8d4:	1f 93       	push	r17
     8d6:	cf 93       	push	r28
     8d8:	df 93       	push	r29
     8da:	10 91 af 02 	lds	r17, 0x02AF
     8de:	18 0f       	add	r17, r24
     8e0:	c1 2f       	mov	r28, r17
     8e2:	d0 e0       	ldi	r29, 0x00	; 0
     8e4:	1f 92       	push	r1
     8e6:	1f 93       	push	r17
     8e8:	29 ed       	ldi	r18, 0xD9	; 217
     8ea:	31 e0       	ldi	r19, 0x01	; 1
     8ec:	3f 93       	push	r19
     8ee:	2f 93       	push	r18
     8f0:	28 e2       	ldi	r18, 0x28	; 40
     8f2:	31 e0       	ldi	r19, 0x01	; 1
     8f4:	3f 93       	push	r19
     8f6:	2f 93       	push	r18
     8f8:	52 d4       	rcall	.+2212   	; 0x119e <fprintf>
     8fa:	20 91 b0 02 	lds	r18, 0x02B0
     8fe:	30 91 b1 02 	lds	r19, 0x02B1
     902:	2c 96       	adiw	r28, 0x0c	; 12
     904:	cc 0f       	add	r28, r28
     906:	dd 1f       	adc	r29, r29
     908:	c2 0f       	add	r28, r18
     90a:	d3 1f       	adc	r29, r19
     90c:	0f 90       	pop	r0
     90e:	0f 90       	pop	r0
     910:	0f 90       	pop	r0
     912:	0f 90       	pop	r0
     914:	0f 90       	pop	r0
     916:	0f 90       	pop	r0
     918:	28 81       	ld	r18, Y
     91a:	39 81       	ldd	r19, Y+1	; 0x01
     91c:	23 2b       	or	r18, r19
     91e:	21 f0       	breq	.+8      	; 0x928 <menu_move_cursor+0x54>
     920:	17 30       	cpi	r17, 0x07	; 7
     922:	10 f4       	brcc	.+4      	; 0x928 <menu_move_cursor+0x54>
     924:	10 93 af 02 	sts	0x02AF, r17
     928:	df 91       	pop	r29
     92a:	cf 91       	pop	r28
     92c:	1f 91       	pop	r17
     92e:	08 95       	ret

00000930 <menu_enter_current>:



void menu_enter_current(void)
{
     930:	cf 93       	push	r28
     932:	df 93       	push	r29
	oled_fill(0x00); // needed if next submenu has fewer menus than current
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	1c d1       	rcall	.+568    	; 0xb70 <oled_fill>
	
	// check if current choice is valid and that current choice has any children
	if (current->submenus[subchoice] != NULL && current->submenus[subchoice]->submenus[0] != NULL){
     938:	80 91 b0 02 	lds	r24, 0x02B0
     93c:	90 91 b1 02 	lds	r25, 0x02B1
     940:	e0 91 af 02 	lds	r30, 0x02AF
     944:	f0 e0       	ldi	r31, 0x00	; 0
     946:	3c 96       	adiw	r30, 0x0c	; 12
     948:	ee 0f       	add	r30, r30
     94a:	ff 1f       	adc	r31, r31
     94c:	e8 0f       	add	r30, r24
     94e:	f9 1f       	adc	r31, r25
     950:	01 90       	ld	r0, Z+
     952:	f0 81       	ld	r31, Z
     954:	e0 2d       	mov	r30, r0
     956:	30 97       	sbiw	r30, 0x00	; 0
     958:	09 f4       	brne	.+2      	; 0x95c <menu_enter_current+0x2c>
     95a:	48 c0       	rjmp	.+144    	; 0x9ec <menu_enter_current+0xbc>
     95c:	80 8d       	ldd	r24, Z+24	; 0x18
     95e:	91 8d       	ldd	r25, Z+25	; 0x19
     960:	89 2b       	or	r24, r25
     962:	09 f4       	brne	.+2      	; 0x966 <menu_enter_current+0x36>
     964:	43 c0       	rjmp	.+134    	; 0x9ec <menu_enter_current+0xbc>
		//fprintf(&uart_out, "current: %p\n", current);
		//fprintf(&uart_out, "next:    %p\n", current->submenus[subchoice]);
	
		fprintf(&uart_out, "nothing: \t%p\n", menu_action_nothing);
     966:	89 e2       	ldi	r24, 0x29	; 41
     968:	93 e0       	ldi	r25, 0x03	; 3
     96a:	9f 93       	push	r25
     96c:	8f 93       	push	r24
     96e:	8c ee       	ldi	r24, 0xEC	; 236
     970:	91 e0       	ldi	r25, 0x01	; 1
     972:	9f 93       	push	r25
     974:	8f 93       	push	r24
     976:	c8 e2       	ldi	r28, 0x28	; 40
     978:	d1 e0       	ldi	r29, 0x01	; 1
     97a:	df 93       	push	r29
     97c:	cf 93       	push	r28
     97e:	0f d4       	rcall	.+2078   	; 0x119e <fprintf>
		fprintf(&uart_out, "action : \t\t%p\n", (*(current->submenus[subchoice]->action)));
     980:	80 91 b0 02 	lds	r24, 0x02B0
     984:	90 91 b1 02 	lds	r25, 0x02B1
     988:	e0 91 af 02 	lds	r30, 0x02AF
     98c:	f0 e0       	ldi	r31, 0x00	; 0
     98e:	3c 96       	adiw	r30, 0x0c	; 12
     990:	ee 0f       	add	r30, r30
     992:	ff 1f       	adc	r31, r31
     994:	e8 0f       	add	r30, r24
     996:	f9 1f       	adc	r31, r25
     998:	01 90       	ld	r0, Z+
     99a:	f0 81       	ld	r31, Z
     99c:	e0 2d       	mov	r30, r0
     99e:	81 a5       	ldd	r24, Z+41	; 0x29
     9a0:	8f 93       	push	r24
     9a2:	80 a5       	ldd	r24, Z+40	; 0x28
     9a4:	8f 93       	push	r24
     9a6:	8a ef       	ldi	r24, 0xFA	; 250
     9a8:	91 e0       	ldi	r25, 0x01	; 1
     9aa:	9f 93       	push	r25
     9ac:	8f 93       	push	r24
     9ae:	df 93       	push	r29
     9b0:	cf 93       	push	r28
     9b2:	f5 d3       	rcall	.+2026   	; 0x119e <fprintf>
		
		current = current->submenus[subchoice];
     9b4:	80 91 b0 02 	lds	r24, 0x02B0
     9b8:	90 91 b1 02 	lds	r25, 0x02B1
     9bc:	e0 91 af 02 	lds	r30, 0x02AF
     9c0:	f0 e0       	ldi	r31, 0x00	; 0
     9c2:	3c 96       	adiw	r30, 0x0c	; 12
     9c4:	ee 0f       	add	r30, r30
     9c6:	ff 1f       	adc	r31, r31
     9c8:	e8 0f       	add	r30, r24
     9ca:	f9 1f       	adc	r31, r25
     9cc:	80 81       	ld	r24, Z
     9ce:	91 81       	ldd	r25, Z+1	; 0x01
     9d0:	90 93 b1 02 	sts	0x02B1, r25
     9d4:	80 93 b0 02 	sts	0x02B0, r24
		subchoice = 0;
     9d8:	10 92 af 02 	sts	0x02AF, r1
     9dc:	8d b7       	in	r24, 0x3d	; 61
     9de:	9e b7       	in	r25, 0x3e	; 62
     9e0:	0c 96       	adiw	r24, 0x0c	; 12
     9e2:	0f b6       	in	r0, 0x3f	; 63
     9e4:	f8 94       	cli
     9e6:	9e bf       	out	0x3e, r25	; 62
     9e8:	0f be       	out	0x3f, r0	; 63
     9ea:	8d bf       	out	0x3d, r24	; 61
	}
	
	current->submenus[subchoice]->action();
     9ec:	80 91 b0 02 	lds	r24, 0x02B0
     9f0:	90 91 b1 02 	lds	r25, 0x02B1
     9f4:	e0 91 af 02 	lds	r30, 0x02AF
     9f8:	f0 e0       	ldi	r31, 0x00	; 0
     9fa:	3c 96       	adiw	r30, 0x0c	; 12
     9fc:	ee 0f       	add	r30, r30
     9fe:	ff 1f       	adc	r31, r31
     a00:	e8 0f       	add	r30, r24
     a02:	f9 1f       	adc	r31, r25
     a04:	01 90       	ld	r0, Z+
     a06:	f0 81       	ld	r31, Z
     a08:	e0 2d       	mov	r30, r0
     a0a:	00 a4       	ldd	r0, Z+40	; 0x28
     a0c:	f1 a5       	ldd	r31, Z+41	; 0x29
     a0e:	e0 2d       	mov	r30, r0
     a10:	09 95       	icall
}
     a12:	df 91       	pop	r29
     a14:	cf 91       	pop	r28
     a16:	08 95       	ret

00000a18 <menu_enter_parent>:


void menu_enter_parent(void){
	oled_fill(0x00);
     a18:	80 e0       	ldi	r24, 0x00	; 0
     a1a:	aa d0       	rcall	.+340    	; 0xb70 <oled_fill>
	
	current = current->parent;
     a1c:	e0 91 b0 02 	lds	r30, 0x02B0
     a20:	f0 91 b1 02 	lds	r31, 0x02B1
     a24:	86 a1       	ldd	r24, Z+38	; 0x26
     a26:	97 a1       	ldd	r25, Z+39	; 0x27
     a28:	90 93 b1 02 	sts	0x02B1, r25
     a2c:	80 93 b0 02 	sts	0x02B0, r24
     a30:	08 95       	ret

00000a32 <oled_autorefresh_init>:
}

void oled_reset(){
	oled_init();
	oled_fill(0);
	oled_home();
     a32:	89 b7       	in	r24, 0x39	; 57
     a34:	82 60       	ori	r24, 0x02	; 2
     a36:	89 bf       	out	0x39, r24	; 57
     a38:	83 b7       	in	r24, 0x33	; 51
     a3a:	85 60       	ori	r24, 0x05	; 5
     a3c:	83 bf       	out	0x33, r24	; 51
     a3e:	87 e2       	ldi	r24, 0x27	; 39
     a40:	81 bf       	out	0x31, r24	; 49
     a42:	08 95       	ret

00000a44 <oled_home>:
     a44:	10 92 b5 02 	sts	0x02B5, r1
     a48:	10 92 b4 02 	sts	0x02B4, r1
     a4c:	08 95       	ret

00000a4e <oled_newline>:
     a4e:	10 92 b5 02 	sts	0x02B5, r1
     a52:	80 91 b4 02 	lds	r24, 0x02B4
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	01 96       	adiw	r24, 0x01	; 1
     a5a:	87 70       	andi	r24, 0x07	; 7
     a5c:	90 78       	andi	r25, 0x80	; 128
     a5e:	80 93 b4 02 	sts	0x02B4, r24
     a62:	08 95       	ret

00000a64 <oled_goto_nextpos>:
     a64:	20 91 b5 02 	lds	r18, 0x02B5
     a68:	30 e0       	ldi	r19, 0x00	; 0
     a6a:	2f 5f       	subi	r18, 0xFF	; 255
     a6c:	3f 4f       	sbci	r19, 0xFF	; 255
     a6e:	2f 77       	andi	r18, 0x7F	; 127
     a70:	30 78       	andi	r19, 0x80	; 128
     a72:	20 93 b5 02 	sts	0x02B5, r18
     a76:	80 91 b4 02 	lds	r24, 0x02B4
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	41 e0       	ldi	r20, 0x01	; 1
     a7e:	50 e0       	ldi	r21, 0x00	; 0
     a80:	22 23       	and	r18, r18
     a82:	11 f0       	breq	.+4      	; 0xa88 <oled_goto_nextpos+0x24>
     a84:	40 e0       	ldi	r20, 0x00	; 0
     a86:	50 e0       	ldi	r21, 0x00	; 0
     a88:	84 0f       	add	r24, r20
     a8a:	95 1f       	adc	r25, r21
     a8c:	87 70       	andi	r24, 0x07	; 7
     a8e:	90 78       	andi	r25, 0x80	; 128
     a90:	99 23       	and	r25, r25
     a92:	24 f4       	brge	.+8      	; 0xa9c <oled_goto_nextpos+0x38>
     a94:	01 97       	sbiw	r24, 0x01	; 1
     a96:	88 6f       	ori	r24, 0xF8	; 248
     a98:	9f 6f       	ori	r25, 0xFF	; 255
     a9a:	01 96       	adiw	r24, 0x01	; 1
     a9c:	80 93 b4 02 	sts	0x02B4, r24
     aa0:	08 95       	ret

00000aa2 <oled_buffchar>:
     aa2:	0f 93       	push	r16
     aa4:	1f 93       	push	r17
     aa6:	cf 93       	push	r28
     aa8:	df 93       	push	r29
     aaa:	08 2f       	mov	r16, r24
     aac:	80 32       	cpi	r24, 0x20	; 32
     aae:	90 f1       	brcs	.+100    	; 0xb14 <oled_buffchar+0x72>
     ab0:	20 91 b5 02 	lds	r18, 0x02B5
     ab4:	22 23       	and	r18, r18
     ab6:	74 f1       	brlt	.+92     	; 0xb14 <oled_buffchar+0x72>
     ab8:	80 91 b4 02 	lds	r24, 0x02B4
     abc:	88 30       	cpi	r24, 0x08	; 8
     abe:	50 f5       	brcc	.+84     	; 0xb14 <oled_buffchar+0x72>
     ac0:	30 e0       	ldi	r19, 0x00	; 0
     ac2:	2c 5f       	subi	r18, 0xFC	; 252
     ac4:	3f 4f       	sbci	r19, 0xFF	; 255
     ac6:	20 38       	cpi	r18, 0x80	; 128
     ac8:	31 05       	cpc	r19, r1
     aca:	6c f1       	brlt	.+90     	; 0xb26 <oled_buffchar+0x84>
     acc:	c0 df       	rcall	.-128    	; 0xa4e <oled_newline>
     ace:	2b c0       	rjmp	.+86     	; 0xb26 <oled_buffchar+0x84>
     ad0:	80 91 b4 02 	lds	r24, 0x02B4
     ad4:	a0 91 b5 02 	lds	r26, 0x02B5
     ad8:	b0 e0       	ldi	r27, 0x00	; 0
     ada:	90 e8       	ldi	r25, 0x80	; 128
     adc:	89 9f       	mul	r24, r25
     ade:	a0 0d       	add	r26, r0
     ae0:	b1 1d       	adc	r27, r1
     ae2:	11 24       	eor	r1, r1
     ae4:	80 91 16 01 	lds	r24, 0x0116
     ae8:	90 91 17 01 	lds	r25, 0x0117
     aec:	a8 0f       	add	r26, r24
     aee:	b9 1f       	adc	r27, r25
     af0:	ce 01       	movw	r24, r28
     af2:	80 0f       	add	r24, r16
     af4:	91 1f       	adc	r25, r17
     af6:	e0 91 18 01 	lds	r30, 0x0118
     afa:	f0 91 19 01 	lds	r31, 0x0119
     afe:	e8 0f       	add	r30, r24
     b00:	f9 1f       	adc	r31, r25
     b02:	85 91       	lpm	r24, Z+
     b04:	94 91       	lpm	r25, Z
     b06:	8c 93       	st	X, r24
     b08:	ad df       	rcall	.-166    	; 0xa64 <oled_goto_nextpos>
     b0a:	21 96       	adiw	r28, 0x01	; 1
     b0c:	c4 30       	cpi	r28, 0x04	; 4
     b0e:	d1 05       	cpc	r29, r1
     b10:	f9 f6       	brne	.-66     	; 0xad0 <oled_buffchar+0x2e>
     b12:	13 c0       	rjmp	.+38     	; 0xb3a <oled_buffchar+0x98>
     b14:	0a 30       	cpi	r16, 0x0A	; 10
     b16:	11 f4       	brne	.+4      	; 0xb1c <oled_buffchar+0x7a>
     b18:	9a df       	rcall	.-204    	; 0xa4e <oled_newline>
     b1a:	21 c0       	rjmp	.+66     	; 0xb5e <oled_buffchar+0xbc>
     b1c:	0d 30       	cpi	r16, 0x0D	; 13
     b1e:	f9 f4       	brne	.+62     	; 0xb5e <oled_buffchar+0xbc>
     b20:	10 92 b5 02 	sts	0x02B5, r1
     b24:	1c c0       	rjmp	.+56     	; 0xb5e <oled_buffchar+0xbc>
     b26:	10 e0       	ldi	r17, 0x00	; 0
     b28:	00 52       	subi	r16, 0x20	; 32
     b2a:	11 09       	sbc	r17, r1
     b2c:	00 0f       	add	r16, r16
     b2e:	11 1f       	adc	r17, r17
     b30:	00 0f       	add	r16, r16
     b32:	11 1f       	adc	r17, r17
     b34:	c0 e0       	ldi	r28, 0x00	; 0
     b36:	d0 e0       	ldi	r29, 0x00	; 0
     b38:	cb cf       	rjmp	.-106    	; 0xad0 <oled_buffchar+0x2e>
     b3a:	80 91 b4 02 	lds	r24, 0x02B4
     b3e:	e0 91 b5 02 	lds	r30, 0x02B5
     b42:	f0 e0       	ldi	r31, 0x00	; 0
     b44:	90 e8       	ldi	r25, 0x80	; 128
     b46:	89 9f       	mul	r24, r25
     b48:	e0 0d       	add	r30, r0
     b4a:	f1 1d       	adc	r31, r1
     b4c:	11 24       	eor	r1, r1
     b4e:	80 91 16 01 	lds	r24, 0x0116
     b52:	90 91 17 01 	lds	r25, 0x0117
     b56:	e8 0f       	add	r30, r24
     b58:	f9 1f       	adc	r31, r25
     b5a:	10 82       	st	Z, r1
     b5c:	83 df       	rcall	.-250    	; 0xa64 <oled_goto_nextpos>
     b5e:	df 91       	pop	r29
     b60:	cf 91       	pop	r28
     b62:	1f 91       	pop	r17
     b64:	0f 91       	pop	r16
     b66:	08 95       	ret

00000b68 <oled_putchar>:
     b68:	9c df       	rcall	.-200    	; 0xaa2 <oled_buffchar>
     b6a:	80 e0       	ldi	r24, 0x00	; 0
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	08 95       	ret

00000b70 <oled_fill>:
     b70:	00 c0       	rjmp	.+0      	; 0xb72 <oled_fill+0x2>
     b72:	00 c0       	rjmp	.+0      	; 0xb74 <oled_fill+0x4>
     b74:	00 00       	nop
     b76:	91 e2       	ldi	r25, 0x21	; 33
     b78:	90 93 00 10 	sts	0x1000, r25
     b7c:	00 c0       	rjmp	.+0      	; 0xb7e <oled_fill+0xe>
     b7e:	00 c0       	rjmp	.+0      	; 0xb80 <oled_fill+0x10>
     b80:	00 00       	nop
     b82:	10 92 00 10 	sts	0x1000, r1
     b86:	00 c0       	rjmp	.+0      	; 0xb88 <oled_fill+0x18>
     b88:	00 c0       	rjmp	.+0      	; 0xb8a <oled_fill+0x1a>
     b8a:	00 00       	nop
     b8c:	9f e7       	ldi	r25, 0x7F	; 127
     b8e:	90 93 00 10 	sts	0x1000, r25
     b92:	00 c0       	rjmp	.+0      	; 0xb94 <oled_fill+0x24>
     b94:	00 c0       	rjmp	.+0      	; 0xb96 <oled_fill+0x26>
     b96:	00 00       	nop
     b98:	92 e2       	ldi	r25, 0x22	; 34
     b9a:	90 93 00 10 	sts	0x1000, r25
     b9e:	00 c0       	rjmp	.+0      	; 0xba0 <oled_fill+0x30>
     ba0:	00 c0       	rjmp	.+0      	; 0xba2 <oled_fill+0x32>
     ba2:	00 00       	nop
     ba4:	10 92 00 10 	sts	0x1000, r1
     ba8:	00 c0       	rjmp	.+0      	; 0xbaa <oled_fill+0x3a>
     baa:	00 c0       	rjmp	.+0      	; 0xbac <oled_fill+0x3c>
     bac:	00 00       	nop
     bae:	97 e0       	ldi	r25, 0x07	; 7
     bb0:	90 93 00 10 	sts	0x1000, r25
     bb4:	60 e0       	ldi	r22, 0x00	; 0
     bb6:	70 e0       	ldi	r23, 0x00	; 0
     bb8:	a0 e0       	ldi	r26, 0x00	; 0
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	15 c0       	rjmp	.+42     	; 0xbe8 <oled_fill+0x78>
     bbe:	a9 01       	movw	r20, r18
     bc0:	46 0f       	add	r20, r22
     bc2:	57 1f       	adc	r21, r23
     bc4:	e0 91 16 01 	lds	r30, 0x0116
     bc8:	f0 91 17 01 	lds	r31, 0x0117
     bcc:	e4 0f       	add	r30, r20
     bce:	f5 1f       	adc	r31, r21
     bd0:	80 83       	st	Z, r24
     bd2:	2f 5f       	subi	r18, 0xFF	; 255
     bd4:	3f 4f       	sbci	r19, 0xFF	; 255
     bd6:	20 38       	cpi	r18, 0x80	; 128
     bd8:	31 05       	cpc	r19, r1
     bda:	89 f7       	brne	.-30     	; 0xbbe <oled_fill+0x4e>
     bdc:	60 58       	subi	r22, 0x80	; 128
     bde:	7f 4f       	sbci	r23, 0xFF	; 255
     be0:	61 15       	cp	r22, r1
     be2:	24 e0       	ldi	r18, 0x04	; 4
     be4:	72 07       	cpc	r23, r18
     be6:	19 f0       	breq	.+6      	; 0xbee <oled_fill+0x7e>
     be8:	2a 2f       	mov	r18, r26
     bea:	39 2f       	mov	r19, r25
     bec:	e8 cf       	rjmp	.-48     	; 0xbbe <oled_fill+0x4e>
     bee:	08 95       	ret

00000bf0 <oled_init>:
     bf0:	f8 94       	cli
     bf2:	00 c0       	rjmp	.+0      	; 0xbf4 <oled_init+0x4>
     bf4:	00 c0       	rjmp	.+0      	; 0xbf6 <oled_init+0x6>
     bf6:	00 00       	nop
     bf8:	8e ea       	ldi	r24, 0xAE	; 174
     bfa:	80 93 00 10 	sts	0x1000, r24
     bfe:	00 c0       	rjmp	.+0      	; 0xc00 <oled_init+0x10>
     c00:	00 c0       	rjmp	.+0      	; 0xc02 <oled_init+0x12>
     c02:	00 00       	nop
     c04:	81 ea       	ldi	r24, 0xA1	; 161
     c06:	80 93 00 10 	sts	0x1000, r24
     c0a:	00 c0       	rjmp	.+0      	; 0xc0c <oled_init+0x1c>
     c0c:	00 c0       	rjmp	.+0      	; 0xc0e <oled_init+0x1e>
     c0e:	00 00       	nop
     c10:	8a ed       	ldi	r24, 0xDA	; 218
     c12:	80 93 00 10 	sts	0x1000, r24
     c16:	00 c0       	rjmp	.+0      	; 0xc18 <oled_init+0x28>
     c18:	00 c0       	rjmp	.+0      	; 0xc1a <oled_init+0x2a>
     c1a:	00 00       	nop
     c1c:	82 e1       	ldi	r24, 0x12	; 18
     c1e:	80 93 00 10 	sts	0x1000, r24
     c22:	00 c0       	rjmp	.+0      	; 0xc24 <oled_init+0x34>
     c24:	00 c0       	rjmp	.+0      	; 0xc26 <oled_init+0x36>
     c26:	00 00       	nop
     c28:	88 ec       	ldi	r24, 0xC8	; 200
     c2a:	80 93 00 10 	sts	0x1000, r24
     c2e:	00 c0       	rjmp	.+0      	; 0xc30 <oled_init+0x40>
     c30:	00 c0       	rjmp	.+0      	; 0xc32 <oled_init+0x42>
     c32:	00 00       	nop
     c34:	88 ea       	ldi	r24, 0xA8	; 168
     c36:	80 93 00 10 	sts	0x1000, r24
     c3a:	00 c0       	rjmp	.+0      	; 0xc3c <oled_init+0x4c>
     c3c:	00 c0       	rjmp	.+0      	; 0xc3e <oled_init+0x4e>
     c3e:	00 00       	nop
     c40:	8f e3       	ldi	r24, 0x3F	; 63
     c42:	80 93 00 10 	sts	0x1000, r24
     c46:	00 c0       	rjmp	.+0      	; 0xc48 <oled_init+0x58>
     c48:	00 c0       	rjmp	.+0      	; 0xc4a <oled_init+0x5a>
     c4a:	00 00       	nop
     c4c:	85 ed       	ldi	r24, 0xD5	; 213
     c4e:	80 93 00 10 	sts	0x1000, r24
     c52:	00 c0       	rjmp	.+0      	; 0xc54 <oled_init+0x64>
     c54:	00 c0       	rjmp	.+0      	; 0xc56 <oled_init+0x66>
     c56:	00 00       	nop
     c58:	80 e8       	ldi	r24, 0x80	; 128
     c5a:	80 93 00 10 	sts	0x1000, r24
     c5e:	00 c0       	rjmp	.+0      	; 0xc60 <oled_init+0x70>
     c60:	00 c0       	rjmp	.+0      	; 0xc62 <oled_init+0x72>
     c62:	00 00       	nop
     c64:	81 e8       	ldi	r24, 0x81	; 129
     c66:	80 93 00 10 	sts	0x1000, r24
     c6a:	00 c0       	rjmp	.+0      	; 0xc6c <oled_init+0x7c>
     c6c:	00 c0       	rjmp	.+0      	; 0xc6e <oled_init+0x7e>
     c6e:	00 00       	nop
     c70:	80 e5       	ldi	r24, 0x50	; 80
     c72:	80 93 00 10 	sts	0x1000, r24
     c76:	00 c0       	rjmp	.+0      	; 0xc78 <oled_init+0x88>
     c78:	00 c0       	rjmp	.+0      	; 0xc7a <oled_init+0x8a>
     c7a:	00 00       	nop
     c7c:	89 ed       	ldi	r24, 0xD9	; 217
     c7e:	80 93 00 10 	sts	0x1000, r24
     c82:	00 c0       	rjmp	.+0      	; 0xc84 <oled_init+0x94>
     c84:	00 c0       	rjmp	.+0      	; 0xc86 <oled_init+0x96>
     c86:	00 00       	nop
     c88:	81 e2       	ldi	r24, 0x21	; 33
     c8a:	80 93 00 10 	sts	0x1000, r24
     c8e:	00 c0       	rjmp	.+0      	; 0xc90 <oled_init+0xa0>
     c90:	00 c0       	rjmp	.+0      	; 0xc92 <oled_init+0xa2>
     c92:	00 00       	nop
     c94:	80 e2       	ldi	r24, 0x20	; 32
     c96:	80 93 00 10 	sts	0x1000, r24
     c9a:	00 c0       	rjmp	.+0      	; 0xc9c <oled_init+0xac>
     c9c:	00 c0       	rjmp	.+0      	; 0xc9e <oled_init+0xae>
     c9e:	00 00       	nop
     ca0:	10 92 00 10 	sts	0x1000, r1
     ca4:	00 c0       	rjmp	.+0      	; 0xca6 <oled_init+0xb6>
     ca6:	00 c0       	rjmp	.+0      	; 0xca8 <oled_init+0xb8>
     ca8:	00 00       	nop
     caa:	8b ed       	ldi	r24, 0xDB	; 219
     cac:	80 93 00 10 	sts	0x1000, r24
     cb0:	00 c0       	rjmp	.+0      	; 0xcb2 <oled_init+0xc2>
     cb2:	00 c0       	rjmp	.+0      	; 0xcb4 <oled_init+0xc4>
     cb4:	00 00       	nop
     cb6:	80 e3       	ldi	r24, 0x30	; 48
     cb8:	80 93 00 10 	sts	0x1000, r24
     cbc:	00 c0       	rjmp	.+0      	; 0xcbe <oled_init+0xce>
     cbe:	00 c0       	rjmp	.+0      	; 0xcc0 <oled_init+0xd0>
     cc0:	00 00       	nop
     cc2:	8d ea       	ldi	r24, 0xAD	; 173
     cc4:	80 93 00 10 	sts	0x1000, r24
     cc8:	00 c0       	rjmp	.+0      	; 0xcca <oled_init+0xda>
     cca:	00 c0       	rjmp	.+0      	; 0xccc <oled_init+0xdc>
     ccc:	00 00       	nop
     cce:	10 92 00 10 	sts	0x1000, r1
     cd2:	00 c0       	rjmp	.+0      	; 0xcd4 <oled_init+0xe4>
     cd4:	00 c0       	rjmp	.+0      	; 0xcd6 <oled_init+0xe6>
     cd6:	00 00       	nop
     cd8:	84 ea       	ldi	r24, 0xA4	; 164
     cda:	80 93 00 10 	sts	0x1000, r24
     cde:	00 c0       	rjmp	.+0      	; 0xce0 <oled_init+0xf0>
     ce0:	00 c0       	rjmp	.+0      	; 0xce2 <oled_init+0xf2>
     ce2:	00 00       	nop
     ce4:	86 ea       	ldi	r24, 0xA6	; 166
     ce6:	80 93 00 10 	sts	0x1000, r24
     cea:	00 c0       	rjmp	.+0      	; 0xcec <oled_init+0xfc>
     cec:	00 c0       	rjmp	.+0      	; 0xcee <oled_init+0xfe>
     cee:	00 00       	nop
     cf0:	8f ea       	ldi	r24, 0xAF	; 175
     cf2:	80 93 00 10 	sts	0x1000, r24
     cf6:	80 e0       	ldi	r24, 0x00	; 0
     cf8:	3b df       	rcall	.-394    	; 0xb70 <oled_fill>
     cfa:	a4 de       	rcall	.-696    	; 0xa44 <oled_home>
     cfc:	9a ce       	rjmp	.-716    	; 0xa32 <oled_autorefresh_init>
     cfe:	08 95       	ret

00000d00 <oled_update>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d00:	00 c0       	rjmp	.+0      	; 0xd02 <oled_update+0x2>
     d02:	00 c0       	rjmp	.+0      	; 0xd04 <oled_update+0x4>
     d04:	00 00       	nop
	OCR0 = 39;
}

void write_c(uint8_t cmd){
	_delay_us(1);
	*((uint8_t *)OLED_C_ADR) = cmd;
     d06:	81 e2       	ldi	r24, 0x21	; 33
     d08:	80 93 00 10 	sts	0x1000, r24
     d0c:	00 c0       	rjmp	.+0      	; 0xd0e <oled_update+0xe>
     d0e:	00 c0       	rjmp	.+0      	; 0xd10 <oled_update+0x10>
     d10:	00 00       	nop
     d12:	10 92 00 10 	sts	0x1000, r1
     d16:	00 c0       	rjmp	.+0      	; 0xd18 <oled_update+0x18>
     d18:	00 c0       	rjmp	.+0      	; 0xd1a <oled_update+0x1a>
     d1a:	00 00       	nop
     d1c:	8f e7       	ldi	r24, 0x7F	; 127
     d1e:	80 93 00 10 	sts	0x1000, r24
     d22:	00 c0       	rjmp	.+0      	; 0xd24 <oled_update+0x24>
     d24:	00 c0       	rjmp	.+0      	; 0xd26 <oled_update+0x26>
     d26:	00 00       	nop
     d28:	82 e2       	ldi	r24, 0x22	; 34
     d2a:	80 93 00 10 	sts	0x1000, r24
     d2e:	00 c0       	rjmp	.+0      	; 0xd30 <oled_update+0x30>
     d30:	00 c0       	rjmp	.+0      	; 0xd32 <oled_update+0x32>
     d32:	00 00       	nop
     d34:	10 92 00 10 	sts	0x1000, r1
     d38:	00 c0       	rjmp	.+0      	; 0xd3a <oled_update+0x3a>
     d3a:	00 c0       	rjmp	.+0      	; 0xd3c <oled_update+0x3c>
     d3c:	00 00       	nop
     d3e:	87 e0       	ldi	r24, 0x07	; 7
     d40:	80 93 00 10 	sts	0x1000, r24
     d44:	00 c0       	rjmp	.+0      	; 0xd46 <oled_update+0x46>
     d46:	00 c0       	rjmp	.+0      	; 0xd48 <oled_update+0x48>
     d48:	00 00       	nop
     d4a:	10 92 00 10 	sts	0x1000, r1
     d4e:	00 c0       	rjmp	.+0      	; 0xd50 <oled_update+0x50>
     d50:	00 c0       	rjmp	.+0      	; 0xd52 <oled_update+0x52>
     d52:	00 00       	nop
     d54:	80 e1       	ldi	r24, 0x10	; 16
     d56:	80 93 00 10 	sts	0x1000, r24
     d5a:	40 e0       	ldi	r20, 0x00	; 0
     d5c:	50 e0       	ldi	r21, 0x00	; 0
		}
	}
}

//////////////////////////////////////////////////////////////////////////
void oled_update(){
     d5e:	70 e0       	ldi	r23, 0x00	; 0
     d60:	60 e0       	ldi	r22, 0x00	; 0
	*((uint8_t *)OLED_C_ADR) = cmd;
}

void write_d(uint8_t data){
	_delay_us(1); // delay may be increased to 1000 to make debug easier, works without any delay
	*((uint8_t *)OLED_D_ADR) = data;
     d62:	a1 e0       	ldi	r26, 0x01	; 1
     d64:	b0 e1       	ldi	r27, 0x10	; 16
     d66:	18 c0       	rjmp	.+48     	; 0xd98 <oled_update+0x98>
     d68:	9c 01       	movw	r18, r24
     d6a:	24 0f       	add	r18, r20
     d6c:	35 1f       	adc	r19, r21
	write_c(SET_LOW_COL_ADR  | 0x00);
	write_c(SET_HIGH_COL_ADR | 0x00);
	
	for (int page = 0; page<OLED_PAGES; ++page){
		for (int seg = 0; seg<OLED_WIDTH; ++seg){
			write_d(buffer[page*OLED_WIDTH + seg]);
     d6e:	e0 91 16 01 	lds	r30, 0x0116
     d72:	f0 91 17 01 	lds	r31, 0x0117
     d76:	e2 0f       	add	r30, r18
     d78:	f3 1f       	adc	r31, r19
     d7a:	20 81       	ld	r18, Z
     d7c:	00 c0       	rjmp	.+0      	; 0xd7e <oled_update+0x7e>
     d7e:	00 c0       	rjmp	.+0      	; 0xd80 <oled_update+0x80>
     d80:	00 00       	nop
	*((uint8_t *)OLED_C_ADR) = cmd;
}

void write_d(uint8_t data){
	_delay_us(1); // delay may be increased to 1000 to make debug easier, works without any delay
	*((uint8_t *)OLED_D_ADR) = data;
     d82:	2c 93       	st	X, r18
	
	write_c(SET_LOW_COL_ADR  | 0x00);
	write_c(SET_HIGH_COL_ADR | 0x00);
	
	for (int page = 0; page<OLED_PAGES; ++page){
		for (int seg = 0; seg<OLED_WIDTH; ++seg){
     d84:	01 96       	adiw	r24, 0x01	; 1
     d86:	80 38       	cpi	r24, 0x80	; 128
     d88:	91 05       	cpc	r25, r1
     d8a:	71 f7       	brne	.-36     	; 0xd68 <oled_update+0x68>
     d8c:	40 58       	subi	r20, 0x80	; 128
     d8e:	5f 4f       	sbci	r21, 0xFF	; 255
	write_c(SET_PAGE_ADR);write_c(0x00); write_c(OLED_PAGES-1);
	
	write_c(SET_LOW_COL_ADR  | 0x00);
	write_c(SET_HIGH_COL_ADR | 0x00);
	
	for (int page = 0; page<OLED_PAGES; ++page){
     d90:	41 15       	cp	r20, r1
     d92:	84 e0       	ldi	r24, 0x04	; 4
     d94:	58 07       	cpc	r21, r24
     d96:	19 f0       	breq	.+6      	; 0xd9e <oled_update+0x9e>
		}
	}
}

//////////////////////////////////////////////////////////////////////////
void oled_update(){
     d98:	87 2f       	mov	r24, r23
     d9a:	96 2f       	mov	r25, r22
     d9c:	e5 cf       	rjmp	.-54     	; 0xd68 <oled_update+0x68>
     d9e:	08 95       	ret

00000da0 <__vector_17>:
uint8_t xpos = 0;
uint8_t ypos = 0;

FILE oled_out = FDEV_SETUP_STREAM(oled_putchar, NULL, _FDEV_SETUP_WRITE);

ISR(TIMER0_OVF_vect){
     da0:	1f 92       	push	r1
     da2:	0f 92       	push	r0
     da4:	0f b6       	in	r0, 0x3f	; 63
     da6:	0f 92       	push	r0
     da8:	11 24       	eor	r1, r1
     daa:	2f 93       	push	r18
     dac:	3f 93       	push	r19
     dae:	4f 93       	push	r20
     db0:	5f 93       	push	r21
     db2:	6f 93       	push	r22
     db4:	7f 93       	push	r23
     db6:	8f 93       	push	r24
     db8:	9f 93       	push	r25
     dba:	af 93       	push	r26
     dbc:	bf 93       	push	r27
     dbe:	ef 93       	push	r30
     dc0:	ff 93       	push	r31
	oled_update();
     dc2:	9e df       	rcall	.-196    	; 0xd00 <oled_update>
}
     dc4:	ff 91       	pop	r31
     dc6:	ef 91       	pop	r30
     dc8:	bf 91       	pop	r27
     dca:	af 91       	pop	r26
     dcc:	9f 91       	pop	r25
     dce:	8f 91       	pop	r24
     dd0:	7f 91       	pop	r23
     dd2:	6f 91       	pop	r22
     dd4:	5f 91       	pop	r21
     dd6:	4f 91       	pop	r20
     dd8:	3f 91       	pop	r19
     dda:	2f 91       	pop	r18
     ddc:	0f 90       	pop	r0
     dde:	0f be       	out	0x3f, r0	; 63
     de0:	0f 90       	pop	r0
     de2:	1f 90       	pop	r1
     de4:	18 95       	reti

00000de6 <spi_ss_low>:
#include "spi_driver.h"
#include "avr/io.h"
#include <stdio.h>

void spi_ss_low(){
	PORTB &= ~(1 << PB4);
     de6:	c4 98       	cbi	0x18, 4	; 24
     de8:	08 95       	ret

00000dea <spi_ss_high>:
}

void spi_ss_high(){
	PORTB |= (1 << PB4);
     dea:	c4 9a       	sbi	0x18, 4	; 24
     dec:	08 95       	ret

00000dee <spi_init>:

/// Initialize Atmega162 as SPI master
void spi_init()
{
	// setup IO pins
	DDRB |= (1<<DDB4 | 1<<DDB5 | 1<<DDB7);
     dee:	87 b3       	in	r24, 0x17	; 23
     df0:	80 6b       	ori	r24, 0xB0	; 176
     df2:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1<<DDB6); // not necessary
     df4:	be 98       	cbi	0x17, 6	; 23
	
	// setup SPI
	SPCR = (1<<SPE | 1<<MSTR | 1<<SPR0 | 1<<CPOL | 1<<CPHA) & ~(/*1<<CPOL | 1<<CPHA |*/ 1<<DORD);
     df6:	8d e5       	ldi	r24, 0x5D	; 93
     df8:	8d b9       	out	0x0d, r24	; 13
     dfa:	08 95       	ret

00000dfc <spi_transmit>:
}


uint8_t spi_transmit(uint8_t data)
{
	SPDR = data;
     dfc:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
     dfe:	77 9b       	sbis	0x0e, 7	; 14
     e00:	fe cf       	rjmp	.-4      	; 0xdfe <spi_transmit+0x2>
	
	return SPDR;
     e02:	8f b1       	in	r24, 0x0f	; 15
     e04:	08 95       	ret

00000e06 <uart_send>:

}

/// Busy wait transmission of msg
int uart_send(unsigned char msg){
	while (!(UCSR0A & (1 << UDRE0)));
     e06:	5d 9b       	sbis	0x0b, 5	; 11
     e08:	fe cf       	rjmp	.-4      	; 0xe06 <uart_send>
	UDR0 = msg;
     e0a:	8c b9       	out	0x0c, r24	; 12
	return 0;
}
     e0c:	80 e0       	ldi	r24, 0x00	; 0
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	08 95       	ret

00000e12 <uart_recv>:


/// Read data from buffer
unsigned char uart_recv(){
	char returnval = 0;
	if(recvhead != recvtail)
     e12:	20 91 b8 02 	lds	r18, 0x02B8
     e16:	30 91 b9 02 	lds	r19, 0x02B9
     e1a:	80 91 b6 02 	lds	r24, 0x02B6
     e1e:	90 91 b7 02 	lds	r25, 0x02B7
     e22:	28 17       	cp	r18, r24
     e24:	39 07       	cpc	r19, r25
     e26:	11 f1       	breq	.+68     	; 0xe6c <uart_recv+0x5a>
	{
		returnval = recv_buffer[recvtail++];
     e28:	80 91 b6 02 	lds	r24, 0x02B6
     e2c:	90 91 b7 02 	lds	r25, 0x02B7
     e30:	9c 01       	movw	r18, r24
     e32:	2f 5f       	subi	r18, 0xFF	; 255
     e34:	3f 4f       	sbci	r19, 0xFF	; 255
     e36:	30 93 b7 02 	sts	0x02B7, r19
     e3a:	20 93 b6 02 	sts	0x02B6, r18
     e3e:	fc 01       	movw	r30, r24
     e40:	e6 54       	subi	r30, 0x46	; 70
     e42:	fd 4f       	sbci	r31, 0xFD	; 253
     e44:	80 81       	ld	r24, Z
		recvtail = recvtail%BUFFER_MAX;
     e46:	20 91 b6 02 	lds	r18, 0x02B6
     e4a:	30 91 b7 02 	lds	r19, 0x02B7
     e4e:	2f 77       	andi	r18, 0x7F	; 127
     e50:	30 78       	andi	r19, 0x80	; 128
     e52:	33 23       	and	r19, r19
     e54:	34 f4       	brge	.+12     	; 0xe62 <uart_recv+0x50>
     e56:	21 50       	subi	r18, 0x01	; 1
     e58:	31 09       	sbc	r19, r1
     e5a:	20 68       	ori	r18, 0x80	; 128
     e5c:	3f 6f       	ori	r19, 0xFF	; 255
     e5e:	2f 5f       	subi	r18, 0xFF	; 255
     e60:	3f 4f       	sbci	r19, 0xFF	; 255
     e62:	30 93 b7 02 	sts	0x02B7, r19
     e66:	20 93 b6 02 	sts	0x02B6, r18
     e6a:	08 95       	ret
}


/// Read data from buffer
unsigned char uart_recv(){
	char returnval = 0;
     e6c:	80 e0       	ldi	r24, 0x00	; 0
	{
		returnval = recv_buffer[recvtail++];
		recvtail = recvtail%BUFFER_MAX;
	}
	return returnval;
}
     e6e:	08 95       	ret

00000e70 <__vector_19>:
volatile char recv_buffer[BUFFER_MAX]; /*! Buffer for storing recieved data*/
volatile int recvhead = 0; /*! Head of buffer. Where next recieved byte will be placed. */
volatile int recvtail = 0; /*! Tail of buffer. Where next read will occour. */

/// Interrupt vector for Rx. Place recieved data into buffer.
ISR(USART0_RXC_vect){
     e70:	1f 92       	push	r1
     e72:	0f 92       	push	r0
     e74:	0f b6       	in	r0, 0x3f	; 63
     e76:	0f 92       	push	r0
     e78:	11 24       	eor	r1, r1
     e7a:	2f 93       	push	r18
     e7c:	3f 93       	push	r19
     e7e:	4f 93       	push	r20
     e80:	8f 93       	push	r24
     e82:	9f 93       	push	r25
     e84:	ef 93       	push	r30
     e86:	ff 93       	push	r31
	cli();
     e88:	f8 94       	cli
	char input = UDR0;
     e8a:	4c b1       	in	r20, 0x0c	; 12
	if((recvhead+1)%BUFFER_MAX != recvtail){		// Sjekk at bufferen ikke er full
     e8c:	80 91 b8 02 	lds	r24, 0x02B8
     e90:	90 91 b9 02 	lds	r25, 0x02B9
     e94:	20 91 b6 02 	lds	r18, 0x02B6
     e98:	30 91 b7 02 	lds	r19, 0x02B7
     e9c:	01 96       	adiw	r24, 0x01	; 1
     e9e:	8f 77       	andi	r24, 0x7F	; 127
     ea0:	90 78       	andi	r25, 0x80	; 128
     ea2:	99 23       	and	r25, r25
     ea4:	24 f4       	brge	.+8      	; 0xeae <__vector_19+0x3e>
     ea6:	01 97       	sbiw	r24, 0x01	; 1
     ea8:	80 68       	ori	r24, 0x80	; 128
     eaa:	9f 6f       	ori	r25, 0xFF	; 255
     eac:	01 96       	adiw	r24, 0x01	; 1
     eae:	82 17       	cp	r24, r18
     eb0:	93 07       	cpc	r25, r19
     eb2:	c1 f0       	breq	.+48     	; 0xee4 <__vector_19+0x74>
		recv_buffer[recvhead] = input;				// If so, legg inn byte
     eb4:	e0 91 b8 02 	lds	r30, 0x02B8
     eb8:	f0 91 b9 02 	lds	r31, 0x02B9
     ebc:	e6 54       	subi	r30, 0x46	; 70
     ebe:	fd 4f       	sbci	r31, 0xFD	; 253
     ec0:	40 83       	st	Z, r20
		recvhead = (recvhead+1)%BUFFER_MAX;
     ec2:	80 91 b8 02 	lds	r24, 0x02B8
     ec6:	90 91 b9 02 	lds	r25, 0x02B9
     eca:	01 96       	adiw	r24, 0x01	; 1
     ecc:	8f 77       	andi	r24, 0x7F	; 127
     ece:	90 78       	andi	r25, 0x80	; 128
     ed0:	99 23       	and	r25, r25
     ed2:	24 f4       	brge	.+8      	; 0xedc <__vector_19+0x6c>
     ed4:	01 97       	sbiw	r24, 0x01	; 1
     ed6:	80 68       	ori	r24, 0x80	; 128
     ed8:	9f 6f       	ori	r25, 0xFF	; 255
     eda:	01 96       	adiw	r24, 0x01	; 1
     edc:	90 93 b9 02 	sts	0x02B9, r25
     ee0:	80 93 b8 02 	sts	0x02B8, r24
	}
	sei();
     ee4:	78 94       	sei
}
     ee6:	ff 91       	pop	r31
     ee8:	ef 91       	pop	r30
     eea:	9f 91       	pop	r25
     eec:	8f 91       	pop	r24
     eee:	4f 91       	pop	r20
     ef0:	3f 91       	pop	r19
     ef2:	2f 91       	pop	r18
     ef4:	0f 90       	pop	r0
     ef6:	0f be       	out	0x3f, r0	; 63
     ef8:	0f 90       	pop	r0
     efa:	1f 90       	pop	r1
     efc:	18 95       	reti

00000efe <__vector_23>:

///\todo remove interrupt from Tx
ISR(USART0_TXC_vect){
     efe:	1f 92       	push	r1
     f00:	0f 92       	push	r0
     f02:	0f b6       	in	r0, 0x3f	; 63
     f04:	0f 92       	push	r0
     f06:	11 24       	eor	r1, r1
	
}
     f08:	0f 90       	pop	r0
     f0a:	0f be       	out	0x3f, r0	; 63
     f0c:	0f 90       	pop	r0
     f0e:	1f 90       	pop	r1
     f10:	18 95       	reti

00000f12 <uart_init>:

///Initialize uart
void uart_init(){
	// set baud rate
	int timerval = (F_CPU/(16*BAUD) - 1);
	UBRR0L = timerval&0xFF;
     f12:	8f e1       	ldi	r24, 0x1F	; 31
     f14:	89 b9       	out	0x09, r24	; 9
	UBRR0H = (timerval>>8)&0x0F;
     f16:	10 bc       	out	0x20, r1	; 32
	
	// enable interupts on Rx & Tx, and enable Rx & Tx 
	UCSR0B |= (1 << RXCIE0) | (1 << TXCIE0) | (1 << RXEN0) | (1 << TXEN0);
     f18:	8a b1       	in	r24, 0x0a	; 10
     f1a:	88 6d       	ori	r24, 0xD8	; 216
     f1c:	8a b9       	out	0x0a, r24	; 10
	
	// enable async mode
	UCSR0C &= ~(1 << UMSEL0);
     f1e:	80 b5       	in	r24, 0x20	; 32
     f20:	8f 7b       	andi	r24, 0xBF	; 191
     f22:	80 bd       	out	0x20, r24	; 32
	
	// parity disable
	UCSR0C &= ~((1 << UPM00) | (1 << UPM10));
     f24:	80 b5       	in	r24, 0x20	; 32
     f26:	8f 7e       	andi	r24, 0xEF	; 239
     f28:	80 bd       	out	0x20, r24	; 32
	
	// stop bit to 1
	UCSR0C &= ~(1 << USBS0);
     f2a:	80 b5       	in	r24, 0x20	; 32
     f2c:	87 7f       	andi	r24, 0xF7	; 247
     f2e:	80 bd       	out	0x20, r24	; 32
     f30:	08 95       	ret

00000f32 <malloc>:
     f32:	cf 93       	push	r28
     f34:	df 93       	push	r29
     f36:	82 30       	cpi	r24, 0x02	; 2
     f38:	91 05       	cpc	r25, r1
     f3a:	10 f4       	brcc	.+4      	; 0xf40 <malloc+0xe>
     f3c:	82 e0       	ldi	r24, 0x02	; 2
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	e0 91 3c 03 	lds	r30, 0x033C
     f44:	f0 91 3d 03 	lds	r31, 0x033D
     f48:	20 e0       	ldi	r18, 0x00	; 0
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	a0 e0       	ldi	r26, 0x00	; 0
     f4e:	b0 e0       	ldi	r27, 0x00	; 0
     f50:	30 97       	sbiw	r30, 0x00	; 0
     f52:	39 f1       	breq	.+78     	; 0xfa2 <malloc+0x70>
     f54:	40 81       	ld	r20, Z
     f56:	51 81       	ldd	r21, Z+1	; 0x01
     f58:	48 17       	cp	r20, r24
     f5a:	59 07       	cpc	r21, r25
     f5c:	b8 f0       	brcs	.+46     	; 0xf8c <malloc+0x5a>
     f5e:	48 17       	cp	r20, r24
     f60:	59 07       	cpc	r21, r25
     f62:	71 f4       	brne	.+28     	; 0xf80 <malloc+0x4e>
     f64:	82 81       	ldd	r24, Z+2	; 0x02
     f66:	93 81       	ldd	r25, Z+3	; 0x03
     f68:	10 97       	sbiw	r26, 0x00	; 0
     f6a:	29 f0       	breq	.+10     	; 0xf76 <malloc+0x44>
     f6c:	13 96       	adiw	r26, 0x03	; 3
     f6e:	9c 93       	st	X, r25
     f70:	8e 93       	st	-X, r24
     f72:	12 97       	sbiw	r26, 0x02	; 2
     f74:	2c c0       	rjmp	.+88     	; 0xfce <malloc+0x9c>
     f76:	90 93 3d 03 	sts	0x033D, r25
     f7a:	80 93 3c 03 	sts	0x033C, r24
     f7e:	27 c0       	rjmp	.+78     	; 0xfce <malloc+0x9c>
     f80:	21 15       	cp	r18, r1
     f82:	31 05       	cpc	r19, r1
     f84:	31 f0       	breq	.+12     	; 0xf92 <malloc+0x60>
     f86:	42 17       	cp	r20, r18
     f88:	53 07       	cpc	r21, r19
     f8a:	18 f0       	brcs	.+6      	; 0xf92 <malloc+0x60>
     f8c:	a9 01       	movw	r20, r18
     f8e:	db 01       	movw	r26, r22
     f90:	01 c0       	rjmp	.+2      	; 0xf94 <malloc+0x62>
     f92:	ef 01       	movw	r28, r30
     f94:	9a 01       	movw	r18, r20
     f96:	bd 01       	movw	r22, r26
     f98:	df 01       	movw	r26, r30
     f9a:	02 80       	ldd	r0, Z+2	; 0x02
     f9c:	f3 81       	ldd	r31, Z+3	; 0x03
     f9e:	e0 2d       	mov	r30, r0
     fa0:	d7 cf       	rjmp	.-82     	; 0xf50 <malloc+0x1e>
     fa2:	21 15       	cp	r18, r1
     fa4:	31 05       	cpc	r19, r1
     fa6:	f9 f0       	breq	.+62     	; 0xfe6 <malloc+0xb4>
     fa8:	28 1b       	sub	r18, r24
     faa:	39 0b       	sbc	r19, r25
     fac:	24 30       	cpi	r18, 0x04	; 4
     fae:	31 05       	cpc	r19, r1
     fb0:	80 f4       	brcc	.+32     	; 0xfd2 <malloc+0xa0>
     fb2:	8a 81       	ldd	r24, Y+2	; 0x02
     fb4:	9b 81       	ldd	r25, Y+3	; 0x03
     fb6:	61 15       	cp	r22, r1
     fb8:	71 05       	cpc	r23, r1
     fba:	21 f0       	breq	.+8      	; 0xfc4 <malloc+0x92>
     fbc:	fb 01       	movw	r30, r22
     fbe:	93 83       	std	Z+3, r25	; 0x03
     fc0:	82 83       	std	Z+2, r24	; 0x02
     fc2:	04 c0       	rjmp	.+8      	; 0xfcc <malloc+0x9a>
     fc4:	90 93 3d 03 	sts	0x033D, r25
     fc8:	80 93 3c 03 	sts	0x033C, r24
     fcc:	fe 01       	movw	r30, r28
     fce:	32 96       	adiw	r30, 0x02	; 2
     fd0:	44 c0       	rjmp	.+136    	; 0x105a <malloc+0x128>
     fd2:	fe 01       	movw	r30, r28
     fd4:	e2 0f       	add	r30, r18
     fd6:	f3 1f       	adc	r31, r19
     fd8:	81 93       	st	Z+, r24
     fda:	91 93       	st	Z+, r25
     fdc:	22 50       	subi	r18, 0x02	; 2
     fde:	31 09       	sbc	r19, r1
     fe0:	39 83       	std	Y+1, r19	; 0x01
     fe2:	28 83       	st	Y, r18
     fe4:	3a c0       	rjmp	.+116    	; 0x105a <malloc+0x128>
     fe6:	20 91 3a 03 	lds	r18, 0x033A
     fea:	30 91 3b 03 	lds	r19, 0x033B
     fee:	23 2b       	or	r18, r19
     ff0:	41 f4       	brne	.+16     	; 0x1002 <malloc+0xd0>
     ff2:	20 91 02 01 	lds	r18, 0x0102
     ff6:	30 91 03 01 	lds	r19, 0x0103
     ffa:	30 93 3b 03 	sts	0x033B, r19
     ffe:	20 93 3a 03 	sts	0x033A, r18
    1002:	20 91 00 01 	lds	r18, 0x0100
    1006:	30 91 01 01 	lds	r19, 0x0101
    100a:	21 15       	cp	r18, r1
    100c:	31 05       	cpc	r19, r1
    100e:	41 f4       	brne	.+16     	; 0x1020 <malloc+0xee>
    1010:	2d b7       	in	r18, 0x3d	; 61
    1012:	3e b7       	in	r19, 0x3e	; 62
    1014:	40 91 04 01 	lds	r20, 0x0104
    1018:	50 91 05 01 	lds	r21, 0x0105
    101c:	24 1b       	sub	r18, r20
    101e:	35 0b       	sbc	r19, r21
    1020:	e0 91 3a 03 	lds	r30, 0x033A
    1024:	f0 91 3b 03 	lds	r31, 0x033B
    1028:	e2 17       	cp	r30, r18
    102a:	f3 07       	cpc	r31, r19
    102c:	a0 f4       	brcc	.+40     	; 0x1056 <malloc+0x124>
    102e:	2e 1b       	sub	r18, r30
    1030:	3f 0b       	sbc	r19, r31
    1032:	28 17       	cp	r18, r24
    1034:	39 07       	cpc	r19, r25
    1036:	78 f0       	brcs	.+30     	; 0x1056 <malloc+0x124>
    1038:	ac 01       	movw	r20, r24
    103a:	4e 5f       	subi	r20, 0xFE	; 254
    103c:	5f 4f       	sbci	r21, 0xFF	; 255
    103e:	24 17       	cp	r18, r20
    1040:	35 07       	cpc	r19, r21
    1042:	48 f0       	brcs	.+18     	; 0x1056 <malloc+0x124>
    1044:	4e 0f       	add	r20, r30
    1046:	5f 1f       	adc	r21, r31
    1048:	50 93 3b 03 	sts	0x033B, r21
    104c:	40 93 3a 03 	sts	0x033A, r20
    1050:	81 93       	st	Z+, r24
    1052:	91 93       	st	Z+, r25
    1054:	02 c0       	rjmp	.+4      	; 0x105a <malloc+0x128>
    1056:	e0 e0       	ldi	r30, 0x00	; 0
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	cf 01       	movw	r24, r30
    105c:	df 91       	pop	r29
    105e:	cf 91       	pop	r28
    1060:	08 95       	ret

00001062 <free>:
    1062:	cf 93       	push	r28
    1064:	df 93       	push	r29
    1066:	00 97       	sbiw	r24, 0x00	; 0
    1068:	09 f4       	brne	.+2      	; 0x106c <free+0xa>
    106a:	87 c0       	rjmp	.+270    	; 0x117a <free+0x118>
    106c:	fc 01       	movw	r30, r24
    106e:	32 97       	sbiw	r30, 0x02	; 2
    1070:	13 82       	std	Z+3, r1	; 0x03
    1072:	12 82       	std	Z+2, r1	; 0x02
    1074:	c0 91 3c 03 	lds	r28, 0x033C
    1078:	d0 91 3d 03 	lds	r29, 0x033D
    107c:	20 97       	sbiw	r28, 0x00	; 0
    107e:	81 f4       	brne	.+32     	; 0x10a0 <free+0x3e>
    1080:	20 81       	ld	r18, Z
    1082:	31 81       	ldd	r19, Z+1	; 0x01
    1084:	28 0f       	add	r18, r24
    1086:	39 1f       	adc	r19, r25
    1088:	80 91 3a 03 	lds	r24, 0x033A
    108c:	90 91 3b 03 	lds	r25, 0x033B
    1090:	82 17       	cp	r24, r18
    1092:	93 07       	cpc	r25, r19
    1094:	79 f5       	brne	.+94     	; 0x10f4 <free+0x92>
    1096:	f0 93 3b 03 	sts	0x033B, r31
    109a:	e0 93 3a 03 	sts	0x033A, r30
    109e:	6d c0       	rjmp	.+218    	; 0x117a <free+0x118>
    10a0:	de 01       	movw	r26, r28
    10a2:	20 e0       	ldi	r18, 0x00	; 0
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	ae 17       	cp	r26, r30
    10a8:	bf 07       	cpc	r27, r31
    10aa:	50 f4       	brcc	.+20     	; 0x10c0 <free+0x5e>
    10ac:	12 96       	adiw	r26, 0x02	; 2
    10ae:	4d 91       	ld	r20, X+
    10b0:	5c 91       	ld	r21, X
    10b2:	13 97       	sbiw	r26, 0x03	; 3
    10b4:	9d 01       	movw	r18, r26
    10b6:	41 15       	cp	r20, r1
    10b8:	51 05       	cpc	r21, r1
    10ba:	09 f1       	breq	.+66     	; 0x10fe <free+0x9c>
    10bc:	da 01       	movw	r26, r20
    10be:	f3 cf       	rjmp	.-26     	; 0x10a6 <free+0x44>
    10c0:	b3 83       	std	Z+3, r27	; 0x03
    10c2:	a2 83       	std	Z+2, r26	; 0x02
    10c4:	40 81       	ld	r20, Z
    10c6:	51 81       	ldd	r21, Z+1	; 0x01
    10c8:	84 0f       	add	r24, r20
    10ca:	95 1f       	adc	r25, r21
    10cc:	8a 17       	cp	r24, r26
    10ce:	9b 07       	cpc	r25, r27
    10d0:	71 f4       	brne	.+28     	; 0x10ee <free+0x8c>
    10d2:	8d 91       	ld	r24, X+
    10d4:	9c 91       	ld	r25, X
    10d6:	11 97       	sbiw	r26, 0x01	; 1
    10d8:	84 0f       	add	r24, r20
    10da:	95 1f       	adc	r25, r21
    10dc:	02 96       	adiw	r24, 0x02	; 2
    10de:	91 83       	std	Z+1, r25	; 0x01
    10e0:	80 83       	st	Z, r24
    10e2:	12 96       	adiw	r26, 0x02	; 2
    10e4:	8d 91       	ld	r24, X+
    10e6:	9c 91       	ld	r25, X
    10e8:	13 97       	sbiw	r26, 0x03	; 3
    10ea:	93 83       	std	Z+3, r25	; 0x03
    10ec:	82 83       	std	Z+2, r24	; 0x02
    10ee:	21 15       	cp	r18, r1
    10f0:	31 05       	cpc	r19, r1
    10f2:	29 f4       	brne	.+10     	; 0x10fe <free+0x9c>
    10f4:	f0 93 3d 03 	sts	0x033D, r31
    10f8:	e0 93 3c 03 	sts	0x033C, r30
    10fc:	3e c0       	rjmp	.+124    	; 0x117a <free+0x118>
    10fe:	d9 01       	movw	r26, r18
    1100:	13 96       	adiw	r26, 0x03	; 3
    1102:	fc 93       	st	X, r31
    1104:	ee 93       	st	-X, r30
    1106:	12 97       	sbiw	r26, 0x02	; 2
    1108:	4d 91       	ld	r20, X+
    110a:	5d 91       	ld	r21, X+
    110c:	a4 0f       	add	r26, r20
    110e:	b5 1f       	adc	r27, r21
    1110:	ea 17       	cp	r30, r26
    1112:	fb 07       	cpc	r31, r27
    1114:	79 f4       	brne	.+30     	; 0x1134 <free+0xd2>
    1116:	80 81       	ld	r24, Z
    1118:	91 81       	ldd	r25, Z+1	; 0x01
    111a:	84 0f       	add	r24, r20
    111c:	95 1f       	adc	r25, r21
    111e:	02 96       	adiw	r24, 0x02	; 2
    1120:	d9 01       	movw	r26, r18
    1122:	11 96       	adiw	r26, 0x01	; 1
    1124:	9c 93       	st	X, r25
    1126:	8e 93       	st	-X, r24
    1128:	82 81       	ldd	r24, Z+2	; 0x02
    112a:	93 81       	ldd	r25, Z+3	; 0x03
    112c:	13 96       	adiw	r26, 0x03	; 3
    112e:	9c 93       	st	X, r25
    1130:	8e 93       	st	-X, r24
    1132:	12 97       	sbiw	r26, 0x02	; 2
    1134:	e0 e0       	ldi	r30, 0x00	; 0
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	8a 81       	ldd	r24, Y+2	; 0x02
    113a:	9b 81       	ldd	r25, Y+3	; 0x03
    113c:	00 97       	sbiw	r24, 0x00	; 0
    113e:	19 f0       	breq	.+6      	; 0x1146 <free+0xe4>
    1140:	fe 01       	movw	r30, r28
    1142:	ec 01       	movw	r28, r24
    1144:	f9 cf       	rjmp	.-14     	; 0x1138 <free+0xd6>
    1146:	ce 01       	movw	r24, r28
    1148:	02 96       	adiw	r24, 0x02	; 2
    114a:	28 81       	ld	r18, Y
    114c:	39 81       	ldd	r19, Y+1	; 0x01
    114e:	82 0f       	add	r24, r18
    1150:	93 1f       	adc	r25, r19
    1152:	20 91 3a 03 	lds	r18, 0x033A
    1156:	30 91 3b 03 	lds	r19, 0x033B
    115a:	28 17       	cp	r18, r24
    115c:	39 07       	cpc	r19, r25
    115e:	69 f4       	brne	.+26     	; 0x117a <free+0x118>
    1160:	30 97       	sbiw	r30, 0x00	; 0
    1162:	29 f4       	brne	.+10     	; 0x116e <free+0x10c>
    1164:	10 92 3d 03 	sts	0x033D, r1
    1168:	10 92 3c 03 	sts	0x033C, r1
    116c:	02 c0       	rjmp	.+4      	; 0x1172 <free+0x110>
    116e:	13 82       	std	Z+3, r1	; 0x03
    1170:	12 82       	std	Z+2, r1	; 0x02
    1172:	d0 93 3b 03 	sts	0x033B, r29
    1176:	c0 93 3a 03 	sts	0x033A, r28
    117a:	df 91       	pop	r29
    117c:	cf 91       	pop	r28
    117e:	08 95       	ret

00001180 <strncpy>:
    1180:	fb 01       	movw	r30, r22
    1182:	dc 01       	movw	r26, r24
    1184:	41 50       	subi	r20, 0x01	; 1
    1186:	50 40       	sbci	r21, 0x00	; 0
    1188:	48 f0       	brcs	.+18     	; 0x119c <strncpy+0x1c>
    118a:	01 90       	ld	r0, Z+
    118c:	0d 92       	st	X+, r0
    118e:	00 20       	and	r0, r0
    1190:	c9 f7       	brne	.-14     	; 0x1184 <strncpy+0x4>
    1192:	01 c0       	rjmp	.+2      	; 0x1196 <strncpy+0x16>
    1194:	1d 92       	st	X+, r1
    1196:	41 50       	subi	r20, 0x01	; 1
    1198:	50 40       	sbci	r21, 0x00	; 0
    119a:	e0 f7       	brcc	.-8      	; 0x1194 <strncpy+0x14>
    119c:	08 95       	ret

0000119e <fprintf>:
    119e:	a0 e0       	ldi	r26, 0x00	; 0
    11a0:	b0 e0       	ldi	r27, 0x00	; 0
    11a2:	e4 ed       	ldi	r30, 0xD4	; 212
    11a4:	f8 e0       	ldi	r31, 0x08	; 8
    11a6:	b5 c2       	rjmp	.+1386   	; 0x1712 <__prologue_saves__+0x20>
    11a8:	ae 01       	movw	r20, r28
    11aa:	47 5f       	subi	r20, 0xF7	; 247
    11ac:	5f 4f       	sbci	r21, 0xFF	; 255
    11ae:	6f 81       	ldd	r22, Y+7	; 0x07
    11b0:	78 85       	ldd	r23, Y+8	; 0x08
    11b2:	8d 81       	ldd	r24, Y+5	; 0x05
    11b4:	9e 81       	ldd	r25, Y+6	; 0x06
    11b6:	66 d0       	rcall	.+204    	; 0x1284 <vfprintf>
    11b8:	e2 e0       	ldi	r30, 0x02	; 2
    11ba:	c7 c2       	rjmp	.+1422   	; 0x174a <__epilogue_restores__+0x20>

000011bc <fputc>:
    11bc:	0f 93       	push	r16
    11be:	1f 93       	push	r17
    11c0:	cf 93       	push	r28
    11c2:	df 93       	push	r29
    11c4:	18 2f       	mov	r17, r24
    11c6:	09 2f       	mov	r16, r25
    11c8:	eb 01       	movw	r28, r22
    11ca:	8b 81       	ldd	r24, Y+3	; 0x03
    11cc:	81 fd       	sbrc	r24, 1
    11ce:	03 c0       	rjmp	.+6      	; 0x11d6 <fputc+0x1a>
    11d0:	8f ef       	ldi	r24, 0xFF	; 255
    11d2:	9f ef       	ldi	r25, 0xFF	; 255
    11d4:	20 c0       	rjmp	.+64     	; 0x1216 <fputc+0x5a>
    11d6:	82 ff       	sbrs	r24, 2
    11d8:	10 c0       	rjmp	.+32     	; 0x11fa <fputc+0x3e>
    11da:	4e 81       	ldd	r20, Y+6	; 0x06
    11dc:	5f 81       	ldd	r21, Y+7	; 0x07
    11de:	2c 81       	ldd	r18, Y+4	; 0x04
    11e0:	3d 81       	ldd	r19, Y+5	; 0x05
    11e2:	42 17       	cp	r20, r18
    11e4:	53 07       	cpc	r21, r19
    11e6:	7c f4       	brge	.+30     	; 0x1206 <fputc+0x4a>
    11e8:	e8 81       	ld	r30, Y
    11ea:	f9 81       	ldd	r31, Y+1	; 0x01
    11ec:	9f 01       	movw	r18, r30
    11ee:	2f 5f       	subi	r18, 0xFF	; 255
    11f0:	3f 4f       	sbci	r19, 0xFF	; 255
    11f2:	39 83       	std	Y+1, r19	; 0x01
    11f4:	28 83       	st	Y, r18
    11f6:	10 83       	st	Z, r17
    11f8:	06 c0       	rjmp	.+12     	; 0x1206 <fputc+0x4a>
    11fa:	e8 85       	ldd	r30, Y+8	; 0x08
    11fc:	f9 85       	ldd	r31, Y+9	; 0x09
    11fe:	81 2f       	mov	r24, r17
    1200:	09 95       	icall
    1202:	89 2b       	or	r24, r25
    1204:	29 f7       	brne	.-54     	; 0x11d0 <fputc+0x14>
    1206:	2e 81       	ldd	r18, Y+6	; 0x06
    1208:	3f 81       	ldd	r19, Y+7	; 0x07
    120a:	2f 5f       	subi	r18, 0xFF	; 255
    120c:	3f 4f       	sbci	r19, 0xFF	; 255
    120e:	3f 83       	std	Y+7, r19	; 0x07
    1210:	2e 83       	std	Y+6, r18	; 0x06
    1212:	81 2f       	mov	r24, r17
    1214:	90 2f       	mov	r25, r16
    1216:	df 91       	pop	r29
    1218:	cf 91       	pop	r28
    121a:	1f 91       	pop	r17
    121c:	0f 91       	pop	r16
    121e:	08 95       	ret

00001220 <fwrite>:
    1220:	a0 e0       	ldi	r26, 0x00	; 0
    1222:	b0 e0       	ldi	r27, 0x00	; 0
    1224:	e5 e1       	ldi	r30, 0x15	; 21
    1226:	f9 e0       	ldi	r31, 0x09	; 9
    1228:	6a c2       	rjmp	.+1236   	; 0x16fe <__prologue_saves__+0xc>
    122a:	6b 01       	movw	r12, r22
    122c:	4a 01       	movw	r8, r20
    122e:	79 01       	movw	r14, r18
    1230:	d9 01       	movw	r26, r18
    1232:	13 96       	adiw	r26, 0x03	; 3
    1234:	2c 91       	ld	r18, X
    1236:	21 ff       	sbrs	r18, 1
    1238:	1d c0       	rjmp	.+58     	; 0x1274 <fwrite+0x54>
    123a:	c0 e0       	ldi	r28, 0x00	; 0
    123c:	d0 e0       	ldi	r29, 0x00	; 0
    123e:	c8 15       	cp	r28, r8
    1240:	d9 05       	cpc	r29, r9
    1242:	d9 f0       	breq	.+54     	; 0x127a <fwrite+0x5a>
    1244:	8c 01       	movw	r16, r24
    1246:	5c 01       	movw	r10, r24
    1248:	ac 0c       	add	r10, r12
    124a:	bd 1c       	adc	r11, r13
    124c:	c8 01       	movw	r24, r16
    124e:	0a 15       	cp	r16, r10
    1250:	1b 05       	cpc	r17, r11
    1252:	71 f0       	breq	.+28     	; 0x1270 <fwrite+0x50>
    1254:	0f 5f       	subi	r16, 0xFF	; 255
    1256:	1f 4f       	sbci	r17, 0xFF	; 255
    1258:	d7 01       	movw	r26, r14
    125a:	18 96       	adiw	r26, 0x08	; 8
    125c:	ed 91       	ld	r30, X+
    125e:	fc 91       	ld	r31, X
    1260:	19 97       	sbiw	r26, 0x09	; 9
    1262:	b7 01       	movw	r22, r14
    1264:	dc 01       	movw	r26, r24
    1266:	8c 91       	ld	r24, X
    1268:	09 95       	icall
    126a:	89 2b       	or	r24, r25
    126c:	79 f3       	breq	.-34     	; 0x124c <fwrite+0x2c>
    126e:	05 c0       	rjmp	.+10     	; 0x127a <fwrite+0x5a>
    1270:	21 96       	adiw	r28, 0x01	; 1
    1272:	e5 cf       	rjmp	.-54     	; 0x123e <fwrite+0x1e>
    1274:	80 e0       	ldi	r24, 0x00	; 0
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	01 c0       	rjmp	.+2      	; 0x127c <fwrite+0x5c>
    127a:	ce 01       	movw	r24, r28
    127c:	cd b7       	in	r28, 0x3d	; 61
    127e:	de b7       	in	r29, 0x3e	; 62
    1280:	ec e0       	ldi	r30, 0x0C	; 12
    1282:	59 c2       	rjmp	.+1202   	; 0x1736 <__epilogue_restores__+0xc>

00001284 <vfprintf>:
    1284:	ac e0       	ldi	r26, 0x0C	; 12
    1286:	b0 e0       	ldi	r27, 0x00	; 0
    1288:	e7 e4       	ldi	r30, 0x47	; 71
    128a:	f9 e0       	ldi	r31, 0x09	; 9
    128c:	32 c2       	rjmp	.+1124   	; 0x16f2 <__prologue_saves__>
    128e:	7c 01       	movw	r14, r24
    1290:	6b 01       	movw	r12, r22
    1292:	8a 01       	movw	r16, r20
    1294:	fc 01       	movw	r30, r24
    1296:	17 82       	std	Z+7, r1	; 0x07
    1298:	16 82       	std	Z+6, r1	; 0x06
    129a:	83 81       	ldd	r24, Z+3	; 0x03
    129c:	81 ff       	sbrs	r24, 1
    129e:	b0 c1       	rjmp	.+864    	; 0x1600 <vfprintf+0x37c>
    12a0:	ce 01       	movw	r24, r28
    12a2:	01 96       	adiw	r24, 0x01	; 1
    12a4:	4c 01       	movw	r8, r24
    12a6:	f7 01       	movw	r30, r14
    12a8:	93 81       	ldd	r25, Z+3	; 0x03
    12aa:	f6 01       	movw	r30, r12
    12ac:	93 fd       	sbrc	r25, 3
    12ae:	85 91       	lpm	r24, Z+
    12b0:	93 ff       	sbrs	r25, 3
    12b2:	81 91       	ld	r24, Z+
    12b4:	6f 01       	movw	r12, r30
    12b6:	88 23       	and	r24, r24
    12b8:	09 f4       	brne	.+2      	; 0x12bc <vfprintf+0x38>
    12ba:	9e c1       	rjmp	.+828    	; 0x15f8 <vfprintf+0x374>
    12bc:	85 32       	cpi	r24, 0x25	; 37
    12be:	39 f4       	brne	.+14     	; 0x12ce <vfprintf+0x4a>
    12c0:	93 fd       	sbrc	r25, 3
    12c2:	85 91       	lpm	r24, Z+
    12c4:	93 ff       	sbrs	r25, 3
    12c6:	81 91       	ld	r24, Z+
    12c8:	6f 01       	movw	r12, r30
    12ca:	85 32       	cpi	r24, 0x25	; 37
    12cc:	21 f4       	brne	.+8      	; 0x12d6 <vfprintf+0x52>
    12ce:	b7 01       	movw	r22, r14
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	74 df       	rcall	.-280    	; 0x11bc <fputc>
    12d4:	e8 cf       	rjmp	.-48     	; 0x12a6 <vfprintf+0x22>
    12d6:	51 2c       	mov	r5, r1
    12d8:	31 2c       	mov	r3, r1
    12da:	20 e0       	ldi	r18, 0x00	; 0
    12dc:	20 32       	cpi	r18, 0x20	; 32
    12de:	a0 f4       	brcc	.+40     	; 0x1308 <vfprintf+0x84>
    12e0:	8b 32       	cpi	r24, 0x2B	; 43
    12e2:	69 f0       	breq	.+26     	; 0x12fe <vfprintf+0x7a>
    12e4:	30 f4       	brcc	.+12     	; 0x12f2 <vfprintf+0x6e>
    12e6:	80 32       	cpi	r24, 0x20	; 32
    12e8:	59 f0       	breq	.+22     	; 0x1300 <vfprintf+0x7c>
    12ea:	83 32       	cpi	r24, 0x23	; 35
    12ec:	69 f4       	brne	.+26     	; 0x1308 <vfprintf+0x84>
    12ee:	20 61       	ori	r18, 0x10	; 16
    12f0:	2c c0       	rjmp	.+88     	; 0x134a <vfprintf+0xc6>
    12f2:	8d 32       	cpi	r24, 0x2D	; 45
    12f4:	39 f0       	breq	.+14     	; 0x1304 <vfprintf+0x80>
    12f6:	80 33       	cpi	r24, 0x30	; 48
    12f8:	39 f4       	brne	.+14     	; 0x1308 <vfprintf+0x84>
    12fa:	21 60       	ori	r18, 0x01	; 1
    12fc:	26 c0       	rjmp	.+76     	; 0x134a <vfprintf+0xc6>
    12fe:	22 60       	ori	r18, 0x02	; 2
    1300:	24 60       	ori	r18, 0x04	; 4
    1302:	23 c0       	rjmp	.+70     	; 0x134a <vfprintf+0xc6>
    1304:	28 60       	ori	r18, 0x08	; 8
    1306:	21 c0       	rjmp	.+66     	; 0x134a <vfprintf+0xc6>
    1308:	27 fd       	sbrc	r18, 7
    130a:	27 c0       	rjmp	.+78     	; 0x135a <vfprintf+0xd6>
    130c:	30 ed       	ldi	r19, 0xD0	; 208
    130e:	38 0f       	add	r19, r24
    1310:	3a 30       	cpi	r19, 0x0A	; 10
    1312:	78 f4       	brcc	.+30     	; 0x1332 <vfprintf+0xae>
    1314:	26 ff       	sbrs	r18, 6
    1316:	06 c0       	rjmp	.+12     	; 0x1324 <vfprintf+0xa0>
    1318:	fa e0       	ldi	r31, 0x0A	; 10
    131a:	5f 9e       	mul	r5, r31
    131c:	30 0d       	add	r19, r0
    131e:	11 24       	eor	r1, r1
    1320:	53 2e       	mov	r5, r19
    1322:	13 c0       	rjmp	.+38     	; 0x134a <vfprintf+0xc6>
    1324:	8a e0       	ldi	r24, 0x0A	; 10
    1326:	38 9e       	mul	r3, r24
    1328:	30 0d       	add	r19, r0
    132a:	11 24       	eor	r1, r1
    132c:	33 2e       	mov	r3, r19
    132e:	20 62       	ori	r18, 0x20	; 32
    1330:	0c c0       	rjmp	.+24     	; 0x134a <vfprintf+0xc6>
    1332:	8e 32       	cpi	r24, 0x2E	; 46
    1334:	21 f4       	brne	.+8      	; 0x133e <vfprintf+0xba>
    1336:	26 fd       	sbrc	r18, 6
    1338:	5f c1       	rjmp	.+702    	; 0x15f8 <vfprintf+0x374>
    133a:	20 64       	ori	r18, 0x40	; 64
    133c:	06 c0       	rjmp	.+12     	; 0x134a <vfprintf+0xc6>
    133e:	8c 36       	cpi	r24, 0x6C	; 108
    1340:	11 f4       	brne	.+4      	; 0x1346 <vfprintf+0xc2>
    1342:	20 68       	ori	r18, 0x80	; 128
    1344:	02 c0       	rjmp	.+4      	; 0x134a <vfprintf+0xc6>
    1346:	88 36       	cpi	r24, 0x68	; 104
    1348:	41 f4       	brne	.+16     	; 0x135a <vfprintf+0xd6>
    134a:	f6 01       	movw	r30, r12
    134c:	93 fd       	sbrc	r25, 3
    134e:	85 91       	lpm	r24, Z+
    1350:	93 ff       	sbrs	r25, 3
    1352:	81 91       	ld	r24, Z+
    1354:	6f 01       	movw	r12, r30
    1356:	81 11       	cpse	r24, r1
    1358:	c1 cf       	rjmp	.-126    	; 0x12dc <vfprintf+0x58>
    135a:	98 2f       	mov	r25, r24
    135c:	9f 7d       	andi	r25, 0xDF	; 223
    135e:	95 54       	subi	r25, 0x45	; 69
    1360:	93 30       	cpi	r25, 0x03	; 3
    1362:	28 f4       	brcc	.+10     	; 0x136e <vfprintf+0xea>
    1364:	0c 5f       	subi	r16, 0xFC	; 252
    1366:	1f 4f       	sbci	r17, 0xFF	; 255
    1368:	ff e3       	ldi	r31, 0x3F	; 63
    136a:	f9 83       	std	Y+1, r31	; 0x01
    136c:	0d c0       	rjmp	.+26     	; 0x1388 <vfprintf+0x104>
    136e:	83 36       	cpi	r24, 0x63	; 99
    1370:	31 f0       	breq	.+12     	; 0x137e <vfprintf+0xfa>
    1372:	83 37       	cpi	r24, 0x73	; 115
    1374:	71 f0       	breq	.+28     	; 0x1392 <vfprintf+0x10e>
    1376:	83 35       	cpi	r24, 0x53	; 83
    1378:	09 f0       	breq	.+2      	; 0x137c <vfprintf+0xf8>
    137a:	57 c0       	rjmp	.+174    	; 0x142a <vfprintf+0x1a6>
    137c:	21 c0       	rjmp	.+66     	; 0x13c0 <vfprintf+0x13c>
    137e:	f8 01       	movw	r30, r16
    1380:	80 81       	ld	r24, Z
    1382:	89 83       	std	Y+1, r24	; 0x01
    1384:	0e 5f       	subi	r16, 0xFE	; 254
    1386:	1f 4f       	sbci	r17, 0xFF	; 255
    1388:	44 24       	eor	r4, r4
    138a:	43 94       	inc	r4
    138c:	51 2c       	mov	r5, r1
    138e:	54 01       	movw	r10, r8
    1390:	14 c0       	rjmp	.+40     	; 0x13ba <vfprintf+0x136>
    1392:	38 01       	movw	r6, r16
    1394:	f2 e0       	ldi	r31, 0x02	; 2
    1396:	6f 0e       	add	r6, r31
    1398:	71 1c       	adc	r7, r1
    139a:	f8 01       	movw	r30, r16
    139c:	a0 80       	ld	r10, Z
    139e:	b1 80       	ldd	r11, Z+1	; 0x01
    13a0:	26 ff       	sbrs	r18, 6
    13a2:	03 c0       	rjmp	.+6      	; 0x13aa <vfprintf+0x126>
    13a4:	65 2d       	mov	r22, r5
    13a6:	70 e0       	ldi	r23, 0x00	; 0
    13a8:	02 c0       	rjmp	.+4      	; 0x13ae <vfprintf+0x12a>
    13aa:	6f ef       	ldi	r22, 0xFF	; 255
    13ac:	7f ef       	ldi	r23, 0xFF	; 255
    13ae:	c5 01       	movw	r24, r10
    13b0:	2c 87       	std	Y+12, r18	; 0x0c
    13b2:	36 d1       	rcall	.+620    	; 0x1620 <strnlen>
    13b4:	2c 01       	movw	r4, r24
    13b6:	83 01       	movw	r16, r6
    13b8:	2c 85       	ldd	r18, Y+12	; 0x0c
    13ba:	2f 77       	andi	r18, 0x7F	; 127
    13bc:	22 2e       	mov	r2, r18
    13be:	16 c0       	rjmp	.+44     	; 0x13ec <vfprintf+0x168>
    13c0:	38 01       	movw	r6, r16
    13c2:	f2 e0       	ldi	r31, 0x02	; 2
    13c4:	6f 0e       	add	r6, r31
    13c6:	71 1c       	adc	r7, r1
    13c8:	f8 01       	movw	r30, r16
    13ca:	a0 80       	ld	r10, Z
    13cc:	b1 80       	ldd	r11, Z+1	; 0x01
    13ce:	26 ff       	sbrs	r18, 6
    13d0:	03 c0       	rjmp	.+6      	; 0x13d8 <vfprintf+0x154>
    13d2:	65 2d       	mov	r22, r5
    13d4:	70 e0       	ldi	r23, 0x00	; 0
    13d6:	02 c0       	rjmp	.+4      	; 0x13dc <vfprintf+0x158>
    13d8:	6f ef       	ldi	r22, 0xFF	; 255
    13da:	7f ef       	ldi	r23, 0xFF	; 255
    13dc:	c5 01       	movw	r24, r10
    13de:	2c 87       	std	Y+12, r18	; 0x0c
    13e0:	14 d1       	rcall	.+552    	; 0x160a <strnlen_P>
    13e2:	2c 01       	movw	r4, r24
    13e4:	2c 85       	ldd	r18, Y+12	; 0x0c
    13e6:	20 68       	ori	r18, 0x80	; 128
    13e8:	22 2e       	mov	r2, r18
    13ea:	83 01       	movw	r16, r6
    13ec:	23 fc       	sbrc	r2, 3
    13ee:	19 c0       	rjmp	.+50     	; 0x1422 <vfprintf+0x19e>
    13f0:	83 2d       	mov	r24, r3
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	48 16       	cp	r4, r24
    13f6:	59 06       	cpc	r5, r25
    13f8:	a0 f4       	brcc	.+40     	; 0x1422 <vfprintf+0x19e>
    13fa:	b7 01       	movw	r22, r14
    13fc:	80 e2       	ldi	r24, 0x20	; 32
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	dd de       	rcall	.-582    	; 0x11bc <fputc>
    1402:	3a 94       	dec	r3
    1404:	f5 cf       	rjmp	.-22     	; 0x13f0 <vfprintf+0x16c>
    1406:	f5 01       	movw	r30, r10
    1408:	27 fc       	sbrc	r2, 7
    140a:	85 91       	lpm	r24, Z+
    140c:	27 fe       	sbrs	r2, 7
    140e:	81 91       	ld	r24, Z+
    1410:	5f 01       	movw	r10, r30
    1412:	b7 01       	movw	r22, r14
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	d2 de       	rcall	.-604    	; 0x11bc <fputc>
    1418:	31 10       	cpse	r3, r1
    141a:	3a 94       	dec	r3
    141c:	f1 e0       	ldi	r31, 0x01	; 1
    141e:	4f 1a       	sub	r4, r31
    1420:	51 08       	sbc	r5, r1
    1422:	41 14       	cp	r4, r1
    1424:	51 04       	cpc	r5, r1
    1426:	79 f7       	brne	.-34     	; 0x1406 <vfprintf+0x182>
    1428:	de c0       	rjmp	.+444    	; 0x15e6 <vfprintf+0x362>
    142a:	84 36       	cpi	r24, 0x64	; 100
    142c:	11 f0       	breq	.+4      	; 0x1432 <vfprintf+0x1ae>
    142e:	89 36       	cpi	r24, 0x69	; 105
    1430:	31 f5       	brne	.+76     	; 0x147e <vfprintf+0x1fa>
    1432:	f8 01       	movw	r30, r16
    1434:	27 ff       	sbrs	r18, 7
    1436:	07 c0       	rjmp	.+14     	; 0x1446 <vfprintf+0x1c2>
    1438:	60 81       	ld	r22, Z
    143a:	71 81       	ldd	r23, Z+1	; 0x01
    143c:	82 81       	ldd	r24, Z+2	; 0x02
    143e:	93 81       	ldd	r25, Z+3	; 0x03
    1440:	0c 5f       	subi	r16, 0xFC	; 252
    1442:	1f 4f       	sbci	r17, 0xFF	; 255
    1444:	08 c0       	rjmp	.+16     	; 0x1456 <vfprintf+0x1d2>
    1446:	60 81       	ld	r22, Z
    1448:	71 81       	ldd	r23, Z+1	; 0x01
    144a:	88 27       	eor	r24, r24
    144c:	77 fd       	sbrc	r23, 7
    144e:	80 95       	com	r24
    1450:	98 2f       	mov	r25, r24
    1452:	0e 5f       	subi	r16, 0xFE	; 254
    1454:	1f 4f       	sbci	r17, 0xFF	; 255
    1456:	2f 76       	andi	r18, 0x6F	; 111
    1458:	b2 2e       	mov	r11, r18
    145a:	97 ff       	sbrs	r25, 7
    145c:	09 c0       	rjmp	.+18     	; 0x1470 <vfprintf+0x1ec>
    145e:	90 95       	com	r25
    1460:	80 95       	com	r24
    1462:	70 95       	com	r23
    1464:	61 95       	neg	r22
    1466:	7f 4f       	sbci	r23, 0xFF	; 255
    1468:	8f 4f       	sbci	r24, 0xFF	; 255
    146a:	9f 4f       	sbci	r25, 0xFF	; 255
    146c:	20 68       	ori	r18, 0x80	; 128
    146e:	b2 2e       	mov	r11, r18
    1470:	2a e0       	ldi	r18, 0x0A	; 10
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	a4 01       	movw	r20, r8
    1476:	df d0       	rcall	.+446    	; 0x1636 <__ultoa_invert>
    1478:	a8 2e       	mov	r10, r24
    147a:	a8 18       	sub	r10, r8
    147c:	43 c0       	rjmp	.+134    	; 0x1504 <vfprintf+0x280>
    147e:	85 37       	cpi	r24, 0x75	; 117
    1480:	29 f4       	brne	.+10     	; 0x148c <vfprintf+0x208>
    1482:	2f 7e       	andi	r18, 0xEF	; 239
    1484:	b2 2e       	mov	r11, r18
    1486:	2a e0       	ldi	r18, 0x0A	; 10
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	25 c0       	rjmp	.+74     	; 0x14d6 <vfprintf+0x252>
    148c:	f2 2f       	mov	r31, r18
    148e:	f9 7f       	andi	r31, 0xF9	; 249
    1490:	bf 2e       	mov	r11, r31
    1492:	8f 36       	cpi	r24, 0x6F	; 111
    1494:	c1 f0       	breq	.+48     	; 0x14c6 <vfprintf+0x242>
    1496:	18 f4       	brcc	.+6      	; 0x149e <vfprintf+0x21a>
    1498:	88 35       	cpi	r24, 0x58	; 88
    149a:	79 f0       	breq	.+30     	; 0x14ba <vfprintf+0x236>
    149c:	ad c0       	rjmp	.+346    	; 0x15f8 <vfprintf+0x374>
    149e:	80 37       	cpi	r24, 0x70	; 112
    14a0:	19 f0       	breq	.+6      	; 0x14a8 <vfprintf+0x224>
    14a2:	88 37       	cpi	r24, 0x78	; 120
    14a4:	21 f0       	breq	.+8      	; 0x14ae <vfprintf+0x22a>
    14a6:	a8 c0       	rjmp	.+336    	; 0x15f8 <vfprintf+0x374>
    14a8:	2f 2f       	mov	r18, r31
    14aa:	20 61       	ori	r18, 0x10	; 16
    14ac:	b2 2e       	mov	r11, r18
    14ae:	b4 fe       	sbrs	r11, 4
    14b0:	0d c0       	rjmp	.+26     	; 0x14cc <vfprintf+0x248>
    14b2:	8b 2d       	mov	r24, r11
    14b4:	84 60       	ori	r24, 0x04	; 4
    14b6:	b8 2e       	mov	r11, r24
    14b8:	09 c0       	rjmp	.+18     	; 0x14cc <vfprintf+0x248>
    14ba:	24 ff       	sbrs	r18, 4
    14bc:	0a c0       	rjmp	.+20     	; 0x14d2 <vfprintf+0x24e>
    14be:	9f 2f       	mov	r25, r31
    14c0:	96 60       	ori	r25, 0x06	; 6
    14c2:	b9 2e       	mov	r11, r25
    14c4:	06 c0       	rjmp	.+12     	; 0x14d2 <vfprintf+0x24e>
    14c6:	28 e0       	ldi	r18, 0x08	; 8
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	05 c0       	rjmp	.+10     	; 0x14d6 <vfprintf+0x252>
    14cc:	20 e1       	ldi	r18, 0x10	; 16
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	02 c0       	rjmp	.+4      	; 0x14d6 <vfprintf+0x252>
    14d2:	20 e1       	ldi	r18, 0x10	; 16
    14d4:	32 e0       	ldi	r19, 0x02	; 2
    14d6:	f8 01       	movw	r30, r16
    14d8:	b7 fe       	sbrs	r11, 7
    14da:	07 c0       	rjmp	.+14     	; 0x14ea <vfprintf+0x266>
    14dc:	60 81       	ld	r22, Z
    14de:	71 81       	ldd	r23, Z+1	; 0x01
    14e0:	82 81       	ldd	r24, Z+2	; 0x02
    14e2:	93 81       	ldd	r25, Z+3	; 0x03
    14e4:	0c 5f       	subi	r16, 0xFC	; 252
    14e6:	1f 4f       	sbci	r17, 0xFF	; 255
    14e8:	06 c0       	rjmp	.+12     	; 0x14f6 <vfprintf+0x272>
    14ea:	60 81       	ld	r22, Z
    14ec:	71 81       	ldd	r23, Z+1	; 0x01
    14ee:	80 e0       	ldi	r24, 0x00	; 0
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	0e 5f       	subi	r16, 0xFE	; 254
    14f4:	1f 4f       	sbci	r17, 0xFF	; 255
    14f6:	a4 01       	movw	r20, r8
    14f8:	9e d0       	rcall	.+316    	; 0x1636 <__ultoa_invert>
    14fa:	a8 2e       	mov	r10, r24
    14fc:	a8 18       	sub	r10, r8
    14fe:	fb 2d       	mov	r31, r11
    1500:	ff 77       	andi	r31, 0x7F	; 127
    1502:	bf 2e       	mov	r11, r31
    1504:	b6 fe       	sbrs	r11, 6
    1506:	0b c0       	rjmp	.+22     	; 0x151e <vfprintf+0x29a>
    1508:	2b 2d       	mov	r18, r11
    150a:	2e 7f       	andi	r18, 0xFE	; 254
    150c:	a5 14       	cp	r10, r5
    150e:	50 f4       	brcc	.+20     	; 0x1524 <vfprintf+0x2a0>
    1510:	b4 fe       	sbrs	r11, 4
    1512:	0a c0       	rjmp	.+20     	; 0x1528 <vfprintf+0x2a4>
    1514:	b2 fc       	sbrc	r11, 2
    1516:	08 c0       	rjmp	.+16     	; 0x1528 <vfprintf+0x2a4>
    1518:	2b 2d       	mov	r18, r11
    151a:	2e 7e       	andi	r18, 0xEE	; 238
    151c:	05 c0       	rjmp	.+10     	; 0x1528 <vfprintf+0x2a4>
    151e:	7a 2c       	mov	r7, r10
    1520:	2b 2d       	mov	r18, r11
    1522:	03 c0       	rjmp	.+6      	; 0x152a <vfprintf+0x2a6>
    1524:	7a 2c       	mov	r7, r10
    1526:	01 c0       	rjmp	.+2      	; 0x152a <vfprintf+0x2a6>
    1528:	75 2c       	mov	r7, r5
    152a:	24 ff       	sbrs	r18, 4
    152c:	0d c0       	rjmp	.+26     	; 0x1548 <vfprintf+0x2c4>
    152e:	fe 01       	movw	r30, r28
    1530:	ea 0d       	add	r30, r10
    1532:	f1 1d       	adc	r31, r1
    1534:	80 81       	ld	r24, Z
    1536:	80 33       	cpi	r24, 0x30	; 48
    1538:	11 f4       	brne	.+4      	; 0x153e <vfprintf+0x2ba>
    153a:	29 7e       	andi	r18, 0xE9	; 233
    153c:	09 c0       	rjmp	.+18     	; 0x1550 <vfprintf+0x2cc>
    153e:	22 ff       	sbrs	r18, 2
    1540:	06 c0       	rjmp	.+12     	; 0x154e <vfprintf+0x2ca>
    1542:	73 94       	inc	r7
    1544:	73 94       	inc	r7
    1546:	04 c0       	rjmp	.+8      	; 0x1550 <vfprintf+0x2cc>
    1548:	82 2f       	mov	r24, r18
    154a:	86 78       	andi	r24, 0x86	; 134
    154c:	09 f0       	breq	.+2      	; 0x1550 <vfprintf+0x2cc>
    154e:	73 94       	inc	r7
    1550:	23 fd       	sbrc	r18, 3
    1552:	12 c0       	rjmp	.+36     	; 0x1578 <vfprintf+0x2f4>
    1554:	20 ff       	sbrs	r18, 0
    1556:	06 c0       	rjmp	.+12     	; 0x1564 <vfprintf+0x2e0>
    1558:	5a 2c       	mov	r5, r10
    155a:	73 14       	cp	r7, r3
    155c:	18 f4       	brcc	.+6      	; 0x1564 <vfprintf+0x2e0>
    155e:	53 0c       	add	r5, r3
    1560:	57 18       	sub	r5, r7
    1562:	73 2c       	mov	r7, r3
    1564:	73 14       	cp	r7, r3
    1566:	60 f4       	brcc	.+24     	; 0x1580 <vfprintf+0x2fc>
    1568:	b7 01       	movw	r22, r14
    156a:	80 e2       	ldi	r24, 0x20	; 32
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	2c 87       	std	Y+12, r18	; 0x0c
    1570:	25 de       	rcall	.-950    	; 0x11bc <fputc>
    1572:	73 94       	inc	r7
    1574:	2c 85       	ldd	r18, Y+12	; 0x0c
    1576:	f6 cf       	rjmp	.-20     	; 0x1564 <vfprintf+0x2e0>
    1578:	73 14       	cp	r7, r3
    157a:	10 f4       	brcc	.+4      	; 0x1580 <vfprintf+0x2fc>
    157c:	37 18       	sub	r3, r7
    157e:	01 c0       	rjmp	.+2      	; 0x1582 <vfprintf+0x2fe>
    1580:	31 2c       	mov	r3, r1
    1582:	24 ff       	sbrs	r18, 4
    1584:	11 c0       	rjmp	.+34     	; 0x15a8 <vfprintf+0x324>
    1586:	b7 01       	movw	r22, r14
    1588:	80 e3       	ldi	r24, 0x30	; 48
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	2c 87       	std	Y+12, r18	; 0x0c
    158e:	16 de       	rcall	.-980    	; 0x11bc <fputc>
    1590:	2c 85       	ldd	r18, Y+12	; 0x0c
    1592:	22 ff       	sbrs	r18, 2
    1594:	16 c0       	rjmp	.+44     	; 0x15c2 <vfprintf+0x33e>
    1596:	21 ff       	sbrs	r18, 1
    1598:	03 c0       	rjmp	.+6      	; 0x15a0 <vfprintf+0x31c>
    159a:	88 e5       	ldi	r24, 0x58	; 88
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	02 c0       	rjmp	.+4      	; 0x15a4 <vfprintf+0x320>
    15a0:	88 e7       	ldi	r24, 0x78	; 120
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	b7 01       	movw	r22, r14
    15a6:	0c c0       	rjmp	.+24     	; 0x15c0 <vfprintf+0x33c>
    15a8:	82 2f       	mov	r24, r18
    15aa:	86 78       	andi	r24, 0x86	; 134
    15ac:	51 f0       	breq	.+20     	; 0x15c2 <vfprintf+0x33e>
    15ae:	21 fd       	sbrc	r18, 1
    15b0:	02 c0       	rjmp	.+4      	; 0x15b6 <vfprintf+0x332>
    15b2:	80 e2       	ldi	r24, 0x20	; 32
    15b4:	01 c0       	rjmp	.+2      	; 0x15b8 <vfprintf+0x334>
    15b6:	8b e2       	ldi	r24, 0x2B	; 43
    15b8:	27 fd       	sbrc	r18, 7
    15ba:	8d e2       	ldi	r24, 0x2D	; 45
    15bc:	b7 01       	movw	r22, r14
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	fd dd       	rcall	.-1030   	; 0x11bc <fputc>
    15c2:	a5 14       	cp	r10, r5
    15c4:	30 f4       	brcc	.+12     	; 0x15d2 <vfprintf+0x34e>
    15c6:	b7 01       	movw	r22, r14
    15c8:	80 e3       	ldi	r24, 0x30	; 48
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	f7 dd       	rcall	.-1042   	; 0x11bc <fputc>
    15ce:	5a 94       	dec	r5
    15d0:	f8 cf       	rjmp	.-16     	; 0x15c2 <vfprintf+0x33e>
    15d2:	aa 94       	dec	r10
    15d4:	f4 01       	movw	r30, r8
    15d6:	ea 0d       	add	r30, r10
    15d8:	f1 1d       	adc	r31, r1
    15da:	80 81       	ld	r24, Z
    15dc:	b7 01       	movw	r22, r14
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	ed dd       	rcall	.-1062   	; 0x11bc <fputc>
    15e2:	a1 10       	cpse	r10, r1
    15e4:	f6 cf       	rjmp	.-20     	; 0x15d2 <vfprintf+0x34e>
    15e6:	33 20       	and	r3, r3
    15e8:	09 f4       	brne	.+2      	; 0x15ec <vfprintf+0x368>
    15ea:	5d ce       	rjmp	.-838    	; 0x12a6 <vfprintf+0x22>
    15ec:	b7 01       	movw	r22, r14
    15ee:	80 e2       	ldi	r24, 0x20	; 32
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	e4 dd       	rcall	.-1080   	; 0x11bc <fputc>
    15f4:	3a 94       	dec	r3
    15f6:	f7 cf       	rjmp	.-18     	; 0x15e6 <vfprintf+0x362>
    15f8:	f7 01       	movw	r30, r14
    15fa:	86 81       	ldd	r24, Z+6	; 0x06
    15fc:	97 81       	ldd	r25, Z+7	; 0x07
    15fe:	02 c0       	rjmp	.+4      	; 0x1604 <vfprintf+0x380>
    1600:	8f ef       	ldi	r24, 0xFF	; 255
    1602:	9f ef       	ldi	r25, 0xFF	; 255
    1604:	2c 96       	adiw	r28, 0x0c	; 12
    1606:	e2 e1       	ldi	r30, 0x12	; 18
    1608:	90 c0       	rjmp	.+288    	; 0x172a <__epilogue_restores__>

0000160a <strnlen_P>:
    160a:	fc 01       	movw	r30, r24
    160c:	05 90       	lpm	r0, Z+
    160e:	61 50       	subi	r22, 0x01	; 1
    1610:	70 40       	sbci	r23, 0x00	; 0
    1612:	01 10       	cpse	r0, r1
    1614:	d8 f7       	brcc	.-10     	; 0x160c <strnlen_P+0x2>
    1616:	80 95       	com	r24
    1618:	90 95       	com	r25
    161a:	8e 0f       	add	r24, r30
    161c:	9f 1f       	adc	r25, r31
    161e:	08 95       	ret

00001620 <strnlen>:
    1620:	fc 01       	movw	r30, r24
    1622:	61 50       	subi	r22, 0x01	; 1
    1624:	70 40       	sbci	r23, 0x00	; 0
    1626:	01 90       	ld	r0, Z+
    1628:	01 10       	cpse	r0, r1
    162a:	d8 f7       	brcc	.-10     	; 0x1622 <strnlen+0x2>
    162c:	80 95       	com	r24
    162e:	90 95       	com	r25
    1630:	8e 0f       	add	r24, r30
    1632:	9f 1f       	adc	r25, r31
    1634:	08 95       	ret

00001636 <__ultoa_invert>:
    1636:	fa 01       	movw	r30, r20
    1638:	aa 27       	eor	r26, r26
    163a:	28 30       	cpi	r18, 0x08	; 8
    163c:	51 f1       	breq	.+84     	; 0x1692 <__ultoa_invert+0x5c>
    163e:	20 31       	cpi	r18, 0x10	; 16
    1640:	81 f1       	breq	.+96     	; 0x16a2 <__ultoa_invert+0x6c>
    1642:	e8 94       	clt
    1644:	6f 93       	push	r22
    1646:	6e 7f       	andi	r22, 0xFE	; 254
    1648:	6e 5f       	subi	r22, 0xFE	; 254
    164a:	7f 4f       	sbci	r23, 0xFF	; 255
    164c:	8f 4f       	sbci	r24, 0xFF	; 255
    164e:	9f 4f       	sbci	r25, 0xFF	; 255
    1650:	af 4f       	sbci	r26, 0xFF	; 255
    1652:	b1 e0       	ldi	r27, 0x01	; 1
    1654:	3e d0       	rcall	.+124    	; 0x16d2 <__ultoa_invert+0x9c>
    1656:	b4 e0       	ldi	r27, 0x04	; 4
    1658:	3c d0       	rcall	.+120    	; 0x16d2 <__ultoa_invert+0x9c>
    165a:	67 0f       	add	r22, r23
    165c:	78 1f       	adc	r23, r24
    165e:	89 1f       	adc	r24, r25
    1660:	9a 1f       	adc	r25, r26
    1662:	a1 1d       	adc	r26, r1
    1664:	68 0f       	add	r22, r24
    1666:	79 1f       	adc	r23, r25
    1668:	8a 1f       	adc	r24, r26
    166a:	91 1d       	adc	r25, r1
    166c:	a1 1d       	adc	r26, r1
    166e:	6a 0f       	add	r22, r26
    1670:	71 1d       	adc	r23, r1
    1672:	81 1d       	adc	r24, r1
    1674:	91 1d       	adc	r25, r1
    1676:	a1 1d       	adc	r26, r1
    1678:	20 d0       	rcall	.+64     	; 0x16ba <__ultoa_invert+0x84>
    167a:	09 f4       	brne	.+2      	; 0x167e <__ultoa_invert+0x48>
    167c:	68 94       	set
    167e:	3f 91       	pop	r19
    1680:	2a e0       	ldi	r18, 0x0A	; 10
    1682:	26 9f       	mul	r18, r22
    1684:	11 24       	eor	r1, r1
    1686:	30 19       	sub	r19, r0
    1688:	30 5d       	subi	r19, 0xD0	; 208
    168a:	31 93       	st	Z+, r19
    168c:	de f6       	brtc	.-74     	; 0x1644 <__ultoa_invert+0xe>
    168e:	cf 01       	movw	r24, r30
    1690:	08 95       	ret
    1692:	46 2f       	mov	r20, r22
    1694:	47 70       	andi	r20, 0x07	; 7
    1696:	40 5d       	subi	r20, 0xD0	; 208
    1698:	41 93       	st	Z+, r20
    169a:	b3 e0       	ldi	r27, 0x03	; 3
    169c:	0f d0       	rcall	.+30     	; 0x16bc <__ultoa_invert+0x86>
    169e:	c9 f7       	brne	.-14     	; 0x1692 <__ultoa_invert+0x5c>
    16a0:	f6 cf       	rjmp	.-20     	; 0x168e <__ultoa_invert+0x58>
    16a2:	46 2f       	mov	r20, r22
    16a4:	4f 70       	andi	r20, 0x0F	; 15
    16a6:	40 5d       	subi	r20, 0xD0	; 208
    16a8:	4a 33       	cpi	r20, 0x3A	; 58
    16aa:	18 f0       	brcs	.+6      	; 0x16b2 <__ultoa_invert+0x7c>
    16ac:	49 5d       	subi	r20, 0xD9	; 217
    16ae:	31 fd       	sbrc	r19, 1
    16b0:	40 52       	subi	r20, 0x20	; 32
    16b2:	41 93       	st	Z+, r20
    16b4:	02 d0       	rcall	.+4      	; 0x16ba <__ultoa_invert+0x84>
    16b6:	a9 f7       	brne	.-22     	; 0x16a2 <__ultoa_invert+0x6c>
    16b8:	ea cf       	rjmp	.-44     	; 0x168e <__ultoa_invert+0x58>
    16ba:	b4 e0       	ldi	r27, 0x04	; 4
    16bc:	a6 95       	lsr	r26
    16be:	97 95       	ror	r25
    16c0:	87 95       	ror	r24
    16c2:	77 95       	ror	r23
    16c4:	67 95       	ror	r22
    16c6:	ba 95       	dec	r27
    16c8:	c9 f7       	brne	.-14     	; 0x16bc <__ultoa_invert+0x86>
    16ca:	00 97       	sbiw	r24, 0x00	; 0
    16cc:	61 05       	cpc	r22, r1
    16ce:	71 05       	cpc	r23, r1
    16d0:	08 95       	ret
    16d2:	9b 01       	movw	r18, r22
    16d4:	ac 01       	movw	r20, r24
    16d6:	0a 2e       	mov	r0, r26
    16d8:	06 94       	lsr	r0
    16da:	57 95       	ror	r21
    16dc:	47 95       	ror	r20
    16de:	37 95       	ror	r19
    16e0:	27 95       	ror	r18
    16e2:	ba 95       	dec	r27
    16e4:	c9 f7       	brne	.-14     	; 0x16d8 <__ultoa_invert+0xa2>
    16e6:	62 0f       	add	r22, r18
    16e8:	73 1f       	adc	r23, r19
    16ea:	84 1f       	adc	r24, r20
    16ec:	95 1f       	adc	r25, r21
    16ee:	a0 1d       	adc	r26, r0
    16f0:	08 95       	ret

000016f2 <__prologue_saves__>:
    16f2:	2f 92       	push	r2
    16f4:	3f 92       	push	r3
    16f6:	4f 92       	push	r4
    16f8:	5f 92       	push	r5
    16fa:	6f 92       	push	r6
    16fc:	7f 92       	push	r7
    16fe:	8f 92       	push	r8
    1700:	9f 92       	push	r9
    1702:	af 92       	push	r10
    1704:	bf 92       	push	r11
    1706:	cf 92       	push	r12
    1708:	df 92       	push	r13
    170a:	ef 92       	push	r14
    170c:	ff 92       	push	r15
    170e:	0f 93       	push	r16
    1710:	1f 93       	push	r17
    1712:	cf 93       	push	r28
    1714:	df 93       	push	r29
    1716:	cd b7       	in	r28, 0x3d	; 61
    1718:	de b7       	in	r29, 0x3e	; 62
    171a:	ca 1b       	sub	r28, r26
    171c:	db 0b       	sbc	r29, r27
    171e:	0f b6       	in	r0, 0x3f	; 63
    1720:	f8 94       	cli
    1722:	de bf       	out	0x3e, r29	; 62
    1724:	0f be       	out	0x3f, r0	; 63
    1726:	cd bf       	out	0x3d, r28	; 61
    1728:	09 94       	ijmp

0000172a <__epilogue_restores__>:
    172a:	2a 88       	ldd	r2, Y+18	; 0x12
    172c:	39 88       	ldd	r3, Y+17	; 0x11
    172e:	48 88       	ldd	r4, Y+16	; 0x10
    1730:	5f 84       	ldd	r5, Y+15	; 0x0f
    1732:	6e 84       	ldd	r6, Y+14	; 0x0e
    1734:	7d 84       	ldd	r7, Y+13	; 0x0d
    1736:	8c 84       	ldd	r8, Y+12	; 0x0c
    1738:	9b 84       	ldd	r9, Y+11	; 0x0b
    173a:	aa 84       	ldd	r10, Y+10	; 0x0a
    173c:	b9 84       	ldd	r11, Y+9	; 0x09
    173e:	c8 84       	ldd	r12, Y+8	; 0x08
    1740:	df 80       	ldd	r13, Y+7	; 0x07
    1742:	ee 80       	ldd	r14, Y+6	; 0x06
    1744:	fd 80       	ldd	r15, Y+5	; 0x05
    1746:	0c 81       	ldd	r16, Y+4	; 0x04
    1748:	1b 81       	ldd	r17, Y+3	; 0x03
    174a:	aa 81       	ldd	r26, Y+2	; 0x02
    174c:	b9 81       	ldd	r27, Y+1	; 0x01
    174e:	ce 0f       	add	r28, r30
    1750:	d1 1d       	adc	r29, r1
    1752:	0f b6       	in	r0, 0x3f	; 63
    1754:	f8 94       	cli
    1756:	de bf       	out	0x3e, r29	; 62
    1758:	0f be       	out	0x3f, r0	; 63
    175a:	cd bf       	out	0x3d, r28	; 61
    175c:	ed 01       	movw	r28, r26
    175e:	08 95       	ret

00001760 <_exit>:
    1760:	f8 94       	cli

00001762 <__stop_program>:
    1762:	ff cf       	rjmp	.-2      	; 0x1762 <__stop_program>
