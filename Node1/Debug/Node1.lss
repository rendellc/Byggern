
Node1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ec  00800100  0000169e  00001732  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000169e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000013a  008001ec  008001ec  0000181e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000181e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002f8  00000000  00000000  0000187a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000035e3  00000000  00000000  00001b72  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001233  00000000  00000000  00005155  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000195c  00000000  00000000  00006388  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000007dc  00000000  00000000  00007ce4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000085b  00000000  00000000  000084c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000015c4  00000000  00000000  00008d1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002a0  00000000  00000000  0000a2df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	f5 c0       	rjmp	.+490    	; 0x1ec <__ctors_end>
       2:	00 00       	nop
       4:	0f c1       	rjmp	.+542    	; 0x224 <__bad_interrupt>
       6:	00 00       	nop
       8:	19 c1       	rjmp	.+562    	; 0x23c <__vector_2>
       a:	00 00       	nop
       c:	0b c1       	rjmp	.+534    	; 0x224 <__bad_interrupt>
       e:	00 00       	nop
      10:	09 c1       	rjmp	.+530    	; 0x224 <__bad_interrupt>
      12:	00 00       	nop
      14:	07 c1       	rjmp	.+526    	; 0x224 <__bad_interrupt>
      16:	00 00       	nop
      18:	05 c1       	rjmp	.+522    	; 0x224 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	03 c1       	rjmp	.+518    	; 0x224 <__bad_interrupt>
      1e:	00 00       	nop
      20:	01 c1       	rjmp	.+514    	; 0x224 <__bad_interrupt>
      22:	00 00       	nop
      24:	ff c0       	rjmp	.+510    	; 0x224 <__bad_interrupt>
      26:	00 00       	nop
      28:	fd c0       	rjmp	.+506    	; 0x224 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	fb c0       	rjmp	.+502    	; 0x224 <__bad_interrupt>
      2e:	00 00       	nop
      30:	f9 c0       	rjmp	.+498    	; 0x224 <__bad_interrupt>
      32:	00 00       	nop
      34:	f7 c0       	rjmp	.+494    	; 0x224 <__bad_interrupt>
      36:	00 00       	nop
      38:	f5 c0       	rjmp	.+490    	; 0x224 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	f3 c0       	rjmp	.+486    	; 0x224 <__bad_interrupt>
      3e:	00 00       	nop
      40:	f1 c0       	rjmp	.+482    	; 0x224 <__bad_interrupt>
      42:	00 00       	nop
      44:	23 c6       	rjmp	.+3142   	; 0xc8c <__vector_17>
      46:	00 00       	nop
      48:	ed c0       	rjmp	.+474    	; 0x224 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	87 c6       	rjmp	.+3342   	; 0xd5c <__vector_19>
      4e:	00 00       	nop
      50:	e9 c0       	rjmp	.+466    	; 0x224 <__bad_interrupt>
      52:	00 00       	nop
      54:	e7 c0       	rjmp	.+462    	; 0x224 <__bad_interrupt>
      56:	00 00       	nop
      58:	e5 c0       	rjmp	.+458    	; 0x224 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	c6 c6       	rjmp	.+3468   	; 0xdea <__vector_23>
      5e:	00 00       	nop
      60:	e1 c0       	rjmp	.+450    	; 0x224 <__bad_interrupt>
      62:	00 00       	nop
      64:	df c0       	rjmp	.+446    	; 0x224 <__bad_interrupt>
      66:	00 00       	nop
      68:	dd c0       	rjmp	.+442    	; 0x224 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	db c0       	rjmp	.+438    	; 0x224 <__bad_interrupt>
	...

00000070 <__trampolines_end>:
      70:	00 00       	nop
      72:	00 00       	nop
      74:	00 5c       	subi	r16, 0xC0	; 192
      76:	00 00       	nop
      78:	0c 00       	.word	0x000c	; ????
      7a:	0c 00       	.word	0x000c	; ????
      7c:	7c 28       	or	r7, r12
      7e:	7c 28       	or	r7, r12
      80:	58 dc       	rcall	.-1872   	; 0xfffff932 <__eeprom_end+0xff7ef932>
      82:	68 00       	.word	0x0068	; ????
      84:	24 10       	cpse	r2, r4
      86:	48 00       	.word	0x0048	; ????
      88:	28 54       	subi	r18, 0x48	; 72
      8a:	28 40       	sbci	r18, 0x08	; 8
      8c:	00 0c       	add	r0, r0
      8e:	00 00       	nop
      90:	00 78       	andi	r16, 0x80	; 128
      92:	84 00       	.word	0x0084	; ????
      94:	84 78       	andi	r24, 0x84	; 132
      96:	00 00       	nop
      98:	54 38       	cpi	r21, 0x84	; 132
      9a:	54 00       	.word	0x0054	; ????
      9c:	10 7c       	andi	r17, 0xC0	; 192
      9e:	10 00       	.word	0x0010	; ????
      a0:	80 40       	sbci	r24, 0x00	; 0
      a2:	00 00       	nop
      a4:	10 10       	cpse	r1, r0
      a6:	10 00       	.word	0x0010	; ????
      a8:	00 40       	sbci	r16, 0x00	; 0
      aa:	00 00       	nop
      ac:	60 10       	cpse	r6, r0
      ae:	0c 00       	.word	0x000c	; ????
      b0:	38 54       	subi	r19, 0x48	; 72
      b2:	38 00       	.word	0x0038	; ????
      b4:	48 7c       	andi	r20, 0xC8	; 200
      b6:	40 00       	.word	0x0040	; ????
      b8:	48 64       	ori	r20, 0x48	; 72
      ba:	58 00       	.word	0x0058	; ????
      bc:	44 54       	subi	r20, 0x44	; 68
      be:	2c 00       	.word	0x002c	; ????
      c0:	1c 10       	cpse	r1, r12
      c2:	7c 00       	.word	0x007c	; ????
      c4:	5c 54       	subi	r21, 0x4C	; 76
      c6:	24 00       	.word	0x0024	; ????
      c8:	38 54       	subi	r19, 0x48	; 72
      ca:	24 00       	.word	0x0024	; ????
      cc:	64 14       	cp	r6, r4
      ce:	0c 00       	.word	0x000c	; ????
      d0:	68 54       	subi	r22, 0x48	; 72
      d2:	2c 00       	.word	0x002c	; ????
      d4:	48 54       	subi	r20, 0x48	; 72
      d6:	38 00       	.word	0x0038	; ????
      d8:	00 48       	sbci	r16, 0x80	; 128
      da:	00 00       	nop
      dc:	80 48       	sbci	r24, 0x80	; 128
      de:	00 00       	nop
      e0:	10 28       	or	r1, r0
      e2:	44 00       	.word	0x0044	; ????
      e4:	28 28       	or	r2, r8
      e6:	28 00       	.word	0x0028	; ????
      e8:	44 28       	or	r4, r4
      ea:	10 00       	.word	0x0010	; ????
      ec:	04 54       	subi	r16, 0x44	; 68
      ee:	08 00       	.word	0x0008	; ????
      f0:	38 44       	sbci	r19, 0x48	; 72
      f2:	5c 00       	.word	0x005c	; ????
      f4:	78 14       	cp	r7, r8
      f6:	78 00       	.word	0x0078	; ????
      f8:	7c 54       	subi	r23, 0x4C	; 76
      fa:	28 00       	.word	0x0028	; ????
      fc:	38 44       	sbci	r19, 0x48	; 72
      fe:	28 00       	.word	0x0028	; ????
     100:	7c 44       	sbci	r23, 0x4C	; 76
     102:	38 00       	.word	0x0038	; ????
     104:	7c 54       	subi	r23, 0x4C	; 76
     106:	44 00       	.word	0x0044	; ????
     108:	7c 14       	cp	r7, r12
     10a:	04 00       	.word	0x0004	; ????
     10c:	38 44       	sbci	r19, 0x48	; 72
     10e:	74 00       	.word	0x0074	; ????
     110:	7c 10       	cpse	r7, r12
     112:	7c 00       	.word	0x007c	; ????
     114:	44 7c       	andi	r20, 0xC4	; 196
     116:	44 00       	.word	0x0044	; ????
     118:	20 40       	sbci	r18, 0x00	; 0
     11a:	3c 00       	.word	0x003c	; ????
     11c:	7c 10       	cpse	r7, r12
     11e:	6c 00       	.word	0x006c	; ????
     120:	7c 40       	sbci	r23, 0x0C	; 12
     122:	40 00       	.word	0x0040	; ????
     124:	7c 18       	sub	r7, r12
     126:	7c 00       	.word	0x007c	; ????
     128:	78 10       	cpse	r7, r8
     12a:	3c 00       	.word	0x003c	; ????
     12c:	38 44       	sbci	r19, 0x48	; 72
     12e:	38 00       	.word	0x0038	; ????
     130:	7c 14       	cp	r7, r12
     132:	08 00       	.word	0x0008	; ????
     134:	38 44       	sbci	r19, 0x48	; 72
     136:	b8 00       	.word	0x00b8	; ????
     138:	7c 14       	cp	r7, r12
     13a:	68 00       	.word	0x0068	; ????
     13c:	48 54       	subi	r20, 0x48	; 72
     13e:	24 00       	.word	0x0024	; ????
     140:	04 7c       	andi	r16, 0xC4	; 196
     142:	04 00       	.word	0x0004	; ????
     144:	7c 40       	sbci	r23, 0x0C	; 12
     146:	7c 00       	.word	0x007c	; ????
     148:	3c 60       	ori	r19, 0x0C	; 12
     14a:	3c 00       	.word	0x003c	; ????
     14c:	7c 30       	cpi	r23, 0x0C	; 12
     14e:	7c 00       	.word	0x007c	; ????
     150:	6c 10       	cpse	r6, r12
     152:	6c 00       	.word	0x006c	; ????
     154:	0c 70       	andi	r16, 0x0C	; 12
     156:	0c 00       	.word	0x000c	; ????
     158:	64 54       	subi	r22, 0x44	; 68
     15a:	4c 00       	.word	0x004c	; ????
     15c:	00 7c       	andi	r16, 0xC0	; 192
     15e:	44 00       	.word	0x0044	; ????
     160:	0c 10       	cpse	r0, r12
     162:	60 00       	.word	0x0060	; ????
     164:	44 7c       	andi	r20, 0xC4	; 196
     166:	00 00       	nop
     168:	08 04       	cpc	r0, r8
     16a:	08 00       	.word	0x0008	; ????
     16c:	80 80       	ld	r8, Z
     16e:	80 00       	.word	0x0080	; ????
     170:	00 04       	cpc	r0, r0
     172:	08 00       	.word	0x0008	; ????
     174:	30 48       	sbci	r19, 0x80	; 128
     176:	78 00       	.word	0x0078	; ????
     178:	7c 48       	sbci	r23, 0x8C	; 140
     17a:	30 00       	.word	0x0030	; ????
     17c:	30 48       	sbci	r19, 0x80	; 128
     17e:	48 00       	.word	0x0048	; ????
     180:	30 48       	sbci	r19, 0x80	; 128
     182:	7c 00       	.word	0x007c	; ????
     184:	30 68       	ori	r19, 0x80	; 128
     186:	50 00       	.word	0x0050	; ????
     188:	10 78       	andi	r17, 0x80	; 128
     18a:	14 00       	.word	0x0014	; ????
     18c:	90 a8       	ldd	r9, Z+48	; 0x30
     18e:	78 00       	.word	0x0078	; ????
     190:	7c 08       	sbc	r7, r12
     192:	70 00       	.word	0x0070	; ????
     194:	50 74       	andi	r21, 0x40	; 64
     196:	40 00       	.word	0x0040	; ????
     198:	80 80       	ld	r8, Z
     19a:	74 00       	.word	0x0074	; ????
     19c:	7c 10       	cpse	r7, r12
     19e:	68 00       	.word	0x0068	; ????
     1a0:	44 7c       	andi	r20, 0xC4	; 196
     1a2:	40 00       	.word	0x0040	; ????
     1a4:	78 10       	cpse	r7, r8
     1a6:	78 00       	.word	0x0078	; ????
     1a8:	78 08       	sbc	r7, r8
     1aa:	70 00       	.word	0x0070	; ????
     1ac:	30 48       	sbci	r19, 0x80	; 128
     1ae:	30 00       	.word	0x0030	; ????
     1b0:	f8 28       	or	r15, r8
     1b2:	10 00       	.word	0x0010	; ????
     1b4:	30 48       	sbci	r19, 0x80	; 128
     1b6:	f8 00       	.word	0x00f8	; ????
     1b8:	78 10       	cpse	r7, r8
     1ba:	08 00       	.word	0x0008	; ????
     1bc:	50 58       	subi	r21, 0x80	; 128
     1be:	28 00       	.word	0x0028	; ????
     1c0:	08 3c       	cpi	r16, 0xC8	; 200
     1c2:	48 00       	.word	0x0048	; ????
     1c4:	38 40       	sbci	r19, 0x08	; 8
     1c6:	78 00       	.word	0x0078	; ????
     1c8:	38 40       	sbci	r19, 0x08	; 8
     1ca:	38 00       	.word	0x0038	; ????
     1cc:	78 20       	and	r7, r8
     1ce:	78 00       	.word	0x0078	; ????
     1d0:	48 30       	cpi	r20, 0x08	; 8
     1d2:	48 00       	.word	0x0048	; ????
     1d4:	98 a0       	ldd	r9, Y+32	; 0x20
     1d6:	78 00       	.word	0x0078	; ????
     1d8:	48 68       	ori	r20, 0x88	; 136
     1da:	58 00       	.word	0x0058	; ????
     1dc:	10 78       	andi	r17, 0x80	; 128
     1de:	84 00       	.word	0x0084	; ????
     1e0:	00 7c       	andi	r16, 0xC0	; 192
     1e2:	00 00       	nop
     1e4:	84 78       	andi	r24, 0x84	; 132
     1e6:	10 00       	.word	0x0010	; ????
     1e8:	08 04       	cpc	r0, r8
     1ea:	08 04       	cpc	r0, r8

000001ec <__ctors_end>:
     1ec:	11 24       	eor	r1, r1
     1ee:	1f be       	out	0x3f, r1	; 63
     1f0:	cf ef       	ldi	r28, 0xFF	; 255
     1f2:	d4 e0       	ldi	r29, 0x04	; 4
     1f4:	de bf       	out	0x3e, r29	; 62
     1f6:	cd bf       	out	0x3d, r28	; 61

000001f8 <__do_copy_data>:
     1f8:	11 e0       	ldi	r17, 0x01	; 1
     1fa:	a0 e0       	ldi	r26, 0x00	; 0
     1fc:	b1 e0       	ldi	r27, 0x01	; 1
     1fe:	ee e9       	ldi	r30, 0x9E	; 158
     200:	f6 e1       	ldi	r31, 0x16	; 22
     202:	02 c0       	rjmp	.+4      	; 0x208 <__do_copy_data+0x10>
     204:	05 90       	lpm	r0, Z+
     206:	0d 92       	st	X+, r0
     208:	ac 3e       	cpi	r26, 0xEC	; 236
     20a:	b1 07       	cpc	r27, r17
     20c:	d9 f7       	brne	.-10     	; 0x204 <__do_copy_data+0xc>

0000020e <__do_clear_bss>:
     20e:	23 e0       	ldi	r18, 0x03	; 3
     210:	ac ee       	ldi	r26, 0xEC	; 236
     212:	b1 e0       	ldi	r27, 0x01	; 1
     214:	01 c0       	rjmp	.+2      	; 0x218 <.do_clear_bss_start>

00000216 <.do_clear_bss_loop>:
     216:	1d 92       	st	X+, r1

00000218 <.do_clear_bss_start>:
     218:	a6 32       	cpi	r26, 0x26	; 38
     21a:	b2 07       	cpc	r27, r18
     21c:	e1 f7       	brne	.-8      	; 0x216 <.do_clear_bss_loop>
     21e:	2b d1       	rcall	.+598    	; 0x476 <main>
     220:	0c 94 4d 0b 	jmp	0x169a	; 0x169a <_exit>

00000224 <__bad_interrupt>:
     224:	ed ce       	rjmp	.-550    	; 0x0 <__vectors>

00000226 <adc_init>:
/*!
 * Initialize atmega162 to interface with the interrupt signal
 * of the ADC through Port D pin 2
 */
void adc_init(void){
	DDRD  &= ~(1 << DDD2);
     226:	8a 98       	cbi	0x11, 2	; 17
	PORTD |= (1 << PD2);
     228:	92 9a       	sbi	0x12, 2	; 18
     22a:	08 95       	ret

0000022c <adc_read_channel>:
 * @param[in] ch analog channel to perform conversion on
 * @return digital read of analog signal
 */
uint8_t adc_read_channel(uint8_t ch)
{	
	*adc_adr = (ch | 0b0100);
     22c:	84 60       	ori	r24, 0x04	; 4
     22e:	80 93 00 11 	sts	0x1100, r24
	
	while ((PIND & (1<<PIND2))); // wait until pin is high, adc read complete when pin is high
     232:	82 99       	sbic	0x10, 2	; 16
     234:	fe cf       	rjmp	.-4      	; 0x232 <adc_read_channel+0x6>
	
	return *adc_adr;
     236:	80 91 00 11 	lds	r24, 0x1100
}
     23a:	08 95       	ret

0000023c <__vector_2>:
 * the interrupt. \n
 * If there is no room in the buffer, then the interrupt is cleared and message
 * is ignored. 
   \todo Implement better overflow handling? Maybe oldest values should be discardeded. Can be as easy as doing head++, tail++
 */
ISR(INT1_vect){
     23c:	1f 92       	push	r1
     23e:	0f 92       	push	r0
     240:	0f b6       	in	r0, 0x3f	; 63
     242:	0f 92       	push	r0
     244:	11 24       	eor	r1, r1
     246:	ff 92       	push	r15
     248:	0f 93       	push	r16
     24a:	1f 93       	push	r17
     24c:	2f 93       	push	r18
     24e:	3f 93       	push	r19
     250:	4f 93       	push	r20
     252:	5f 93       	push	r21
     254:	6f 93       	push	r22
     256:	7f 93       	push	r23
     258:	8f 93       	push	r24
     25a:	9f 93       	push	r25
     25c:	af 93       	push	r26
     25e:	bf 93       	push	r27
     260:	ef 93       	push	r30
     262:	ff 93       	push	r31
     264:	cf 93       	push	r28
     266:	df 93       	push	r29
     268:	cd b7       	in	r28, 0x3d	; 61
     26a:	de b7       	in	r29, 0x3e	; 62
     26c:	2e 97       	sbiw	r28, 0x0e	; 14
     26e:	de bf       	out	0x3e, r29	; 62
     270:	cd bf       	out	0x3d, r28	; 61
	cli();	
     272:	f8 94       	cli
	///\todo implement overflow such that new data replaces old?
	// pick correct buffer, RXB1 has highest priority now
	volatile uint8_t n			  = 0;
     274:	19 82       	std	Y+1, r1	; 0x01
	volatile uint8_t MCP_RXBn	  = MCP_RXB0;
     276:	80 e6       	ldi	r24, 0x60	; 96
     278:	8a 83       	std	Y+2, r24	; 0x02
	volatile uint8_t MCP_READ_RXn = MCP_READ_RX0;
     27a:	80 e9       	ldi	r24, 0x90	; 144
     27c:	8b 83       	std	Y+3, r24	; 0x03
	volatile uint8_t MCP_RXnIF    = MCP_RX0IF;
     27e:	81 e0       	ldi	r24, 0x01	; 1
     280:	8c 83       	std	Y+4, r24	; 0x04
	if (mcp_readstatus() & 0x02)
     282:	5b d1       	rcall	.+694    	; 0x53a <mcp_readstatus>
     284:	81 ff       	sbrs	r24, 1
     286:	08 c0       	rjmp	.+16     	; 0x298 <__vector_2+0x5c>
	{	
		n = 1;
     288:	81 e0       	ldi	r24, 0x01	; 1
     28a:	89 83       	std	Y+1, r24	; 0x01
		MCP_RXBn	 = MCP_RXB1;
     28c:	80 e7       	ldi	r24, 0x70	; 112
     28e:	8a 83       	std	Y+2, r24	; 0x02
		MCP_READ_RXn = MCP_READ_RX1;
     290:	84 e9       	ldi	r24, 0x94	; 148
     292:	8b 83       	std	Y+3, r24	; 0x03
		MCP_RXnIF     = MCP_RX1IF;
     294:	82 e0       	ldi	r24, 0x02	; 2
     296:	8c 83       	std	Y+4, r24	; 0x04
			
	}
	
	// if there is room in buffer first
	if ((rx_head[n]+1)%RX_BUFFER_MAX != rx_tail[n]){
     298:	e9 81       	ldd	r30, Y+1	; 0x01
     29a:	f0 e0       	ldi	r31, 0x00	; 0
     29c:	e2 51       	subi	r30, 0x12	; 18
     29e:	fe 4f       	sbci	r31, 0xFE	; 254
     2a0:	20 81       	ld	r18, Z
     2a2:	e9 81       	ldd	r30, Y+1	; 0x01
     2a4:	f0 e0       	ldi	r31, 0x00	; 0
     2a6:	e4 51       	subi	r30, 0x14	; 20
     2a8:	fe 4f       	sbci	r31, 0xFE	; 254
     2aa:	80 81       	ld	r24, Z
     2ac:	30 e0       	ldi	r19, 0x00	; 0
     2ae:	2f 5f       	subi	r18, 0xFF	; 255
     2b0:	3f 4f       	sbci	r19, 0xFF	; 255
     2b2:	27 70       	andi	r18, 0x07	; 7
     2b4:	30 78       	andi	r19, 0x80	; 128
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	28 17       	cp	r18, r24
     2ba:	39 07       	cpc	r19, r25
     2bc:	09 f4       	brne	.+2      	; 0x2c0 <__vector_2+0x84>
     2be:	59 c0       	rjmp	.+178    	; 0x372 <__vector_2+0x136>
    	volatile can_msg_t msg = {};
     2c0:	fe 01       	movw	r30, r28
     2c2:	35 96       	adiw	r30, 0x05	; 5
     2c4:	8a e0       	ldi	r24, 0x0A	; 10
     2c6:	df 01       	movw	r26, r30
     2c8:	1d 92       	st	X+, r1
     2ca:	8a 95       	dec	r24
     2cc:	e9 f7       	brne	.-6      	; 0x2c8 <__vector_2+0x8c>
    	
    	msg.length = mcp_read(MCP_RXBn | MCP_RXBnDLC) & MCP_DLC_MASK;
     2ce:	8a 81       	ldd	r24, Y+2	; 0x02
     2d0:	85 66       	ori	r24, 0x65	; 101
     2d2:	16 d1       	rcall	.+556    	; 0x500 <mcp_read>
     2d4:	8f 70       	andi	r24, 0x0F	; 15
     2d6:	8e 83       	std	Y+6, r24	; 0x06
    	
    	spi_ss_low();
     2d8:	fc d4       	rcall	.+2552   	; 0xcd2 <spi_ss_low>
    	spi_transmit(MCP_READ_RXn | 0x00); // sid
     2da:	8b 81       	ldd	r24, Y+3	; 0x03
     2dc:	05 d5       	rcall	.+2570   	; 0xce8 <spi_transmit>
    	msg.sid = spi_transmit(0);
     2de:	80 e0       	ldi	r24, 0x00	; 0
     2e0:	03 d5       	rcall	.+2566   	; 0xce8 <spi_transmit>
     2e2:	8d 83       	std	Y+5, r24	; 0x05
    	spi_ss_high();
     2e4:	f8 d4       	rcall	.+2544   	; 0xcd6 <spi_ss_high>
    	
    	spi_ss_low();
     2e6:	f5 d4       	rcall	.+2538   	; 0xcd2 <spi_ss_low>
    	spi_transmit(MCP_READ_RXn | 0x02);
     2e8:	8b 81       	ldd	r24, Y+3	; 0x03
     2ea:	82 60       	ori	r24, 0x02	; 2
     2ec:	fd d4       	rcall	.+2554   	; 0xce8 <spi_transmit>
    	
    	for (uint8_t i = 0; i < msg.length; ++i)
     2ee:	8e 81       	ldd	r24, Y+6	; 0x06
     2f0:	88 23       	and	r24, r24
     2f2:	81 f0       	breq	.+32     	; 0x314 <__vector_2+0xd8>
     2f4:	f1 2c       	mov	r15, r1
    	{
    		msg.data[i] = spi_transmit(0);
     2f6:	0f 2d       	mov	r16, r15
     2f8:	10 e0       	ldi	r17, 0x00	; 0
     2fa:	80 e0       	ldi	r24, 0x00	; 0
     2fc:	f5 d4       	rcall	.+2538   	; 0xce8 <spi_transmit>
     2fe:	e7 e0       	ldi	r30, 0x07	; 7
     300:	f0 e0       	ldi	r31, 0x00	; 0
     302:	ec 0f       	add	r30, r28
     304:	fd 1f       	adc	r31, r29
     306:	e0 0f       	add	r30, r16
     308:	f1 1f       	adc	r31, r17
     30a:	80 83       	st	Z, r24
    	spi_ss_high();
    	
    	spi_ss_low();
    	spi_transmit(MCP_READ_RXn | 0x02);
    	
    	for (uint8_t i = 0; i < msg.length; ++i)
     30c:	f3 94       	inc	r15
     30e:	8e 81       	ldd	r24, Y+6	; 0x06
     310:	f8 16       	cp	r15, r24
     312:	88 f3       	brcs	.-30     	; 0x2f6 <__vector_2+0xba>
    	{
    		msg.data[i] = spi_transmit(0);
    	}
    	spi_ss_high();
     314:	e0 d4       	rcall	.+2496   	; 0xcd6 <spi_ss_high>
        
    	rx_buffer[n][rx_head[n]] = msg;
     316:	29 81       	ldd	r18, Y+1	; 0x01
     318:	e9 81       	ldd	r30, Y+1	; 0x01
     31a:	f0 e0       	ldi	r31, 0x00	; 0
     31c:	e2 51       	subi	r30, 0x12	; 18
     31e:	fe 4f       	sbci	r31, 0xFE	; 254
     320:	80 81       	ld	r24, Z
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	dc 01       	movw	r26, r24
     326:	aa 0f       	add	r26, r26
     328:	bb 1f       	adc	r27, r27
     32a:	88 0f       	add	r24, r24
     32c:	99 1f       	adc	r25, r25
     32e:	88 0f       	add	r24, r24
     330:	99 1f       	adc	r25, r25
     332:	88 0f       	add	r24, r24
     334:	99 1f       	adc	r25, r25
     336:	a8 0f       	add	r26, r24
     338:	b9 1f       	adc	r27, r25
     33a:	80 e5       	ldi	r24, 0x50	; 80
     33c:	28 9f       	mul	r18, r24
     33e:	a0 0d       	add	r26, r0
     340:	b1 1d       	adc	r27, r1
     342:	11 24       	eor	r1, r1
     344:	a0 51       	subi	r26, 0x10	; 16
     346:	be 4f       	sbci	r27, 0xFE	; 254
     348:	8a e0       	ldi	r24, 0x0A	; 10
     34a:	fe 01       	movw	r30, r28
     34c:	35 96       	adiw	r30, 0x05	; 5
     34e:	01 90       	ld	r0, Z+
     350:	0d 92       	st	X+, r0
     352:	8a 95       	dec	r24
     354:	e1 f7       	brne	.-8      	; 0x34e <__vector_2+0x112>
    	rx_head[n] = (rx_head[n]+1) % RX_BUFFER_MAX;
     356:	e9 81       	ldd	r30, Y+1	; 0x01
     358:	f0 e0       	ldi	r31, 0x00	; 0
     35a:	a9 81       	ldd	r26, Y+1	; 0x01
     35c:	b0 e0       	ldi	r27, 0x00	; 0
     35e:	a2 51       	subi	r26, 0x12	; 18
     360:	be 4f       	sbci	r27, 0xFE	; 254
     362:	8c 91       	ld	r24, X
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	01 96       	adiw	r24, 0x01	; 1
     368:	87 70       	andi	r24, 0x07	; 7
     36a:	90 78       	andi	r25, 0x80	; 128
     36c:	e2 51       	subi	r30, 0x12	; 18
     36e:	fe 4f       	sbci	r31, 0xFE	; 254
     370:	80 83       	st	Z, r24
	}

    mcp_bitmodify(MCP_CANINTF, MCP_RXnIF, 0);
     372:	6c 81       	ldd	r22, Y+4	; 0x04
     374:	40 e0       	ldi	r20, 0x00	; 0
     376:	8c e2       	ldi	r24, 0x2C	; 44
     378:	eb d0       	rcall	.+470    	; 0x550 <mcp_bitmodify>
	sei();
     37a:	78 94       	sei
}
     37c:	2e 96       	adiw	r28, 0x0e	; 14
     37e:	0f b6       	in	r0, 0x3f	; 63
     380:	f8 94       	cli
     382:	de bf       	out	0x3e, r29	; 62
     384:	0f be       	out	0x3f, r0	; 63
     386:	cd bf       	out	0x3d, r28	; 61
     388:	df 91       	pop	r29
     38a:	cf 91       	pop	r28
     38c:	ff 91       	pop	r31
     38e:	ef 91       	pop	r30
     390:	bf 91       	pop	r27
     392:	af 91       	pop	r26
     394:	9f 91       	pop	r25
     396:	8f 91       	pop	r24
     398:	7f 91       	pop	r23
     39a:	6f 91       	pop	r22
     39c:	5f 91       	pop	r21
     39e:	4f 91       	pop	r20
     3a0:	3f 91       	pop	r19
     3a2:	2f 91       	pop	r18
     3a4:	1f 91       	pop	r17
     3a6:	0f 91       	pop	r16
     3a8:	ff 90       	pop	r15
     3aa:	0f 90       	pop	r0
     3ac:	0f be       	out	0x3f, r0	; 63
     3ae:	0f 90       	pop	r0
     3b0:	1f 90       	pop	r1
     3b2:	18 95       	reti

000003b4 <can_init>:
/*!
 * Initialize can controller and mcp. 
 */
void can_init()
{
	mcp_init();
     3b4:	e1 d0       	rcall	.+450    	; 0x578 <mcp_init>
	
	// enable interupt
	mcp_bitmodify(MCP_CANINTE, MCP_RX_INT, MCP_RX_INT);
     3b6:	43 e0       	ldi	r20, 0x03	; 3
     3b8:	63 e0       	ldi	r22, 0x03	; 3
     3ba:	8b e2       	ldi	r24, 0x2B	; 43
     3bc:	c9 d0       	rcall	.+402    	; 0x550 <mcp_bitmodify>
	GICR |= (1 << INT1); 
     3be:	8b b7       	in	r24, 0x3b	; 59
     3c0:	80 68       	ori	r24, 0x80	; 128
     3c2:	8b bf       	out	0x3b, r24	; 59
     3c4:	08 95       	ret

000003c6 <game_init_menu>:
	game_state = IN_MENU;
}

void game_init_menu(){
	
	menu_move_cursor(0);
     3c6:	80 e0       	ldi	r24, 0x00	; 0
     3c8:	2f c2       	rjmp	.+1118   	; 0x828 <menu_move_cursor>
     3ca:	08 95       	ret

000003cc <game_init>:

static game_state_t game_state = INVALID;


void game_init(){
	game_init_menu();
     3cc:	fc df       	rcall	.-8      	; 0x3c6 <game_init_menu>
	
	game_state = IN_MENU;
     3ce:	81 e0       	ldi	r24, 0x01	; 1
     3d0:	80 93 90 02 	sts	0x0290, r24
     3d4:	08 95       	ret

000003d6 <game_start>:
	menu_move_cursor(0);
	
}

void game_start(){
	fprintf(&uart_out, "game starting!");
     3d6:	28 e2       	ldi	r18, 0x28	; 40
     3d8:	31 e0       	ldi	r19, 0x01	; 1
     3da:	4e e0       	ldi	r20, 0x0E	; 14
     3dc:	50 e0       	ldi	r21, 0x00	; 0
     3de:	61 e0       	ldi	r22, 0x01	; 1
     3e0:	70 e0       	ldi	r23, 0x00	; 0
     3e2:	86 e3       	ldi	r24, 0x36	; 54
     3e4:	91 e0       	ldi	r25, 0x01	; 1
     3e6:	b9 c6       	rjmp	.+3442   	; 0x115a <fwrite>
     3e8:	08 95       	ret

000003ea <game_tick_menu>:
		default:
			break;
	}
}

void game_tick_menu(){
     3ea:	cf 93       	push	r28
	static BOOL click_released = TRUE;
	static BOOL joy_released = TRUE;
	
	menu_print_current();
     3ec:	a9 d1       	rcall	.+850    	; 0x740 <menu_print_current>
	
	joystick_t joy = joy_get_state();
     3ee:	32 d0       	rcall	.+100    	; 0x454 <joy_get_state>
     3f0:	c7 2f       	mov	r28, r23
     3f2:	97 2f       	mov	r25, r23
	
	
	if (joy.click && click_released){
     3f4:	88 23       	and	r24, r24
     3f6:	41 f0       	breq	.+16     	; 0x408 <game_tick_menu+0x1e>
     3f8:	80 91 07 01 	lds	r24, 0x0107
     3fc:	88 23       	and	r24, r24
     3fe:	21 f0       	breq	.+8      	; 0x408 <game_tick_menu+0x1e>
		click_released = FALSE;
     400:	10 92 07 01 	sts	0x0107, r1
		menu_enter_current();
     404:	31 d2       	rcall	.+1122   	; 0x868 <menu_enter_current>
     406:	1e c0       	rjmp	.+60     	; 0x444 <game_tick_menu+0x5a>
	} 
	else {
		click_released = TRUE;
     408:	81 e0       	ldi	r24, 0x01	; 1
     40a:	80 93 07 01 	sts	0x0107, r24
		
		//fprintf(&uart_out, "\tjoy: %u\tjoy_rel: %u\t", joy.y, joy_released);
		if ((joy.y < (128 - JOY_Y_TRESHOLD)) && joy_released){
     40e:	90 36       	cpi	r25, 0x60	; 96
     410:	48 f4       	brcc	.+18     	; 0x424 <game_tick_menu+0x3a>
     412:	80 91 06 01 	lds	r24, 0x0106
     416:	88 23       	and	r24, r24
     418:	29 f0       	breq	.+10     	; 0x424 <game_tick_menu+0x3a>
			joy_released = FALSE;
     41a:	10 92 06 01 	sts	0x0106, r1
			menu_move_cursor(1);
     41e:	81 e0       	ldi	r24, 0x01	; 1
     420:	03 d2       	rcall	.+1030   	; 0x828 <menu_move_cursor>
     422:	0a c0       	rjmp	.+20     	; 0x438 <game_tick_menu+0x4e>
		} 
		else if ((joy.y > (128 + JOY_Y_TRESHOLD)) && joy_released){
     424:	91 3a       	cpi	r25, 0xA1	; 161
     426:	40 f0       	brcs	.+16     	; 0x438 <game_tick_menu+0x4e>
     428:	80 91 06 01 	lds	r24, 0x0106
     42c:	88 23       	and	r24, r24
     42e:	21 f0       	breq	.+8      	; 0x438 <game_tick_menu+0x4e>
			joy_released = FALSE;
     430:	10 92 06 01 	sts	0x0106, r1
			menu_move_cursor(-1);
     434:	8f ef       	ldi	r24, 0xFF	; 255
     436:	f8 d1       	rcall	.+1008   	; 0x828 <menu_move_cursor>
		}
		
		if (128 - JOY_Y_TRESHOLD < joy.y && joy.y < 128 + JOY_Y_TRESHOLD){
     438:	c1 56       	subi	r28, 0x61	; 97
     43a:	cf 33       	cpi	r28, 0x3F	; 63
     43c:	18 f4       	brcc	.+6      	; 0x444 <game_tick_menu+0x5a>
			joy_released = TRUE;
     43e:	81 e0       	ldi	r24, 0x01	; 1
     440:	80 93 06 01 	sts	0x0106, r24
		}
		
	}
	

}
     444:	cf 91       	pop	r28
     446:	08 95       	ret

00000448 <game_tick>:
}


void game_tick(){
	
	switch (game_state){
     448:	80 91 90 02 	lds	r24, 0x0290
     44c:	81 30       	cpi	r24, 0x01	; 1
     44e:	09 f4       	brne	.+2      	; 0x452 <game_tick+0xa>
		
		
		
			break;
		case IN_MENU:
			game_tick_menu();
     450:	cc cf       	rjmp	.-104    	; 0x3ea <game_tick_menu>
     452:	08 95       	ret

00000454 <joy_get_state>:
	msg.length = 4;
	
	fprintf(&uart_out, "joy sent: %i\t%i\t%i\t%i\n",   joy_xs, joy_ys, joy_dir, joy_click);
	
	can_send(msg, 0);
}
     454:	cf 93       	push	r28
     456:	81 e0       	ldi	r24, 0x01	; 1
     458:	e9 de       	rcall	.-558    	; 0x22c <adc_read_channel>
     45a:	c8 2f       	mov	r28, r24
     45c:	80 e0       	ldi	r24, 0x00	; 0
     45e:	e6 de       	rcall	.-564    	; 0x22c <adc_read_channel>
     460:	95 b1       	in	r25, 0x05	; 5
     462:	90 95       	com	r25
     464:	6c 2f       	mov	r22, r28
     466:	78 2f       	mov	r23, r24
     468:	89 2f       	mov	r24, r25
     46a:	81 70       	andi	r24, 0x01	; 1
     46c:	cf 91       	pop	r28
     46e:	08 95       	ret

00000470 <joystick_init>:


void joystick_init(void){
	PORTE  |= 1 << CLICK_PIN;    // + PUD=0 gives pull-up
     470:	38 9a       	sbi	0x07, 0	; 7
	DDRE   &= ~(1 << CLICK_PIN); // input
     472:	30 98       	cbi	0x06, 0	; 6
     474:	08 95       	ret

00000476 <main>:
#include "joystick.h"
#include "game.h"

int main()
{
	cli();
     476:	f8 94       	cli
	// SRAM init
	MCUCR |= (1 << SRE);
     478:	85 b7       	in	r24, 0x35	; 53
     47a:	80 68       	ori	r24, 0x80	; 128
     47c:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1 << XMM2);
     47e:	80 b7       	in	r24, 0x30	; 48
     480:	80 62       	ori	r24, 0x20	; 32
     482:	80 bf       	out	0x30, r24	; 48
	
	uart_init();
     484:	bc d4       	rcall	.+2424   	; 0xdfe <uart_init>
	
	// setup heap
	__malloc_heap_start = (char*)RAM_ADR;
     486:	80 e0       	ldi	r24, 0x00	; 0
     488:	98 e1       	ldi	r25, 0x18	; 24
     48a:	90 93 03 01 	sts	0x0103, r25
     48e:	80 93 02 01 	sts	0x0102, r24
	__malloc_heap_end   = (char*)(RAM_ADR + RAM_SIZE);
     492:	80 e0       	ldi	r24, 0x00	; 0
     494:	90 e2       	ldi	r25, 0x20	; 32
     496:	90 93 01 01 	sts	0x0101, r25
     49a:	80 93 00 01 	sts	0x0100, r24
	
	adc_init(); // adc init (must be after SRAM init)
     49e:	c3 de       	rcall	.-634    	; 0x226 <adc_init>
	oled_init();
     4a0:	1d d3       	rcall	.+1594   	; 0xadc <oled_init>
	menu_init(); // after oled
     4a2:	02 d1       	rcall	.+516    	; 0x6a8 <menu_init>
	spi_init();
     4a4:	1a d4       	rcall	.+2100   	; 0xcda <spi_init>
	can_init(); // after spi
     4a6:	86 df       	rcall	.-244    	; 0x3b4 <can_init>
	
	sei();
     4a8:	78 94       	sei
	
	// setup printf
	stdout = &uart_out; // printf defaults to oled
     4aa:	88 e2       	ldi	r24, 0x28	; 40
     4ac:	91 e0       	ldi	r25, 0x01	; 1
     4ae:	90 93 23 03 	sts	0x0323, r25
     4b2:	80 93 22 03 	sts	0x0322, r24
	stdin  = &uart_in;
     4b6:	8a e1       	ldi	r24, 0x1A	; 26
     4b8:	91 e0       	ldi	r25, 0x01	; 1
     4ba:	90 93 21 03 	sts	0x0321, r25
     4be:	80 93 20 03 	sts	0x0320, r24

	
	oled_home();
     4c2:	36 d2       	rcall	.+1132   	; 0x930 <oled_home>
	
	game_init(); // after menu_init
     4c4:	83 df       	rcall	.-250    	; 0x3cc <game_init>
	
	fprintf(&uart_out, "entering loop\n");
     4c6:	28 e2       	ldi	r18, 0x28	; 40
     4c8:	31 e0       	ldi	r19, 0x01	; 1
     4ca:	4e e0       	ldi	r20, 0x0E	; 14
     4cc:	50 e0       	ldi	r21, 0x00	; 0
     4ce:	61 e0       	ldi	r22, 0x01	; 1
     4d0:	70 e0       	ldi	r23, 0x00	; 0
     4d2:	85 e4       	ldi	r24, 0x45	; 69
     4d4:	91 e0       	ldi	r25, 0x01	; 1
     4d6:	41 d6       	rcall	.+3202   	; 0x115a <fwrite>
	
	while (1)
	{	
		//fprintf(&uart_out, "tick\n");
		
		game_tick();
     4d8:	b7 df       	rcall	.-146    	; 0x448 <game_tick>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4da:	2f ef       	ldi	r18, 0xFF	; 255
     4dc:	8f eb       	ldi	r24, 0xBF	; 191
     4de:	93 e0       	ldi	r25, 0x03	; 3
     4e0:	21 50       	subi	r18, 0x01	; 1
     4e2:	80 40       	sbci	r24, 0x00	; 0
     4e4:	90 40       	sbci	r25, 0x00	; 0
     4e6:	e1 f7       	brne	.-8      	; 0x4e0 <main+0x6a>
     4e8:	00 c0       	rjmp	.+0      	; 0x4ea <main+0x74>
     4ea:	00 00       	nop
     4ec:	f5 cf       	rjmp	.-22     	; 0x4d8 <main+0x62>

000004ee <mcp_reset>:
	spi_ss_high();
	
	#ifdef MCP_DEBUG
	fprintf(&uart_out, "MCP_RTS\t%i\n", tx_buffer);
	#endif // MCP_DEBUG
}
     4ee:	f1 d3       	rcall	.+2018   	; 0xcd2 <spi_ss_low>
     4f0:	80 ec       	ldi	r24, 0xC0	; 192
     4f2:	fa d3       	rcall	.+2036   	; 0xce8 <spi_transmit>
     4f4:	f0 d3       	rcall	.+2016   	; 0xcd6 <spi_ss_high>
     4f6:	80 e0       	ldi	r24, 0x00	; 0
     4f8:	8f 5f       	subi	r24, 0xFF	; 255
     4fa:	80 38       	cpi	r24, 0x80	; 128
     4fc:	e9 f7       	brne	.-6      	; 0x4f8 <mcp_reset+0xa>
     4fe:	08 95       	ret

00000500 <mcp_read>:
     500:	cf 93       	push	r28
     502:	c8 2f       	mov	r28, r24
     504:	e6 d3       	rcall	.+1996   	; 0xcd2 <spi_ss_low>
     506:	83 e0       	ldi	r24, 0x03	; 3
     508:	ef d3       	rcall	.+2014   	; 0xce8 <spi_transmit>
     50a:	8c 2f       	mov	r24, r28
     50c:	ed d3       	rcall	.+2010   	; 0xce8 <spi_transmit>
     50e:	80 e0       	ldi	r24, 0x00	; 0
     510:	eb d3       	rcall	.+2006   	; 0xce8 <spi_transmit>
     512:	c8 2f       	mov	r28, r24
     514:	e0 d3       	rcall	.+1984   	; 0xcd6 <spi_ss_high>
     516:	8c 2f       	mov	r24, r28
     518:	cf 91       	pop	r28
     51a:	08 95       	ret

0000051c <mcp_write>:
     51c:	cf 93       	push	r28
     51e:	df 93       	push	r29
     520:	d8 2f       	mov	r29, r24
     522:	c6 2f       	mov	r28, r22
     524:	d6 d3       	rcall	.+1964   	; 0xcd2 <spi_ss_low>
     526:	82 e0       	ldi	r24, 0x02	; 2
     528:	df d3       	rcall	.+1982   	; 0xce8 <spi_transmit>
     52a:	8d 2f       	mov	r24, r29
     52c:	dd d3       	rcall	.+1978   	; 0xce8 <spi_transmit>
     52e:	8c 2f       	mov	r24, r28
     530:	db d3       	rcall	.+1974   	; 0xce8 <spi_transmit>
     532:	d1 d3       	rcall	.+1954   	; 0xcd6 <spi_ss_high>
     534:	df 91       	pop	r29
     536:	cf 91       	pop	r28
     538:	08 95       	ret

0000053a <mcp_readstatus>:

uint8_t mcp_readstatus()
{
     53a:	cf 93       	push	r28
	spi_ss_low();
     53c:	ca d3       	rcall	.+1940   	; 0xcd2 <spi_ss_low>
	spi_transmit(MCP_READ_STATUS);
     53e:	80 ea       	ldi	r24, 0xA0	; 160
     540:	d3 d3       	rcall	.+1958   	; 0xce8 <spi_transmit>
	uint8_t status = spi_transmit(0);
     542:	80 e0       	ldi	r24, 0x00	; 0
     544:	d1 d3       	rcall	.+1954   	; 0xce8 <spi_transmit>
     546:	c8 2f       	mov	r28, r24
	spi_ss_high();
     548:	c6 d3       	rcall	.+1932   	; 0xcd6 <spi_ss_high>
	#ifdef MCP_DEBUG
	fprintf(&uart_out, "MCP_READ_STATUS\t%x\n", status);
	#endif // MCP_DEBUG
	
	return status;
}
     54a:	8c 2f       	mov	r24, r28
     54c:	cf 91       	pop	r28
     54e:	08 95       	ret

00000550 <mcp_bitmodify>:

void mcp_bitmodify(uint8_t adr, uint8_t mask, uint8_t data)
{
     550:	1f 93       	push	r17
     552:	cf 93       	push	r28
     554:	df 93       	push	r29
     556:	18 2f       	mov	r17, r24
     558:	d6 2f       	mov	r29, r22
     55a:	c4 2f       	mov	r28, r20
	spi_ss_low();
     55c:	ba d3       	rcall	.+1908   	; 0xcd2 <spi_ss_low>
	spi_transmit(MCP_BITMOD);
     55e:	85 e0       	ldi	r24, 0x05	; 5
     560:	c3 d3       	rcall	.+1926   	; 0xce8 <spi_transmit>
	spi_transmit(adr);
     562:	81 2f       	mov	r24, r17
     564:	c1 d3       	rcall	.+1922   	; 0xce8 <spi_transmit>
	spi_transmit(mask);
     566:	8d 2f       	mov	r24, r29
     568:	bf d3       	rcall	.+1918   	; 0xce8 <spi_transmit>
	spi_transmit(data);
     56a:	8c 2f       	mov	r24, r28
     56c:	bd d3       	rcall	.+1914   	; 0xce8 <spi_transmit>
	spi_ss_high();
     56e:	b3 d3       	rcall	.+1894   	; 0xcd6 <spi_ss_high>
	
	#ifdef MCP_DEBUG
	fprintf(&uart_out, "MCP_BITMOD\t%x\t%x\t%x\n", adr, mask, data);
	#endif // MCP_DEBUG
}
     570:	df 91       	pop	r29
     572:	cf 91       	pop	r28
     574:	1f 91       	pop	r17
     576:	08 95       	ret

00000578 <mcp_init>:
#include "uart.h"


void mcp_init()
{
	mcp_reset();
     578:	ba df       	rcall	.-140    	; 0x4ee <mcp_reset>
	const uint8_t BRP		= 1;	// TQ = 2*Tosc*(BRP+1)  = 250 ns
	const uint8_t PrSeg		= 1;	// tPropSeg = (PrSeg + 1)
	const uint8_t PhSeg1	= 2;	// tPS1 = (PhSeg1 + 1)*TQ
	const uint8_t PhSeg2	= 2;	// tPS2 = (PhSeg2 + 1)*TQ
	
	mcp_write(MCP_CNF1, BRP);
     57a:	61 e0       	ldi	r22, 0x01	; 1
     57c:	8a e2       	ldi	r24, 0x2A	; 42
     57e:	ce df       	rcall	.-100    	; 0x51c <mcp_write>
	mcp_write(MCP_CNF2, PrSeg | (PhSeg1 << 3));
     580:	61 e1       	ldi	r22, 0x11	; 17
     582:	89 e2       	ldi	r24, 0x29	; 41
     584:	cb df       	rcall	.-106    	; 0x51c <mcp_write>
	mcp_write(MCP_CNF3, PhSeg2);
     586:	62 e0       	ldi	r22, 0x02	; 2
     588:	88 e2       	ldi	r24, 0x28	; 40
     58a:	c8 df       	rcall	.-112    	; 0x51c <mcp_write>


	// Setup Rx registers
	//mcp_write(MCP_RXM0SIDH, 0);
	//mcp_write(MCP_RXM0SIDL, 0);
	mcp_bitmodify(MCP_RXB0CTRL, 0x60, 0x60);
     58c:	40 e6       	ldi	r20, 0x60	; 96
     58e:	60 e6       	ldi	r22, 0x60	; 96
     590:	80 e6       	ldi	r24, 0x60	; 96
     592:	de df       	rcall	.-68     	; 0x550 <mcp_bitmodify>
	mcp_bitmodify(MCP_RXB1CTRL, 0x60, 0x60);	
     594:	40 e6       	ldi	r20, 0x60	; 96
     596:	60 e6       	ldi	r22, 0x60	; 96
     598:	80 e7       	ldi	r24, 0x70	; 112
     59a:	da df       	rcall	.-76     	; 0x550 <mcp_bitmodify>
	
	// go to normal mode
	mcp_bitmodify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);
     59c:	40 e0       	ldi	r20, 0x00	; 0
     59e:	60 ee       	ldi	r22, 0xE0	; 224
     5a0:	8f e0       	ldi	r24, 0x0F	; 15
     5a2:	d6 cf       	rjmp	.-84     	; 0x550 <mcp_bitmodify>
     5a4:	08 95       	ret

000005a6 <menu_action_nothing>:
		///\todo this can't be right?
		// should probably check for parent->submenu[i] != NULL
		if (1)
			free(&parent->submenus[i]);
	}
}
     5a6:	28 e2       	ldi	r18, 0x28	; 40
     5a8:	31 e0       	ldi	r19, 0x01	; 1
     5aa:	48 e0       	ldi	r20, 0x08	; 8
     5ac:	50 e0       	ldi	r21, 0x00	; 0
     5ae:	61 e0       	ldi	r22, 0x01	; 1
     5b0:	70 e0       	ldi	r23, 0x00	; 0
     5b2:	84 e5       	ldi	r24, 0x54	; 84
     5b4:	91 e0       	ldi	r25, 0x01	; 1
     5b6:	d1 c5       	rjmp	.+2978   	; 0x115a <fwrite>
     5b8:	08 95       	ret

000005ba <menu_init_menu>:
     5ba:	cf 92       	push	r12
     5bc:	df 92       	push	r13
     5be:	ef 92       	push	r14
     5c0:	ff 92       	push	r15
     5c2:	0f 93       	push	r16
     5c4:	1f 93       	push	r17
     5c6:	cf 93       	push	r28
     5c8:	df 93       	push	r29
     5ca:	6c 01       	movw	r12, r24
     5cc:	7b 01       	movw	r14, r22
     5ce:	8a 01       	movw	r16, r20
     5d0:	80 91 94 02 	lds	r24, 0x0294
     5d4:	90 91 95 02 	lds	r25, 0x0295
     5d8:	68 17       	cp	r22, r24
     5da:	79 07       	cpc	r23, r25
     5dc:	c9 f0       	breq	.+50     	; 0x610 <menu_init_menu+0x56>
     5de:	fb 01       	movw	r30, r22
     5e0:	84 a1       	ldd	r24, Z+36	; 0x24
     5e2:	95 a1       	ldd	r25, Z+37	; 0x25
     5e4:	89 2b       	or	r24, r25
     5e6:	a1 f0       	breq	.+40     	; 0x610 <menu_init_menu+0x56>
     5e8:	ff 92       	push	r15
     5ea:	6f 93       	push	r22
     5ec:	8d e5       	ldi	r24, 0x5D	; 93
     5ee:	91 e0       	ldi	r25, 0x01	; 1
     5f0:	9f 93       	push	r25
     5f2:	8f 93       	push	r24
     5f4:	88 e2       	ldi	r24, 0x28	; 40
     5f6:	91 e0       	ldi	r25, 0x01	; 1
     5f8:	9f 93       	push	r25
     5fa:	8f 93       	push	r24
     5fc:	6d d5       	rcall	.+2778   	; 0x10d8 <fprintf>
     5fe:	0f 90       	pop	r0
     600:	0f 90       	pop	r0
     602:	0f 90       	pop	r0
     604:	0f 90       	pop	r0
     606:	0f 90       	pop	r0
     608:	0f 90       	pop	r0
     60a:	80 e0       	ldi	r24, 0x00	; 0
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	43 c0       	rjmp	.+134    	; 0x696 <menu_init_menu+0xdc>
     610:	8a e2       	ldi	r24, 0x2A	; 42
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	2b d4       	rcall	.+2134   	; 0xe6c <malloc>
     616:	ec 01       	movw	r28, r24
     618:	fc 01       	movw	r30, r24
     61a:	80 e0       	ldi	r24, 0x00	; 0
     61c:	11 92       	st	Z+, r1
     61e:	8f 5f       	subi	r24, 0xFF	; 255
     620:	88 31       	cpi	r24, 0x18	; 24
     622:	e1 f7       	brne	.-8      	; 0x61c <menu_init_menu+0x62>
     624:	47 e1       	ldi	r20, 0x17	; 23
     626:	50 e0       	ldi	r21, 0x00	; 0
     628:	b6 01       	movw	r22, r12
     62a:	ce 01       	movw	r24, r28
     62c:	46 d5       	rcall	.+2700   	; 0x10ba <strncpy>
     62e:	fe 01       	movw	r30, r28
     630:	87 e0       	ldi	r24, 0x07	; 7
     632:	11 8e       	std	Z+25, r1	; 0x19
     634:	10 8e       	std	Z+24, r1	; 0x18
     636:	81 50       	subi	r24, 0x01	; 1
     638:	32 96       	adiw	r30, 0x02	; 2
     63a:	81 11       	cpse	r24, r1
     63c:	fa cf       	rjmp	.-12     	; 0x632 <menu_init_menu+0x78>
     63e:	e1 14       	cp	r14, r1
     640:	f1 04       	cpc	r15, r1
     642:	19 f4       	brne	.+6      	; 0x64a <menu_init_menu+0x90>
     644:	df a3       	std	Y+39, r29	; 0x27
     646:	ce a3       	std	Y+38, r28	; 0x26
     648:	22 c0       	rjmp	.+68     	; 0x68e <menu_init_menu+0xd4>
     64a:	ff a2       	std	Y+39, r15	; 0x27
     64c:	ee a2       	std	Y+38, r14	; 0x26
     64e:	f7 01       	movw	r30, r14
     650:	80 8d       	ldd	r24, Z+24	; 0x18
     652:	91 8d       	ldd	r25, Z+25	; 0x19
     654:	89 2b       	or	r24, r25
     656:	41 f0       	breq	.+16     	; 0x668 <menu_init_menu+0xae>
     658:	21 e0       	ldi	r18, 0x01	; 1
     65a:	30 e0       	ldi	r19, 0x00	; 0
     65c:	a9 01       	movw	r20, r18
     65e:	82 8d       	ldd	r24, Z+26	; 0x1a
     660:	93 8d       	ldd	r25, Z+27	; 0x1b
     662:	89 2b       	or	r24, r25
     664:	71 f4       	brne	.+28     	; 0x682 <menu_init_menu+0xc8>
     666:	02 c0       	rjmp	.+4      	; 0x66c <menu_init_menu+0xb2>
     668:	40 e0       	ldi	r20, 0x00	; 0
     66a:	50 e0       	ldi	r21, 0x00	; 0
     66c:	44 5f       	subi	r20, 0xF4	; 244
     66e:	5f 4f       	sbci	r21, 0xFF	; 255
     670:	ca 01       	movw	r24, r20
     672:	88 0f       	add	r24, r24
     674:	99 1f       	adc	r25, r25
     676:	f7 01       	movw	r30, r14
     678:	e8 0f       	add	r30, r24
     67a:	f9 1f       	adc	r31, r25
     67c:	d1 83       	std	Z+1, r29	; 0x01
     67e:	c0 83       	st	Z, r28
     680:	06 c0       	rjmp	.+12     	; 0x68e <menu_init_menu+0xd4>
     682:	2f 5f       	subi	r18, 0xFF	; 255
     684:	3f 4f       	sbci	r19, 0xFF	; 255
     686:	32 96       	adiw	r30, 0x02	; 2
     688:	27 30       	cpi	r18, 0x07	; 7
     68a:	31 05       	cpc	r19, r1
     68c:	39 f7       	brne	.-50     	; 0x65c <menu_init_menu+0xa2>
     68e:	19 a7       	std	Y+41, r17	; 0x29
     690:	08 a7       	std	Y+40, r16	; 0x28
     692:	8c 2f       	mov	r24, r28
     694:	9d 2f       	mov	r25, r29
     696:	df 91       	pop	r29
     698:	cf 91       	pop	r28
     69a:	1f 91       	pop	r17
     69c:	0f 91       	pop	r16
     69e:	ff 90       	pop	r15
     6a0:	ef 90       	pop	r14
     6a2:	df 90       	pop	r13
     6a4:	cf 90       	pop	r12
     6a6:	08 95       	ret

000006a8 <menu_init>:
     6a8:	cf 93       	push	r28
     6aa:	df 93       	push	r29
     6ac:	e1 de       	rcall	.-574    	; 0x470 <joystick_init>
     6ae:	60 91 94 02 	lds	r22, 0x0294
     6b2:	70 91 95 02 	lds	r23, 0x0295
     6b6:	43 ed       	ldi	r20, 0xD3	; 211
     6b8:	52 e0       	ldi	r21, 0x02	; 2
     6ba:	81 e7       	ldi	r24, 0x71	; 113
     6bc:	91 e0       	ldi	r25, 0x01	; 1
     6be:	7d df       	rcall	.-262    	; 0x5ba <menu_init_menu>
     6c0:	90 93 95 02 	sts	0x0295, r25
     6c4:	80 93 94 02 	sts	0x0294, r24
     6c8:	4b ee       	ldi	r20, 0xEB	; 235
     6ca:	51 e0       	ldi	r21, 0x01	; 1
     6cc:	bc 01       	movw	r22, r24
     6ce:	86 e7       	ldi	r24, 0x76	; 118
     6d0:	91 e0       	ldi	r25, 0x01	; 1
     6d2:	73 df       	rcall	.-282    	; 0x5ba <menu_init_menu>
     6d4:	60 91 94 02 	lds	r22, 0x0294
     6d8:	70 91 95 02 	lds	r23, 0x0295
     6dc:	43 ed       	ldi	r20, 0xD3	; 211
     6de:	52 e0       	ldi	r21, 0x02	; 2
     6e0:	8c e7       	ldi	r24, 0x7C	; 124
     6e2:	91 e0       	ldi	r25, 0x01	; 1
     6e4:	6a df       	rcall	.-300    	; 0x5ba <menu_init_menu>
     6e6:	60 91 94 02 	lds	r22, 0x0294
     6ea:	70 91 95 02 	lds	r23, 0x0295
     6ee:	43 ed       	ldi	r20, 0xD3	; 211
     6f0:	52 e0       	ldi	r21, 0x02	; 2
     6f2:	87 e8       	ldi	r24, 0x87	; 135
     6f4:	91 e0       	ldi	r25, 0x01	; 1
     6f6:	61 df       	rcall	.-318    	; 0x5ba <menu_init_menu>
     6f8:	ec 01       	movw	r28, r24
     6fa:	43 ed       	ldi	r20, 0xD3	; 211
     6fc:	52 e0       	ldi	r21, 0x02	; 2
     6fe:	bc 01       	movw	r22, r24
     700:	8d e8       	ldi	r24, 0x8D	; 141
     702:	91 e0       	ldi	r25, 0x01	; 1
     704:	5a df       	rcall	.-332    	; 0x5ba <menu_init_menu>
     706:	43 ed       	ldi	r20, 0xD3	; 211
     708:	52 e0       	ldi	r21, 0x02	; 2
     70a:	be 01       	movw	r22, r28
     70c:	8f e9       	ldi	r24, 0x9F	; 159
     70e:	91 e0       	ldi	r25, 0x01	; 1
     710:	54 df       	rcall	.-344    	; 0x5ba <menu_init_menu>
     712:	43 ed       	ldi	r20, 0xD3	; 211
     714:	52 e0       	ldi	r21, 0x02	; 2
     716:	be 01       	movw	r22, r28
     718:	8c ea       	ldi	r24, 0xAC	; 172
     71a:	91 e0       	ldi	r25, 0x01	; 1
     71c:	4e df       	rcall	.-356    	; 0x5ba <menu_init_menu>
     71e:	43 ed       	ldi	r20, 0xD3	; 211
     720:	52 e0       	ldi	r21, 0x02	; 2
     722:	be 01       	movw	r22, r28
     724:	87 eb       	ldi	r24, 0xB7	; 183
     726:	91 e0       	ldi	r25, 0x01	; 1
     728:	48 df       	rcall	.-368    	; 0x5ba <menu_init_menu>
     72a:	80 91 94 02 	lds	r24, 0x0294
     72e:	90 91 95 02 	lds	r25, 0x0295
     732:	90 93 93 02 	sts	0x0293, r25
     736:	80 93 92 02 	sts	0x0292, r24
     73a:	df 91       	pop	r29
     73c:	cf 91       	pop	r28
     73e:	08 95       	ret

00000740 <menu_print_current>:
     740:	cf 92       	push	r12
     742:	df 92       	push	r13
     744:	ef 92       	push	r14
     746:	ff 92       	push	r15
     748:	0f 93       	push	r16
     74a:	1f 93       	push	r17
     74c:	cf 93       	push	r28
     74e:	df 93       	push	r29
     750:	ef d0       	rcall	.+478    	; 0x930 <oled_home>
     752:	80 91 93 02 	lds	r24, 0x0293
     756:	8f 93       	push	r24
     758:	80 91 92 02 	lds	r24, 0x0292
     75c:	8f 93       	push	r24
     75e:	8d e6       	ldi	r24, 0x6D	; 109
     760:	91 e0       	ldi	r25, 0x01	; 1
     762:	9f 93       	push	r25
     764:	8f 93       	push	r24
     766:	88 e0       	ldi	r24, 0x08	; 8
     768:	91 e0       	ldi	r25, 0x01	; 1
     76a:	9f 93       	push	r25
     76c:	8f 93       	push	r24
     76e:	b4 d4       	rcall	.+2408   	; 0x10d8 <fprintf>
     770:	0f 90       	pop	r0
     772:	0f 90       	pop	r0
     774:	0f 90       	pop	r0
     776:	0f 90       	pop	r0
     778:	0f 90       	pop	r0
     77a:	0f 90       	pop	r0
     77c:	c0 e0       	ldi	r28, 0x00	; 0
     77e:	d0 e0       	ldi	r29, 0x00	; 0
     780:	0f 2e       	mov	r0, r31
     782:	fd e6       	ldi	r31, 0x6D	; 109
     784:	ef 2e       	mov	r14, r31
     786:	f1 e0       	ldi	r31, 0x01	; 1
     788:	ff 2e       	mov	r15, r31
     78a:	f0 2d       	mov	r31, r0
     78c:	08 e0       	ldi	r16, 0x08	; 8
     78e:	11 e0       	ldi	r17, 0x01	; 1
     790:	6e 01       	movw	r12, r28
     792:	80 91 92 02 	lds	r24, 0x0292
     796:	90 91 93 02 	lds	r25, 0x0293
     79a:	de 01       	movw	r26, r28
     79c:	1c 96       	adiw	r26, 0x0c	; 12
     79e:	aa 0f       	add	r26, r26
     7a0:	bb 1f       	adc	r27, r27
     7a2:	a8 0f       	add	r26, r24
     7a4:	b9 1f       	adc	r27, r25
     7a6:	8d 91       	ld	r24, X+
     7a8:	9c 91       	ld	r25, X
     7aa:	89 2b       	or	r24, r25
     7ac:	79 f1       	breq	.+94     	; 0x80c <menu_print_current+0xcc>
     7ae:	80 91 91 02 	lds	r24, 0x0291
     7b2:	c8 13       	cpse	r28, r24
     7b4:	09 c0       	rjmp	.+18     	; 0x7c8 <menu_print_current+0x88>
     7b6:	98 01       	movw	r18, r16
     7b8:	42 e0       	ldi	r20, 0x02	; 2
     7ba:	50 e0       	ldi	r21, 0x00	; 0
     7bc:	61 e0       	ldi	r22, 0x01	; 1
     7be:	70 e0       	ldi	r23, 0x00	; 0
     7c0:	88 ec       	ldi	r24, 0xC8	; 200
     7c2:	91 e0       	ldi	r25, 0x01	; 1
     7c4:	ca d4       	rcall	.+2452   	; 0x115a <fwrite>
     7c6:	08 c0       	rjmp	.+16     	; 0x7d8 <menu_print_current+0x98>
     7c8:	98 01       	movw	r18, r16
     7ca:	42 e0       	ldi	r20, 0x02	; 2
     7cc:	50 e0       	ldi	r21, 0x00	; 0
     7ce:	61 e0       	ldi	r22, 0x01	; 1
     7d0:	70 e0       	ldi	r23, 0x00	; 0
     7d2:	8b ec       	ldi	r24, 0xCB	; 203
     7d4:	91 e0       	ldi	r25, 0x01	; 1
     7d6:	c1 d4       	rcall	.+2434   	; 0x115a <fwrite>
     7d8:	e0 91 92 02 	lds	r30, 0x0292
     7dc:	f0 91 93 02 	lds	r31, 0x0293
     7e0:	8c e0       	ldi	r24, 0x0C	; 12
     7e2:	c8 0e       	add	r12, r24
     7e4:	d1 1c       	adc	r13, r1
     7e6:	cc 0c       	add	r12, r12
     7e8:	dd 1c       	adc	r13, r13
     7ea:	ec 0d       	add	r30, r12
     7ec:	fd 1d       	adc	r31, r13
     7ee:	81 81       	ldd	r24, Z+1	; 0x01
     7f0:	8f 93       	push	r24
     7f2:	80 81       	ld	r24, Z
     7f4:	8f 93       	push	r24
     7f6:	ff 92       	push	r15
     7f8:	ef 92       	push	r14
     7fa:	1f 93       	push	r17
     7fc:	0f 93       	push	r16
     7fe:	6c d4       	rcall	.+2264   	; 0x10d8 <fprintf>
     800:	0f 90       	pop	r0
     802:	0f 90       	pop	r0
     804:	0f 90       	pop	r0
     806:	0f 90       	pop	r0
     808:	0f 90       	pop	r0
     80a:	0f 90       	pop	r0
     80c:	21 96       	adiw	r28, 0x01	; 1
     80e:	c7 30       	cpi	r28, 0x07	; 7
     810:	d1 05       	cpc	r29, r1
     812:	09 f0       	breq	.+2      	; 0x816 <menu_print_current+0xd6>
     814:	bd cf       	rjmp	.-134    	; 0x790 <menu_print_current+0x50>
     816:	df 91       	pop	r29
     818:	cf 91       	pop	r28
     81a:	1f 91       	pop	r17
     81c:	0f 91       	pop	r16
     81e:	ff 90       	pop	r15
     820:	ef 90       	pop	r14
     822:	df 90       	pop	r13
     824:	cf 90       	pop	r12
     826:	08 95       	ret

00000828 <menu_move_cursor>:
     828:	20 91 91 02 	lds	r18, 0x0291
     82c:	99 27       	eor	r25, r25
     82e:	87 fd       	sbrc	r24, 7
     830:	90 95       	com	r25
     832:	82 0f       	add	r24, r18
     834:	91 1d       	adc	r25, r1
     836:	27 fd       	sbrc	r18, 7
     838:	9a 95       	dec	r25
     83a:	67 e0       	ldi	r22, 0x07	; 7
     83c:	70 e0       	ldi	r23, 0x00	; 0
     83e:	ef d2       	rcall	.+1502   	; 0xe1e <__divmodhi4>
     840:	20 91 92 02 	lds	r18, 0x0292
     844:	30 91 93 02 	lds	r19, 0x0293
     848:	fc 01       	movw	r30, r24
     84a:	ff 27       	eor	r31, r31
     84c:	3c 96       	adiw	r30, 0x0c	; 12
     84e:	ee 0f       	add	r30, r30
     850:	ff 1f       	adc	r31, r31
     852:	e2 0f       	add	r30, r18
     854:	f3 1f       	adc	r31, r19
     856:	20 81       	ld	r18, Z
     858:	31 81       	ldd	r19, Z+1	; 0x01
     85a:	23 2b       	or	r18, r19
     85c:	21 f0       	breq	.+8      	; 0x866 <menu_move_cursor+0x3e>
     85e:	87 30       	cpi	r24, 0x07	; 7
     860:	10 f4       	brcc	.+4      	; 0x866 <menu_move_cursor+0x3e>
     862:	80 93 91 02 	sts	0x0291, r24
     866:	08 95       	ret

00000868 <menu_enter_current>:



void menu_enter_current(void)
{
     868:	cf 93       	push	r28
     86a:	df 93       	push	r29
	fprintf(&uart_out, "nothing: \t%p\n", menu_action_nothing);
     86c:	83 ed       	ldi	r24, 0xD3	; 211
     86e:	92 e0       	ldi	r25, 0x02	; 2
     870:	9f 93       	push	r25
     872:	8f 93       	push	r24
     874:	8e ec       	ldi	r24, 0xCE	; 206
     876:	91 e0       	ldi	r25, 0x01	; 1
     878:	9f 93       	push	r25
     87a:	8f 93       	push	r24
     87c:	c8 e2       	ldi	r28, 0x28	; 40
     87e:	d1 e0       	ldi	r29, 0x01	; 1
     880:	df 93       	push	r29
     882:	cf 93       	push	r28
     884:	29 d4       	rcall	.+2130   	; 0x10d8 <fprintf>
	fprintf(&uart_out, "action : \t\t%p\n", (*(current->submenus[subchoice]->action)));
     886:	80 91 92 02 	lds	r24, 0x0292
     88a:	90 91 93 02 	lds	r25, 0x0293
     88e:	e0 91 91 02 	lds	r30, 0x0291
     892:	f0 e0       	ldi	r31, 0x00	; 0
     894:	3c 96       	adiw	r30, 0x0c	; 12
     896:	ee 0f       	add	r30, r30
     898:	ff 1f       	adc	r31, r31
     89a:	e8 0f       	add	r30, r24
     89c:	f9 1f       	adc	r31, r25
     89e:	01 90       	ld	r0, Z+
     8a0:	f0 81       	ld	r31, Z
     8a2:	e0 2d       	mov	r30, r0
     8a4:	81 a5       	ldd	r24, Z+41	; 0x29
     8a6:	8f 93       	push	r24
     8a8:	80 a5       	ldd	r24, Z+40	; 0x28
     8aa:	8f 93       	push	r24
     8ac:	8c ed       	ldi	r24, 0xDC	; 220
     8ae:	91 e0       	ldi	r25, 0x01	; 1
     8b0:	9f 93       	push	r25
     8b2:	8f 93       	push	r24
     8b4:	df 93       	push	r29
     8b6:	cf 93       	push	r28
     8b8:	0f d4       	rcall	.+2078   	; 0x10d8 <fprintf>
	
	current->submenus[subchoice]->action();
     8ba:	80 91 92 02 	lds	r24, 0x0292
     8be:	90 91 93 02 	lds	r25, 0x0293
     8c2:	e0 91 91 02 	lds	r30, 0x0291
     8c6:	f0 e0       	ldi	r31, 0x00	; 0
     8c8:	3c 96       	adiw	r30, 0x0c	; 12
     8ca:	ee 0f       	add	r30, r30
     8cc:	ff 1f       	adc	r31, r31
     8ce:	e8 0f       	add	r30, r24
     8d0:	f9 1f       	adc	r31, r25
     8d2:	01 90       	ld	r0, Z+
     8d4:	f0 81       	ld	r31, Z
     8d6:	e0 2d       	mov	r30, r0
     8d8:	00 a4       	ldd	r0, Z+40	; 0x28
     8da:	f1 a5       	ldd	r31, Z+41	; 0x29
     8dc:	e0 2d       	mov	r30, r0
     8de:	09 95       	icall
	current = current->submenus[subchoice];
     8e0:	80 91 92 02 	lds	r24, 0x0292
     8e4:	90 91 93 02 	lds	r25, 0x0293
     8e8:	e0 91 91 02 	lds	r30, 0x0291
     8ec:	f0 e0       	ldi	r31, 0x00	; 0
     8ee:	3c 96       	adiw	r30, 0x0c	; 12
     8f0:	ee 0f       	add	r30, r30
     8f2:	ff 1f       	adc	r31, r31
     8f4:	e8 0f       	add	r30, r24
     8f6:	f9 1f       	adc	r31, r25
     8f8:	80 81       	ld	r24, Z
     8fa:	91 81       	ldd	r25, Z+1	; 0x01
     8fc:	90 93 93 02 	sts	0x0293, r25
     900:	80 93 92 02 	sts	0x0292, r24
	subchoice = 0;
     904:	10 92 91 02 	sts	0x0291, r1
     908:	8d b7       	in	r24, 0x3d	; 61
     90a:	9e b7       	in	r25, 0x3e	; 62
     90c:	0c 96       	adiw	r24, 0x0c	; 12
     90e:	0f b6       	in	r0, 0x3f	; 63
     910:	f8 94       	cli
     912:	9e bf       	out	0x3e, r25	; 62
     914:	0f be       	out	0x3f, r0	; 63
     916:	8d bf       	out	0x3d, r24	; 61
     918:	df 91       	pop	r29
     91a:	cf 91       	pop	r28
     91c:	08 95       	ret

0000091e <oled_autorefresh_init>:
}

void oled_reset(){
	oled_init();
	oled_fill(0);
	oled_home();
     91e:	89 b7       	in	r24, 0x39	; 57
     920:	82 60       	ori	r24, 0x02	; 2
     922:	89 bf       	out	0x39, r24	; 57
     924:	83 b7       	in	r24, 0x33	; 51
     926:	85 60       	ori	r24, 0x05	; 5
     928:	83 bf       	out	0x33, r24	; 51
     92a:	87 e2       	ldi	r24, 0x27	; 39
     92c:	81 bf       	out	0x31, r24	; 49
     92e:	08 95       	ret

00000930 <oled_home>:
     930:	10 92 97 02 	sts	0x0297, r1
     934:	10 92 96 02 	sts	0x0296, r1
     938:	08 95       	ret

0000093a <oled_newline>:
     93a:	10 92 97 02 	sts	0x0297, r1
     93e:	80 91 96 02 	lds	r24, 0x0296
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	01 96       	adiw	r24, 0x01	; 1
     946:	87 70       	andi	r24, 0x07	; 7
     948:	90 78       	andi	r25, 0x80	; 128
     94a:	80 93 96 02 	sts	0x0296, r24
     94e:	08 95       	ret

00000950 <oled_goto_nextpos>:
     950:	20 91 97 02 	lds	r18, 0x0297
     954:	30 e0       	ldi	r19, 0x00	; 0
     956:	2f 5f       	subi	r18, 0xFF	; 255
     958:	3f 4f       	sbci	r19, 0xFF	; 255
     95a:	2f 77       	andi	r18, 0x7F	; 127
     95c:	30 78       	andi	r19, 0x80	; 128
     95e:	20 93 97 02 	sts	0x0297, r18
     962:	80 91 96 02 	lds	r24, 0x0296
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	41 e0       	ldi	r20, 0x01	; 1
     96a:	50 e0       	ldi	r21, 0x00	; 0
     96c:	22 23       	and	r18, r18
     96e:	11 f0       	breq	.+4      	; 0x974 <oled_goto_nextpos+0x24>
     970:	40 e0       	ldi	r20, 0x00	; 0
     972:	50 e0       	ldi	r21, 0x00	; 0
     974:	84 0f       	add	r24, r20
     976:	95 1f       	adc	r25, r21
     978:	87 70       	andi	r24, 0x07	; 7
     97a:	90 78       	andi	r25, 0x80	; 128
     97c:	99 23       	and	r25, r25
     97e:	24 f4       	brge	.+8      	; 0x988 <oled_goto_nextpos+0x38>
     980:	01 97       	sbiw	r24, 0x01	; 1
     982:	88 6f       	ori	r24, 0xF8	; 248
     984:	9f 6f       	ori	r25, 0xFF	; 255
     986:	01 96       	adiw	r24, 0x01	; 1
     988:	80 93 96 02 	sts	0x0296, r24
     98c:	08 95       	ret

0000098e <oled_buffchar>:
     98e:	0f 93       	push	r16
     990:	1f 93       	push	r17
     992:	cf 93       	push	r28
     994:	df 93       	push	r29
     996:	08 2f       	mov	r16, r24
     998:	80 32       	cpi	r24, 0x20	; 32
     99a:	90 f1       	brcs	.+100    	; 0xa00 <oled_buffchar+0x72>
     99c:	20 91 97 02 	lds	r18, 0x0297
     9a0:	22 23       	and	r18, r18
     9a2:	74 f1       	brlt	.+92     	; 0xa00 <oled_buffchar+0x72>
     9a4:	80 91 96 02 	lds	r24, 0x0296
     9a8:	88 30       	cpi	r24, 0x08	; 8
     9aa:	50 f5       	brcc	.+84     	; 0xa00 <oled_buffchar+0x72>
     9ac:	30 e0       	ldi	r19, 0x00	; 0
     9ae:	2c 5f       	subi	r18, 0xFC	; 252
     9b0:	3f 4f       	sbci	r19, 0xFF	; 255
     9b2:	20 38       	cpi	r18, 0x80	; 128
     9b4:	31 05       	cpc	r19, r1
     9b6:	6c f1       	brlt	.+90     	; 0xa12 <oled_buffchar+0x84>
     9b8:	c0 df       	rcall	.-128    	; 0x93a <oled_newline>
     9ba:	2b c0       	rjmp	.+86     	; 0xa12 <oled_buffchar+0x84>
     9bc:	80 91 96 02 	lds	r24, 0x0296
     9c0:	a0 91 97 02 	lds	r26, 0x0297
     9c4:	b0 e0       	ldi	r27, 0x00	; 0
     9c6:	90 e8       	ldi	r25, 0x80	; 128
     9c8:	89 9f       	mul	r24, r25
     9ca:	a0 0d       	add	r26, r0
     9cc:	b1 1d       	adc	r27, r1
     9ce:	11 24       	eor	r1, r1
     9d0:	80 91 16 01 	lds	r24, 0x0116
     9d4:	90 91 17 01 	lds	r25, 0x0117
     9d8:	a8 0f       	add	r26, r24
     9da:	b9 1f       	adc	r27, r25
     9dc:	ce 01       	movw	r24, r28
     9de:	80 0f       	add	r24, r16
     9e0:	91 1f       	adc	r25, r17
     9e2:	e0 91 18 01 	lds	r30, 0x0118
     9e6:	f0 91 19 01 	lds	r31, 0x0119
     9ea:	e8 0f       	add	r30, r24
     9ec:	f9 1f       	adc	r31, r25
     9ee:	85 91       	lpm	r24, Z+
     9f0:	94 91       	lpm	r25, Z
     9f2:	8c 93       	st	X, r24
     9f4:	ad df       	rcall	.-166    	; 0x950 <oled_goto_nextpos>
     9f6:	21 96       	adiw	r28, 0x01	; 1
     9f8:	c4 30       	cpi	r28, 0x04	; 4
     9fa:	d1 05       	cpc	r29, r1
     9fc:	f9 f6       	brne	.-66     	; 0x9bc <oled_buffchar+0x2e>
     9fe:	13 c0       	rjmp	.+38     	; 0xa26 <oled_buffchar+0x98>
     a00:	0a 30       	cpi	r16, 0x0A	; 10
     a02:	11 f4       	brne	.+4      	; 0xa08 <oled_buffchar+0x7a>
     a04:	9a df       	rcall	.-204    	; 0x93a <oled_newline>
     a06:	21 c0       	rjmp	.+66     	; 0xa4a <oled_buffchar+0xbc>
     a08:	0d 30       	cpi	r16, 0x0D	; 13
     a0a:	f9 f4       	brne	.+62     	; 0xa4a <oled_buffchar+0xbc>
     a0c:	10 92 97 02 	sts	0x0297, r1
     a10:	1c c0       	rjmp	.+56     	; 0xa4a <oled_buffchar+0xbc>
     a12:	10 e0       	ldi	r17, 0x00	; 0
     a14:	00 52       	subi	r16, 0x20	; 32
     a16:	11 09       	sbc	r17, r1
     a18:	00 0f       	add	r16, r16
     a1a:	11 1f       	adc	r17, r17
     a1c:	00 0f       	add	r16, r16
     a1e:	11 1f       	adc	r17, r17
     a20:	c0 e0       	ldi	r28, 0x00	; 0
     a22:	d0 e0       	ldi	r29, 0x00	; 0
     a24:	cb cf       	rjmp	.-106    	; 0x9bc <oled_buffchar+0x2e>
     a26:	80 91 96 02 	lds	r24, 0x0296
     a2a:	e0 91 97 02 	lds	r30, 0x0297
     a2e:	f0 e0       	ldi	r31, 0x00	; 0
     a30:	90 e8       	ldi	r25, 0x80	; 128
     a32:	89 9f       	mul	r24, r25
     a34:	e0 0d       	add	r30, r0
     a36:	f1 1d       	adc	r31, r1
     a38:	11 24       	eor	r1, r1
     a3a:	80 91 16 01 	lds	r24, 0x0116
     a3e:	90 91 17 01 	lds	r25, 0x0117
     a42:	e8 0f       	add	r30, r24
     a44:	f9 1f       	adc	r31, r25
     a46:	10 82       	st	Z, r1
     a48:	83 df       	rcall	.-250    	; 0x950 <oled_goto_nextpos>
     a4a:	df 91       	pop	r29
     a4c:	cf 91       	pop	r28
     a4e:	1f 91       	pop	r17
     a50:	0f 91       	pop	r16
     a52:	08 95       	ret

00000a54 <oled_putchar>:
     a54:	9c df       	rcall	.-200    	; 0x98e <oled_buffchar>
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	08 95       	ret

00000a5c <oled_fill>:
     a5c:	00 c0       	rjmp	.+0      	; 0xa5e <oled_fill+0x2>
     a5e:	00 c0       	rjmp	.+0      	; 0xa60 <oled_fill+0x4>
     a60:	00 00       	nop
     a62:	91 e2       	ldi	r25, 0x21	; 33
     a64:	90 93 00 10 	sts	0x1000, r25
     a68:	00 c0       	rjmp	.+0      	; 0xa6a <oled_fill+0xe>
     a6a:	00 c0       	rjmp	.+0      	; 0xa6c <oled_fill+0x10>
     a6c:	00 00       	nop
     a6e:	10 92 00 10 	sts	0x1000, r1
     a72:	00 c0       	rjmp	.+0      	; 0xa74 <oled_fill+0x18>
     a74:	00 c0       	rjmp	.+0      	; 0xa76 <oled_fill+0x1a>
     a76:	00 00       	nop
     a78:	9f e7       	ldi	r25, 0x7F	; 127
     a7a:	90 93 00 10 	sts	0x1000, r25
     a7e:	00 c0       	rjmp	.+0      	; 0xa80 <oled_fill+0x24>
     a80:	00 c0       	rjmp	.+0      	; 0xa82 <oled_fill+0x26>
     a82:	00 00       	nop
     a84:	92 e2       	ldi	r25, 0x22	; 34
     a86:	90 93 00 10 	sts	0x1000, r25
     a8a:	00 c0       	rjmp	.+0      	; 0xa8c <oled_fill+0x30>
     a8c:	00 c0       	rjmp	.+0      	; 0xa8e <oled_fill+0x32>
     a8e:	00 00       	nop
     a90:	10 92 00 10 	sts	0x1000, r1
     a94:	00 c0       	rjmp	.+0      	; 0xa96 <oled_fill+0x3a>
     a96:	00 c0       	rjmp	.+0      	; 0xa98 <oled_fill+0x3c>
     a98:	00 00       	nop
     a9a:	97 e0       	ldi	r25, 0x07	; 7
     a9c:	90 93 00 10 	sts	0x1000, r25
     aa0:	60 e0       	ldi	r22, 0x00	; 0
     aa2:	70 e0       	ldi	r23, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	15 c0       	rjmp	.+42     	; 0xad4 <oled_fill+0x78>
     aaa:	a9 01       	movw	r20, r18
     aac:	46 0f       	add	r20, r22
     aae:	57 1f       	adc	r21, r23
     ab0:	e0 91 16 01 	lds	r30, 0x0116
     ab4:	f0 91 17 01 	lds	r31, 0x0117
     ab8:	e4 0f       	add	r30, r20
     aba:	f5 1f       	adc	r31, r21
     abc:	80 83       	st	Z, r24
     abe:	2f 5f       	subi	r18, 0xFF	; 255
     ac0:	3f 4f       	sbci	r19, 0xFF	; 255
     ac2:	20 38       	cpi	r18, 0x80	; 128
     ac4:	31 05       	cpc	r19, r1
     ac6:	89 f7       	brne	.-30     	; 0xaaa <oled_fill+0x4e>
     ac8:	60 58       	subi	r22, 0x80	; 128
     aca:	7f 4f       	sbci	r23, 0xFF	; 255
     acc:	61 15       	cp	r22, r1
     ace:	24 e0       	ldi	r18, 0x04	; 4
     ad0:	72 07       	cpc	r23, r18
     ad2:	19 f0       	breq	.+6      	; 0xada <oled_fill+0x7e>
     ad4:	2a 2f       	mov	r18, r26
     ad6:	39 2f       	mov	r19, r25
     ad8:	e8 cf       	rjmp	.-48     	; 0xaaa <oled_fill+0x4e>
     ada:	08 95       	ret

00000adc <oled_init>:
     adc:	f8 94       	cli
     ade:	00 c0       	rjmp	.+0      	; 0xae0 <oled_init+0x4>
     ae0:	00 c0       	rjmp	.+0      	; 0xae2 <oled_init+0x6>
     ae2:	00 00       	nop
     ae4:	8e ea       	ldi	r24, 0xAE	; 174
     ae6:	80 93 00 10 	sts	0x1000, r24
     aea:	00 c0       	rjmp	.+0      	; 0xaec <oled_init+0x10>
     aec:	00 c0       	rjmp	.+0      	; 0xaee <oled_init+0x12>
     aee:	00 00       	nop
     af0:	81 ea       	ldi	r24, 0xA1	; 161
     af2:	80 93 00 10 	sts	0x1000, r24
     af6:	00 c0       	rjmp	.+0      	; 0xaf8 <oled_init+0x1c>
     af8:	00 c0       	rjmp	.+0      	; 0xafa <oled_init+0x1e>
     afa:	00 00       	nop
     afc:	8a ed       	ldi	r24, 0xDA	; 218
     afe:	80 93 00 10 	sts	0x1000, r24
     b02:	00 c0       	rjmp	.+0      	; 0xb04 <oled_init+0x28>
     b04:	00 c0       	rjmp	.+0      	; 0xb06 <oled_init+0x2a>
     b06:	00 00       	nop
     b08:	82 e1       	ldi	r24, 0x12	; 18
     b0a:	80 93 00 10 	sts	0x1000, r24
     b0e:	00 c0       	rjmp	.+0      	; 0xb10 <oled_init+0x34>
     b10:	00 c0       	rjmp	.+0      	; 0xb12 <oled_init+0x36>
     b12:	00 00       	nop
     b14:	88 ec       	ldi	r24, 0xC8	; 200
     b16:	80 93 00 10 	sts	0x1000, r24
     b1a:	00 c0       	rjmp	.+0      	; 0xb1c <oled_init+0x40>
     b1c:	00 c0       	rjmp	.+0      	; 0xb1e <oled_init+0x42>
     b1e:	00 00       	nop
     b20:	88 ea       	ldi	r24, 0xA8	; 168
     b22:	80 93 00 10 	sts	0x1000, r24
     b26:	00 c0       	rjmp	.+0      	; 0xb28 <oled_init+0x4c>
     b28:	00 c0       	rjmp	.+0      	; 0xb2a <oled_init+0x4e>
     b2a:	00 00       	nop
     b2c:	8f e3       	ldi	r24, 0x3F	; 63
     b2e:	80 93 00 10 	sts	0x1000, r24
     b32:	00 c0       	rjmp	.+0      	; 0xb34 <oled_init+0x58>
     b34:	00 c0       	rjmp	.+0      	; 0xb36 <oled_init+0x5a>
     b36:	00 00       	nop
     b38:	85 ed       	ldi	r24, 0xD5	; 213
     b3a:	80 93 00 10 	sts	0x1000, r24
     b3e:	00 c0       	rjmp	.+0      	; 0xb40 <oled_init+0x64>
     b40:	00 c0       	rjmp	.+0      	; 0xb42 <oled_init+0x66>
     b42:	00 00       	nop
     b44:	80 e8       	ldi	r24, 0x80	; 128
     b46:	80 93 00 10 	sts	0x1000, r24
     b4a:	00 c0       	rjmp	.+0      	; 0xb4c <oled_init+0x70>
     b4c:	00 c0       	rjmp	.+0      	; 0xb4e <oled_init+0x72>
     b4e:	00 00       	nop
     b50:	81 e8       	ldi	r24, 0x81	; 129
     b52:	80 93 00 10 	sts	0x1000, r24
     b56:	00 c0       	rjmp	.+0      	; 0xb58 <oled_init+0x7c>
     b58:	00 c0       	rjmp	.+0      	; 0xb5a <oled_init+0x7e>
     b5a:	00 00       	nop
     b5c:	80 e5       	ldi	r24, 0x50	; 80
     b5e:	80 93 00 10 	sts	0x1000, r24
     b62:	00 c0       	rjmp	.+0      	; 0xb64 <oled_init+0x88>
     b64:	00 c0       	rjmp	.+0      	; 0xb66 <oled_init+0x8a>
     b66:	00 00       	nop
     b68:	89 ed       	ldi	r24, 0xD9	; 217
     b6a:	80 93 00 10 	sts	0x1000, r24
     b6e:	00 c0       	rjmp	.+0      	; 0xb70 <oled_init+0x94>
     b70:	00 c0       	rjmp	.+0      	; 0xb72 <oled_init+0x96>
     b72:	00 00       	nop
     b74:	81 e2       	ldi	r24, 0x21	; 33
     b76:	80 93 00 10 	sts	0x1000, r24
     b7a:	00 c0       	rjmp	.+0      	; 0xb7c <oled_init+0xa0>
     b7c:	00 c0       	rjmp	.+0      	; 0xb7e <oled_init+0xa2>
     b7e:	00 00       	nop
     b80:	80 e2       	ldi	r24, 0x20	; 32
     b82:	80 93 00 10 	sts	0x1000, r24
     b86:	00 c0       	rjmp	.+0      	; 0xb88 <oled_init+0xac>
     b88:	00 c0       	rjmp	.+0      	; 0xb8a <oled_init+0xae>
     b8a:	00 00       	nop
     b8c:	10 92 00 10 	sts	0x1000, r1
     b90:	00 c0       	rjmp	.+0      	; 0xb92 <oled_init+0xb6>
     b92:	00 c0       	rjmp	.+0      	; 0xb94 <oled_init+0xb8>
     b94:	00 00       	nop
     b96:	8b ed       	ldi	r24, 0xDB	; 219
     b98:	80 93 00 10 	sts	0x1000, r24
     b9c:	00 c0       	rjmp	.+0      	; 0xb9e <oled_init+0xc2>
     b9e:	00 c0       	rjmp	.+0      	; 0xba0 <oled_init+0xc4>
     ba0:	00 00       	nop
     ba2:	80 e3       	ldi	r24, 0x30	; 48
     ba4:	80 93 00 10 	sts	0x1000, r24
     ba8:	00 c0       	rjmp	.+0      	; 0xbaa <oled_init+0xce>
     baa:	00 c0       	rjmp	.+0      	; 0xbac <oled_init+0xd0>
     bac:	00 00       	nop
     bae:	8d ea       	ldi	r24, 0xAD	; 173
     bb0:	80 93 00 10 	sts	0x1000, r24
     bb4:	00 c0       	rjmp	.+0      	; 0xbb6 <oled_init+0xda>
     bb6:	00 c0       	rjmp	.+0      	; 0xbb8 <oled_init+0xdc>
     bb8:	00 00       	nop
     bba:	10 92 00 10 	sts	0x1000, r1
     bbe:	00 c0       	rjmp	.+0      	; 0xbc0 <oled_init+0xe4>
     bc0:	00 c0       	rjmp	.+0      	; 0xbc2 <oled_init+0xe6>
     bc2:	00 00       	nop
     bc4:	84 ea       	ldi	r24, 0xA4	; 164
     bc6:	80 93 00 10 	sts	0x1000, r24
     bca:	00 c0       	rjmp	.+0      	; 0xbcc <oled_init+0xf0>
     bcc:	00 c0       	rjmp	.+0      	; 0xbce <oled_init+0xf2>
     bce:	00 00       	nop
     bd0:	86 ea       	ldi	r24, 0xA6	; 166
     bd2:	80 93 00 10 	sts	0x1000, r24
     bd6:	00 c0       	rjmp	.+0      	; 0xbd8 <oled_init+0xfc>
     bd8:	00 c0       	rjmp	.+0      	; 0xbda <oled_init+0xfe>
     bda:	00 00       	nop
     bdc:	8f ea       	ldi	r24, 0xAF	; 175
     bde:	80 93 00 10 	sts	0x1000, r24
     be2:	80 e0       	ldi	r24, 0x00	; 0
     be4:	3b df       	rcall	.-394    	; 0xa5c <oled_fill>
     be6:	a4 de       	rcall	.-696    	; 0x930 <oled_home>
     be8:	9a ce       	rjmp	.-716    	; 0x91e <oled_autorefresh_init>
     bea:	08 95       	ret

00000bec <oled_update>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     bec:	00 c0       	rjmp	.+0      	; 0xbee <oled_update+0x2>
     bee:	00 c0       	rjmp	.+0      	; 0xbf0 <oled_update+0x4>
     bf0:	00 00       	nop
	OCR0 = 39;
}

void write_c(uint8_t cmd){
	_delay_us(1);
	*((uint8_t *)OLED_C_ADR) = cmd;
     bf2:	81 e2       	ldi	r24, 0x21	; 33
     bf4:	80 93 00 10 	sts	0x1000, r24
     bf8:	00 c0       	rjmp	.+0      	; 0xbfa <oled_update+0xe>
     bfa:	00 c0       	rjmp	.+0      	; 0xbfc <oled_update+0x10>
     bfc:	00 00       	nop
     bfe:	10 92 00 10 	sts	0x1000, r1
     c02:	00 c0       	rjmp	.+0      	; 0xc04 <oled_update+0x18>
     c04:	00 c0       	rjmp	.+0      	; 0xc06 <oled_update+0x1a>
     c06:	00 00       	nop
     c08:	8f e7       	ldi	r24, 0x7F	; 127
     c0a:	80 93 00 10 	sts	0x1000, r24
     c0e:	00 c0       	rjmp	.+0      	; 0xc10 <oled_update+0x24>
     c10:	00 c0       	rjmp	.+0      	; 0xc12 <oled_update+0x26>
     c12:	00 00       	nop
     c14:	82 e2       	ldi	r24, 0x22	; 34
     c16:	80 93 00 10 	sts	0x1000, r24
     c1a:	00 c0       	rjmp	.+0      	; 0xc1c <oled_update+0x30>
     c1c:	00 c0       	rjmp	.+0      	; 0xc1e <oled_update+0x32>
     c1e:	00 00       	nop
     c20:	10 92 00 10 	sts	0x1000, r1
     c24:	00 c0       	rjmp	.+0      	; 0xc26 <oled_update+0x3a>
     c26:	00 c0       	rjmp	.+0      	; 0xc28 <oled_update+0x3c>
     c28:	00 00       	nop
     c2a:	87 e0       	ldi	r24, 0x07	; 7
     c2c:	80 93 00 10 	sts	0x1000, r24
     c30:	00 c0       	rjmp	.+0      	; 0xc32 <oled_update+0x46>
     c32:	00 c0       	rjmp	.+0      	; 0xc34 <oled_update+0x48>
     c34:	00 00       	nop
     c36:	10 92 00 10 	sts	0x1000, r1
     c3a:	00 c0       	rjmp	.+0      	; 0xc3c <oled_update+0x50>
     c3c:	00 c0       	rjmp	.+0      	; 0xc3e <oled_update+0x52>
     c3e:	00 00       	nop
     c40:	80 e1       	ldi	r24, 0x10	; 16
     c42:	80 93 00 10 	sts	0x1000, r24
     c46:	40 e0       	ldi	r20, 0x00	; 0
     c48:	50 e0       	ldi	r21, 0x00	; 0
		}
	}
}

//////////////////////////////////////////////////////////////////////////
void oled_update(){
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	60 e0       	ldi	r22, 0x00	; 0
	*((uint8_t *)OLED_C_ADR) = cmd;
}

void write_d(uint8_t data){
	_delay_us(1); // delay may be increased to 1000 to make debug easier, works without any delay
	*((uint8_t *)OLED_D_ADR) = data;
     c4e:	a1 e0       	ldi	r26, 0x01	; 1
     c50:	b0 e1       	ldi	r27, 0x10	; 16
     c52:	18 c0       	rjmp	.+48     	; 0xc84 <oled_update+0x98>
     c54:	9c 01       	movw	r18, r24
     c56:	24 0f       	add	r18, r20
     c58:	35 1f       	adc	r19, r21
	write_c(SET_LOW_COL_ADR  | 0x00);
	write_c(SET_HIGH_COL_ADR | 0x00);
	
	for (int page = 0; page<OLED_PAGES; ++page){
		for (int seg = 0; seg<OLED_WIDTH; ++seg){
			write_d(buffer[page*OLED_WIDTH + seg]);
     c5a:	e0 91 16 01 	lds	r30, 0x0116
     c5e:	f0 91 17 01 	lds	r31, 0x0117
     c62:	e2 0f       	add	r30, r18
     c64:	f3 1f       	adc	r31, r19
     c66:	20 81       	ld	r18, Z
     c68:	00 c0       	rjmp	.+0      	; 0xc6a <oled_update+0x7e>
     c6a:	00 c0       	rjmp	.+0      	; 0xc6c <oled_update+0x80>
     c6c:	00 00       	nop
	*((uint8_t *)OLED_C_ADR) = cmd;
}

void write_d(uint8_t data){
	_delay_us(1); // delay may be increased to 1000 to make debug easier, works without any delay
	*((uint8_t *)OLED_D_ADR) = data;
     c6e:	2c 93       	st	X, r18
	
	write_c(SET_LOW_COL_ADR  | 0x00);
	write_c(SET_HIGH_COL_ADR | 0x00);
	
	for (int page = 0; page<OLED_PAGES; ++page){
		for (int seg = 0; seg<OLED_WIDTH; ++seg){
     c70:	01 96       	adiw	r24, 0x01	; 1
     c72:	80 38       	cpi	r24, 0x80	; 128
     c74:	91 05       	cpc	r25, r1
     c76:	71 f7       	brne	.-36     	; 0xc54 <oled_update+0x68>
     c78:	40 58       	subi	r20, 0x80	; 128
     c7a:	5f 4f       	sbci	r21, 0xFF	; 255
	write_c(SET_PAGE_ADR);write_c(0x00); write_c(OLED_PAGES-1);
	
	write_c(SET_LOW_COL_ADR  | 0x00);
	write_c(SET_HIGH_COL_ADR | 0x00);
	
	for (int page = 0; page<OLED_PAGES; ++page){
     c7c:	41 15       	cp	r20, r1
     c7e:	84 e0       	ldi	r24, 0x04	; 4
     c80:	58 07       	cpc	r21, r24
     c82:	19 f0       	breq	.+6      	; 0xc8a <oled_update+0x9e>
		}
	}
}

//////////////////////////////////////////////////////////////////////////
void oled_update(){
     c84:	87 2f       	mov	r24, r23
     c86:	96 2f       	mov	r25, r22
     c88:	e5 cf       	rjmp	.-54     	; 0xc54 <oled_update+0x68>
     c8a:	08 95       	ret

00000c8c <__vector_17>:
uint8_t xpos = 0;
uint8_t ypos = 0;

FILE oled_out = FDEV_SETUP_STREAM(oled_putchar, NULL, _FDEV_SETUP_WRITE);

ISR(TIMER0_OVF_vect){
     c8c:	1f 92       	push	r1
     c8e:	0f 92       	push	r0
     c90:	0f b6       	in	r0, 0x3f	; 63
     c92:	0f 92       	push	r0
     c94:	11 24       	eor	r1, r1
     c96:	2f 93       	push	r18
     c98:	3f 93       	push	r19
     c9a:	4f 93       	push	r20
     c9c:	5f 93       	push	r21
     c9e:	6f 93       	push	r22
     ca0:	7f 93       	push	r23
     ca2:	8f 93       	push	r24
     ca4:	9f 93       	push	r25
     ca6:	af 93       	push	r26
     ca8:	bf 93       	push	r27
     caa:	ef 93       	push	r30
     cac:	ff 93       	push	r31
	oled_update();
     cae:	9e df       	rcall	.-196    	; 0xbec <oled_update>
}
     cb0:	ff 91       	pop	r31
     cb2:	ef 91       	pop	r30
     cb4:	bf 91       	pop	r27
     cb6:	af 91       	pop	r26
     cb8:	9f 91       	pop	r25
     cba:	8f 91       	pop	r24
     cbc:	7f 91       	pop	r23
     cbe:	6f 91       	pop	r22
     cc0:	5f 91       	pop	r21
     cc2:	4f 91       	pop	r20
     cc4:	3f 91       	pop	r19
     cc6:	2f 91       	pop	r18
     cc8:	0f 90       	pop	r0
     cca:	0f be       	out	0x3f, r0	; 63
     ccc:	0f 90       	pop	r0
     cce:	1f 90       	pop	r1
     cd0:	18 95       	reti

00000cd2 <spi_ss_low>:
#include "spi_driver.h"
#include "avr/io.h"
#include <stdio.h>

void spi_ss_low(){
	PORTB &= ~(1 << PB4);
     cd2:	c4 98       	cbi	0x18, 4	; 24
     cd4:	08 95       	ret

00000cd6 <spi_ss_high>:
}

void spi_ss_high(){
	PORTB |= (1 << PB4);
     cd6:	c4 9a       	sbi	0x18, 4	; 24
     cd8:	08 95       	ret

00000cda <spi_init>:

/// Initialize Atmega162 as SPI master
void spi_init()
{
	// setup IO pins
	DDRB |= (1<<DDB4 | 1<<DDB5 | 1<<DDB7);
     cda:	87 b3       	in	r24, 0x17	; 23
     cdc:	80 6b       	ori	r24, 0xB0	; 176
     cde:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1<<DDB6); // not necessary
     ce0:	be 98       	cbi	0x17, 6	; 23
	
	// setup SPI
	SPCR = (1<<SPE | 1<<MSTR | 1<<SPR0 | 1<<CPOL | 1<<CPHA) & ~(/*1<<CPOL | 1<<CPHA |*/ 1<<DORD);
     ce2:	8d e5       	ldi	r24, 0x5D	; 93
     ce4:	8d b9       	out	0x0d, r24	; 13
     ce6:	08 95       	ret

00000ce8 <spi_transmit>:
}


uint8_t spi_transmit(uint8_t data)
{
	SPDR = data;
     ce8:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
     cea:	77 9b       	sbis	0x0e, 7	; 14
     cec:	fe cf       	rjmp	.-4      	; 0xcea <spi_transmit+0x2>
	
	return SPDR;
     cee:	8f b1       	in	r24, 0x0f	; 15
     cf0:	08 95       	ret

00000cf2 <uart_send>:

}

/// Busy wait transmission of msg
int uart_send(unsigned char msg){
	while (!(UCSR0A & (1 << UDRE0)));
     cf2:	5d 9b       	sbis	0x0b, 5	; 11
     cf4:	fe cf       	rjmp	.-4      	; 0xcf2 <uart_send>
	UDR0 = msg;
     cf6:	8c b9       	out	0x0c, r24	; 12
	return 0;
}
     cf8:	80 e0       	ldi	r24, 0x00	; 0
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	08 95       	ret

00000cfe <uart_recv>:


/// Read data from buffer
unsigned char uart_recv(){
	char returnval = 0;
	if(recvhead != recvtail)
     cfe:	20 91 9a 02 	lds	r18, 0x029A
     d02:	30 91 9b 02 	lds	r19, 0x029B
     d06:	80 91 98 02 	lds	r24, 0x0298
     d0a:	90 91 99 02 	lds	r25, 0x0299
     d0e:	28 17       	cp	r18, r24
     d10:	39 07       	cpc	r19, r25
     d12:	11 f1       	breq	.+68     	; 0xd58 <uart_recv+0x5a>
	{
		returnval = recv_buffer[recvtail++];
     d14:	80 91 98 02 	lds	r24, 0x0298
     d18:	90 91 99 02 	lds	r25, 0x0299
     d1c:	9c 01       	movw	r18, r24
     d1e:	2f 5f       	subi	r18, 0xFF	; 255
     d20:	3f 4f       	sbci	r19, 0xFF	; 255
     d22:	30 93 99 02 	sts	0x0299, r19
     d26:	20 93 98 02 	sts	0x0298, r18
     d2a:	fc 01       	movw	r30, r24
     d2c:	e4 56       	subi	r30, 0x64	; 100
     d2e:	fd 4f       	sbci	r31, 0xFD	; 253
     d30:	80 81       	ld	r24, Z
		recvtail = recvtail%BUFFER_MAX;
     d32:	20 91 98 02 	lds	r18, 0x0298
     d36:	30 91 99 02 	lds	r19, 0x0299
     d3a:	2f 77       	andi	r18, 0x7F	; 127
     d3c:	30 78       	andi	r19, 0x80	; 128
     d3e:	33 23       	and	r19, r19
     d40:	34 f4       	brge	.+12     	; 0xd4e <uart_recv+0x50>
     d42:	21 50       	subi	r18, 0x01	; 1
     d44:	31 09       	sbc	r19, r1
     d46:	20 68       	ori	r18, 0x80	; 128
     d48:	3f 6f       	ori	r19, 0xFF	; 255
     d4a:	2f 5f       	subi	r18, 0xFF	; 255
     d4c:	3f 4f       	sbci	r19, 0xFF	; 255
     d4e:	30 93 99 02 	sts	0x0299, r19
     d52:	20 93 98 02 	sts	0x0298, r18
     d56:	08 95       	ret
}


/// Read data from buffer
unsigned char uart_recv(){
	char returnval = 0;
     d58:	80 e0       	ldi	r24, 0x00	; 0
	{
		returnval = recv_buffer[recvtail++];
		recvtail = recvtail%BUFFER_MAX;
	}
	return returnval;
}
     d5a:	08 95       	ret

00000d5c <__vector_19>:
volatile char recv_buffer[BUFFER_MAX]; /*! Buffer for storing recieved data*/
volatile int recvhead = 0; /*! Head of buffer. Where next recieved byte will be placed. */
volatile int recvtail = 0; /*! Tail of buffer. Where next read will occour. */

/// Interrupt vector for Rx. Place recieved data into buffer.
ISR(USART0_RXC_vect){
     d5c:	1f 92       	push	r1
     d5e:	0f 92       	push	r0
     d60:	0f b6       	in	r0, 0x3f	; 63
     d62:	0f 92       	push	r0
     d64:	11 24       	eor	r1, r1
     d66:	2f 93       	push	r18
     d68:	3f 93       	push	r19
     d6a:	4f 93       	push	r20
     d6c:	8f 93       	push	r24
     d6e:	9f 93       	push	r25
     d70:	ef 93       	push	r30
     d72:	ff 93       	push	r31
	cli();
     d74:	f8 94       	cli
	char input = UDR0;
     d76:	4c b1       	in	r20, 0x0c	; 12
	if((recvhead+1)%BUFFER_MAX != recvtail){		// Sjekk at bufferen ikke er full
     d78:	80 91 9a 02 	lds	r24, 0x029A
     d7c:	90 91 9b 02 	lds	r25, 0x029B
     d80:	20 91 98 02 	lds	r18, 0x0298
     d84:	30 91 99 02 	lds	r19, 0x0299
     d88:	01 96       	adiw	r24, 0x01	; 1
     d8a:	8f 77       	andi	r24, 0x7F	; 127
     d8c:	90 78       	andi	r25, 0x80	; 128
     d8e:	99 23       	and	r25, r25
     d90:	24 f4       	brge	.+8      	; 0xd9a <__vector_19+0x3e>
     d92:	01 97       	sbiw	r24, 0x01	; 1
     d94:	80 68       	ori	r24, 0x80	; 128
     d96:	9f 6f       	ori	r25, 0xFF	; 255
     d98:	01 96       	adiw	r24, 0x01	; 1
     d9a:	82 17       	cp	r24, r18
     d9c:	93 07       	cpc	r25, r19
     d9e:	c1 f0       	breq	.+48     	; 0xdd0 <__vector_19+0x74>
		recv_buffer[recvhead] = input;				// If so, legg inn byte
     da0:	e0 91 9a 02 	lds	r30, 0x029A
     da4:	f0 91 9b 02 	lds	r31, 0x029B
     da8:	e4 56       	subi	r30, 0x64	; 100
     daa:	fd 4f       	sbci	r31, 0xFD	; 253
     dac:	40 83       	st	Z, r20
		recvhead = (recvhead+1)%BUFFER_MAX;
     dae:	80 91 9a 02 	lds	r24, 0x029A
     db2:	90 91 9b 02 	lds	r25, 0x029B
     db6:	01 96       	adiw	r24, 0x01	; 1
     db8:	8f 77       	andi	r24, 0x7F	; 127
     dba:	90 78       	andi	r25, 0x80	; 128
     dbc:	99 23       	and	r25, r25
     dbe:	24 f4       	brge	.+8      	; 0xdc8 <__vector_19+0x6c>
     dc0:	01 97       	sbiw	r24, 0x01	; 1
     dc2:	80 68       	ori	r24, 0x80	; 128
     dc4:	9f 6f       	ori	r25, 0xFF	; 255
     dc6:	01 96       	adiw	r24, 0x01	; 1
     dc8:	90 93 9b 02 	sts	0x029B, r25
     dcc:	80 93 9a 02 	sts	0x029A, r24
	}
	sei();
     dd0:	78 94       	sei
}
     dd2:	ff 91       	pop	r31
     dd4:	ef 91       	pop	r30
     dd6:	9f 91       	pop	r25
     dd8:	8f 91       	pop	r24
     dda:	4f 91       	pop	r20
     ddc:	3f 91       	pop	r19
     dde:	2f 91       	pop	r18
     de0:	0f 90       	pop	r0
     de2:	0f be       	out	0x3f, r0	; 63
     de4:	0f 90       	pop	r0
     de6:	1f 90       	pop	r1
     de8:	18 95       	reti

00000dea <__vector_23>:

///\todo remove interrupt from Tx
ISR(USART0_TXC_vect){
     dea:	1f 92       	push	r1
     dec:	0f 92       	push	r0
     dee:	0f b6       	in	r0, 0x3f	; 63
     df0:	0f 92       	push	r0
     df2:	11 24       	eor	r1, r1
	
}
     df4:	0f 90       	pop	r0
     df6:	0f be       	out	0x3f, r0	; 63
     df8:	0f 90       	pop	r0
     dfa:	1f 90       	pop	r1
     dfc:	18 95       	reti

00000dfe <uart_init>:

///Initialize uart
void uart_init(){
	// set baud rate
	int timerval = (F_CPU/(16*BAUD) - 1);
	UBRR0L = timerval&0xFF;
     dfe:	8f e1       	ldi	r24, 0x1F	; 31
     e00:	89 b9       	out	0x09, r24	; 9
	UBRR0H = (timerval>>8)&0x0F;
     e02:	10 bc       	out	0x20, r1	; 32
	
	// enable interupts on Rx & Tx, and enable Rx & Tx 
	UCSR0B |= (1 << RXCIE0) | (1 << TXCIE0) | (1 << RXEN0) | (1 << TXEN0);
     e04:	8a b1       	in	r24, 0x0a	; 10
     e06:	88 6d       	ori	r24, 0xD8	; 216
     e08:	8a b9       	out	0x0a, r24	; 10
	
	// enable async mode
	UCSR0C &= ~(1 << UMSEL0);
     e0a:	80 b5       	in	r24, 0x20	; 32
     e0c:	8f 7b       	andi	r24, 0xBF	; 191
     e0e:	80 bd       	out	0x20, r24	; 32
	
	// parity disable
	UCSR0C &= ~((1 << UPM00) | (1 << UPM10));
     e10:	80 b5       	in	r24, 0x20	; 32
     e12:	8f 7e       	andi	r24, 0xEF	; 239
     e14:	80 bd       	out	0x20, r24	; 32
	
	// stop bit to 1
	UCSR0C &= ~(1 << USBS0);
     e16:	80 b5       	in	r24, 0x20	; 32
     e18:	87 7f       	andi	r24, 0xF7	; 247
     e1a:	80 bd       	out	0x20, r24	; 32
     e1c:	08 95       	ret

00000e1e <__divmodhi4>:
     e1e:	97 fb       	bst	r25, 7
     e20:	07 2e       	mov	r0, r23
     e22:	16 f4       	brtc	.+4      	; 0xe28 <__divmodhi4+0xa>
     e24:	00 94       	com	r0
     e26:	06 d0       	rcall	.+12     	; 0xe34 <__divmodhi4_neg1>
     e28:	77 fd       	sbrc	r23, 7
     e2a:	08 d0       	rcall	.+16     	; 0xe3c <__divmodhi4_neg2>
     e2c:	0b d0       	rcall	.+22     	; 0xe44 <__udivmodhi4>
     e2e:	07 fc       	sbrc	r0, 7
     e30:	05 d0       	rcall	.+10     	; 0xe3c <__divmodhi4_neg2>
     e32:	3e f4       	brtc	.+14     	; 0xe42 <__divmodhi4_exit>

00000e34 <__divmodhi4_neg1>:
     e34:	90 95       	com	r25
     e36:	81 95       	neg	r24
     e38:	9f 4f       	sbci	r25, 0xFF	; 255
     e3a:	08 95       	ret

00000e3c <__divmodhi4_neg2>:
     e3c:	70 95       	com	r23
     e3e:	61 95       	neg	r22
     e40:	7f 4f       	sbci	r23, 0xFF	; 255

00000e42 <__divmodhi4_exit>:
     e42:	08 95       	ret

00000e44 <__udivmodhi4>:
     e44:	aa 1b       	sub	r26, r26
     e46:	bb 1b       	sub	r27, r27
     e48:	51 e1       	ldi	r21, 0x11	; 17
     e4a:	07 c0       	rjmp	.+14     	; 0xe5a <__udivmodhi4_ep>

00000e4c <__udivmodhi4_loop>:
     e4c:	aa 1f       	adc	r26, r26
     e4e:	bb 1f       	adc	r27, r27
     e50:	a6 17       	cp	r26, r22
     e52:	b7 07       	cpc	r27, r23
     e54:	10 f0       	brcs	.+4      	; 0xe5a <__udivmodhi4_ep>
     e56:	a6 1b       	sub	r26, r22
     e58:	b7 0b       	sbc	r27, r23

00000e5a <__udivmodhi4_ep>:
     e5a:	88 1f       	adc	r24, r24
     e5c:	99 1f       	adc	r25, r25
     e5e:	5a 95       	dec	r21
     e60:	a9 f7       	brne	.-22     	; 0xe4c <__udivmodhi4_loop>
     e62:	80 95       	com	r24
     e64:	90 95       	com	r25
     e66:	bc 01       	movw	r22, r24
     e68:	cd 01       	movw	r24, r26
     e6a:	08 95       	ret

00000e6c <malloc>:
     e6c:	cf 93       	push	r28
     e6e:	df 93       	push	r29
     e70:	82 30       	cpi	r24, 0x02	; 2
     e72:	91 05       	cpc	r25, r1
     e74:	10 f4       	brcc	.+4      	; 0xe7a <malloc+0xe>
     e76:	82 e0       	ldi	r24, 0x02	; 2
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	e0 91 1e 03 	lds	r30, 0x031E
     e7e:	f0 91 1f 03 	lds	r31, 0x031F
     e82:	20 e0       	ldi	r18, 0x00	; 0
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	a0 e0       	ldi	r26, 0x00	; 0
     e88:	b0 e0       	ldi	r27, 0x00	; 0
     e8a:	30 97       	sbiw	r30, 0x00	; 0
     e8c:	39 f1       	breq	.+78     	; 0xedc <malloc+0x70>
     e8e:	40 81       	ld	r20, Z
     e90:	51 81       	ldd	r21, Z+1	; 0x01
     e92:	48 17       	cp	r20, r24
     e94:	59 07       	cpc	r21, r25
     e96:	b8 f0       	brcs	.+46     	; 0xec6 <malloc+0x5a>
     e98:	48 17       	cp	r20, r24
     e9a:	59 07       	cpc	r21, r25
     e9c:	71 f4       	brne	.+28     	; 0xeba <malloc+0x4e>
     e9e:	82 81       	ldd	r24, Z+2	; 0x02
     ea0:	93 81       	ldd	r25, Z+3	; 0x03
     ea2:	10 97       	sbiw	r26, 0x00	; 0
     ea4:	29 f0       	breq	.+10     	; 0xeb0 <malloc+0x44>
     ea6:	13 96       	adiw	r26, 0x03	; 3
     ea8:	9c 93       	st	X, r25
     eaa:	8e 93       	st	-X, r24
     eac:	12 97       	sbiw	r26, 0x02	; 2
     eae:	2c c0       	rjmp	.+88     	; 0xf08 <malloc+0x9c>
     eb0:	90 93 1f 03 	sts	0x031F, r25
     eb4:	80 93 1e 03 	sts	0x031E, r24
     eb8:	27 c0       	rjmp	.+78     	; 0xf08 <malloc+0x9c>
     eba:	21 15       	cp	r18, r1
     ebc:	31 05       	cpc	r19, r1
     ebe:	31 f0       	breq	.+12     	; 0xecc <malloc+0x60>
     ec0:	42 17       	cp	r20, r18
     ec2:	53 07       	cpc	r21, r19
     ec4:	18 f0       	brcs	.+6      	; 0xecc <malloc+0x60>
     ec6:	a9 01       	movw	r20, r18
     ec8:	db 01       	movw	r26, r22
     eca:	01 c0       	rjmp	.+2      	; 0xece <malloc+0x62>
     ecc:	ef 01       	movw	r28, r30
     ece:	9a 01       	movw	r18, r20
     ed0:	bd 01       	movw	r22, r26
     ed2:	df 01       	movw	r26, r30
     ed4:	02 80       	ldd	r0, Z+2	; 0x02
     ed6:	f3 81       	ldd	r31, Z+3	; 0x03
     ed8:	e0 2d       	mov	r30, r0
     eda:	d7 cf       	rjmp	.-82     	; 0xe8a <malloc+0x1e>
     edc:	21 15       	cp	r18, r1
     ede:	31 05       	cpc	r19, r1
     ee0:	f9 f0       	breq	.+62     	; 0xf20 <malloc+0xb4>
     ee2:	28 1b       	sub	r18, r24
     ee4:	39 0b       	sbc	r19, r25
     ee6:	24 30       	cpi	r18, 0x04	; 4
     ee8:	31 05       	cpc	r19, r1
     eea:	80 f4       	brcc	.+32     	; 0xf0c <malloc+0xa0>
     eec:	8a 81       	ldd	r24, Y+2	; 0x02
     eee:	9b 81       	ldd	r25, Y+3	; 0x03
     ef0:	61 15       	cp	r22, r1
     ef2:	71 05       	cpc	r23, r1
     ef4:	21 f0       	breq	.+8      	; 0xefe <malloc+0x92>
     ef6:	fb 01       	movw	r30, r22
     ef8:	93 83       	std	Z+3, r25	; 0x03
     efa:	82 83       	std	Z+2, r24	; 0x02
     efc:	04 c0       	rjmp	.+8      	; 0xf06 <malloc+0x9a>
     efe:	90 93 1f 03 	sts	0x031F, r25
     f02:	80 93 1e 03 	sts	0x031E, r24
     f06:	fe 01       	movw	r30, r28
     f08:	32 96       	adiw	r30, 0x02	; 2
     f0a:	44 c0       	rjmp	.+136    	; 0xf94 <malloc+0x128>
     f0c:	fe 01       	movw	r30, r28
     f0e:	e2 0f       	add	r30, r18
     f10:	f3 1f       	adc	r31, r19
     f12:	81 93       	st	Z+, r24
     f14:	91 93       	st	Z+, r25
     f16:	22 50       	subi	r18, 0x02	; 2
     f18:	31 09       	sbc	r19, r1
     f1a:	39 83       	std	Y+1, r19	; 0x01
     f1c:	28 83       	st	Y, r18
     f1e:	3a c0       	rjmp	.+116    	; 0xf94 <malloc+0x128>
     f20:	20 91 1c 03 	lds	r18, 0x031C
     f24:	30 91 1d 03 	lds	r19, 0x031D
     f28:	23 2b       	or	r18, r19
     f2a:	41 f4       	brne	.+16     	; 0xf3c <malloc+0xd0>
     f2c:	20 91 02 01 	lds	r18, 0x0102
     f30:	30 91 03 01 	lds	r19, 0x0103
     f34:	30 93 1d 03 	sts	0x031D, r19
     f38:	20 93 1c 03 	sts	0x031C, r18
     f3c:	20 91 00 01 	lds	r18, 0x0100
     f40:	30 91 01 01 	lds	r19, 0x0101
     f44:	21 15       	cp	r18, r1
     f46:	31 05       	cpc	r19, r1
     f48:	41 f4       	brne	.+16     	; 0xf5a <malloc+0xee>
     f4a:	2d b7       	in	r18, 0x3d	; 61
     f4c:	3e b7       	in	r19, 0x3e	; 62
     f4e:	40 91 04 01 	lds	r20, 0x0104
     f52:	50 91 05 01 	lds	r21, 0x0105
     f56:	24 1b       	sub	r18, r20
     f58:	35 0b       	sbc	r19, r21
     f5a:	e0 91 1c 03 	lds	r30, 0x031C
     f5e:	f0 91 1d 03 	lds	r31, 0x031D
     f62:	e2 17       	cp	r30, r18
     f64:	f3 07       	cpc	r31, r19
     f66:	a0 f4       	brcc	.+40     	; 0xf90 <malloc+0x124>
     f68:	2e 1b       	sub	r18, r30
     f6a:	3f 0b       	sbc	r19, r31
     f6c:	28 17       	cp	r18, r24
     f6e:	39 07       	cpc	r19, r25
     f70:	78 f0       	brcs	.+30     	; 0xf90 <malloc+0x124>
     f72:	ac 01       	movw	r20, r24
     f74:	4e 5f       	subi	r20, 0xFE	; 254
     f76:	5f 4f       	sbci	r21, 0xFF	; 255
     f78:	24 17       	cp	r18, r20
     f7a:	35 07       	cpc	r19, r21
     f7c:	48 f0       	brcs	.+18     	; 0xf90 <malloc+0x124>
     f7e:	4e 0f       	add	r20, r30
     f80:	5f 1f       	adc	r21, r31
     f82:	50 93 1d 03 	sts	0x031D, r21
     f86:	40 93 1c 03 	sts	0x031C, r20
     f8a:	81 93       	st	Z+, r24
     f8c:	91 93       	st	Z+, r25
     f8e:	02 c0       	rjmp	.+4      	; 0xf94 <malloc+0x128>
     f90:	e0 e0       	ldi	r30, 0x00	; 0
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	cf 01       	movw	r24, r30
     f96:	df 91       	pop	r29
     f98:	cf 91       	pop	r28
     f9a:	08 95       	ret

00000f9c <free>:
     f9c:	cf 93       	push	r28
     f9e:	df 93       	push	r29
     fa0:	00 97       	sbiw	r24, 0x00	; 0
     fa2:	09 f4       	brne	.+2      	; 0xfa6 <free+0xa>
     fa4:	87 c0       	rjmp	.+270    	; 0x10b4 <free+0x118>
     fa6:	fc 01       	movw	r30, r24
     fa8:	32 97       	sbiw	r30, 0x02	; 2
     faa:	13 82       	std	Z+3, r1	; 0x03
     fac:	12 82       	std	Z+2, r1	; 0x02
     fae:	c0 91 1e 03 	lds	r28, 0x031E
     fb2:	d0 91 1f 03 	lds	r29, 0x031F
     fb6:	20 97       	sbiw	r28, 0x00	; 0
     fb8:	81 f4       	brne	.+32     	; 0xfda <free+0x3e>
     fba:	20 81       	ld	r18, Z
     fbc:	31 81       	ldd	r19, Z+1	; 0x01
     fbe:	28 0f       	add	r18, r24
     fc0:	39 1f       	adc	r19, r25
     fc2:	80 91 1c 03 	lds	r24, 0x031C
     fc6:	90 91 1d 03 	lds	r25, 0x031D
     fca:	82 17       	cp	r24, r18
     fcc:	93 07       	cpc	r25, r19
     fce:	79 f5       	brne	.+94     	; 0x102e <free+0x92>
     fd0:	f0 93 1d 03 	sts	0x031D, r31
     fd4:	e0 93 1c 03 	sts	0x031C, r30
     fd8:	6d c0       	rjmp	.+218    	; 0x10b4 <free+0x118>
     fda:	de 01       	movw	r26, r28
     fdc:	20 e0       	ldi	r18, 0x00	; 0
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	ae 17       	cp	r26, r30
     fe2:	bf 07       	cpc	r27, r31
     fe4:	50 f4       	brcc	.+20     	; 0xffa <free+0x5e>
     fe6:	12 96       	adiw	r26, 0x02	; 2
     fe8:	4d 91       	ld	r20, X+
     fea:	5c 91       	ld	r21, X
     fec:	13 97       	sbiw	r26, 0x03	; 3
     fee:	9d 01       	movw	r18, r26
     ff0:	41 15       	cp	r20, r1
     ff2:	51 05       	cpc	r21, r1
     ff4:	09 f1       	breq	.+66     	; 0x1038 <free+0x9c>
     ff6:	da 01       	movw	r26, r20
     ff8:	f3 cf       	rjmp	.-26     	; 0xfe0 <free+0x44>
     ffa:	b3 83       	std	Z+3, r27	; 0x03
     ffc:	a2 83       	std	Z+2, r26	; 0x02
     ffe:	40 81       	ld	r20, Z
    1000:	51 81       	ldd	r21, Z+1	; 0x01
    1002:	84 0f       	add	r24, r20
    1004:	95 1f       	adc	r25, r21
    1006:	8a 17       	cp	r24, r26
    1008:	9b 07       	cpc	r25, r27
    100a:	71 f4       	brne	.+28     	; 0x1028 <free+0x8c>
    100c:	8d 91       	ld	r24, X+
    100e:	9c 91       	ld	r25, X
    1010:	11 97       	sbiw	r26, 0x01	; 1
    1012:	84 0f       	add	r24, r20
    1014:	95 1f       	adc	r25, r21
    1016:	02 96       	adiw	r24, 0x02	; 2
    1018:	91 83       	std	Z+1, r25	; 0x01
    101a:	80 83       	st	Z, r24
    101c:	12 96       	adiw	r26, 0x02	; 2
    101e:	8d 91       	ld	r24, X+
    1020:	9c 91       	ld	r25, X
    1022:	13 97       	sbiw	r26, 0x03	; 3
    1024:	93 83       	std	Z+3, r25	; 0x03
    1026:	82 83       	std	Z+2, r24	; 0x02
    1028:	21 15       	cp	r18, r1
    102a:	31 05       	cpc	r19, r1
    102c:	29 f4       	brne	.+10     	; 0x1038 <free+0x9c>
    102e:	f0 93 1f 03 	sts	0x031F, r31
    1032:	e0 93 1e 03 	sts	0x031E, r30
    1036:	3e c0       	rjmp	.+124    	; 0x10b4 <free+0x118>
    1038:	d9 01       	movw	r26, r18
    103a:	13 96       	adiw	r26, 0x03	; 3
    103c:	fc 93       	st	X, r31
    103e:	ee 93       	st	-X, r30
    1040:	12 97       	sbiw	r26, 0x02	; 2
    1042:	4d 91       	ld	r20, X+
    1044:	5d 91       	ld	r21, X+
    1046:	a4 0f       	add	r26, r20
    1048:	b5 1f       	adc	r27, r21
    104a:	ea 17       	cp	r30, r26
    104c:	fb 07       	cpc	r31, r27
    104e:	79 f4       	brne	.+30     	; 0x106e <free+0xd2>
    1050:	80 81       	ld	r24, Z
    1052:	91 81       	ldd	r25, Z+1	; 0x01
    1054:	84 0f       	add	r24, r20
    1056:	95 1f       	adc	r25, r21
    1058:	02 96       	adiw	r24, 0x02	; 2
    105a:	d9 01       	movw	r26, r18
    105c:	11 96       	adiw	r26, 0x01	; 1
    105e:	9c 93       	st	X, r25
    1060:	8e 93       	st	-X, r24
    1062:	82 81       	ldd	r24, Z+2	; 0x02
    1064:	93 81       	ldd	r25, Z+3	; 0x03
    1066:	13 96       	adiw	r26, 0x03	; 3
    1068:	9c 93       	st	X, r25
    106a:	8e 93       	st	-X, r24
    106c:	12 97       	sbiw	r26, 0x02	; 2
    106e:	e0 e0       	ldi	r30, 0x00	; 0
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	8a 81       	ldd	r24, Y+2	; 0x02
    1074:	9b 81       	ldd	r25, Y+3	; 0x03
    1076:	00 97       	sbiw	r24, 0x00	; 0
    1078:	19 f0       	breq	.+6      	; 0x1080 <free+0xe4>
    107a:	fe 01       	movw	r30, r28
    107c:	ec 01       	movw	r28, r24
    107e:	f9 cf       	rjmp	.-14     	; 0x1072 <free+0xd6>
    1080:	ce 01       	movw	r24, r28
    1082:	02 96       	adiw	r24, 0x02	; 2
    1084:	28 81       	ld	r18, Y
    1086:	39 81       	ldd	r19, Y+1	; 0x01
    1088:	82 0f       	add	r24, r18
    108a:	93 1f       	adc	r25, r19
    108c:	20 91 1c 03 	lds	r18, 0x031C
    1090:	30 91 1d 03 	lds	r19, 0x031D
    1094:	28 17       	cp	r18, r24
    1096:	39 07       	cpc	r19, r25
    1098:	69 f4       	brne	.+26     	; 0x10b4 <free+0x118>
    109a:	30 97       	sbiw	r30, 0x00	; 0
    109c:	29 f4       	brne	.+10     	; 0x10a8 <free+0x10c>
    109e:	10 92 1f 03 	sts	0x031F, r1
    10a2:	10 92 1e 03 	sts	0x031E, r1
    10a6:	02 c0       	rjmp	.+4      	; 0x10ac <free+0x110>
    10a8:	13 82       	std	Z+3, r1	; 0x03
    10aa:	12 82       	std	Z+2, r1	; 0x02
    10ac:	d0 93 1d 03 	sts	0x031D, r29
    10b0:	c0 93 1c 03 	sts	0x031C, r28
    10b4:	df 91       	pop	r29
    10b6:	cf 91       	pop	r28
    10b8:	08 95       	ret

000010ba <strncpy>:
    10ba:	fb 01       	movw	r30, r22
    10bc:	dc 01       	movw	r26, r24
    10be:	41 50       	subi	r20, 0x01	; 1
    10c0:	50 40       	sbci	r21, 0x00	; 0
    10c2:	48 f0       	brcs	.+18     	; 0x10d6 <strncpy+0x1c>
    10c4:	01 90       	ld	r0, Z+
    10c6:	0d 92       	st	X+, r0
    10c8:	00 20       	and	r0, r0
    10ca:	c9 f7       	brne	.-14     	; 0x10be <strncpy+0x4>
    10cc:	01 c0       	rjmp	.+2      	; 0x10d0 <strncpy+0x16>
    10ce:	1d 92       	st	X+, r1
    10d0:	41 50       	subi	r20, 0x01	; 1
    10d2:	50 40       	sbci	r21, 0x00	; 0
    10d4:	e0 f7       	brcc	.-8      	; 0x10ce <strncpy+0x14>
    10d6:	08 95       	ret

000010d8 <fprintf>:
    10d8:	a0 e0       	ldi	r26, 0x00	; 0
    10da:	b0 e0       	ldi	r27, 0x00	; 0
    10dc:	e1 e7       	ldi	r30, 0x71	; 113
    10de:	f8 e0       	ldi	r31, 0x08	; 8
    10e0:	b5 c2       	rjmp	.+1386   	; 0x164c <__prologue_saves__+0x20>
    10e2:	ae 01       	movw	r20, r28
    10e4:	47 5f       	subi	r20, 0xF7	; 247
    10e6:	5f 4f       	sbci	r21, 0xFF	; 255
    10e8:	6f 81       	ldd	r22, Y+7	; 0x07
    10ea:	78 85       	ldd	r23, Y+8	; 0x08
    10ec:	8d 81       	ldd	r24, Y+5	; 0x05
    10ee:	9e 81       	ldd	r25, Y+6	; 0x06
    10f0:	66 d0       	rcall	.+204    	; 0x11be <vfprintf>
    10f2:	e2 e0       	ldi	r30, 0x02	; 2
    10f4:	c7 c2       	rjmp	.+1422   	; 0x1684 <__epilogue_restores__+0x20>

000010f6 <fputc>:
    10f6:	0f 93       	push	r16
    10f8:	1f 93       	push	r17
    10fa:	cf 93       	push	r28
    10fc:	df 93       	push	r29
    10fe:	18 2f       	mov	r17, r24
    1100:	09 2f       	mov	r16, r25
    1102:	eb 01       	movw	r28, r22
    1104:	8b 81       	ldd	r24, Y+3	; 0x03
    1106:	81 fd       	sbrc	r24, 1
    1108:	03 c0       	rjmp	.+6      	; 0x1110 <fputc+0x1a>
    110a:	8f ef       	ldi	r24, 0xFF	; 255
    110c:	9f ef       	ldi	r25, 0xFF	; 255
    110e:	20 c0       	rjmp	.+64     	; 0x1150 <fputc+0x5a>
    1110:	82 ff       	sbrs	r24, 2
    1112:	10 c0       	rjmp	.+32     	; 0x1134 <fputc+0x3e>
    1114:	4e 81       	ldd	r20, Y+6	; 0x06
    1116:	5f 81       	ldd	r21, Y+7	; 0x07
    1118:	2c 81       	ldd	r18, Y+4	; 0x04
    111a:	3d 81       	ldd	r19, Y+5	; 0x05
    111c:	42 17       	cp	r20, r18
    111e:	53 07       	cpc	r21, r19
    1120:	7c f4       	brge	.+30     	; 0x1140 <fputc+0x4a>
    1122:	e8 81       	ld	r30, Y
    1124:	f9 81       	ldd	r31, Y+1	; 0x01
    1126:	9f 01       	movw	r18, r30
    1128:	2f 5f       	subi	r18, 0xFF	; 255
    112a:	3f 4f       	sbci	r19, 0xFF	; 255
    112c:	39 83       	std	Y+1, r19	; 0x01
    112e:	28 83       	st	Y, r18
    1130:	10 83       	st	Z, r17
    1132:	06 c0       	rjmp	.+12     	; 0x1140 <fputc+0x4a>
    1134:	e8 85       	ldd	r30, Y+8	; 0x08
    1136:	f9 85       	ldd	r31, Y+9	; 0x09
    1138:	81 2f       	mov	r24, r17
    113a:	09 95       	icall
    113c:	89 2b       	or	r24, r25
    113e:	29 f7       	brne	.-54     	; 0x110a <fputc+0x14>
    1140:	2e 81       	ldd	r18, Y+6	; 0x06
    1142:	3f 81       	ldd	r19, Y+7	; 0x07
    1144:	2f 5f       	subi	r18, 0xFF	; 255
    1146:	3f 4f       	sbci	r19, 0xFF	; 255
    1148:	3f 83       	std	Y+7, r19	; 0x07
    114a:	2e 83       	std	Y+6, r18	; 0x06
    114c:	81 2f       	mov	r24, r17
    114e:	90 2f       	mov	r25, r16
    1150:	df 91       	pop	r29
    1152:	cf 91       	pop	r28
    1154:	1f 91       	pop	r17
    1156:	0f 91       	pop	r16
    1158:	08 95       	ret

0000115a <fwrite>:
    115a:	a0 e0       	ldi	r26, 0x00	; 0
    115c:	b0 e0       	ldi	r27, 0x00	; 0
    115e:	e2 eb       	ldi	r30, 0xB2	; 178
    1160:	f8 e0       	ldi	r31, 0x08	; 8
    1162:	6a c2       	rjmp	.+1236   	; 0x1638 <__prologue_saves__+0xc>
    1164:	6b 01       	movw	r12, r22
    1166:	4a 01       	movw	r8, r20
    1168:	79 01       	movw	r14, r18
    116a:	d9 01       	movw	r26, r18
    116c:	13 96       	adiw	r26, 0x03	; 3
    116e:	2c 91       	ld	r18, X
    1170:	21 ff       	sbrs	r18, 1
    1172:	1d c0       	rjmp	.+58     	; 0x11ae <fwrite+0x54>
    1174:	c0 e0       	ldi	r28, 0x00	; 0
    1176:	d0 e0       	ldi	r29, 0x00	; 0
    1178:	c8 15       	cp	r28, r8
    117a:	d9 05       	cpc	r29, r9
    117c:	d9 f0       	breq	.+54     	; 0x11b4 <fwrite+0x5a>
    117e:	8c 01       	movw	r16, r24
    1180:	5c 01       	movw	r10, r24
    1182:	ac 0c       	add	r10, r12
    1184:	bd 1c       	adc	r11, r13
    1186:	c8 01       	movw	r24, r16
    1188:	0a 15       	cp	r16, r10
    118a:	1b 05       	cpc	r17, r11
    118c:	71 f0       	breq	.+28     	; 0x11aa <fwrite+0x50>
    118e:	0f 5f       	subi	r16, 0xFF	; 255
    1190:	1f 4f       	sbci	r17, 0xFF	; 255
    1192:	d7 01       	movw	r26, r14
    1194:	18 96       	adiw	r26, 0x08	; 8
    1196:	ed 91       	ld	r30, X+
    1198:	fc 91       	ld	r31, X
    119a:	19 97       	sbiw	r26, 0x09	; 9
    119c:	b7 01       	movw	r22, r14
    119e:	dc 01       	movw	r26, r24
    11a0:	8c 91       	ld	r24, X
    11a2:	09 95       	icall
    11a4:	89 2b       	or	r24, r25
    11a6:	79 f3       	breq	.-34     	; 0x1186 <fwrite+0x2c>
    11a8:	05 c0       	rjmp	.+10     	; 0x11b4 <fwrite+0x5a>
    11aa:	21 96       	adiw	r28, 0x01	; 1
    11ac:	e5 cf       	rjmp	.-54     	; 0x1178 <fwrite+0x1e>
    11ae:	80 e0       	ldi	r24, 0x00	; 0
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	01 c0       	rjmp	.+2      	; 0x11b6 <fwrite+0x5c>
    11b4:	ce 01       	movw	r24, r28
    11b6:	cd b7       	in	r28, 0x3d	; 61
    11b8:	de b7       	in	r29, 0x3e	; 62
    11ba:	ec e0       	ldi	r30, 0x0C	; 12
    11bc:	59 c2       	rjmp	.+1202   	; 0x1670 <__epilogue_restores__+0xc>

000011be <vfprintf>:
    11be:	ac e0       	ldi	r26, 0x0C	; 12
    11c0:	b0 e0       	ldi	r27, 0x00	; 0
    11c2:	e4 ee       	ldi	r30, 0xE4	; 228
    11c4:	f8 e0       	ldi	r31, 0x08	; 8
    11c6:	32 c2       	rjmp	.+1124   	; 0x162c <__prologue_saves__>
    11c8:	7c 01       	movw	r14, r24
    11ca:	6b 01       	movw	r12, r22
    11cc:	8a 01       	movw	r16, r20
    11ce:	fc 01       	movw	r30, r24
    11d0:	17 82       	std	Z+7, r1	; 0x07
    11d2:	16 82       	std	Z+6, r1	; 0x06
    11d4:	83 81       	ldd	r24, Z+3	; 0x03
    11d6:	81 ff       	sbrs	r24, 1
    11d8:	b0 c1       	rjmp	.+864    	; 0x153a <vfprintf+0x37c>
    11da:	ce 01       	movw	r24, r28
    11dc:	01 96       	adiw	r24, 0x01	; 1
    11de:	4c 01       	movw	r8, r24
    11e0:	f7 01       	movw	r30, r14
    11e2:	93 81       	ldd	r25, Z+3	; 0x03
    11e4:	f6 01       	movw	r30, r12
    11e6:	93 fd       	sbrc	r25, 3
    11e8:	85 91       	lpm	r24, Z+
    11ea:	93 ff       	sbrs	r25, 3
    11ec:	81 91       	ld	r24, Z+
    11ee:	6f 01       	movw	r12, r30
    11f0:	88 23       	and	r24, r24
    11f2:	09 f4       	brne	.+2      	; 0x11f6 <vfprintf+0x38>
    11f4:	9e c1       	rjmp	.+828    	; 0x1532 <vfprintf+0x374>
    11f6:	85 32       	cpi	r24, 0x25	; 37
    11f8:	39 f4       	brne	.+14     	; 0x1208 <vfprintf+0x4a>
    11fa:	93 fd       	sbrc	r25, 3
    11fc:	85 91       	lpm	r24, Z+
    11fe:	93 ff       	sbrs	r25, 3
    1200:	81 91       	ld	r24, Z+
    1202:	6f 01       	movw	r12, r30
    1204:	85 32       	cpi	r24, 0x25	; 37
    1206:	21 f4       	brne	.+8      	; 0x1210 <vfprintf+0x52>
    1208:	b7 01       	movw	r22, r14
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	74 df       	rcall	.-280    	; 0x10f6 <fputc>
    120e:	e8 cf       	rjmp	.-48     	; 0x11e0 <vfprintf+0x22>
    1210:	51 2c       	mov	r5, r1
    1212:	31 2c       	mov	r3, r1
    1214:	20 e0       	ldi	r18, 0x00	; 0
    1216:	20 32       	cpi	r18, 0x20	; 32
    1218:	a0 f4       	brcc	.+40     	; 0x1242 <vfprintf+0x84>
    121a:	8b 32       	cpi	r24, 0x2B	; 43
    121c:	69 f0       	breq	.+26     	; 0x1238 <vfprintf+0x7a>
    121e:	30 f4       	brcc	.+12     	; 0x122c <vfprintf+0x6e>
    1220:	80 32       	cpi	r24, 0x20	; 32
    1222:	59 f0       	breq	.+22     	; 0x123a <vfprintf+0x7c>
    1224:	83 32       	cpi	r24, 0x23	; 35
    1226:	69 f4       	brne	.+26     	; 0x1242 <vfprintf+0x84>
    1228:	20 61       	ori	r18, 0x10	; 16
    122a:	2c c0       	rjmp	.+88     	; 0x1284 <vfprintf+0xc6>
    122c:	8d 32       	cpi	r24, 0x2D	; 45
    122e:	39 f0       	breq	.+14     	; 0x123e <vfprintf+0x80>
    1230:	80 33       	cpi	r24, 0x30	; 48
    1232:	39 f4       	brne	.+14     	; 0x1242 <vfprintf+0x84>
    1234:	21 60       	ori	r18, 0x01	; 1
    1236:	26 c0       	rjmp	.+76     	; 0x1284 <vfprintf+0xc6>
    1238:	22 60       	ori	r18, 0x02	; 2
    123a:	24 60       	ori	r18, 0x04	; 4
    123c:	23 c0       	rjmp	.+70     	; 0x1284 <vfprintf+0xc6>
    123e:	28 60       	ori	r18, 0x08	; 8
    1240:	21 c0       	rjmp	.+66     	; 0x1284 <vfprintf+0xc6>
    1242:	27 fd       	sbrc	r18, 7
    1244:	27 c0       	rjmp	.+78     	; 0x1294 <vfprintf+0xd6>
    1246:	30 ed       	ldi	r19, 0xD0	; 208
    1248:	38 0f       	add	r19, r24
    124a:	3a 30       	cpi	r19, 0x0A	; 10
    124c:	78 f4       	brcc	.+30     	; 0x126c <vfprintf+0xae>
    124e:	26 ff       	sbrs	r18, 6
    1250:	06 c0       	rjmp	.+12     	; 0x125e <vfprintf+0xa0>
    1252:	fa e0       	ldi	r31, 0x0A	; 10
    1254:	5f 9e       	mul	r5, r31
    1256:	30 0d       	add	r19, r0
    1258:	11 24       	eor	r1, r1
    125a:	53 2e       	mov	r5, r19
    125c:	13 c0       	rjmp	.+38     	; 0x1284 <vfprintf+0xc6>
    125e:	8a e0       	ldi	r24, 0x0A	; 10
    1260:	38 9e       	mul	r3, r24
    1262:	30 0d       	add	r19, r0
    1264:	11 24       	eor	r1, r1
    1266:	33 2e       	mov	r3, r19
    1268:	20 62       	ori	r18, 0x20	; 32
    126a:	0c c0       	rjmp	.+24     	; 0x1284 <vfprintf+0xc6>
    126c:	8e 32       	cpi	r24, 0x2E	; 46
    126e:	21 f4       	brne	.+8      	; 0x1278 <vfprintf+0xba>
    1270:	26 fd       	sbrc	r18, 6
    1272:	5f c1       	rjmp	.+702    	; 0x1532 <vfprintf+0x374>
    1274:	20 64       	ori	r18, 0x40	; 64
    1276:	06 c0       	rjmp	.+12     	; 0x1284 <vfprintf+0xc6>
    1278:	8c 36       	cpi	r24, 0x6C	; 108
    127a:	11 f4       	brne	.+4      	; 0x1280 <vfprintf+0xc2>
    127c:	20 68       	ori	r18, 0x80	; 128
    127e:	02 c0       	rjmp	.+4      	; 0x1284 <vfprintf+0xc6>
    1280:	88 36       	cpi	r24, 0x68	; 104
    1282:	41 f4       	brne	.+16     	; 0x1294 <vfprintf+0xd6>
    1284:	f6 01       	movw	r30, r12
    1286:	93 fd       	sbrc	r25, 3
    1288:	85 91       	lpm	r24, Z+
    128a:	93 ff       	sbrs	r25, 3
    128c:	81 91       	ld	r24, Z+
    128e:	6f 01       	movw	r12, r30
    1290:	81 11       	cpse	r24, r1
    1292:	c1 cf       	rjmp	.-126    	; 0x1216 <vfprintf+0x58>
    1294:	98 2f       	mov	r25, r24
    1296:	9f 7d       	andi	r25, 0xDF	; 223
    1298:	95 54       	subi	r25, 0x45	; 69
    129a:	93 30       	cpi	r25, 0x03	; 3
    129c:	28 f4       	brcc	.+10     	; 0x12a8 <vfprintf+0xea>
    129e:	0c 5f       	subi	r16, 0xFC	; 252
    12a0:	1f 4f       	sbci	r17, 0xFF	; 255
    12a2:	ff e3       	ldi	r31, 0x3F	; 63
    12a4:	f9 83       	std	Y+1, r31	; 0x01
    12a6:	0d c0       	rjmp	.+26     	; 0x12c2 <vfprintf+0x104>
    12a8:	83 36       	cpi	r24, 0x63	; 99
    12aa:	31 f0       	breq	.+12     	; 0x12b8 <vfprintf+0xfa>
    12ac:	83 37       	cpi	r24, 0x73	; 115
    12ae:	71 f0       	breq	.+28     	; 0x12cc <vfprintf+0x10e>
    12b0:	83 35       	cpi	r24, 0x53	; 83
    12b2:	09 f0       	breq	.+2      	; 0x12b6 <vfprintf+0xf8>
    12b4:	57 c0       	rjmp	.+174    	; 0x1364 <vfprintf+0x1a6>
    12b6:	21 c0       	rjmp	.+66     	; 0x12fa <vfprintf+0x13c>
    12b8:	f8 01       	movw	r30, r16
    12ba:	80 81       	ld	r24, Z
    12bc:	89 83       	std	Y+1, r24	; 0x01
    12be:	0e 5f       	subi	r16, 0xFE	; 254
    12c0:	1f 4f       	sbci	r17, 0xFF	; 255
    12c2:	44 24       	eor	r4, r4
    12c4:	43 94       	inc	r4
    12c6:	51 2c       	mov	r5, r1
    12c8:	54 01       	movw	r10, r8
    12ca:	14 c0       	rjmp	.+40     	; 0x12f4 <vfprintf+0x136>
    12cc:	38 01       	movw	r6, r16
    12ce:	f2 e0       	ldi	r31, 0x02	; 2
    12d0:	6f 0e       	add	r6, r31
    12d2:	71 1c       	adc	r7, r1
    12d4:	f8 01       	movw	r30, r16
    12d6:	a0 80       	ld	r10, Z
    12d8:	b1 80       	ldd	r11, Z+1	; 0x01
    12da:	26 ff       	sbrs	r18, 6
    12dc:	03 c0       	rjmp	.+6      	; 0x12e4 <vfprintf+0x126>
    12de:	65 2d       	mov	r22, r5
    12e0:	70 e0       	ldi	r23, 0x00	; 0
    12e2:	02 c0       	rjmp	.+4      	; 0x12e8 <vfprintf+0x12a>
    12e4:	6f ef       	ldi	r22, 0xFF	; 255
    12e6:	7f ef       	ldi	r23, 0xFF	; 255
    12e8:	c5 01       	movw	r24, r10
    12ea:	2c 87       	std	Y+12, r18	; 0x0c
    12ec:	36 d1       	rcall	.+620    	; 0x155a <strnlen>
    12ee:	2c 01       	movw	r4, r24
    12f0:	83 01       	movw	r16, r6
    12f2:	2c 85       	ldd	r18, Y+12	; 0x0c
    12f4:	2f 77       	andi	r18, 0x7F	; 127
    12f6:	22 2e       	mov	r2, r18
    12f8:	16 c0       	rjmp	.+44     	; 0x1326 <vfprintf+0x168>
    12fa:	38 01       	movw	r6, r16
    12fc:	f2 e0       	ldi	r31, 0x02	; 2
    12fe:	6f 0e       	add	r6, r31
    1300:	71 1c       	adc	r7, r1
    1302:	f8 01       	movw	r30, r16
    1304:	a0 80       	ld	r10, Z
    1306:	b1 80       	ldd	r11, Z+1	; 0x01
    1308:	26 ff       	sbrs	r18, 6
    130a:	03 c0       	rjmp	.+6      	; 0x1312 <vfprintf+0x154>
    130c:	65 2d       	mov	r22, r5
    130e:	70 e0       	ldi	r23, 0x00	; 0
    1310:	02 c0       	rjmp	.+4      	; 0x1316 <vfprintf+0x158>
    1312:	6f ef       	ldi	r22, 0xFF	; 255
    1314:	7f ef       	ldi	r23, 0xFF	; 255
    1316:	c5 01       	movw	r24, r10
    1318:	2c 87       	std	Y+12, r18	; 0x0c
    131a:	14 d1       	rcall	.+552    	; 0x1544 <strnlen_P>
    131c:	2c 01       	movw	r4, r24
    131e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1320:	20 68       	ori	r18, 0x80	; 128
    1322:	22 2e       	mov	r2, r18
    1324:	83 01       	movw	r16, r6
    1326:	23 fc       	sbrc	r2, 3
    1328:	19 c0       	rjmp	.+50     	; 0x135c <vfprintf+0x19e>
    132a:	83 2d       	mov	r24, r3
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	48 16       	cp	r4, r24
    1330:	59 06       	cpc	r5, r25
    1332:	a0 f4       	brcc	.+40     	; 0x135c <vfprintf+0x19e>
    1334:	b7 01       	movw	r22, r14
    1336:	80 e2       	ldi	r24, 0x20	; 32
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	dd de       	rcall	.-582    	; 0x10f6 <fputc>
    133c:	3a 94       	dec	r3
    133e:	f5 cf       	rjmp	.-22     	; 0x132a <vfprintf+0x16c>
    1340:	f5 01       	movw	r30, r10
    1342:	27 fc       	sbrc	r2, 7
    1344:	85 91       	lpm	r24, Z+
    1346:	27 fe       	sbrs	r2, 7
    1348:	81 91       	ld	r24, Z+
    134a:	5f 01       	movw	r10, r30
    134c:	b7 01       	movw	r22, r14
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	d2 de       	rcall	.-604    	; 0x10f6 <fputc>
    1352:	31 10       	cpse	r3, r1
    1354:	3a 94       	dec	r3
    1356:	f1 e0       	ldi	r31, 0x01	; 1
    1358:	4f 1a       	sub	r4, r31
    135a:	51 08       	sbc	r5, r1
    135c:	41 14       	cp	r4, r1
    135e:	51 04       	cpc	r5, r1
    1360:	79 f7       	brne	.-34     	; 0x1340 <vfprintf+0x182>
    1362:	de c0       	rjmp	.+444    	; 0x1520 <vfprintf+0x362>
    1364:	84 36       	cpi	r24, 0x64	; 100
    1366:	11 f0       	breq	.+4      	; 0x136c <vfprintf+0x1ae>
    1368:	89 36       	cpi	r24, 0x69	; 105
    136a:	31 f5       	brne	.+76     	; 0x13b8 <vfprintf+0x1fa>
    136c:	f8 01       	movw	r30, r16
    136e:	27 ff       	sbrs	r18, 7
    1370:	07 c0       	rjmp	.+14     	; 0x1380 <vfprintf+0x1c2>
    1372:	60 81       	ld	r22, Z
    1374:	71 81       	ldd	r23, Z+1	; 0x01
    1376:	82 81       	ldd	r24, Z+2	; 0x02
    1378:	93 81       	ldd	r25, Z+3	; 0x03
    137a:	0c 5f       	subi	r16, 0xFC	; 252
    137c:	1f 4f       	sbci	r17, 0xFF	; 255
    137e:	08 c0       	rjmp	.+16     	; 0x1390 <vfprintf+0x1d2>
    1380:	60 81       	ld	r22, Z
    1382:	71 81       	ldd	r23, Z+1	; 0x01
    1384:	88 27       	eor	r24, r24
    1386:	77 fd       	sbrc	r23, 7
    1388:	80 95       	com	r24
    138a:	98 2f       	mov	r25, r24
    138c:	0e 5f       	subi	r16, 0xFE	; 254
    138e:	1f 4f       	sbci	r17, 0xFF	; 255
    1390:	2f 76       	andi	r18, 0x6F	; 111
    1392:	b2 2e       	mov	r11, r18
    1394:	97 ff       	sbrs	r25, 7
    1396:	09 c0       	rjmp	.+18     	; 0x13aa <vfprintf+0x1ec>
    1398:	90 95       	com	r25
    139a:	80 95       	com	r24
    139c:	70 95       	com	r23
    139e:	61 95       	neg	r22
    13a0:	7f 4f       	sbci	r23, 0xFF	; 255
    13a2:	8f 4f       	sbci	r24, 0xFF	; 255
    13a4:	9f 4f       	sbci	r25, 0xFF	; 255
    13a6:	20 68       	ori	r18, 0x80	; 128
    13a8:	b2 2e       	mov	r11, r18
    13aa:	2a e0       	ldi	r18, 0x0A	; 10
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	a4 01       	movw	r20, r8
    13b0:	df d0       	rcall	.+446    	; 0x1570 <__ultoa_invert>
    13b2:	a8 2e       	mov	r10, r24
    13b4:	a8 18       	sub	r10, r8
    13b6:	43 c0       	rjmp	.+134    	; 0x143e <vfprintf+0x280>
    13b8:	85 37       	cpi	r24, 0x75	; 117
    13ba:	29 f4       	brne	.+10     	; 0x13c6 <vfprintf+0x208>
    13bc:	2f 7e       	andi	r18, 0xEF	; 239
    13be:	b2 2e       	mov	r11, r18
    13c0:	2a e0       	ldi	r18, 0x0A	; 10
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	25 c0       	rjmp	.+74     	; 0x1410 <vfprintf+0x252>
    13c6:	f2 2f       	mov	r31, r18
    13c8:	f9 7f       	andi	r31, 0xF9	; 249
    13ca:	bf 2e       	mov	r11, r31
    13cc:	8f 36       	cpi	r24, 0x6F	; 111
    13ce:	c1 f0       	breq	.+48     	; 0x1400 <vfprintf+0x242>
    13d0:	18 f4       	brcc	.+6      	; 0x13d8 <vfprintf+0x21a>
    13d2:	88 35       	cpi	r24, 0x58	; 88
    13d4:	79 f0       	breq	.+30     	; 0x13f4 <vfprintf+0x236>
    13d6:	ad c0       	rjmp	.+346    	; 0x1532 <vfprintf+0x374>
    13d8:	80 37       	cpi	r24, 0x70	; 112
    13da:	19 f0       	breq	.+6      	; 0x13e2 <vfprintf+0x224>
    13dc:	88 37       	cpi	r24, 0x78	; 120
    13de:	21 f0       	breq	.+8      	; 0x13e8 <vfprintf+0x22a>
    13e0:	a8 c0       	rjmp	.+336    	; 0x1532 <vfprintf+0x374>
    13e2:	2f 2f       	mov	r18, r31
    13e4:	20 61       	ori	r18, 0x10	; 16
    13e6:	b2 2e       	mov	r11, r18
    13e8:	b4 fe       	sbrs	r11, 4
    13ea:	0d c0       	rjmp	.+26     	; 0x1406 <vfprintf+0x248>
    13ec:	8b 2d       	mov	r24, r11
    13ee:	84 60       	ori	r24, 0x04	; 4
    13f0:	b8 2e       	mov	r11, r24
    13f2:	09 c0       	rjmp	.+18     	; 0x1406 <vfprintf+0x248>
    13f4:	24 ff       	sbrs	r18, 4
    13f6:	0a c0       	rjmp	.+20     	; 0x140c <vfprintf+0x24e>
    13f8:	9f 2f       	mov	r25, r31
    13fa:	96 60       	ori	r25, 0x06	; 6
    13fc:	b9 2e       	mov	r11, r25
    13fe:	06 c0       	rjmp	.+12     	; 0x140c <vfprintf+0x24e>
    1400:	28 e0       	ldi	r18, 0x08	; 8
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	05 c0       	rjmp	.+10     	; 0x1410 <vfprintf+0x252>
    1406:	20 e1       	ldi	r18, 0x10	; 16
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	02 c0       	rjmp	.+4      	; 0x1410 <vfprintf+0x252>
    140c:	20 e1       	ldi	r18, 0x10	; 16
    140e:	32 e0       	ldi	r19, 0x02	; 2
    1410:	f8 01       	movw	r30, r16
    1412:	b7 fe       	sbrs	r11, 7
    1414:	07 c0       	rjmp	.+14     	; 0x1424 <vfprintf+0x266>
    1416:	60 81       	ld	r22, Z
    1418:	71 81       	ldd	r23, Z+1	; 0x01
    141a:	82 81       	ldd	r24, Z+2	; 0x02
    141c:	93 81       	ldd	r25, Z+3	; 0x03
    141e:	0c 5f       	subi	r16, 0xFC	; 252
    1420:	1f 4f       	sbci	r17, 0xFF	; 255
    1422:	06 c0       	rjmp	.+12     	; 0x1430 <vfprintf+0x272>
    1424:	60 81       	ld	r22, Z
    1426:	71 81       	ldd	r23, Z+1	; 0x01
    1428:	80 e0       	ldi	r24, 0x00	; 0
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	0e 5f       	subi	r16, 0xFE	; 254
    142e:	1f 4f       	sbci	r17, 0xFF	; 255
    1430:	a4 01       	movw	r20, r8
    1432:	9e d0       	rcall	.+316    	; 0x1570 <__ultoa_invert>
    1434:	a8 2e       	mov	r10, r24
    1436:	a8 18       	sub	r10, r8
    1438:	fb 2d       	mov	r31, r11
    143a:	ff 77       	andi	r31, 0x7F	; 127
    143c:	bf 2e       	mov	r11, r31
    143e:	b6 fe       	sbrs	r11, 6
    1440:	0b c0       	rjmp	.+22     	; 0x1458 <vfprintf+0x29a>
    1442:	2b 2d       	mov	r18, r11
    1444:	2e 7f       	andi	r18, 0xFE	; 254
    1446:	a5 14       	cp	r10, r5
    1448:	50 f4       	brcc	.+20     	; 0x145e <vfprintf+0x2a0>
    144a:	b4 fe       	sbrs	r11, 4
    144c:	0a c0       	rjmp	.+20     	; 0x1462 <vfprintf+0x2a4>
    144e:	b2 fc       	sbrc	r11, 2
    1450:	08 c0       	rjmp	.+16     	; 0x1462 <vfprintf+0x2a4>
    1452:	2b 2d       	mov	r18, r11
    1454:	2e 7e       	andi	r18, 0xEE	; 238
    1456:	05 c0       	rjmp	.+10     	; 0x1462 <vfprintf+0x2a4>
    1458:	7a 2c       	mov	r7, r10
    145a:	2b 2d       	mov	r18, r11
    145c:	03 c0       	rjmp	.+6      	; 0x1464 <vfprintf+0x2a6>
    145e:	7a 2c       	mov	r7, r10
    1460:	01 c0       	rjmp	.+2      	; 0x1464 <vfprintf+0x2a6>
    1462:	75 2c       	mov	r7, r5
    1464:	24 ff       	sbrs	r18, 4
    1466:	0d c0       	rjmp	.+26     	; 0x1482 <vfprintf+0x2c4>
    1468:	fe 01       	movw	r30, r28
    146a:	ea 0d       	add	r30, r10
    146c:	f1 1d       	adc	r31, r1
    146e:	80 81       	ld	r24, Z
    1470:	80 33       	cpi	r24, 0x30	; 48
    1472:	11 f4       	brne	.+4      	; 0x1478 <vfprintf+0x2ba>
    1474:	29 7e       	andi	r18, 0xE9	; 233
    1476:	09 c0       	rjmp	.+18     	; 0x148a <vfprintf+0x2cc>
    1478:	22 ff       	sbrs	r18, 2
    147a:	06 c0       	rjmp	.+12     	; 0x1488 <vfprintf+0x2ca>
    147c:	73 94       	inc	r7
    147e:	73 94       	inc	r7
    1480:	04 c0       	rjmp	.+8      	; 0x148a <vfprintf+0x2cc>
    1482:	82 2f       	mov	r24, r18
    1484:	86 78       	andi	r24, 0x86	; 134
    1486:	09 f0       	breq	.+2      	; 0x148a <vfprintf+0x2cc>
    1488:	73 94       	inc	r7
    148a:	23 fd       	sbrc	r18, 3
    148c:	12 c0       	rjmp	.+36     	; 0x14b2 <vfprintf+0x2f4>
    148e:	20 ff       	sbrs	r18, 0
    1490:	06 c0       	rjmp	.+12     	; 0x149e <vfprintf+0x2e0>
    1492:	5a 2c       	mov	r5, r10
    1494:	73 14       	cp	r7, r3
    1496:	18 f4       	brcc	.+6      	; 0x149e <vfprintf+0x2e0>
    1498:	53 0c       	add	r5, r3
    149a:	57 18       	sub	r5, r7
    149c:	73 2c       	mov	r7, r3
    149e:	73 14       	cp	r7, r3
    14a0:	60 f4       	brcc	.+24     	; 0x14ba <vfprintf+0x2fc>
    14a2:	b7 01       	movw	r22, r14
    14a4:	80 e2       	ldi	r24, 0x20	; 32
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	2c 87       	std	Y+12, r18	; 0x0c
    14aa:	25 de       	rcall	.-950    	; 0x10f6 <fputc>
    14ac:	73 94       	inc	r7
    14ae:	2c 85       	ldd	r18, Y+12	; 0x0c
    14b0:	f6 cf       	rjmp	.-20     	; 0x149e <vfprintf+0x2e0>
    14b2:	73 14       	cp	r7, r3
    14b4:	10 f4       	brcc	.+4      	; 0x14ba <vfprintf+0x2fc>
    14b6:	37 18       	sub	r3, r7
    14b8:	01 c0       	rjmp	.+2      	; 0x14bc <vfprintf+0x2fe>
    14ba:	31 2c       	mov	r3, r1
    14bc:	24 ff       	sbrs	r18, 4
    14be:	11 c0       	rjmp	.+34     	; 0x14e2 <vfprintf+0x324>
    14c0:	b7 01       	movw	r22, r14
    14c2:	80 e3       	ldi	r24, 0x30	; 48
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	2c 87       	std	Y+12, r18	; 0x0c
    14c8:	16 de       	rcall	.-980    	; 0x10f6 <fputc>
    14ca:	2c 85       	ldd	r18, Y+12	; 0x0c
    14cc:	22 ff       	sbrs	r18, 2
    14ce:	16 c0       	rjmp	.+44     	; 0x14fc <vfprintf+0x33e>
    14d0:	21 ff       	sbrs	r18, 1
    14d2:	03 c0       	rjmp	.+6      	; 0x14da <vfprintf+0x31c>
    14d4:	88 e5       	ldi	r24, 0x58	; 88
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	02 c0       	rjmp	.+4      	; 0x14de <vfprintf+0x320>
    14da:	88 e7       	ldi	r24, 0x78	; 120
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	b7 01       	movw	r22, r14
    14e0:	0c c0       	rjmp	.+24     	; 0x14fa <vfprintf+0x33c>
    14e2:	82 2f       	mov	r24, r18
    14e4:	86 78       	andi	r24, 0x86	; 134
    14e6:	51 f0       	breq	.+20     	; 0x14fc <vfprintf+0x33e>
    14e8:	21 fd       	sbrc	r18, 1
    14ea:	02 c0       	rjmp	.+4      	; 0x14f0 <vfprintf+0x332>
    14ec:	80 e2       	ldi	r24, 0x20	; 32
    14ee:	01 c0       	rjmp	.+2      	; 0x14f2 <vfprintf+0x334>
    14f0:	8b e2       	ldi	r24, 0x2B	; 43
    14f2:	27 fd       	sbrc	r18, 7
    14f4:	8d e2       	ldi	r24, 0x2D	; 45
    14f6:	b7 01       	movw	r22, r14
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	fd dd       	rcall	.-1030   	; 0x10f6 <fputc>
    14fc:	a5 14       	cp	r10, r5
    14fe:	30 f4       	brcc	.+12     	; 0x150c <vfprintf+0x34e>
    1500:	b7 01       	movw	r22, r14
    1502:	80 e3       	ldi	r24, 0x30	; 48
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	f7 dd       	rcall	.-1042   	; 0x10f6 <fputc>
    1508:	5a 94       	dec	r5
    150a:	f8 cf       	rjmp	.-16     	; 0x14fc <vfprintf+0x33e>
    150c:	aa 94       	dec	r10
    150e:	f4 01       	movw	r30, r8
    1510:	ea 0d       	add	r30, r10
    1512:	f1 1d       	adc	r31, r1
    1514:	80 81       	ld	r24, Z
    1516:	b7 01       	movw	r22, r14
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	ed dd       	rcall	.-1062   	; 0x10f6 <fputc>
    151c:	a1 10       	cpse	r10, r1
    151e:	f6 cf       	rjmp	.-20     	; 0x150c <vfprintf+0x34e>
    1520:	33 20       	and	r3, r3
    1522:	09 f4       	brne	.+2      	; 0x1526 <vfprintf+0x368>
    1524:	5d ce       	rjmp	.-838    	; 0x11e0 <vfprintf+0x22>
    1526:	b7 01       	movw	r22, r14
    1528:	80 e2       	ldi	r24, 0x20	; 32
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	e4 dd       	rcall	.-1080   	; 0x10f6 <fputc>
    152e:	3a 94       	dec	r3
    1530:	f7 cf       	rjmp	.-18     	; 0x1520 <vfprintf+0x362>
    1532:	f7 01       	movw	r30, r14
    1534:	86 81       	ldd	r24, Z+6	; 0x06
    1536:	97 81       	ldd	r25, Z+7	; 0x07
    1538:	02 c0       	rjmp	.+4      	; 0x153e <vfprintf+0x380>
    153a:	8f ef       	ldi	r24, 0xFF	; 255
    153c:	9f ef       	ldi	r25, 0xFF	; 255
    153e:	2c 96       	adiw	r28, 0x0c	; 12
    1540:	e2 e1       	ldi	r30, 0x12	; 18
    1542:	90 c0       	rjmp	.+288    	; 0x1664 <__epilogue_restores__>

00001544 <strnlen_P>:
    1544:	fc 01       	movw	r30, r24
    1546:	05 90       	lpm	r0, Z+
    1548:	61 50       	subi	r22, 0x01	; 1
    154a:	70 40       	sbci	r23, 0x00	; 0
    154c:	01 10       	cpse	r0, r1
    154e:	d8 f7       	brcc	.-10     	; 0x1546 <strnlen_P+0x2>
    1550:	80 95       	com	r24
    1552:	90 95       	com	r25
    1554:	8e 0f       	add	r24, r30
    1556:	9f 1f       	adc	r25, r31
    1558:	08 95       	ret

0000155a <strnlen>:
    155a:	fc 01       	movw	r30, r24
    155c:	61 50       	subi	r22, 0x01	; 1
    155e:	70 40       	sbci	r23, 0x00	; 0
    1560:	01 90       	ld	r0, Z+
    1562:	01 10       	cpse	r0, r1
    1564:	d8 f7       	brcc	.-10     	; 0x155c <strnlen+0x2>
    1566:	80 95       	com	r24
    1568:	90 95       	com	r25
    156a:	8e 0f       	add	r24, r30
    156c:	9f 1f       	adc	r25, r31
    156e:	08 95       	ret

00001570 <__ultoa_invert>:
    1570:	fa 01       	movw	r30, r20
    1572:	aa 27       	eor	r26, r26
    1574:	28 30       	cpi	r18, 0x08	; 8
    1576:	51 f1       	breq	.+84     	; 0x15cc <__ultoa_invert+0x5c>
    1578:	20 31       	cpi	r18, 0x10	; 16
    157a:	81 f1       	breq	.+96     	; 0x15dc <__ultoa_invert+0x6c>
    157c:	e8 94       	clt
    157e:	6f 93       	push	r22
    1580:	6e 7f       	andi	r22, 0xFE	; 254
    1582:	6e 5f       	subi	r22, 0xFE	; 254
    1584:	7f 4f       	sbci	r23, 0xFF	; 255
    1586:	8f 4f       	sbci	r24, 0xFF	; 255
    1588:	9f 4f       	sbci	r25, 0xFF	; 255
    158a:	af 4f       	sbci	r26, 0xFF	; 255
    158c:	b1 e0       	ldi	r27, 0x01	; 1
    158e:	3e d0       	rcall	.+124    	; 0x160c <__ultoa_invert+0x9c>
    1590:	b4 e0       	ldi	r27, 0x04	; 4
    1592:	3c d0       	rcall	.+120    	; 0x160c <__ultoa_invert+0x9c>
    1594:	67 0f       	add	r22, r23
    1596:	78 1f       	adc	r23, r24
    1598:	89 1f       	adc	r24, r25
    159a:	9a 1f       	adc	r25, r26
    159c:	a1 1d       	adc	r26, r1
    159e:	68 0f       	add	r22, r24
    15a0:	79 1f       	adc	r23, r25
    15a2:	8a 1f       	adc	r24, r26
    15a4:	91 1d       	adc	r25, r1
    15a6:	a1 1d       	adc	r26, r1
    15a8:	6a 0f       	add	r22, r26
    15aa:	71 1d       	adc	r23, r1
    15ac:	81 1d       	adc	r24, r1
    15ae:	91 1d       	adc	r25, r1
    15b0:	a1 1d       	adc	r26, r1
    15b2:	20 d0       	rcall	.+64     	; 0x15f4 <__ultoa_invert+0x84>
    15b4:	09 f4       	brne	.+2      	; 0x15b8 <__ultoa_invert+0x48>
    15b6:	68 94       	set
    15b8:	3f 91       	pop	r19
    15ba:	2a e0       	ldi	r18, 0x0A	; 10
    15bc:	26 9f       	mul	r18, r22
    15be:	11 24       	eor	r1, r1
    15c0:	30 19       	sub	r19, r0
    15c2:	30 5d       	subi	r19, 0xD0	; 208
    15c4:	31 93       	st	Z+, r19
    15c6:	de f6       	brtc	.-74     	; 0x157e <__ultoa_invert+0xe>
    15c8:	cf 01       	movw	r24, r30
    15ca:	08 95       	ret
    15cc:	46 2f       	mov	r20, r22
    15ce:	47 70       	andi	r20, 0x07	; 7
    15d0:	40 5d       	subi	r20, 0xD0	; 208
    15d2:	41 93       	st	Z+, r20
    15d4:	b3 e0       	ldi	r27, 0x03	; 3
    15d6:	0f d0       	rcall	.+30     	; 0x15f6 <__ultoa_invert+0x86>
    15d8:	c9 f7       	brne	.-14     	; 0x15cc <__ultoa_invert+0x5c>
    15da:	f6 cf       	rjmp	.-20     	; 0x15c8 <__ultoa_invert+0x58>
    15dc:	46 2f       	mov	r20, r22
    15de:	4f 70       	andi	r20, 0x0F	; 15
    15e0:	40 5d       	subi	r20, 0xD0	; 208
    15e2:	4a 33       	cpi	r20, 0x3A	; 58
    15e4:	18 f0       	brcs	.+6      	; 0x15ec <__ultoa_invert+0x7c>
    15e6:	49 5d       	subi	r20, 0xD9	; 217
    15e8:	31 fd       	sbrc	r19, 1
    15ea:	40 52       	subi	r20, 0x20	; 32
    15ec:	41 93       	st	Z+, r20
    15ee:	02 d0       	rcall	.+4      	; 0x15f4 <__ultoa_invert+0x84>
    15f0:	a9 f7       	brne	.-22     	; 0x15dc <__ultoa_invert+0x6c>
    15f2:	ea cf       	rjmp	.-44     	; 0x15c8 <__ultoa_invert+0x58>
    15f4:	b4 e0       	ldi	r27, 0x04	; 4
    15f6:	a6 95       	lsr	r26
    15f8:	97 95       	ror	r25
    15fa:	87 95       	ror	r24
    15fc:	77 95       	ror	r23
    15fe:	67 95       	ror	r22
    1600:	ba 95       	dec	r27
    1602:	c9 f7       	brne	.-14     	; 0x15f6 <__ultoa_invert+0x86>
    1604:	00 97       	sbiw	r24, 0x00	; 0
    1606:	61 05       	cpc	r22, r1
    1608:	71 05       	cpc	r23, r1
    160a:	08 95       	ret
    160c:	9b 01       	movw	r18, r22
    160e:	ac 01       	movw	r20, r24
    1610:	0a 2e       	mov	r0, r26
    1612:	06 94       	lsr	r0
    1614:	57 95       	ror	r21
    1616:	47 95       	ror	r20
    1618:	37 95       	ror	r19
    161a:	27 95       	ror	r18
    161c:	ba 95       	dec	r27
    161e:	c9 f7       	brne	.-14     	; 0x1612 <__ultoa_invert+0xa2>
    1620:	62 0f       	add	r22, r18
    1622:	73 1f       	adc	r23, r19
    1624:	84 1f       	adc	r24, r20
    1626:	95 1f       	adc	r25, r21
    1628:	a0 1d       	adc	r26, r0
    162a:	08 95       	ret

0000162c <__prologue_saves__>:
    162c:	2f 92       	push	r2
    162e:	3f 92       	push	r3
    1630:	4f 92       	push	r4
    1632:	5f 92       	push	r5
    1634:	6f 92       	push	r6
    1636:	7f 92       	push	r7
    1638:	8f 92       	push	r8
    163a:	9f 92       	push	r9
    163c:	af 92       	push	r10
    163e:	bf 92       	push	r11
    1640:	cf 92       	push	r12
    1642:	df 92       	push	r13
    1644:	ef 92       	push	r14
    1646:	ff 92       	push	r15
    1648:	0f 93       	push	r16
    164a:	1f 93       	push	r17
    164c:	cf 93       	push	r28
    164e:	df 93       	push	r29
    1650:	cd b7       	in	r28, 0x3d	; 61
    1652:	de b7       	in	r29, 0x3e	; 62
    1654:	ca 1b       	sub	r28, r26
    1656:	db 0b       	sbc	r29, r27
    1658:	0f b6       	in	r0, 0x3f	; 63
    165a:	f8 94       	cli
    165c:	de bf       	out	0x3e, r29	; 62
    165e:	0f be       	out	0x3f, r0	; 63
    1660:	cd bf       	out	0x3d, r28	; 61
    1662:	09 94       	ijmp

00001664 <__epilogue_restores__>:
    1664:	2a 88       	ldd	r2, Y+18	; 0x12
    1666:	39 88       	ldd	r3, Y+17	; 0x11
    1668:	48 88       	ldd	r4, Y+16	; 0x10
    166a:	5f 84       	ldd	r5, Y+15	; 0x0f
    166c:	6e 84       	ldd	r6, Y+14	; 0x0e
    166e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1670:	8c 84       	ldd	r8, Y+12	; 0x0c
    1672:	9b 84       	ldd	r9, Y+11	; 0x0b
    1674:	aa 84       	ldd	r10, Y+10	; 0x0a
    1676:	b9 84       	ldd	r11, Y+9	; 0x09
    1678:	c8 84       	ldd	r12, Y+8	; 0x08
    167a:	df 80       	ldd	r13, Y+7	; 0x07
    167c:	ee 80       	ldd	r14, Y+6	; 0x06
    167e:	fd 80       	ldd	r15, Y+5	; 0x05
    1680:	0c 81       	ldd	r16, Y+4	; 0x04
    1682:	1b 81       	ldd	r17, Y+3	; 0x03
    1684:	aa 81       	ldd	r26, Y+2	; 0x02
    1686:	b9 81       	ldd	r27, Y+1	; 0x01
    1688:	ce 0f       	add	r28, r30
    168a:	d1 1d       	adc	r29, r1
    168c:	0f b6       	in	r0, 0x3f	; 63
    168e:	f8 94       	cli
    1690:	de bf       	out	0x3e, r29	; 62
    1692:	0f be       	out	0x3f, r0	; 63
    1694:	cd bf       	out	0x3d, r28	; 61
    1696:	ed 01       	movw	r28, r26
    1698:	08 95       	ret

0000169a <_exit>:
    169a:	f8 94       	cli

0000169c <__stop_program>:
    169c:	ff cf       	rjmp	.-2      	; 0x169c <__stop_program>
