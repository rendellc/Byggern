
Node1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005e  00800100  00001530  000015c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001530  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000138  0080015e  0080015e  00001622  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001622  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000298  00000000  00000000  0000167e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002f25  00000000  00000000  00001916  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000f95  00000000  00000000  0000483b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000015e1  00000000  00000000  000057d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000006ac  00000000  00000000  00006db4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000073a  00000000  00000000  00007460  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001196  00000000  00000000  00007b9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000250  00000000  00000000  00008d30  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	37 c0       	rjmp	.+110    	; 0x70 <__ctors_end>
       2:	00 00       	nop
       4:	51 c0       	rjmp	.+162    	; 0xa8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5b c0       	rjmp	.+182    	; 0xc0 <__vector_2>
       a:	00 00       	nop
       c:	4d c0       	rjmp	.+154    	; 0xa8 <__bad_interrupt>
       e:	00 00       	nop
      10:	4b c0       	rjmp	.+150    	; 0xa8 <__bad_interrupt>
      12:	00 00       	nop
      14:	49 c0       	rjmp	.+146    	; 0xa8 <__bad_interrupt>
      16:	00 00       	nop
      18:	47 c0       	rjmp	.+142    	; 0xa8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	45 c0       	rjmp	.+138    	; 0xa8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	43 c0       	rjmp	.+134    	; 0xa8 <__bad_interrupt>
      22:	00 00       	nop
      24:	41 c0       	rjmp	.+130    	; 0xa8 <__bad_interrupt>
      26:	00 00       	nop
      28:	3f c0       	rjmp	.+126    	; 0xa8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	3d c0       	rjmp	.+122    	; 0xa8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	3b c0       	rjmp	.+118    	; 0xa8 <__bad_interrupt>
      32:	00 00       	nop
      34:	39 c0       	rjmp	.+114    	; 0xa8 <__bad_interrupt>
      36:	00 00       	nop
      38:	37 c0       	rjmp	.+110    	; 0xa8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	35 c0       	rjmp	.+106    	; 0xa8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	33 c0       	rjmp	.+102    	; 0xa8 <__bad_interrupt>
      42:	00 00       	nop
      44:	3e c4       	rjmp	.+2172   	; 0x8c2 <__vector_17>
      46:	00 00       	nop
      48:	2f c0       	rjmp	.+94     	; 0xa8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	a2 c4       	rjmp	.+2372   	; 0x992 <__vector_19>
      4e:	00 00       	nop
      50:	2b c0       	rjmp	.+86     	; 0xa8 <__bad_interrupt>
      52:	00 00       	nop
      54:	29 c0       	rjmp	.+82     	; 0xa8 <__bad_interrupt>
      56:	00 00       	nop
      58:	27 c0       	rjmp	.+78     	; 0xa8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	e1 c4       	rjmp	.+2498   	; 0xa20 <__vector_23>
      5e:	00 00       	nop
      60:	23 c0       	rjmp	.+70     	; 0xa8 <__bad_interrupt>
      62:	00 00       	nop
      64:	21 c0       	rjmp	.+66     	; 0xa8 <__bad_interrupt>
      66:	00 00       	nop
      68:	1f c0       	rjmp	.+62     	; 0xa8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	1d c0       	rjmp	.+58     	; 0xa8 <__bad_interrupt>
	...

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	11 e0       	ldi	r17, 0x01	; 1
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	e0 e3       	ldi	r30, 0x30	; 48
      84:	f5 e1       	ldi	r31, 0x15	; 21
      86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0
      8c:	ae 35       	cpi	r26, 0x5E	; 94
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
      92:	22 e0       	ldi	r18, 0x02	; 2
      94:	ae e5       	ldi	r26, 0x5E	; 94
      96:	b1 e0       	ldi	r27, 0x01	; 1
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	a6 39       	cpi	r26, 0x96	; 150
      9e:	b2 07       	cpc	r27, r18
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	dc d1       	rcall	.+952    	; 0x45c <main>
      a4:	0c 94 96 0a 	jmp	0x152c	; 0x152c <_exit>

000000a8 <__bad_interrupt>:
      a8:	ab cf       	rjmp	.-170    	; 0x0 <__vectors>

000000aa <adc_init>:
/*!
 * Initialize atmega162 to interface with the interrupt signal
 * of the ADC through Port D pin 2
 */
void adc_init(void){
	DDRD  &= ~(1 << DDD2);
      aa:	8a 98       	cbi	0x11, 2	; 17
	PORTD |= (1 << PD2);
      ac:	92 9a       	sbi	0x12, 2	; 18
      ae:	08 95       	ret

000000b0 <adc_read_channel>:
 * @param[in] ch analog channel to perform conversion on
 * @return digital read of analog signal
 */
uint8_t adc_read_channel(uint8_t ch)
{	
	*adc_adr = (ch | 0b0100);
      b0:	84 60       	ori	r24, 0x04	; 4
      b2:	80 93 00 11 	sts	0x1100, r24
	
	while ((PIND & (1<<PIND2))); // wait until pin is high, adc read complete when pin is high
      b6:	82 99       	sbic	0x10, 2	; 16
      b8:	fe cf       	rjmp	.-4      	; 0xb6 <adc_read_channel+0x6>
	
	return *adc_adr;
      ba:	80 91 00 11 	lds	r24, 0x1100
}
      be:	08 95       	ret

000000c0 <__vector_2>:
	for (uint8_t i = 0; i < msg.length; ++i)
	{
		fprintf(&uart_out, "%x ", msg.data[i]);
	}
	fprintf(&uart_out, "\n");
}
      c0:	1f 92       	push	r1
      c2:	0f 92       	push	r0
      c4:	0f b6       	in	r0, 0x3f	; 63
      c6:	0f 92       	push	r0
      c8:	11 24       	eor	r1, r1
      ca:	ff 92       	push	r15
      cc:	0f 93       	push	r16
      ce:	1f 93       	push	r17
      d0:	2f 93       	push	r18
      d2:	3f 93       	push	r19
      d4:	4f 93       	push	r20
      d6:	5f 93       	push	r21
      d8:	6f 93       	push	r22
      da:	7f 93       	push	r23
      dc:	8f 93       	push	r24
      de:	9f 93       	push	r25
      e0:	af 93       	push	r26
      e2:	bf 93       	push	r27
      e4:	ef 93       	push	r30
      e6:	ff 93       	push	r31
      e8:	cf 93       	push	r28
      ea:	df 93       	push	r29
      ec:	cd b7       	in	r28, 0x3d	; 61
      ee:	de b7       	in	r29, 0x3e	; 62
      f0:	2e 97       	sbiw	r28, 0x0e	; 14
      f2:	de bf       	out	0x3e, r29	; 62
      f4:	cd bf       	out	0x3d, r28	; 61
      f6:	f8 94       	cli
      f8:	19 82       	std	Y+1, r1	; 0x01
      fa:	80 e6       	ldi	r24, 0x60	; 96
      fc:	8a 83       	std	Y+2, r24	; 0x02
      fe:	80 e9       	ldi	r24, 0x90	; 144
     100:	8b 83       	std	Y+3, r24	; 0x03
     102:	81 e0       	ldi	r24, 0x01	; 1
     104:	8c 83       	std	Y+4, r24	; 0x04
     106:	08 d2       	rcall	.+1040   	; 0x518 <mcp_readstatus>
     108:	81 ff       	sbrs	r24, 1
     10a:	08 c0       	rjmp	.+16     	; 0x11c <__vector_2+0x5c>
     10c:	81 e0       	ldi	r24, 0x01	; 1
     10e:	89 83       	std	Y+1, r24	; 0x01
     110:	80 e7       	ldi	r24, 0x70	; 112
     112:	8a 83       	std	Y+2, r24	; 0x02
     114:	84 e9       	ldi	r24, 0x94	; 148
     116:	8b 83       	std	Y+3, r24	; 0x03
     118:	82 e0       	ldi	r24, 0x02	; 2
     11a:	8c 83       	std	Y+4, r24	; 0x04
     11c:	e9 81       	ldd	r30, Y+1	; 0x01
     11e:	f0 e0       	ldi	r31, 0x00	; 0
     120:	e0 5a       	subi	r30, 0xA0	; 160
     122:	fe 4f       	sbci	r31, 0xFE	; 254
     124:	20 81       	ld	r18, Z
     126:	e9 81       	ldd	r30, Y+1	; 0x01
     128:	f0 e0       	ldi	r31, 0x00	; 0
     12a:	e2 5a       	subi	r30, 0xA2	; 162
     12c:	fe 4f       	sbci	r31, 0xFE	; 254
     12e:	80 81       	ld	r24, Z
     130:	30 e0       	ldi	r19, 0x00	; 0
     132:	2f 5f       	subi	r18, 0xFF	; 255
     134:	3f 4f       	sbci	r19, 0xFF	; 255
     136:	27 70       	andi	r18, 0x07	; 7
     138:	30 78       	andi	r19, 0x80	; 128
     13a:	90 e0       	ldi	r25, 0x00	; 0
     13c:	28 17       	cp	r18, r24
     13e:	39 07       	cpc	r19, r25
     140:	09 f4       	brne	.+2      	; 0x144 <__vector_2+0x84>
     142:	59 c0       	rjmp	.+178    	; 0x1f6 <__vector_2+0x136>
     144:	fe 01       	movw	r30, r28
     146:	35 96       	adiw	r30, 0x05	; 5
     148:	8a e0       	ldi	r24, 0x0A	; 10
     14a:	df 01       	movw	r26, r30
     14c:	1d 92       	st	X+, r1
     14e:	8a 95       	dec	r24
     150:	e9 f7       	brne	.-6      	; 0x14c <__vector_2+0x8c>
     152:	8a 81       	ldd	r24, Y+2	; 0x02
     154:	85 66       	ori	r24, 0x65	; 101
     156:	b3 d1       	rcall	.+870    	; 0x4be <mcp_read>
     158:	8f 70       	andi	r24, 0x0F	; 15
     15a:	8e 83       	std	Y+6, r24	; 0x06
     15c:	d5 d3       	rcall	.+1962   	; 0x908 <spi_ss_low>
     15e:	8b 81       	ldd	r24, Y+3	; 0x03
     160:	de d3       	rcall	.+1980   	; 0x91e <spi_transmit>
     162:	80 e0       	ldi	r24, 0x00	; 0
     164:	dc d3       	rcall	.+1976   	; 0x91e <spi_transmit>
     166:	8d 83       	std	Y+5, r24	; 0x05
     168:	d1 d3       	rcall	.+1954   	; 0x90c <spi_ss_high>
     16a:	ce d3       	rcall	.+1948   	; 0x908 <spi_ss_low>
     16c:	8b 81       	ldd	r24, Y+3	; 0x03
     16e:	82 60       	ori	r24, 0x02	; 2
     170:	d6 d3       	rcall	.+1964   	; 0x91e <spi_transmit>
     172:	8e 81       	ldd	r24, Y+6	; 0x06
     174:	88 23       	and	r24, r24
     176:	81 f0       	breq	.+32     	; 0x198 <__vector_2+0xd8>
     178:	f1 2c       	mov	r15, r1
     17a:	0f 2d       	mov	r16, r15
     17c:	10 e0       	ldi	r17, 0x00	; 0
     17e:	80 e0       	ldi	r24, 0x00	; 0
     180:	ce d3       	rcall	.+1948   	; 0x91e <spi_transmit>
     182:	e7 e0       	ldi	r30, 0x07	; 7
     184:	f0 e0       	ldi	r31, 0x00	; 0
     186:	ec 0f       	add	r30, r28
     188:	fd 1f       	adc	r31, r29
     18a:	e0 0f       	add	r30, r16
     18c:	f1 1f       	adc	r31, r17
     18e:	80 83       	st	Z, r24
     190:	f3 94       	inc	r15
     192:	8e 81       	ldd	r24, Y+6	; 0x06
     194:	f8 16       	cp	r15, r24
     196:	88 f3       	brcs	.-30     	; 0x17a <__vector_2+0xba>
     198:	b9 d3       	rcall	.+1906   	; 0x90c <spi_ss_high>
     19a:	29 81       	ldd	r18, Y+1	; 0x01
     19c:	e9 81       	ldd	r30, Y+1	; 0x01
     19e:	f0 e0       	ldi	r31, 0x00	; 0
     1a0:	e0 5a       	subi	r30, 0xA0	; 160
     1a2:	fe 4f       	sbci	r31, 0xFE	; 254
     1a4:	80 81       	ld	r24, Z
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	dc 01       	movw	r26, r24
     1aa:	aa 0f       	add	r26, r26
     1ac:	bb 1f       	adc	r27, r27
     1ae:	88 0f       	add	r24, r24
     1b0:	99 1f       	adc	r25, r25
     1b2:	88 0f       	add	r24, r24
     1b4:	99 1f       	adc	r25, r25
     1b6:	88 0f       	add	r24, r24
     1b8:	99 1f       	adc	r25, r25
     1ba:	a8 0f       	add	r26, r24
     1bc:	b9 1f       	adc	r27, r25
     1be:	80 e5       	ldi	r24, 0x50	; 80
     1c0:	28 9f       	mul	r18, r24
     1c2:	a0 0d       	add	r26, r0
     1c4:	b1 1d       	adc	r27, r1
     1c6:	11 24       	eor	r1, r1
     1c8:	ae 59       	subi	r26, 0x9E	; 158
     1ca:	be 4f       	sbci	r27, 0xFE	; 254
     1cc:	8a e0       	ldi	r24, 0x0A	; 10
     1ce:	fe 01       	movw	r30, r28
     1d0:	35 96       	adiw	r30, 0x05	; 5
     1d2:	01 90       	ld	r0, Z+
     1d4:	0d 92       	st	X+, r0
     1d6:	8a 95       	dec	r24
     1d8:	e1 f7       	brne	.-8      	; 0x1d2 <__vector_2+0x112>
     1da:	e9 81       	ldd	r30, Y+1	; 0x01
     1dc:	f0 e0       	ldi	r31, 0x00	; 0
     1de:	a9 81       	ldd	r26, Y+1	; 0x01
     1e0:	b0 e0       	ldi	r27, 0x00	; 0
     1e2:	a0 5a       	subi	r26, 0xA0	; 160
     1e4:	be 4f       	sbci	r27, 0xFE	; 254
     1e6:	8c 91       	ld	r24, X
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	01 96       	adiw	r24, 0x01	; 1
     1ec:	87 70       	andi	r24, 0x07	; 7
     1ee:	90 78       	andi	r25, 0x80	; 128
     1f0:	e0 5a       	subi	r30, 0xA0	; 160
     1f2:	fe 4f       	sbci	r31, 0xFE	; 254
     1f4:	80 83       	st	Z, r24
     1f6:	6c 81       	ldd	r22, Y+4	; 0x04
     1f8:	40 e0       	ldi	r20, 0x00	; 0
     1fa:	8c e2       	ldi	r24, 0x2C	; 44
     1fc:	98 d1       	rcall	.+816    	; 0x52e <mcp_bitmodify>
     1fe:	78 94       	sei
     200:	2e 96       	adiw	r28, 0x0e	; 14
     202:	0f b6       	in	r0, 0x3f	; 63
     204:	f8 94       	cli
     206:	de bf       	out	0x3e, r29	; 62
     208:	0f be       	out	0x3f, r0	; 63
     20a:	cd bf       	out	0x3d, r28	; 61
     20c:	df 91       	pop	r29
     20e:	cf 91       	pop	r28
     210:	ff 91       	pop	r31
     212:	ef 91       	pop	r30
     214:	bf 91       	pop	r27
     216:	af 91       	pop	r26
     218:	9f 91       	pop	r25
     21a:	8f 91       	pop	r24
     21c:	7f 91       	pop	r23
     21e:	6f 91       	pop	r22
     220:	5f 91       	pop	r21
     222:	4f 91       	pop	r20
     224:	3f 91       	pop	r19
     226:	2f 91       	pop	r18
     228:	1f 91       	pop	r17
     22a:	0f 91       	pop	r16
     22c:	ff 90       	pop	r15
     22e:	0f 90       	pop	r0
     230:	0f be       	out	0x3f, r0	; 63
     232:	0f 90       	pop	r0
     234:	1f 90       	pop	r1
     236:	18 95       	reti

00000238 <can_init>:
     238:	8e d1       	rcall	.+796    	; 0x556 <mcp_init>
     23a:	43 e0       	ldi	r20, 0x03	; 3
     23c:	63 e0       	ldi	r22, 0x03	; 3
     23e:	8b e2       	ldi	r24, 0x2B	; 43
     240:	76 d1       	rcall	.+748    	; 0x52e <mcp_bitmodify>
     242:	8b b7       	in	r24, 0x3b	; 59
     244:	80 68       	ori	r24, 0x80	; 128
     246:	8b bf       	out	0x3b, r24	; 59
     248:	08 95       	ret

0000024a <can_send>:
 * Send message on can bus using the specified tx hardware buffer.
 * @param msg Msg to send on bus
 * @param tx_buffer_select Tx buffer to put the message into. 
 */
void can_send(can_msg_t msg, uint8_t tx_buffer_select)
{
     24a:	df 92       	push	r13
     24c:	ef 92       	push	r14
     24e:	ff 92       	push	r15
     250:	0f 93       	push	r16
     252:	1f 93       	push	r17
     254:	cf 93       	push	r28
     256:	df 93       	push	r29
     258:	cd b7       	in	r28, 0x3d	; 61
     25a:	de b7       	in	r29, 0x3e	; 62
     25c:	2a 97       	sbiw	r28, 0x0a	; 10
     25e:	0f b6       	in	r0, 0x3f	; 63
     260:	f8 94       	cli
     262:	de bf       	out	0x3e, r29	; 62
     264:	0f be       	out	0x3f, r0	; 63
     266:	cd bf       	out	0x3d, r28	; 61
     268:	09 83       	std	Y+1, r16	; 0x01
     26a:	d1 2e       	mov	r13, r17
     26c:	1a 83       	std	Y+2, r17	; 0x02
     26e:	2b 83       	std	Y+3, r18	; 0x03
     270:	3c 83       	std	Y+4, r19	; 0x04
     272:	4d 83       	std	Y+5, r20	; 0x05
     274:	5e 83       	std	Y+6, r21	; 0x06
     276:	6f 83       	std	Y+7, r22	; 0x07
     278:	78 87       	std	Y+8, r23	; 0x08
     27a:	89 87       	std	Y+9, r24	; 0x09
     27c:	9a 87       	std	Y+10, r25	; 0x0a
	/// \todo check for buffer full, can return false if buffer is full
	
	
	uint8_t MCP_TXBn = MCP_TXB0;
	uint8_t MCP_LOAD_TXn = MCP_LOAD_TX0;
	switch (tx_buffer_select)
     27e:	81 e0       	ldi	r24, 0x01	; 1
     280:	e8 16       	cp	r14, r24
     282:	49 f0       	breq	.+18     	; 0x296 <can_send+0x4c>
     284:	e2 e0       	ldi	r30, 0x02	; 2
     286:	ee 16       	cp	r14, r30
     288:	19 f0       	breq	.+6      	; 0x290 <can_send+0x46>
{
	/// \todo check for buffer full, can return false if buffer is full
	
	
	uint8_t MCP_TXBn = MCP_TXB0;
	uint8_t MCP_LOAD_TXn = MCP_LOAD_TX0;
     28a:	00 e4       	ldi	r16, 0x40	; 64
void can_send(can_msg_t msg, uint8_t tx_buffer_select)
{
	/// \todo check for buffer full, can return false if buffer is full
	
	
	uint8_t MCP_TXBn = MCP_TXB0;
     28c:	10 e3       	ldi	r17, 0x30	; 48
     28e:	05 c0       	rjmp	.+10     	; 0x29a <can_send+0x50>
		MCP_TXBn = MCP_TXB1;
		MCP_LOAD_TXn = MCP_LOAD_TX1;
		break;
	case 2:
		MCP_TXBn = MCP_TXB2;
		MCP_LOAD_TXn = MCP_LOAD_TX2;
     290:	04 e4       	ldi	r16, 0x44	; 68
	case 1:
		MCP_TXBn = MCP_TXB1;
		MCP_LOAD_TXn = MCP_LOAD_TX1;
		break;
	case 2:
		MCP_TXBn = MCP_TXB2;
     292:	10 e5       	ldi	r17, 0x50	; 80
		MCP_LOAD_TXn = MCP_LOAD_TX2;
		break;
     294:	02 c0       	rjmp	.+4      	; 0x29a <can_send+0x50>
		MCP_TXBn = MCP_TXB0;
		MCP_LOAD_TXn = MCP_LOAD_TX0;
		break;
	case 1:
		MCP_TXBn = MCP_TXB1;
		MCP_LOAD_TXn = MCP_LOAD_TX1;
     296:	02 e4       	ldi	r16, 0x42	; 66
	case 0:
		MCP_TXBn = MCP_TXB0;
		MCP_LOAD_TXn = MCP_LOAD_TX0;
		break;
	case 1:
		MCP_TXBn = MCP_TXB1;
     298:	10 e4       	ldi	r17, 0x40	; 64
		break;
	}
	//fprintf(&uart_out, "MCP_TXBn=%x\tMCP_LOAD_TXn=%x\n", MCP_TXBn, MCP_LOAD_TXn);
	
	// set tx length
	mcp_write(MCP_TXBn | MCP_TXBnDLC, msg.length);
     29a:	6d 2d       	mov	r22, r13
     29c:	81 2f       	mov	r24, r17
     29e:	85 60       	ori	r24, 0x05	; 5
     2a0:	1c d1       	rcall	.+568    	; 0x4da <mcp_write>
	
	// write sid
	mcp_write(MCP_TXBn | MCP_TXBnSIDL, 0x00);		// use only SIDH
     2a2:	60 e0       	ldi	r22, 0x00	; 0
     2a4:	81 2f       	mov	r24, r17
     2a6:	82 60       	ori	r24, 0x02	; 2
     2a8:	18 d1       	rcall	.+560    	; 0x4da <mcp_write>
	mcp_write(MCP_TXBn | MCP_TXBnSIDH , msg.sid);
     2aa:	69 81       	ldd	r22, Y+1	; 0x01
     2ac:	81 2f       	mov	r24, r17
     2ae:	81 60       	ori	r24, 0x01	; 1
     2b0:	14 d1       	rcall	.+552    	; 0x4da <mcp_write>
	
	// write data
	spi_ss_low();
     2b2:	2a d3       	rcall	.+1620   	; 0x908 <spi_ss_low>
	spi_transmit(MCP_LOAD_TXn | 0x01); ///\todo add define to explain
     2b4:	80 2f       	mov	r24, r16
     2b6:	81 60       	ori	r24, 0x01	; 1
     2b8:	32 d3       	rcall	.+1636   	; 0x91e <spi_transmit>
	for (uint8_t i = 0; i < msg.length; ++i)
     2ba:	dd 20       	and	r13, r13
     2bc:	59 f0       	breq	.+22     	; 0x2d4 <can_send+0x8a>
     2be:	8e 01       	movw	r16, r28
     2c0:	0d 5f       	subi	r16, 0xFD	; 253
     2c2:	1f 4f       	sbci	r17, 0xFF	; 255
     2c4:	f1 2c       	mov	r15, r1
	{
		spi_transmit(msg.data[i]);
     2c6:	f8 01       	movw	r30, r16
     2c8:	81 91       	ld	r24, Z+
     2ca:	8f 01       	movw	r16, r30
     2cc:	28 d3       	rcall	.+1616   	; 0x91e <spi_transmit>
	mcp_write(MCP_TXBn | MCP_TXBnSIDH , msg.sid);
	
	// write data
	spi_ss_low();
	spi_transmit(MCP_LOAD_TXn | 0x01); ///\todo add define to explain
	for (uint8_t i = 0; i < msg.length; ++i)
     2ce:	f3 94       	inc	r15
     2d0:	fd 10       	cpse	r15, r13
     2d2:	f9 cf       	rjmp	.-14     	; 0x2c6 <can_send+0x7c>
	{
		spi_transmit(msg.data[i]);
	}
	spi_ss_high();
     2d4:	1b d3       	rcall	.+1590   	; 0x90c <spi_ss_high>
	
	mcp_rts(tx_buffer_select);
     2d6:	8e 2d       	mov	r24, r14
     2d8:	0f d1       	rcall	.+542    	; 0x4f8 <mcp_rts>

}
     2da:	2a 96       	adiw	r28, 0x0a	; 10
     2dc:	0f b6       	in	r0, 0x3f	; 63
     2de:	f8 94       	cli
     2e0:	de bf       	out	0x3e, r29	; 62
     2e2:	0f be       	out	0x3f, r0	; 63
     2e4:	cd bf       	out	0x3d, r28	; 61
     2e6:	df 91       	pop	r29
     2e8:	cf 91       	pop	r28
     2ea:	1f 91       	pop	r17
     2ec:	0f 91       	pop	r16
     2ee:	ff 90       	pop	r15
     2f0:	ef 90       	pop	r14
     2f2:	df 90       	pop	r13
     2f4:	08 95       	ret

000002f6 <convert_range>:
#define ANALOG_THRESH 25 // 18 before

#define CLICK_PIN PE0

int8_t convert_range(uint8_t data){ // convert from 0->255 to -100->100
	return (float)data*0.784314 - 100;
     2f6:	68 2f       	mov	r22, r24
     2f8:	70 e0       	ldi	r23, 0x00	; 0
     2fa:	80 e0       	ldi	r24, 0x00	; 0
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	40 d4       	rcall	.+2176   	; 0xb80 <__floatunsisf>
     300:	2d ec       	ldi	r18, 0xCD	; 205
     302:	38 ec       	ldi	r19, 0xC8	; 200
     304:	48 e4       	ldi	r20, 0x48	; 72
     306:	5f e3       	ldi	r21, 0x3F	; 63
     308:	c9 d4       	rcall	.+2450   	; 0xc9c <__mulsf3>
     30a:	20 e0       	ldi	r18, 0x00	; 0
     30c:	30 e0       	ldi	r19, 0x00	; 0
     30e:	48 ec       	ldi	r20, 0xC8	; 200
     310:	52 e4       	ldi	r21, 0x42	; 66
     312:	a0 d3       	rcall	.+1856   	; 0xa54 <__subsf3>
     314:	04 d4       	rcall	.+2056   	; 0xb1e <__fixsfsi>
     316:	86 2f       	mov	r24, r22
}
     318:	08 95       	ret

0000031a <joy_direction>:

direction_t joy_direction(uint8_t joy_x, uint8_t joy_y){
	if (abs(joy_x-128) < ANALOG_THRESH && abs(joy_y-128) < ANALOG_THRESH){
     31a:	28 2f       	mov	r18, r24
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	28 56       	subi	r18, 0x68	; 104
     320:	31 09       	sbc	r19, r1
     322:	21 33       	cpi	r18, 0x31	; 49
     324:	31 05       	cpc	r19, r1
     326:	38 f4       	brcc	.+14     	; 0x336 <joy_direction+0x1c>
     328:	26 2f       	mov	r18, r22
     32a:	30 e0       	ldi	r19, 0x00	; 0
     32c:	28 56       	subi	r18, 0x68	; 104
     32e:	31 09       	sbc	r19, r1
     330:	21 33       	cpi	r18, 0x31	; 49
     332:	31 05       	cpc	r19, r1
     334:	10 f1       	brcs	.+68     	; 0x37a <joy_direction+0x60>
		return NEUTRAL;
	}
	
	if (joy_x - 128 > abs(joy_y - 128))
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	80 58       	subi	r24, 0x80	; 128
     33a:	91 09       	sbc	r25, r1
     33c:	70 e0       	ldi	r23, 0x00	; 0
     33e:	60 58       	subi	r22, 0x80	; 128
     340:	71 09       	sbc	r23, r1
     342:	9b 01       	movw	r18, r22
     344:	77 23       	and	r23, r23
     346:	24 f4       	brge	.+8      	; 0x350 <joy_direction+0x36>
     348:	22 27       	eor	r18, r18
     34a:	33 27       	eor	r19, r19
     34c:	26 1b       	sub	r18, r22
     34e:	37 0b       	sbc	r19, r23
     350:	28 17       	cp	r18, r24
     352:	39 07       	cpc	r19, r25
     354:	a4 f0       	brlt	.+40     	; 0x37e <joy_direction+0x64>
		return RIGHT;
	else if (joy_x - 128 < - abs(joy_y - 128))
     356:	31 95       	neg	r19
     358:	21 95       	neg	r18
     35a:	31 09       	sbc	r19, r1
     35c:	82 17       	cp	r24, r18
     35e:	93 07       	cpc	r25, r19
     360:	84 f0       	brlt	.+32     	; 0x382 <joy_direction+0x68>
		return LEFT;
	else if (joy_y - 128 > abs(joy_x - 128))
     362:	9c 01       	movw	r18, r24
     364:	99 23       	and	r25, r25
     366:	24 f4       	brge	.+8      	; 0x370 <joy_direction+0x56>
     368:	22 27       	eor	r18, r18
     36a:	33 27       	eor	r19, r19
     36c:	28 1b       	sub	r18, r24
     36e:	39 0b       	sbc	r19, r25
     370:	26 17       	cp	r18, r22
     372:	37 07       	cpc	r19, r23
     374:	44 f4       	brge	.+16     	; 0x386 <joy_direction+0x6c>
		return UP;
     376:	82 e0       	ldi	r24, 0x02	; 2
     378:	08 95       	ret
	return (float)data*0.784314 - 100;
}

direction_t joy_direction(uint8_t joy_x, uint8_t joy_y){
	if (abs(joy_x-128) < ANALOG_THRESH && abs(joy_y-128) < ANALOG_THRESH){
		return NEUTRAL;
     37a:	84 e0       	ldi	r24, 0x04	; 4
     37c:	08 95       	ret
	}
	
	if (joy_x - 128 > abs(joy_y - 128))
		return RIGHT;
     37e:	81 e0       	ldi	r24, 0x01	; 1
     380:	08 95       	ret
	else if (joy_x - 128 < - abs(joy_y - 128))
		return LEFT;
     382:	80 e0       	ldi	r24, 0x00	; 0
     384:	08 95       	ret
	else if (joy_y - 128 > abs(joy_x - 128))
		return UP;
	else
		return DOWN;
     386:	83 e0       	ldi	r24, 0x03	; 3
	
}
     388:	08 95       	ret

0000038a <send_joy>:

void send_joy(void)
{
     38a:	ef 92       	push	r14
     38c:	ff 92       	push	r15
     38e:	0f 93       	push	r16
     390:	1f 93       	push	r17
     392:	cf 93       	push	r28
     394:	df 93       	push	r29
     396:	cd b7       	in	r28, 0x3d	; 61
     398:	de b7       	in	r29, 0x3e	; 62
     39a:	2a 97       	sbiw	r28, 0x0a	; 10
     39c:	0f b6       	in	r0, 0x3f	; 63
     39e:	f8 94       	cli
     3a0:	de bf       	out	0x3e, r29	; 62
     3a2:	0f be       	out	0x3f, r0	; 63
     3a4:	cd bf       	out	0x3d, r28	; 61
	uint8_t joy_x = adc_read_channel(CH_JOY_X);
     3a6:	81 e0       	ldi	r24, 0x01	; 1
     3a8:	83 de       	rcall	.-762    	; 0xb0 <adc_read_channel>
     3aa:	18 2f       	mov	r17, r24
	uint8_t joy_y = adc_read_channel(CH_JOY_Y);
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	80 de       	rcall	.-768    	; 0xb0 <adc_read_channel>
     3b0:	f8 2e       	mov	r15, r24
	direction_t joy_dir = joy_direction(joy_x, joy_y);
     3b2:	68 2f       	mov	r22, r24
     3b4:	81 2f       	mov	r24, r17
     3b6:	b1 df       	rcall	.-158    	; 0x31a <joy_direction>
     3b8:	08 2f       	mov	r16, r24
	
	int8_t joy_xs = convert_range(joy_x);
     3ba:	81 2f       	mov	r24, r17
     3bc:	9c df       	rcall	.-200    	; 0x2f6 <convert_range>
     3be:	18 2f       	mov	r17, r24
	int8_t joy_ys = convert_range(joy_y);
     3c0:	8f 2d       	mov	r24, r15
     3c2:	99 df       	rcall	.-206    	; 0x2f6 <convert_range>
	
	uint8_t joy_click = !(PINE & (1 << CLICK_PIN));
     3c4:	95 b1       	in	r25, 0x05	; 5
     3c6:	21 e0       	ldi	r18, 0x01	; 1
     3c8:	92 27       	eor	r25, r18
     3ca:	91 70       	andi	r25, 0x01	; 1
	
	can_msg_t msg = {};
     3cc:	fe 01       	movw	r30, r28
     3ce:	31 96       	adiw	r30, 0x01	; 1
     3d0:	3a e0       	ldi	r19, 0x0A	; 10
     3d2:	df 01       	movw	r26, r30
     3d4:	1d 92       	st	X+, r1
     3d6:	3a 95       	dec	r19
     3d8:	e9 f7       	brne	.-6      	; 0x3d4 <send_joy+0x4a>
	msg.sid = MSG_JOY;
     3da:	29 83       	std	Y+1, r18	; 0x01
	msg.data[0] = joy_xs;
     3dc:	1b 83       	std	Y+3, r17	; 0x03
	msg.data[1] = joy_ys;
     3de:	8c 83       	std	Y+4, r24	; 0x04
	msg.data[2] = joy_dir; // casting?
     3e0:	0d 83       	std	Y+5, r16	; 0x05
	msg.data[3] = (uint8_t)joy_click;
     3e2:	9e 83       	std	Y+6, r25	; 0x06
	msg.length = 4;
     3e4:	24 e0       	ldi	r18, 0x04	; 4
     3e6:	2a 83       	std	Y+2, r18	; 0x02
	
	fprintf(&uart_out, "joy sent: %i\t%i\t%i\t%i\n",   joy_xs, joy_ys, joy_dir, joy_click);
     3e8:	1f 92       	push	r1
     3ea:	9f 93       	push	r25
     3ec:	1f 92       	push	r1
     3ee:	0f 93       	push	r16
     3f0:	28 2f       	mov	r18, r24
     3f2:	33 27       	eor	r19, r19
     3f4:	27 fd       	sbrc	r18, 7
     3f6:	30 95       	com	r19
     3f8:	3f 93       	push	r19
     3fa:	8f 93       	push	r24
     3fc:	21 2f       	mov	r18, r17
     3fe:	33 27       	eor	r19, r19
     400:	27 fd       	sbrc	r18, 7
     402:	30 95       	com	r19
     404:	3f 93       	push	r19
     406:	1f 93       	push	r17
     408:	84 e2       	ldi	r24, 0x24	; 36
     40a:	91 e0       	ldi	r25, 0x01	; 1
     40c:	9f 93       	push	r25
     40e:	8f 93       	push	r24
     410:	86 e1       	ldi	r24, 0x16	; 22
     412:	91 e0       	ldi	r25, 0x01	; 1
     414:	9f 93       	push	r25
     416:	8f 93       	push	r24
     418:	da d5       	rcall	.+2996   	; 0xfce <fprintf>
	
	can_send(msg, 0);
     41a:	e1 2c       	mov	r14, r1
     41c:	09 81       	ldd	r16, Y+1	; 0x01
     41e:	1a 81       	ldd	r17, Y+2	; 0x02
     420:	2b 81       	ldd	r18, Y+3	; 0x03
     422:	3c 81       	ldd	r19, Y+4	; 0x04
     424:	4d 81       	ldd	r20, Y+5	; 0x05
     426:	5e 81       	ldd	r21, Y+6	; 0x06
     428:	6f 81       	ldd	r22, Y+7	; 0x07
     42a:	78 85       	ldd	r23, Y+8	; 0x08
     42c:	89 85       	ldd	r24, Y+9	; 0x09
     42e:	9a 85       	ldd	r25, Y+10	; 0x0a
     430:	0c df       	rcall	.-488    	; 0x24a <can_send>
     432:	0f b6       	in	r0, 0x3f	; 63
     434:	f8 94       	cli
     436:	de bf       	out	0x3e, r29	; 62
     438:	0f be       	out	0x3f, r0	; 63
     43a:	cd bf       	out	0x3d, r28	; 61
}
     43c:	2a 96       	adiw	r28, 0x0a	; 10
     43e:	0f b6       	in	r0, 0x3f	; 63
     440:	f8 94       	cli
     442:	de bf       	out	0x3e, r29	; 62
     444:	0f be       	out	0x3f, r0	; 63
     446:	cd bf       	out	0x3d, r28	; 61
     448:	df 91       	pop	r29
     44a:	cf 91       	pop	r28
     44c:	1f 91       	pop	r17
     44e:	0f 91       	pop	r16
     450:	ff 90       	pop	r15
     452:	ef 90       	pop	r14
     454:	08 95       	ret

00000456 <joystick_init>:


void joystick_init(void){
	PORTE  |= 1 << CLICK_PIN;    // + PUD=0 gives pull-up
     456:	38 9a       	sbi	0x07, 0	; 7
	DDRE   &= ~(1 << CLICK_PIN); // input
     458:	30 98       	cbi	0x06, 0	; 6
     45a:	08 95       	ret

0000045c <main>:
#include "joystick.h"


int main()
{
	cli();
     45c:	f8 94       	cli
	// SRAM init
	MCUCR |= (1 << SRE);
     45e:	85 b7       	in	r24, 0x35	; 53
     460:	80 68       	ori	r24, 0x80	; 128
     462:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1 << XMM2);
     464:	80 b7       	in	r24, 0x30	; 48
     466:	80 62       	ori	r24, 0x20	; 32
     468:	80 bf       	out	0x30, r24	; 48
	
	uart_init();
     46a:	e4 d2       	rcall	.+1480   	; 0xa34 <uart_init>
	
	// setup heap
	__malloc_heap_start = (char*)RAM_ADR;
     46c:	80 e0       	ldi	r24, 0x00	; 0
     46e:	98 e1       	ldi	r25, 0x18	; 24
     470:	90 93 03 01 	sts	0x0103, r25
     474:	80 93 02 01 	sts	0x0102, r24
	__malloc_heap_end   = (char*)(RAM_ADR + RAM_SIZE);
     478:	80 e0       	ldi	r24, 0x00	; 0
     47a:	90 e2       	ldi	r25, 0x20	; 32
     47c:	90 93 01 01 	sts	0x0101, r25
     480:	80 93 00 01 	sts	0x0100, r24
	
	adc_init(); // adc init (must be after SRAM init)
     484:	12 de       	rcall	.-988    	; 0xaa <adc_init>
	oled_init();
     486:	45 d1       	rcall	.+650    	; 0x712 <oled_init>
	menu_init(); // after oled
     488:	d4 d0       	rcall	.+424    	; 0x632 <menu_init>
	spi_init();
     48a:	42 d2       	rcall	.+1156   	; 0x910 <spi_init>
	can_init(); // after spi
     48c:	d5 de       	rcall	.-598    	; 0x238 <can_init>
	
	sei();
     48e:	78 94       	sei
	
	// setup printf
	stdout = &uart_out; // printf defaults to oled
     490:	86 e1       	ldi	r24, 0x16	; 22
     492:	91 e0       	ldi	r25, 0x01	; 1
     494:	90 93 93 02 	sts	0x0293, r25
     498:	80 93 92 02 	sts	0x0292, r24
	stdin  = &uart_in;
     49c:	88 e0       	ldi	r24, 0x08	; 8
     49e:	91 e0       	ldi	r25, 0x01	; 1
     4a0:	90 93 91 02 	sts	0x0291, r25
     4a4:	80 93 90 02 	sts	0x0290, r24
	noclick_msg.data[3] = 0;
	click_msg.length = 4;
	
	while (1)
	{	
		send_joy();
     4a8:	70 df       	rcall	.-288    	; 0x38a <send_joy>
     4aa:	fe cf       	rjmp	.-4      	; 0x4a8 <main+0x4c>

000004ac <mcp_reset>:



void mcp_reset()
{
	spi_ss_low();
     4ac:	2d d2       	rcall	.+1114   	; 0x908 <spi_ss_low>
	spi_transmit(MCP_RESET);
     4ae:	80 ec       	ldi	r24, 0xC0	; 192
     4b0:	36 d2       	rcall	.+1132   	; 0x91e <spi_transmit>
	spi_ss_high();
     4b2:	2c d2       	rcall	.+1112   	; 0x90c <spi_ss_high>
	
	for (uint8_t _ = 0; _ < 128; ++_);	// Wait for 128 cycles
     4b4:	80 e0       	ldi	r24, 0x00	; 0
     4b6:	8f 5f       	subi	r24, 0xFF	; 255
     4b8:	80 38       	cpi	r24, 0x80	; 128
     4ba:	e9 f7       	brne	.-6      	; 0x4b6 <mcp_reset+0xa>
	
	#ifdef MCP_DEBUG
	fprintf(&uart_out, "MCP_RESET\n");
	#endif // MCP_DEBUG
}
     4bc:	08 95       	ret

000004be <mcp_read>:

uint8_t mcp_read(uint8_t adr)
{
     4be:	cf 93       	push	r28
     4c0:	c8 2f       	mov	r28, r24
	spi_ss_low();
     4c2:	22 d2       	rcall	.+1092   	; 0x908 <spi_ss_low>
	spi_transmit(MCP_READ);
     4c4:	83 e0       	ldi	r24, 0x03	; 3
     4c6:	2b d2       	rcall	.+1110   	; 0x91e <spi_transmit>
	spi_transmit(adr);
     4c8:	8c 2f       	mov	r24, r28
     4ca:	29 d2       	rcall	.+1106   	; 0x91e <spi_transmit>
	uint8_t read = spi_transmit(0);
     4cc:	80 e0       	ldi	r24, 0x00	; 0
     4ce:	27 d2       	rcall	.+1102   	; 0x91e <spi_transmit>
     4d0:	c8 2f       	mov	r28, r24
	spi_ss_high();
     4d2:	1c d2       	rcall	.+1080   	; 0x90c <spi_ss_high>
	#ifdef MCP_DEBUG
	fprintf(&uart_out, "MCP_READ %x %x\n", adr, read);
	#endif // MCP_DEBUG
	
	return read;
}
     4d4:	8c 2f       	mov	r24, r28
     4d6:	cf 91       	pop	r28
     4d8:	08 95       	ret

000004da <mcp_write>:
	return data;
}


void mcp_write(uint8_t adr, uint8_t data)
{
     4da:	cf 93       	push	r28
     4dc:	df 93       	push	r29
     4de:	d8 2f       	mov	r29, r24
     4e0:	c6 2f       	mov	r28, r22
	spi_ss_low();
     4e2:	12 d2       	rcall	.+1060   	; 0x908 <spi_ss_low>
	spi_transmit(MCP_WRITE);
     4e4:	82 e0       	ldi	r24, 0x02	; 2
     4e6:	1b d2       	rcall	.+1078   	; 0x91e <spi_transmit>
	spi_transmit(adr);
     4e8:	8d 2f       	mov	r24, r29
     4ea:	19 d2       	rcall	.+1074   	; 0x91e <spi_transmit>
	spi_transmit(data);
     4ec:	8c 2f       	mov	r24, r28
     4ee:	17 d2       	rcall	.+1070   	; 0x91e <spi_transmit>
	spi_ss_high();
     4f0:	0d d2       	rcall	.+1050   	; 0x90c <spi_ss_high>
	
	
	#ifdef MCP_DEBUG
	fprintf(&uart_out, "MCP_WRITE\t%x\t%i\n", adr, data);
	#endif // MCP_DEBUG
}
     4f2:	df 91       	pop	r29
     4f4:	cf 91       	pop	r28
     4f6:	08 95       	ret

000004f8 <mcp_rts>:

void mcp_rts(uint8_t tx_buffer_select)
{
     4f8:	cf 93       	push	r28
     4fa:	c8 2f       	mov	r28, r24
	spi_ss_low();
     4fc:	05 d2       	rcall	.+1034   	; 0x908 <spi_ss_low>
	spi_transmit(MCP_RTS | (1<<tx_buffer_select));
     4fe:	21 e0       	ldi	r18, 0x01	; 1
     500:	30 e0       	ldi	r19, 0x00	; 0
     502:	c9 01       	movw	r24, r18
     504:	02 c0       	rjmp	.+4      	; 0x50a <__stack+0xb>
     506:	88 0f       	add	r24, r24
     508:	99 1f       	adc	r25, r25
     50a:	ca 95       	dec	r28
     50c:	e2 f7       	brpl	.-8      	; 0x506 <__stack+0x7>
     50e:	80 68       	ori	r24, 0x80	; 128
     510:	06 d2       	rcall	.+1036   	; 0x91e <spi_transmit>
	spi_ss_high();
     512:	fc d1       	rcall	.+1016   	; 0x90c <spi_ss_high>
	
	#ifdef MCP_DEBUG
	fprintf(&uart_out, "MCP_RTS\t%i\n", tx_buffer);
	#endif // MCP_DEBUG
}
     514:	cf 91       	pop	r28
     516:	08 95       	ret

00000518 <mcp_readstatus>:

uint8_t mcp_readstatus()
{
     518:	cf 93       	push	r28
	spi_ss_low();
     51a:	f6 d1       	rcall	.+1004   	; 0x908 <spi_ss_low>
	spi_transmit(MCP_READ_STATUS);
     51c:	80 ea       	ldi	r24, 0xA0	; 160
     51e:	ff d1       	rcall	.+1022   	; 0x91e <spi_transmit>
	uint8_t status = spi_transmit(0);
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	fd d1       	rcall	.+1018   	; 0x91e <spi_transmit>
     524:	c8 2f       	mov	r28, r24
	spi_ss_high();
     526:	f2 d1       	rcall	.+996    	; 0x90c <spi_ss_high>
	#ifdef MCP_DEBUG
	fprintf(&uart_out, "MCP_READ_STATUS\t%x\n", status);
	#endif // MCP_DEBUG
	
	return status;
}
     528:	8c 2f       	mov	r24, r28
     52a:	cf 91       	pop	r28
     52c:	08 95       	ret

0000052e <mcp_bitmodify>:

void mcp_bitmodify(uint8_t adr, uint8_t mask, uint8_t data)
{
     52e:	1f 93       	push	r17
     530:	cf 93       	push	r28
     532:	df 93       	push	r29
     534:	18 2f       	mov	r17, r24
     536:	d6 2f       	mov	r29, r22
     538:	c4 2f       	mov	r28, r20
	spi_ss_low();
     53a:	e6 d1       	rcall	.+972    	; 0x908 <spi_ss_low>
	spi_transmit(MCP_BITMOD);
     53c:	85 e0       	ldi	r24, 0x05	; 5
     53e:	ef d1       	rcall	.+990    	; 0x91e <spi_transmit>
	spi_transmit(adr);
     540:	81 2f       	mov	r24, r17
     542:	ed d1       	rcall	.+986    	; 0x91e <spi_transmit>
	spi_transmit(mask);
     544:	8d 2f       	mov	r24, r29
     546:	eb d1       	rcall	.+982    	; 0x91e <spi_transmit>
	spi_transmit(data);
     548:	8c 2f       	mov	r24, r28
     54a:	e9 d1       	rcall	.+978    	; 0x91e <spi_transmit>
	spi_ss_high();
     54c:	df d1       	rcall	.+958    	; 0x90c <spi_ss_high>
	
	#ifdef MCP_DEBUG
	fprintf(&uart_out, "MCP_BITMOD\t%x\t%x\t%x\n", adr, mask, data);
	#endif // MCP_DEBUG
}
     54e:	df 91       	pop	r29
     550:	cf 91       	pop	r28
     552:	1f 91       	pop	r17
     554:	08 95       	ret

00000556 <mcp_init>:
#include "uart.h"


void mcp_init()
{
	mcp_reset();
     556:	aa df       	rcall	.-172    	; 0x4ac <mcp_reset>
	const uint8_t BRP		= 1;	// TQ = 2*Tosc*(BRP+1)  = 250 ns
	const uint8_t PrSeg		= 1;	// tPropSeg = (PrSeg + 1)
	const uint8_t PhSeg1	= 2;	// tPS1 = (PhSeg1 + 1)*TQ
	const uint8_t PhSeg2	= 2;	// tPS2 = (PhSeg2 + 1)*TQ
	
	mcp_write(MCP_CNF1, BRP);
     558:	61 e0       	ldi	r22, 0x01	; 1
     55a:	8a e2       	ldi	r24, 0x2A	; 42
     55c:	be df       	rcall	.-132    	; 0x4da <mcp_write>
	mcp_write(MCP_CNF2, PrSeg | (PhSeg1 << 3));
     55e:	61 e1       	ldi	r22, 0x11	; 17
     560:	89 e2       	ldi	r24, 0x29	; 41
     562:	bb df       	rcall	.-138    	; 0x4da <mcp_write>
	mcp_write(MCP_CNF3, PhSeg2);
     564:	62 e0       	ldi	r22, 0x02	; 2
     566:	88 e2       	ldi	r24, 0x28	; 40
     568:	b8 df       	rcall	.-144    	; 0x4da <mcp_write>


	// Setup Rx registers
	//mcp_write(MCP_RXM0SIDH, 0);
	//mcp_write(MCP_RXM0SIDL, 0);
	mcp_bitmodify(MCP_RXB0CTRL, 0x60, 0x60);
     56a:	40 e6       	ldi	r20, 0x60	; 96
     56c:	60 e6       	ldi	r22, 0x60	; 96
     56e:	80 e6       	ldi	r24, 0x60	; 96
     570:	de df       	rcall	.-68     	; 0x52e <mcp_bitmodify>
	mcp_bitmodify(MCP_RXB1CTRL, 0x60, 0x60);	
     572:	40 e6       	ldi	r20, 0x60	; 96
     574:	60 e6       	ldi	r22, 0x60	; 96
     576:	80 e7       	ldi	r24, 0x70	; 112
     578:	da df       	rcall	.-76     	; 0x52e <mcp_bitmodify>
	
	// go to normal mode
	mcp_bitmodify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);
     57a:	40 e0       	ldi	r20, 0x00	; 0
     57c:	60 ee       	ldi	r22, 0xE0	; 224
     57e:	8f e0       	ldi	r24, 0x0F	; 15
     580:	d6 cf       	rjmp	.-84     	; 0x52e <mcp_bitmodify>
     582:	08 95       	ret

00000584 <menu_action_nothing>:
/// implement an empty action that submenus can have.
void menu_action_nothing(){};

/// Setup atmega162 IO to interface with clicker on joystick.
void menu_click_init(){
	joystick_init();
     584:	08 95       	ret

00000586 <menu_init_menu>:

/*!
 * Allocate a submenu on the heap and make parent->submenu[i] point there
 * Give submenu specified title and callback.
 */
menu_t* menu_init_menu(char* title, menu_t* parent, void (*action)(void)){
     586:	cf 92       	push	r12
     588:	df 92       	push	r13
     58a:	ef 92       	push	r14
     58c:	ff 92       	push	r15
     58e:	0f 93       	push	r16
     590:	1f 93       	push	r17
     592:	cf 93       	push	r28
     594:	df 93       	push	r29
     596:	6c 01       	movw	r12, r24
     598:	eb 01       	movw	r28, r22
     59a:	7a 01       	movw	r14, r20
	menu_t* menu = (menu_t*) malloc(sizeof(menu_t));	
     59c:	89 e2       	ldi	r24, 0x29	; 41
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	e0 d3       	rcall	.+1984   	; 0xd62 <malloc>
     5a2:	8c 01       	movw	r16, r24
     5a4:	fc 01       	movw	r30, r24
     5a6:	88 e1       	ldi	r24, 0x18	; 24
	
	for (uint8_t i = 0; i <= MAX_TITLE_LENGTH ; i++){
		menu->title[i] = '\0';
     5a8:	11 92       	st	Z+, r1
     5aa:	81 50       	subi	r24, 0x01	; 1
 * Give submenu specified title and callback.
 */
menu_t* menu_init_menu(char* title, menu_t* parent, void (*action)(void)){
	menu_t* menu = (menu_t*) malloc(sizeof(menu_t));	
	
	for (uint8_t i = 0; i <= MAX_TITLE_LENGTH ; i++){
     5ac:	e9 f7       	brne	.-6      	; 0x5a8 <menu_init_menu+0x22>
		menu->title[i] = '\0';
	}
	
	strncpy(menu->title, title, MAX_TITLE_LENGTH);	// Need to guarantee terminating '\0'
     5ae:	47 e1       	ldi	r20, 0x17	; 23
     5b0:	50 e0       	ldi	r21, 0x00	; 0
     5b2:	b6 01       	movw	r22, r12
     5b4:	c8 01       	movw	r24, r16
     5b6:	fc d4       	rcall	.+2552   	; 0xfb0 <strncpy>
     5b8:	f8 01       	movw	r30, r16
	
	for (uint8_t i = 0; i < MAX_SUBMENUS ; i++){
     5ba:	80 e0       	ldi	r24, 0x00	; 0
		menu->submenus[i] = (menu_t*)NULL;
     5bc:	10 8e       	std	Z+24, r1	; 0x18
     5be:	17 8a       	std	Z+23, r1	; 0x17
		menu->title[i] = '\0';
	}
	
	strncpy(menu->title, title, MAX_TITLE_LENGTH);	// Need to guarantee terminating '\0'
	
	for (uint8_t i = 0; i < MAX_SUBMENUS ; i++){
     5c0:	8f 5f       	subi	r24, 0xFF	; 255
     5c2:	32 96       	adiw	r30, 0x02	; 2
     5c4:	87 30       	cpi	r24, 0x07	; 7
     5c6:	d1 f7       	brne	.-12     	; 0x5bc <menu_init_menu+0x36>
		menu->submenus[i] = (menu_t*)NULL;
	}
	
	if (parent == NULL){
     5c8:	20 97       	sbiw	r28, 0x00	; 0
     5ca:	41 f4       	brne	.+16     	; 0x5dc <menu_init_menu+0x56>
		menu->parent = menu;
     5cc:	f8 01       	movw	r30, r16
     5ce:	16 a3       	std	Z+38, r17	; 0x26
     5d0:	05 a3       	std	Z+37, r16	; 0x25
		*/
		return NULL; // return NULL if no more room
	}
	
	///\todo {must also be added when the else{...} statement excecutes}
	menu->action = action;
     5d2:	f0 a6       	std	Z+40, r15	; 0x28
     5d4:	e7 a2       	std	Z+39, r14	; 0x27
	
	return menu;
     5d6:	80 2f       	mov	r24, r16
     5d8:	91 2f       	mov	r25, r17
     5da:	22 c0       	rjmp	.+68     	; 0x620 <menu_init_menu+0x9a>
	}
	
	if (parent == NULL){
		menu->parent = menu;
	} else {
		menu->parent = parent;
     5dc:	f8 01       	movw	r30, r16
     5de:	d6 a3       	std	Z+38, r29	; 0x26
     5e0:	c5 a3       	std	Z+37, r28	; 0x25
		
		for (int i=0; i < MAX_SUBMENUS; i++){
			if (parent->submenus[i] == NULL){
     5e2:	8f 89       	ldd	r24, Y+23	; 0x17
     5e4:	98 8d       	ldd	r25, Y+24	; 0x18
     5e6:	89 2b       	or	r24, r25
     5e8:	41 f0       	breq	.+16     	; 0x5fa <menu_init_menu+0x74>
     5ea:	fe 01       	movw	r30, r28
	if (parent == NULL){
		menu->parent = menu;
	} else {
		menu->parent = parent;
		
		for (int i=0; i < MAX_SUBMENUS; i++){
     5ec:	21 e0       	ldi	r18, 0x01	; 1
     5ee:	30 e0       	ldi	r19, 0x00	; 0
			if (parent->submenus[i] == NULL){
     5f0:	81 8d       	ldd	r24, Z+25	; 0x19
     5f2:	92 8d       	ldd	r25, Z+26	; 0x1a
     5f4:	89 2b       	or	r24, r25
     5f6:	61 f4       	brne	.+24     	; 0x610 <menu_init_menu+0x8a>
     5f8:	02 c0       	rjmp	.+4      	; 0x5fe <menu_init_menu+0x78>
	if (parent == NULL){
		menu->parent = menu;
	} else {
		menu->parent = parent;
		
		for (int i=0; i < MAX_SUBMENUS; i++){
     5fa:	20 e0       	ldi	r18, 0x00	; 0
     5fc:	30 e0       	ldi	r19, 0x00	; 0
			if (parent->submenus[i] == NULL){
				parent->submenus[i] = menu;
     5fe:	22 0f       	add	r18, r18
     600:	33 1f       	adc	r19, r19
     602:	c2 0f       	add	r28, r18
     604:	d3 1f       	adc	r29, r19
     606:	18 8f       	std	Y+24, r17	; 0x18
     608:	0f 8b       	std	Y+23, r16	; 0x17
				return menu;
     60a:	80 2f       	mov	r24, r16
     60c:	91 2f       	mov	r25, r17
     60e:	08 c0       	rjmp	.+16     	; 0x620 <menu_init_menu+0x9a>
	if (parent == NULL){
		menu->parent = menu;
	} else {
		menu->parent = parent;
		
		for (int i=0; i < MAX_SUBMENUS; i++){
     610:	2f 5f       	subi	r18, 0xFF	; 255
     612:	3f 4f       	sbci	r19, 0xFF	; 255
     614:	32 96       	adiw	r30, 0x02	; 2
     616:	27 30       	cpi	r18, 0x07	; 7
     618:	31 05       	cpc	r19, r1
     61a:	51 f7       	brne	.-44     	; 0x5f0 <menu_init_menu+0x6a>

		/** \todo 
			this is wrong. Should only return NULL when there is no more
			room in parent menu. Should also free heap allocated memory in this case.
		*/
		return NULL; // return NULL if no more room
     61c:	80 e0       	ldi	r24, 0x00	; 0
     61e:	90 e0       	ldi	r25, 0x00	; 0
	
	///\todo {must also be added when the else{...} statement excecutes}
	menu->action = action;
	
	return menu;
}
     620:	df 91       	pop	r29
     622:	cf 91       	pop	r28
     624:	1f 91       	pop	r17
     626:	0f 91       	pop	r16
     628:	ff 90       	pop	r15
     62a:	ef 90       	pop	r14
     62c:	df 90       	pop	r13
     62e:	cf 90       	pop	r12
     630:	08 95       	ret

00000632 <menu_init>:

/*!
 * Initialize menu system 
 */
void menu_init(){
     632:	cf 93       	push	r28
     634:	df 93       	push	r29
/// implement an empty action that submenus can have.
void menu_action_nothing(){};

/// Setup atmega162 IO to interface with clicker on joystick.
void menu_click_init(){
	joystick_init();
     636:	0f df       	rcall	.-482    	; 0x456 <joystick_init>
 * Initialize menu system 
 */
void menu_init(){
	menu_click_init();
	
	head = menu_init_menu("Mainaaa", NULL, NULL);
     638:	40 e0       	ldi	r20, 0x00	; 0
     63a:	50 e0       	ldi	r21, 0x00	; 0
     63c:	60 e0       	ldi	r22, 0x00	; 0
     63e:	70 e0       	ldi	r23, 0x00	; 0
     640:	8b e3       	ldi	r24, 0x3B	; 59
     642:	91 e0       	ldi	r25, 0x01	; 1
     644:	a0 df       	rcall	.-192    	; 0x586 <menu_init_menu>
     646:	ec 01       	movw	r28, r24
     648:	90 93 05 02 	sts	0x0205, r25
     64c:	80 93 04 02 	sts	0x0204, r24
	
	menu_init_menu("Under 1", head, menu_action_nothing);
     650:	42 ec       	ldi	r20, 0xC2	; 194
     652:	52 e0       	ldi	r21, 0x02	; 2
     654:	bc 01       	movw	r22, r24
     656:	83 e4       	ldi	r24, 0x43	; 67
     658:	91 e0       	ldi	r25, 0x01	; 1
     65a:	95 df       	rcall	.-214    	; 0x586 <menu_init_menu>
	menu_init_menu("Under 2", head, menu_action_nothing);
     65c:	42 ec       	ldi	r20, 0xC2	; 194
     65e:	52 e0       	ldi	r21, 0x02	; 2
     660:	be 01       	movw	r22, r28
     662:	8b e4       	ldi	r24, 0x4B	; 75
     664:	91 e0       	ldi	r25, 0x01	; 1
     666:	8f df       	rcall	.-226    	; 0x586 <menu_init_menu>

	current = head;
     668:	d0 93 03 02 	sts	0x0203, r29
     66c:	c0 93 02 02 	sts	0x0202, r28
}
     670:	df 91       	pop	r29
     672:	cf 91       	pop	r28
     674:	08 95       	ret

00000676 <oled_autorefresh_init>:
}

void oled_reset(){
	oled_init();
	oled_fill(0);
	oled_home();
     676:	89 b7       	in	r24, 0x39	; 57
     678:	82 60       	ori	r24, 0x02	; 2
     67a:	89 bf       	out	0x39, r24	; 57
     67c:	83 b7       	in	r24, 0x33	; 51
     67e:	85 60       	ori	r24, 0x05	; 5
     680:	83 bf       	out	0x33, r24	; 51
     682:	87 e2       	ldi	r24, 0x27	; 39
     684:	81 bf       	out	0x31, r24	; 49
     686:	08 95       	ret

00000688 <oled_home>:
     688:	10 92 07 02 	sts	0x0207, r1
     68c:	10 92 06 02 	sts	0x0206, r1
     690:	08 95       	ret

00000692 <oled_fill>:
     692:	00 c0       	rjmp	.+0      	; 0x694 <oled_fill+0x2>
     694:	00 c0       	rjmp	.+0      	; 0x696 <oled_fill+0x4>
     696:	00 00       	nop
     698:	91 e2       	ldi	r25, 0x21	; 33
     69a:	90 93 00 10 	sts	0x1000, r25
     69e:	00 c0       	rjmp	.+0      	; 0x6a0 <oled_fill+0xe>
     6a0:	00 c0       	rjmp	.+0      	; 0x6a2 <oled_fill+0x10>
     6a2:	00 00       	nop
     6a4:	10 92 00 10 	sts	0x1000, r1
     6a8:	00 c0       	rjmp	.+0      	; 0x6aa <oled_fill+0x18>
     6aa:	00 c0       	rjmp	.+0      	; 0x6ac <oled_fill+0x1a>
     6ac:	00 00       	nop
     6ae:	9f e7       	ldi	r25, 0x7F	; 127
     6b0:	90 93 00 10 	sts	0x1000, r25
     6b4:	00 c0       	rjmp	.+0      	; 0x6b6 <oled_fill+0x24>
     6b6:	00 c0       	rjmp	.+0      	; 0x6b8 <oled_fill+0x26>
     6b8:	00 00       	nop
     6ba:	92 e2       	ldi	r25, 0x22	; 34
     6bc:	90 93 00 10 	sts	0x1000, r25
     6c0:	00 c0       	rjmp	.+0      	; 0x6c2 <oled_fill+0x30>
     6c2:	00 c0       	rjmp	.+0      	; 0x6c4 <oled_fill+0x32>
     6c4:	00 00       	nop
     6c6:	10 92 00 10 	sts	0x1000, r1
     6ca:	00 c0       	rjmp	.+0      	; 0x6cc <oled_fill+0x3a>
     6cc:	00 c0       	rjmp	.+0      	; 0x6ce <oled_fill+0x3c>
     6ce:	00 00       	nop
     6d0:	97 e0       	ldi	r25, 0x07	; 7
     6d2:	90 93 00 10 	sts	0x1000, r25
     6d6:	60 e0       	ldi	r22, 0x00	; 0
     6d8:	70 e0       	ldi	r23, 0x00	; 0
     6da:	a0 e0       	ldi	r26, 0x00	; 0
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	15 c0       	rjmp	.+42     	; 0x70a <oled_fill+0x78>
     6e0:	a9 01       	movw	r20, r18
     6e2:	46 0f       	add	r20, r22
     6e4:	57 1f       	adc	r21, r23
     6e6:	e0 91 06 01 	lds	r30, 0x0106
     6ea:	f0 91 07 01 	lds	r31, 0x0107
     6ee:	e4 0f       	add	r30, r20
     6f0:	f5 1f       	adc	r31, r21
     6f2:	80 83       	st	Z, r24
     6f4:	2f 5f       	subi	r18, 0xFF	; 255
     6f6:	3f 4f       	sbci	r19, 0xFF	; 255
     6f8:	20 38       	cpi	r18, 0x80	; 128
     6fa:	31 05       	cpc	r19, r1
     6fc:	89 f7       	brne	.-30     	; 0x6e0 <oled_fill+0x4e>
     6fe:	60 58       	subi	r22, 0x80	; 128
     700:	7f 4f       	sbci	r23, 0xFF	; 255
     702:	61 15       	cp	r22, r1
     704:	24 e0       	ldi	r18, 0x04	; 4
     706:	72 07       	cpc	r23, r18
     708:	19 f0       	breq	.+6      	; 0x710 <oled_fill+0x7e>
     70a:	2a 2f       	mov	r18, r26
     70c:	39 2f       	mov	r19, r25
     70e:	e8 cf       	rjmp	.-48     	; 0x6e0 <oled_fill+0x4e>
     710:	08 95       	ret

00000712 <oled_init>:
     712:	f8 94       	cli
     714:	00 c0       	rjmp	.+0      	; 0x716 <oled_init+0x4>
     716:	00 c0       	rjmp	.+0      	; 0x718 <oled_init+0x6>
     718:	00 00       	nop
     71a:	8e ea       	ldi	r24, 0xAE	; 174
     71c:	80 93 00 10 	sts	0x1000, r24
     720:	00 c0       	rjmp	.+0      	; 0x722 <oled_init+0x10>
     722:	00 c0       	rjmp	.+0      	; 0x724 <oled_init+0x12>
     724:	00 00       	nop
     726:	81 ea       	ldi	r24, 0xA1	; 161
     728:	80 93 00 10 	sts	0x1000, r24
     72c:	00 c0       	rjmp	.+0      	; 0x72e <oled_init+0x1c>
     72e:	00 c0       	rjmp	.+0      	; 0x730 <oled_init+0x1e>
     730:	00 00       	nop
     732:	8a ed       	ldi	r24, 0xDA	; 218
     734:	80 93 00 10 	sts	0x1000, r24
     738:	00 c0       	rjmp	.+0      	; 0x73a <oled_init+0x28>
     73a:	00 c0       	rjmp	.+0      	; 0x73c <oled_init+0x2a>
     73c:	00 00       	nop
     73e:	82 e1       	ldi	r24, 0x12	; 18
     740:	80 93 00 10 	sts	0x1000, r24
     744:	00 c0       	rjmp	.+0      	; 0x746 <oled_init+0x34>
     746:	00 c0       	rjmp	.+0      	; 0x748 <oled_init+0x36>
     748:	00 00       	nop
     74a:	88 ec       	ldi	r24, 0xC8	; 200
     74c:	80 93 00 10 	sts	0x1000, r24
     750:	00 c0       	rjmp	.+0      	; 0x752 <oled_init+0x40>
     752:	00 c0       	rjmp	.+0      	; 0x754 <oled_init+0x42>
     754:	00 00       	nop
     756:	88 ea       	ldi	r24, 0xA8	; 168
     758:	80 93 00 10 	sts	0x1000, r24
     75c:	00 c0       	rjmp	.+0      	; 0x75e <oled_init+0x4c>
     75e:	00 c0       	rjmp	.+0      	; 0x760 <oled_init+0x4e>
     760:	00 00       	nop
     762:	8f e3       	ldi	r24, 0x3F	; 63
     764:	80 93 00 10 	sts	0x1000, r24
     768:	00 c0       	rjmp	.+0      	; 0x76a <oled_init+0x58>
     76a:	00 c0       	rjmp	.+0      	; 0x76c <oled_init+0x5a>
     76c:	00 00       	nop
     76e:	85 ed       	ldi	r24, 0xD5	; 213
     770:	80 93 00 10 	sts	0x1000, r24
     774:	00 c0       	rjmp	.+0      	; 0x776 <oled_init+0x64>
     776:	00 c0       	rjmp	.+0      	; 0x778 <oled_init+0x66>
     778:	00 00       	nop
     77a:	80 e8       	ldi	r24, 0x80	; 128
     77c:	80 93 00 10 	sts	0x1000, r24
     780:	00 c0       	rjmp	.+0      	; 0x782 <oled_init+0x70>
     782:	00 c0       	rjmp	.+0      	; 0x784 <oled_init+0x72>
     784:	00 00       	nop
     786:	81 e8       	ldi	r24, 0x81	; 129
     788:	80 93 00 10 	sts	0x1000, r24
     78c:	00 c0       	rjmp	.+0      	; 0x78e <oled_init+0x7c>
     78e:	00 c0       	rjmp	.+0      	; 0x790 <oled_init+0x7e>
     790:	00 00       	nop
     792:	80 e5       	ldi	r24, 0x50	; 80
     794:	80 93 00 10 	sts	0x1000, r24
     798:	00 c0       	rjmp	.+0      	; 0x79a <oled_init+0x88>
     79a:	00 c0       	rjmp	.+0      	; 0x79c <oled_init+0x8a>
     79c:	00 00       	nop
     79e:	89 ed       	ldi	r24, 0xD9	; 217
     7a0:	80 93 00 10 	sts	0x1000, r24
     7a4:	00 c0       	rjmp	.+0      	; 0x7a6 <oled_init+0x94>
     7a6:	00 c0       	rjmp	.+0      	; 0x7a8 <oled_init+0x96>
     7a8:	00 00       	nop
     7aa:	81 e2       	ldi	r24, 0x21	; 33
     7ac:	80 93 00 10 	sts	0x1000, r24
     7b0:	00 c0       	rjmp	.+0      	; 0x7b2 <oled_init+0xa0>
     7b2:	00 c0       	rjmp	.+0      	; 0x7b4 <oled_init+0xa2>
     7b4:	00 00       	nop
     7b6:	80 e2       	ldi	r24, 0x20	; 32
     7b8:	80 93 00 10 	sts	0x1000, r24
     7bc:	00 c0       	rjmp	.+0      	; 0x7be <oled_init+0xac>
     7be:	00 c0       	rjmp	.+0      	; 0x7c0 <oled_init+0xae>
     7c0:	00 00       	nop
     7c2:	10 92 00 10 	sts	0x1000, r1
     7c6:	00 c0       	rjmp	.+0      	; 0x7c8 <oled_init+0xb6>
     7c8:	00 c0       	rjmp	.+0      	; 0x7ca <oled_init+0xb8>
     7ca:	00 00       	nop
     7cc:	8b ed       	ldi	r24, 0xDB	; 219
     7ce:	80 93 00 10 	sts	0x1000, r24
     7d2:	00 c0       	rjmp	.+0      	; 0x7d4 <oled_init+0xc2>
     7d4:	00 c0       	rjmp	.+0      	; 0x7d6 <oled_init+0xc4>
     7d6:	00 00       	nop
     7d8:	80 e3       	ldi	r24, 0x30	; 48
     7da:	80 93 00 10 	sts	0x1000, r24
     7de:	00 c0       	rjmp	.+0      	; 0x7e0 <oled_init+0xce>
     7e0:	00 c0       	rjmp	.+0      	; 0x7e2 <oled_init+0xd0>
     7e2:	00 00       	nop
     7e4:	8d ea       	ldi	r24, 0xAD	; 173
     7e6:	80 93 00 10 	sts	0x1000, r24
     7ea:	00 c0       	rjmp	.+0      	; 0x7ec <oled_init+0xda>
     7ec:	00 c0       	rjmp	.+0      	; 0x7ee <oled_init+0xdc>
     7ee:	00 00       	nop
     7f0:	10 92 00 10 	sts	0x1000, r1
     7f4:	00 c0       	rjmp	.+0      	; 0x7f6 <oled_init+0xe4>
     7f6:	00 c0       	rjmp	.+0      	; 0x7f8 <oled_init+0xe6>
     7f8:	00 00       	nop
     7fa:	84 ea       	ldi	r24, 0xA4	; 164
     7fc:	80 93 00 10 	sts	0x1000, r24
     800:	00 c0       	rjmp	.+0      	; 0x802 <oled_init+0xf0>
     802:	00 c0       	rjmp	.+0      	; 0x804 <oled_init+0xf2>
     804:	00 00       	nop
     806:	86 ea       	ldi	r24, 0xA6	; 166
     808:	80 93 00 10 	sts	0x1000, r24
     80c:	00 c0       	rjmp	.+0      	; 0x80e <oled_init+0xfc>
     80e:	00 c0       	rjmp	.+0      	; 0x810 <oled_init+0xfe>
     810:	00 00       	nop
     812:	8f ea       	ldi	r24, 0xAF	; 175
     814:	80 93 00 10 	sts	0x1000, r24
     818:	80 e0       	ldi	r24, 0x00	; 0
     81a:	3b df       	rcall	.-394    	; 0x692 <oled_fill>
     81c:	35 df       	rcall	.-406    	; 0x688 <oled_home>
     81e:	2b cf       	rjmp	.-426    	; 0x676 <oled_autorefresh_init>
     820:	08 95       	ret

00000822 <oled_update>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     822:	00 c0       	rjmp	.+0      	; 0x824 <oled_update+0x2>
     824:	00 c0       	rjmp	.+0      	; 0x826 <oled_update+0x4>
     826:	00 00       	nop
	OCR0 = 39;
}

void write_c(uint8_t cmd){
	_delay_us(1);
	*((uint8_t *)OLED_C_ADR) = cmd;
     828:	81 e2       	ldi	r24, 0x21	; 33
     82a:	80 93 00 10 	sts	0x1000, r24
     82e:	00 c0       	rjmp	.+0      	; 0x830 <oled_update+0xe>
     830:	00 c0       	rjmp	.+0      	; 0x832 <oled_update+0x10>
     832:	00 00       	nop
     834:	10 92 00 10 	sts	0x1000, r1
     838:	00 c0       	rjmp	.+0      	; 0x83a <oled_update+0x18>
     83a:	00 c0       	rjmp	.+0      	; 0x83c <oled_update+0x1a>
     83c:	00 00       	nop
     83e:	8f e7       	ldi	r24, 0x7F	; 127
     840:	80 93 00 10 	sts	0x1000, r24
     844:	00 c0       	rjmp	.+0      	; 0x846 <oled_update+0x24>
     846:	00 c0       	rjmp	.+0      	; 0x848 <oled_update+0x26>
     848:	00 00       	nop
     84a:	82 e2       	ldi	r24, 0x22	; 34
     84c:	80 93 00 10 	sts	0x1000, r24
     850:	00 c0       	rjmp	.+0      	; 0x852 <oled_update+0x30>
     852:	00 c0       	rjmp	.+0      	; 0x854 <oled_update+0x32>
     854:	00 00       	nop
     856:	10 92 00 10 	sts	0x1000, r1
     85a:	00 c0       	rjmp	.+0      	; 0x85c <oled_update+0x3a>
     85c:	00 c0       	rjmp	.+0      	; 0x85e <oled_update+0x3c>
     85e:	00 00       	nop
     860:	87 e0       	ldi	r24, 0x07	; 7
     862:	80 93 00 10 	sts	0x1000, r24
     866:	00 c0       	rjmp	.+0      	; 0x868 <oled_update+0x46>
     868:	00 c0       	rjmp	.+0      	; 0x86a <oled_update+0x48>
     86a:	00 00       	nop
     86c:	10 92 00 10 	sts	0x1000, r1
     870:	00 c0       	rjmp	.+0      	; 0x872 <oled_update+0x50>
     872:	00 c0       	rjmp	.+0      	; 0x874 <oled_update+0x52>
     874:	00 00       	nop
     876:	80 e1       	ldi	r24, 0x10	; 16
     878:	80 93 00 10 	sts	0x1000, r24
     87c:	40 e0       	ldi	r20, 0x00	; 0
     87e:	50 e0       	ldi	r21, 0x00	; 0
		}
	}
}

//////////////////////////////////////////////////////////////////////////
void oled_update(){
     880:	70 e0       	ldi	r23, 0x00	; 0
     882:	60 e0       	ldi	r22, 0x00	; 0
	*((uint8_t *)OLED_C_ADR) = cmd;
}

void write_d(uint8_t data){
	_delay_us(1); // delay may be increased to 1000 to make debug easier, works without any delay
	*((uint8_t *)OLED_D_ADR) = data;
     884:	a1 e0       	ldi	r26, 0x01	; 1
     886:	b0 e1       	ldi	r27, 0x10	; 16
     888:	18 c0       	rjmp	.+48     	; 0x8ba <oled_update+0x98>
     88a:	9c 01       	movw	r18, r24
     88c:	24 0f       	add	r18, r20
     88e:	35 1f       	adc	r19, r21
	write_c(SET_LOW_COL_ADR  | 0x00);
	write_c(SET_HIGH_COL_ADR | 0x00);
	
	for (int page = 0; page<OLED_PAGES; ++page){
		for (int seg = 0; seg<OLED_WIDTH; ++seg){
			write_d(buffer[page*OLED_WIDTH + seg]);
     890:	e0 91 06 01 	lds	r30, 0x0106
     894:	f0 91 07 01 	lds	r31, 0x0107
     898:	e2 0f       	add	r30, r18
     89a:	f3 1f       	adc	r31, r19
     89c:	20 81       	ld	r18, Z
     89e:	00 c0       	rjmp	.+0      	; 0x8a0 <oled_update+0x7e>
     8a0:	00 c0       	rjmp	.+0      	; 0x8a2 <oled_update+0x80>
     8a2:	00 00       	nop
	*((uint8_t *)OLED_C_ADR) = cmd;
}

void write_d(uint8_t data){
	_delay_us(1); // delay may be increased to 1000 to make debug easier, works without any delay
	*((uint8_t *)OLED_D_ADR) = data;
     8a4:	2c 93       	st	X, r18
	
	write_c(SET_LOW_COL_ADR  | 0x00);
	write_c(SET_HIGH_COL_ADR | 0x00);
	
	for (int page = 0; page<OLED_PAGES; ++page){
		for (int seg = 0; seg<OLED_WIDTH; ++seg){
     8a6:	01 96       	adiw	r24, 0x01	; 1
     8a8:	80 38       	cpi	r24, 0x80	; 128
     8aa:	91 05       	cpc	r25, r1
     8ac:	71 f7       	brne	.-36     	; 0x88a <oled_update+0x68>
     8ae:	40 58       	subi	r20, 0x80	; 128
     8b0:	5f 4f       	sbci	r21, 0xFF	; 255
	write_c(SET_PAGE_ADR);write_c(0x00); write_c(OLED_PAGES-1);
	
	write_c(SET_LOW_COL_ADR  | 0x00);
	write_c(SET_HIGH_COL_ADR | 0x00);
	
	for (int page = 0; page<OLED_PAGES; ++page){
     8b2:	41 15       	cp	r20, r1
     8b4:	84 e0       	ldi	r24, 0x04	; 4
     8b6:	58 07       	cpc	r21, r24
     8b8:	19 f0       	breq	.+6      	; 0x8c0 <oled_update+0x9e>
		}
	}
}

//////////////////////////////////////////////////////////////////////////
void oled_update(){
     8ba:	87 2f       	mov	r24, r23
     8bc:	96 2f       	mov	r25, r22
     8be:	e5 cf       	rjmp	.-54     	; 0x88a <oled_update+0x68>
     8c0:	08 95       	ret

000008c2 <__vector_17>:
uint8_t xpos = 0;
uint8_t ypos = 0;

FILE oled_out = FDEV_SETUP_STREAM(oled_putchar, NULL, _FDEV_SETUP_WRITE);

ISR(TIMER0_OVF_vect){
     8c2:	1f 92       	push	r1
     8c4:	0f 92       	push	r0
     8c6:	0f b6       	in	r0, 0x3f	; 63
     8c8:	0f 92       	push	r0
     8ca:	11 24       	eor	r1, r1
     8cc:	2f 93       	push	r18
     8ce:	3f 93       	push	r19
     8d0:	4f 93       	push	r20
     8d2:	5f 93       	push	r21
     8d4:	6f 93       	push	r22
     8d6:	7f 93       	push	r23
     8d8:	8f 93       	push	r24
     8da:	9f 93       	push	r25
     8dc:	af 93       	push	r26
     8de:	bf 93       	push	r27
     8e0:	ef 93       	push	r30
     8e2:	ff 93       	push	r31
	oled_update();
     8e4:	9e df       	rcall	.-196    	; 0x822 <oled_update>
}
     8e6:	ff 91       	pop	r31
     8e8:	ef 91       	pop	r30
     8ea:	bf 91       	pop	r27
     8ec:	af 91       	pop	r26
     8ee:	9f 91       	pop	r25
     8f0:	8f 91       	pop	r24
     8f2:	7f 91       	pop	r23
     8f4:	6f 91       	pop	r22
     8f6:	5f 91       	pop	r21
     8f8:	4f 91       	pop	r20
     8fa:	3f 91       	pop	r19
     8fc:	2f 91       	pop	r18
     8fe:	0f 90       	pop	r0
     900:	0f be       	out	0x3f, r0	; 63
     902:	0f 90       	pop	r0
     904:	1f 90       	pop	r1
     906:	18 95       	reti

00000908 <spi_ss_low>:
#include "spi_driver.h"
#include "avr/io.h"
#include <stdio.h>

void spi_ss_low(){
	PORTB &= ~(1 << PB4);
     908:	c4 98       	cbi	0x18, 4	; 24
     90a:	08 95       	ret

0000090c <spi_ss_high>:
}

void spi_ss_high(){
	PORTB |= (1 << PB4);
     90c:	c4 9a       	sbi	0x18, 4	; 24
     90e:	08 95       	ret

00000910 <spi_init>:

/// Initialize Atmega162 as SPI master
void spi_init()
{
	// setup IO pins
	DDRB |= (1<<DDB4 | 1<<DDB5 | 1<<DDB7);
     910:	87 b3       	in	r24, 0x17	; 23
     912:	80 6b       	ori	r24, 0xB0	; 176
     914:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1<<DDB6); // not necessary
     916:	be 98       	cbi	0x17, 6	; 23
	
	// setup SPI
	SPCR = (1<<SPE | 1<<MSTR | 1<<SPR0 | 1<<CPOL | 1<<CPHA) & ~(/*1<<CPOL | 1<<CPHA |*/ 1<<DORD);
     918:	8d e5       	ldi	r24, 0x5D	; 93
     91a:	8d b9       	out	0x0d, r24	; 13
     91c:	08 95       	ret

0000091e <spi_transmit>:
}


uint8_t spi_transmit(uint8_t data)
{
	SPDR = data;
     91e:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
     920:	77 9b       	sbis	0x0e, 7	; 14
     922:	fe cf       	rjmp	.-4      	; 0x920 <spi_transmit+0x2>
	
	return SPDR;
     924:	8f b1       	in	r24, 0x0f	; 15
     926:	08 95       	ret

00000928 <uart_send>:

}

/// Busy wait transmission of msg
int uart_send(unsigned char msg){
	while (!(UCSR0A & (1 << UDRE0)));
     928:	5d 9b       	sbis	0x0b, 5	; 11
     92a:	fe cf       	rjmp	.-4      	; 0x928 <uart_send>
	UDR0 = msg;
     92c:	8c b9       	out	0x0c, r24	; 12
	return 0;
}
     92e:	80 e0       	ldi	r24, 0x00	; 0
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	08 95       	ret

00000934 <uart_recv>:


/// Read data from buffer
unsigned char uart_recv(){
	char returnval = 0;
	if(recvhead != recvtail)
     934:	20 91 0a 02 	lds	r18, 0x020A
     938:	30 91 0b 02 	lds	r19, 0x020B
     93c:	80 91 08 02 	lds	r24, 0x0208
     940:	90 91 09 02 	lds	r25, 0x0209
     944:	28 17       	cp	r18, r24
     946:	39 07       	cpc	r19, r25
     948:	11 f1       	breq	.+68     	; 0x98e <uart_recv+0x5a>
	{
		returnval = recv_buffer[recvtail++];
     94a:	80 91 08 02 	lds	r24, 0x0208
     94e:	90 91 09 02 	lds	r25, 0x0209
     952:	9c 01       	movw	r18, r24
     954:	2f 5f       	subi	r18, 0xFF	; 255
     956:	3f 4f       	sbci	r19, 0xFF	; 255
     958:	30 93 09 02 	sts	0x0209, r19
     95c:	20 93 08 02 	sts	0x0208, r18
     960:	fc 01       	movw	r30, r24
     962:	e4 5f       	subi	r30, 0xF4	; 244
     964:	fd 4f       	sbci	r31, 0xFD	; 253
     966:	80 81       	ld	r24, Z
		recvtail = recvtail%BUFFER_MAX;
     968:	20 91 08 02 	lds	r18, 0x0208
     96c:	30 91 09 02 	lds	r19, 0x0209
     970:	2f 77       	andi	r18, 0x7F	; 127
     972:	30 78       	andi	r19, 0x80	; 128
     974:	33 23       	and	r19, r19
     976:	34 f4       	brge	.+12     	; 0x984 <uart_recv+0x50>
     978:	21 50       	subi	r18, 0x01	; 1
     97a:	31 09       	sbc	r19, r1
     97c:	20 68       	ori	r18, 0x80	; 128
     97e:	3f 6f       	ori	r19, 0xFF	; 255
     980:	2f 5f       	subi	r18, 0xFF	; 255
     982:	3f 4f       	sbci	r19, 0xFF	; 255
     984:	30 93 09 02 	sts	0x0209, r19
     988:	20 93 08 02 	sts	0x0208, r18
     98c:	08 95       	ret
}


/// Read data from buffer
unsigned char uart_recv(){
	char returnval = 0;
     98e:	80 e0       	ldi	r24, 0x00	; 0
	{
		returnval = recv_buffer[recvtail++];
		recvtail = recvtail%BUFFER_MAX;
	}
	return returnval;
}
     990:	08 95       	ret

00000992 <__vector_19>:
volatile char recv_buffer[BUFFER_MAX]; /*! Buffer for storing recieved data*/
volatile int recvhead = 0; /*! Head of buffer. Where next recieved byte will be placed. */
volatile int recvtail = 0; /*! Tail of buffer. Where next read will occour. */

/// Interrupt vector for Rx. Place recieved data into buffer.
ISR(USART0_RXC_vect){
     992:	1f 92       	push	r1
     994:	0f 92       	push	r0
     996:	0f b6       	in	r0, 0x3f	; 63
     998:	0f 92       	push	r0
     99a:	11 24       	eor	r1, r1
     99c:	2f 93       	push	r18
     99e:	3f 93       	push	r19
     9a0:	4f 93       	push	r20
     9a2:	8f 93       	push	r24
     9a4:	9f 93       	push	r25
     9a6:	ef 93       	push	r30
     9a8:	ff 93       	push	r31
	cli();
     9aa:	f8 94       	cli
	char input = UDR0;
     9ac:	4c b1       	in	r20, 0x0c	; 12
	if((recvhead+1)%BUFFER_MAX != recvtail){		// Sjekk at bufferen ikke er full
     9ae:	80 91 0a 02 	lds	r24, 0x020A
     9b2:	90 91 0b 02 	lds	r25, 0x020B
     9b6:	20 91 08 02 	lds	r18, 0x0208
     9ba:	30 91 09 02 	lds	r19, 0x0209
     9be:	01 96       	adiw	r24, 0x01	; 1
     9c0:	8f 77       	andi	r24, 0x7F	; 127
     9c2:	90 78       	andi	r25, 0x80	; 128
     9c4:	99 23       	and	r25, r25
     9c6:	24 f4       	brge	.+8      	; 0x9d0 <__vector_19+0x3e>
     9c8:	01 97       	sbiw	r24, 0x01	; 1
     9ca:	80 68       	ori	r24, 0x80	; 128
     9cc:	9f 6f       	ori	r25, 0xFF	; 255
     9ce:	01 96       	adiw	r24, 0x01	; 1
     9d0:	82 17       	cp	r24, r18
     9d2:	93 07       	cpc	r25, r19
     9d4:	c1 f0       	breq	.+48     	; 0xa06 <__vector_19+0x74>
		recv_buffer[recvhead] = input;				// If so, legg inn byte
     9d6:	e0 91 0a 02 	lds	r30, 0x020A
     9da:	f0 91 0b 02 	lds	r31, 0x020B
     9de:	e4 5f       	subi	r30, 0xF4	; 244
     9e0:	fd 4f       	sbci	r31, 0xFD	; 253
     9e2:	40 83       	st	Z, r20
		recvhead = (recvhead+1)%BUFFER_MAX;
     9e4:	80 91 0a 02 	lds	r24, 0x020A
     9e8:	90 91 0b 02 	lds	r25, 0x020B
     9ec:	01 96       	adiw	r24, 0x01	; 1
     9ee:	8f 77       	andi	r24, 0x7F	; 127
     9f0:	90 78       	andi	r25, 0x80	; 128
     9f2:	99 23       	and	r25, r25
     9f4:	24 f4       	brge	.+8      	; 0x9fe <__vector_19+0x6c>
     9f6:	01 97       	sbiw	r24, 0x01	; 1
     9f8:	80 68       	ori	r24, 0x80	; 128
     9fa:	9f 6f       	ori	r25, 0xFF	; 255
     9fc:	01 96       	adiw	r24, 0x01	; 1
     9fe:	90 93 0b 02 	sts	0x020B, r25
     a02:	80 93 0a 02 	sts	0x020A, r24
	}
	sei();
     a06:	78 94       	sei
}
     a08:	ff 91       	pop	r31
     a0a:	ef 91       	pop	r30
     a0c:	9f 91       	pop	r25
     a0e:	8f 91       	pop	r24
     a10:	4f 91       	pop	r20
     a12:	3f 91       	pop	r19
     a14:	2f 91       	pop	r18
     a16:	0f 90       	pop	r0
     a18:	0f be       	out	0x3f, r0	; 63
     a1a:	0f 90       	pop	r0
     a1c:	1f 90       	pop	r1
     a1e:	18 95       	reti

00000a20 <__vector_23>:

///\todo remove interrupt from Tx
ISR(USART0_TXC_vect){
     a20:	1f 92       	push	r1
     a22:	0f 92       	push	r0
     a24:	0f b6       	in	r0, 0x3f	; 63
     a26:	0f 92       	push	r0
     a28:	11 24       	eor	r1, r1
	
}
     a2a:	0f 90       	pop	r0
     a2c:	0f be       	out	0x3f, r0	; 63
     a2e:	0f 90       	pop	r0
     a30:	1f 90       	pop	r1
     a32:	18 95       	reti

00000a34 <uart_init>:

///Initialize uart
void uart_init(){
	// set baud rate
	int timerval = (F_CPU/(16*BAUD) - 1);
	UBRR0L = timerval&0xFF;
     a34:	8f e1       	ldi	r24, 0x1F	; 31
     a36:	89 b9       	out	0x09, r24	; 9
	UBRR0H = (timerval>>8)&0x0F;
     a38:	10 bc       	out	0x20, r1	; 32
	
	// enable interupts on Rx & Tx, and enable Rx & Tx 
	UCSR0B |= (1 << RXCIE0) | (1 << TXCIE0) | (1 << RXEN0) | (1 << TXEN0);
     a3a:	8a b1       	in	r24, 0x0a	; 10
     a3c:	88 6d       	ori	r24, 0xD8	; 216
     a3e:	8a b9       	out	0x0a, r24	; 10
	
	// enable async mode
	UCSR0C &= ~(1 << UMSEL0);
     a40:	80 b5       	in	r24, 0x20	; 32
     a42:	8f 7b       	andi	r24, 0xBF	; 191
     a44:	80 bd       	out	0x20, r24	; 32
	
	// parity disable
	UCSR0C &= ~((1 << UPM00) | (1 << UPM10));
     a46:	80 b5       	in	r24, 0x20	; 32
     a48:	8f 7e       	andi	r24, 0xEF	; 239
     a4a:	80 bd       	out	0x20, r24	; 32
	
	// stop bit to 1
	UCSR0C &= ~(1 << USBS0);
     a4c:	80 b5       	in	r24, 0x20	; 32
     a4e:	87 7f       	andi	r24, 0xF7	; 247
     a50:	80 bd       	out	0x20, r24	; 32
     a52:	08 95       	ret

00000a54 <__subsf3>:
     a54:	50 58       	subi	r21, 0x80	; 128

00000a56 <__addsf3>:
     a56:	bb 27       	eor	r27, r27
     a58:	aa 27       	eor	r26, r26
     a5a:	0e d0       	rcall	.+28     	; 0xa78 <__addsf3x>
     a5c:	e5 c0       	rjmp	.+458    	; 0xc28 <__fp_round>
     a5e:	d6 d0       	rcall	.+428    	; 0xc0c <__fp_pscA>
     a60:	30 f0       	brcs	.+12     	; 0xa6e <__addsf3+0x18>
     a62:	db d0       	rcall	.+438    	; 0xc1a <__fp_pscB>
     a64:	20 f0       	brcs	.+8      	; 0xa6e <__addsf3+0x18>
     a66:	31 f4       	brne	.+12     	; 0xa74 <__addsf3+0x1e>
     a68:	9f 3f       	cpi	r25, 0xFF	; 255
     a6a:	11 f4       	brne	.+4      	; 0xa70 <__addsf3+0x1a>
     a6c:	1e f4       	brtc	.+6      	; 0xa74 <__addsf3+0x1e>
     a6e:	cb c0       	rjmp	.+406    	; 0xc06 <__fp_nan>
     a70:	0e f4       	brtc	.+2      	; 0xa74 <__addsf3+0x1e>
     a72:	e0 95       	com	r30
     a74:	e7 fb       	bst	r30, 7
     a76:	c1 c0       	rjmp	.+386    	; 0xbfa <__fp_inf>

00000a78 <__addsf3x>:
     a78:	e9 2f       	mov	r30, r25
     a7a:	e7 d0       	rcall	.+462    	; 0xc4a <__fp_split3>
     a7c:	80 f3       	brcs	.-32     	; 0xa5e <__addsf3+0x8>
     a7e:	ba 17       	cp	r27, r26
     a80:	62 07       	cpc	r22, r18
     a82:	73 07       	cpc	r23, r19
     a84:	84 07       	cpc	r24, r20
     a86:	95 07       	cpc	r25, r21
     a88:	18 f0       	brcs	.+6      	; 0xa90 <__addsf3x+0x18>
     a8a:	71 f4       	brne	.+28     	; 0xaa8 <__addsf3x+0x30>
     a8c:	9e f5       	brtc	.+102    	; 0xaf4 <__addsf3x+0x7c>
     a8e:	ff c0       	rjmp	.+510    	; 0xc8e <__fp_zero>
     a90:	0e f4       	brtc	.+2      	; 0xa94 <__addsf3x+0x1c>
     a92:	e0 95       	com	r30
     a94:	0b 2e       	mov	r0, r27
     a96:	ba 2f       	mov	r27, r26
     a98:	a0 2d       	mov	r26, r0
     a9a:	0b 01       	movw	r0, r22
     a9c:	b9 01       	movw	r22, r18
     a9e:	90 01       	movw	r18, r0
     aa0:	0c 01       	movw	r0, r24
     aa2:	ca 01       	movw	r24, r20
     aa4:	a0 01       	movw	r20, r0
     aa6:	11 24       	eor	r1, r1
     aa8:	ff 27       	eor	r31, r31
     aaa:	59 1b       	sub	r21, r25
     aac:	99 f0       	breq	.+38     	; 0xad4 <__addsf3x+0x5c>
     aae:	59 3f       	cpi	r21, 0xF9	; 249
     ab0:	50 f4       	brcc	.+20     	; 0xac6 <__addsf3x+0x4e>
     ab2:	50 3e       	cpi	r21, 0xE0	; 224
     ab4:	68 f1       	brcs	.+90     	; 0xb10 <__addsf3x+0x98>
     ab6:	1a 16       	cp	r1, r26
     ab8:	f0 40       	sbci	r31, 0x00	; 0
     aba:	a2 2f       	mov	r26, r18
     abc:	23 2f       	mov	r18, r19
     abe:	34 2f       	mov	r19, r20
     ac0:	44 27       	eor	r20, r20
     ac2:	58 5f       	subi	r21, 0xF8	; 248
     ac4:	f3 cf       	rjmp	.-26     	; 0xaac <__addsf3x+0x34>
     ac6:	46 95       	lsr	r20
     ac8:	37 95       	ror	r19
     aca:	27 95       	ror	r18
     acc:	a7 95       	ror	r26
     ace:	f0 40       	sbci	r31, 0x00	; 0
     ad0:	53 95       	inc	r21
     ad2:	c9 f7       	brne	.-14     	; 0xac6 <__addsf3x+0x4e>
     ad4:	7e f4       	brtc	.+30     	; 0xaf4 <__addsf3x+0x7c>
     ad6:	1f 16       	cp	r1, r31
     ad8:	ba 0b       	sbc	r27, r26
     ada:	62 0b       	sbc	r22, r18
     adc:	73 0b       	sbc	r23, r19
     ade:	84 0b       	sbc	r24, r20
     ae0:	ba f0       	brmi	.+46     	; 0xb10 <__addsf3x+0x98>
     ae2:	91 50       	subi	r25, 0x01	; 1
     ae4:	a1 f0       	breq	.+40     	; 0xb0e <__addsf3x+0x96>
     ae6:	ff 0f       	add	r31, r31
     ae8:	bb 1f       	adc	r27, r27
     aea:	66 1f       	adc	r22, r22
     aec:	77 1f       	adc	r23, r23
     aee:	88 1f       	adc	r24, r24
     af0:	c2 f7       	brpl	.-16     	; 0xae2 <__addsf3x+0x6a>
     af2:	0e c0       	rjmp	.+28     	; 0xb10 <__addsf3x+0x98>
     af4:	ba 0f       	add	r27, r26
     af6:	62 1f       	adc	r22, r18
     af8:	73 1f       	adc	r23, r19
     afa:	84 1f       	adc	r24, r20
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__addsf3x+0x98>
     afe:	87 95       	ror	r24
     b00:	77 95       	ror	r23
     b02:	67 95       	ror	r22
     b04:	b7 95       	ror	r27
     b06:	f7 95       	ror	r31
     b08:	9e 3f       	cpi	r25, 0xFE	; 254
     b0a:	08 f0       	brcs	.+2      	; 0xb0e <__addsf3x+0x96>
     b0c:	b3 cf       	rjmp	.-154    	; 0xa74 <__addsf3+0x1e>
     b0e:	93 95       	inc	r25
     b10:	88 0f       	add	r24, r24
     b12:	08 f0       	brcs	.+2      	; 0xb16 <__addsf3x+0x9e>
     b14:	99 27       	eor	r25, r25
     b16:	ee 0f       	add	r30, r30
     b18:	97 95       	ror	r25
     b1a:	87 95       	ror	r24
     b1c:	08 95       	ret

00000b1e <__fixsfsi>:
     b1e:	04 d0       	rcall	.+8      	; 0xb28 <__fixunssfsi>
     b20:	68 94       	set
     b22:	b1 11       	cpse	r27, r1
     b24:	b5 c0       	rjmp	.+362    	; 0xc90 <__fp_szero>
     b26:	08 95       	ret

00000b28 <__fixunssfsi>:
     b28:	98 d0       	rcall	.+304    	; 0xc5a <__fp_splitA>
     b2a:	88 f0       	brcs	.+34     	; 0xb4e <__fixunssfsi+0x26>
     b2c:	9f 57       	subi	r25, 0x7F	; 127
     b2e:	90 f0       	brcs	.+36     	; 0xb54 <__fixunssfsi+0x2c>
     b30:	b9 2f       	mov	r27, r25
     b32:	99 27       	eor	r25, r25
     b34:	b7 51       	subi	r27, 0x17	; 23
     b36:	a0 f0       	brcs	.+40     	; 0xb60 <__fixunssfsi+0x38>
     b38:	d1 f0       	breq	.+52     	; 0xb6e <__fixunssfsi+0x46>
     b3a:	66 0f       	add	r22, r22
     b3c:	77 1f       	adc	r23, r23
     b3e:	88 1f       	adc	r24, r24
     b40:	99 1f       	adc	r25, r25
     b42:	1a f0       	brmi	.+6      	; 0xb4a <__fixunssfsi+0x22>
     b44:	ba 95       	dec	r27
     b46:	c9 f7       	brne	.-14     	; 0xb3a <__fixunssfsi+0x12>
     b48:	12 c0       	rjmp	.+36     	; 0xb6e <__fixunssfsi+0x46>
     b4a:	b1 30       	cpi	r27, 0x01	; 1
     b4c:	81 f0       	breq	.+32     	; 0xb6e <__fixunssfsi+0x46>
     b4e:	9f d0       	rcall	.+318    	; 0xc8e <__fp_zero>
     b50:	b1 e0       	ldi	r27, 0x01	; 1
     b52:	08 95       	ret
     b54:	9c c0       	rjmp	.+312    	; 0xc8e <__fp_zero>
     b56:	67 2f       	mov	r22, r23
     b58:	78 2f       	mov	r23, r24
     b5a:	88 27       	eor	r24, r24
     b5c:	b8 5f       	subi	r27, 0xF8	; 248
     b5e:	39 f0       	breq	.+14     	; 0xb6e <__fixunssfsi+0x46>
     b60:	b9 3f       	cpi	r27, 0xF9	; 249
     b62:	cc f3       	brlt	.-14     	; 0xb56 <__fixunssfsi+0x2e>
     b64:	86 95       	lsr	r24
     b66:	77 95       	ror	r23
     b68:	67 95       	ror	r22
     b6a:	b3 95       	inc	r27
     b6c:	d9 f7       	brne	.-10     	; 0xb64 <__fixunssfsi+0x3c>
     b6e:	3e f4       	brtc	.+14     	; 0xb7e <__fixunssfsi+0x56>
     b70:	90 95       	com	r25
     b72:	80 95       	com	r24
     b74:	70 95       	com	r23
     b76:	61 95       	neg	r22
     b78:	7f 4f       	sbci	r23, 0xFF	; 255
     b7a:	8f 4f       	sbci	r24, 0xFF	; 255
     b7c:	9f 4f       	sbci	r25, 0xFF	; 255
     b7e:	08 95       	ret

00000b80 <__floatunsisf>:
     b80:	e8 94       	clt
     b82:	09 c0       	rjmp	.+18     	; 0xb96 <__floatsisf+0x12>

00000b84 <__floatsisf>:
     b84:	97 fb       	bst	r25, 7
     b86:	3e f4       	brtc	.+14     	; 0xb96 <__floatsisf+0x12>
     b88:	90 95       	com	r25
     b8a:	80 95       	com	r24
     b8c:	70 95       	com	r23
     b8e:	61 95       	neg	r22
     b90:	7f 4f       	sbci	r23, 0xFF	; 255
     b92:	8f 4f       	sbci	r24, 0xFF	; 255
     b94:	9f 4f       	sbci	r25, 0xFF	; 255
     b96:	99 23       	and	r25, r25
     b98:	a9 f0       	breq	.+42     	; 0xbc4 <__floatsisf+0x40>
     b9a:	f9 2f       	mov	r31, r25
     b9c:	96 e9       	ldi	r25, 0x96	; 150
     b9e:	bb 27       	eor	r27, r27
     ba0:	93 95       	inc	r25
     ba2:	f6 95       	lsr	r31
     ba4:	87 95       	ror	r24
     ba6:	77 95       	ror	r23
     ba8:	67 95       	ror	r22
     baa:	b7 95       	ror	r27
     bac:	f1 11       	cpse	r31, r1
     bae:	f8 cf       	rjmp	.-16     	; 0xba0 <__floatsisf+0x1c>
     bb0:	fa f4       	brpl	.+62     	; 0xbf0 <__floatsisf+0x6c>
     bb2:	bb 0f       	add	r27, r27
     bb4:	11 f4       	brne	.+4      	; 0xbba <__floatsisf+0x36>
     bb6:	60 ff       	sbrs	r22, 0
     bb8:	1b c0       	rjmp	.+54     	; 0xbf0 <__floatsisf+0x6c>
     bba:	6f 5f       	subi	r22, 0xFF	; 255
     bbc:	7f 4f       	sbci	r23, 0xFF	; 255
     bbe:	8f 4f       	sbci	r24, 0xFF	; 255
     bc0:	9f 4f       	sbci	r25, 0xFF	; 255
     bc2:	16 c0       	rjmp	.+44     	; 0xbf0 <__floatsisf+0x6c>
     bc4:	88 23       	and	r24, r24
     bc6:	11 f0       	breq	.+4      	; 0xbcc <__floatsisf+0x48>
     bc8:	96 e9       	ldi	r25, 0x96	; 150
     bca:	11 c0       	rjmp	.+34     	; 0xbee <__floatsisf+0x6a>
     bcc:	77 23       	and	r23, r23
     bce:	21 f0       	breq	.+8      	; 0xbd8 <__floatsisf+0x54>
     bd0:	9e e8       	ldi	r25, 0x8E	; 142
     bd2:	87 2f       	mov	r24, r23
     bd4:	76 2f       	mov	r23, r22
     bd6:	05 c0       	rjmp	.+10     	; 0xbe2 <__floatsisf+0x5e>
     bd8:	66 23       	and	r22, r22
     bda:	71 f0       	breq	.+28     	; 0xbf8 <__floatsisf+0x74>
     bdc:	96 e8       	ldi	r25, 0x86	; 134
     bde:	86 2f       	mov	r24, r22
     be0:	70 e0       	ldi	r23, 0x00	; 0
     be2:	60 e0       	ldi	r22, 0x00	; 0
     be4:	2a f0       	brmi	.+10     	; 0xbf0 <__floatsisf+0x6c>
     be6:	9a 95       	dec	r25
     be8:	66 0f       	add	r22, r22
     bea:	77 1f       	adc	r23, r23
     bec:	88 1f       	adc	r24, r24
     bee:	da f7       	brpl	.-10     	; 0xbe6 <__floatsisf+0x62>
     bf0:	88 0f       	add	r24, r24
     bf2:	96 95       	lsr	r25
     bf4:	87 95       	ror	r24
     bf6:	97 f9       	bld	r25, 7
     bf8:	08 95       	ret

00000bfa <__fp_inf>:
     bfa:	97 f9       	bld	r25, 7
     bfc:	9f 67       	ori	r25, 0x7F	; 127
     bfe:	80 e8       	ldi	r24, 0x80	; 128
     c00:	70 e0       	ldi	r23, 0x00	; 0
     c02:	60 e0       	ldi	r22, 0x00	; 0
     c04:	08 95       	ret

00000c06 <__fp_nan>:
     c06:	9f ef       	ldi	r25, 0xFF	; 255
     c08:	80 ec       	ldi	r24, 0xC0	; 192
     c0a:	08 95       	ret

00000c0c <__fp_pscA>:
     c0c:	00 24       	eor	r0, r0
     c0e:	0a 94       	dec	r0
     c10:	16 16       	cp	r1, r22
     c12:	17 06       	cpc	r1, r23
     c14:	18 06       	cpc	r1, r24
     c16:	09 06       	cpc	r0, r25
     c18:	08 95       	ret

00000c1a <__fp_pscB>:
     c1a:	00 24       	eor	r0, r0
     c1c:	0a 94       	dec	r0
     c1e:	12 16       	cp	r1, r18
     c20:	13 06       	cpc	r1, r19
     c22:	14 06       	cpc	r1, r20
     c24:	05 06       	cpc	r0, r21
     c26:	08 95       	ret

00000c28 <__fp_round>:
     c28:	09 2e       	mov	r0, r25
     c2a:	03 94       	inc	r0
     c2c:	00 0c       	add	r0, r0
     c2e:	11 f4       	brne	.+4      	; 0xc34 <__fp_round+0xc>
     c30:	88 23       	and	r24, r24
     c32:	52 f0       	brmi	.+20     	; 0xc48 <__fp_round+0x20>
     c34:	bb 0f       	add	r27, r27
     c36:	40 f4       	brcc	.+16     	; 0xc48 <__fp_round+0x20>
     c38:	bf 2b       	or	r27, r31
     c3a:	11 f4       	brne	.+4      	; 0xc40 <__fp_round+0x18>
     c3c:	60 ff       	sbrs	r22, 0
     c3e:	04 c0       	rjmp	.+8      	; 0xc48 <__fp_round+0x20>
     c40:	6f 5f       	subi	r22, 0xFF	; 255
     c42:	7f 4f       	sbci	r23, 0xFF	; 255
     c44:	8f 4f       	sbci	r24, 0xFF	; 255
     c46:	9f 4f       	sbci	r25, 0xFF	; 255
     c48:	08 95       	ret

00000c4a <__fp_split3>:
     c4a:	57 fd       	sbrc	r21, 7
     c4c:	90 58       	subi	r25, 0x80	; 128
     c4e:	44 0f       	add	r20, r20
     c50:	55 1f       	adc	r21, r21
     c52:	59 f0       	breq	.+22     	; 0xc6a <__fp_splitA+0x10>
     c54:	5f 3f       	cpi	r21, 0xFF	; 255
     c56:	71 f0       	breq	.+28     	; 0xc74 <__fp_splitA+0x1a>
     c58:	47 95       	ror	r20

00000c5a <__fp_splitA>:
     c5a:	88 0f       	add	r24, r24
     c5c:	97 fb       	bst	r25, 7
     c5e:	99 1f       	adc	r25, r25
     c60:	61 f0       	breq	.+24     	; 0xc7a <__fp_splitA+0x20>
     c62:	9f 3f       	cpi	r25, 0xFF	; 255
     c64:	79 f0       	breq	.+30     	; 0xc84 <__fp_splitA+0x2a>
     c66:	87 95       	ror	r24
     c68:	08 95       	ret
     c6a:	12 16       	cp	r1, r18
     c6c:	13 06       	cpc	r1, r19
     c6e:	14 06       	cpc	r1, r20
     c70:	55 1f       	adc	r21, r21
     c72:	f2 cf       	rjmp	.-28     	; 0xc58 <__fp_split3+0xe>
     c74:	46 95       	lsr	r20
     c76:	f1 df       	rcall	.-30     	; 0xc5a <__fp_splitA>
     c78:	08 c0       	rjmp	.+16     	; 0xc8a <__fp_splitA+0x30>
     c7a:	16 16       	cp	r1, r22
     c7c:	17 06       	cpc	r1, r23
     c7e:	18 06       	cpc	r1, r24
     c80:	99 1f       	adc	r25, r25
     c82:	f1 cf       	rjmp	.-30     	; 0xc66 <__fp_splitA+0xc>
     c84:	86 95       	lsr	r24
     c86:	71 05       	cpc	r23, r1
     c88:	61 05       	cpc	r22, r1
     c8a:	08 94       	sec
     c8c:	08 95       	ret

00000c8e <__fp_zero>:
     c8e:	e8 94       	clt

00000c90 <__fp_szero>:
     c90:	bb 27       	eor	r27, r27
     c92:	66 27       	eor	r22, r22
     c94:	77 27       	eor	r23, r23
     c96:	cb 01       	movw	r24, r22
     c98:	97 f9       	bld	r25, 7
     c9a:	08 95       	ret

00000c9c <__mulsf3>:
     c9c:	0b d0       	rcall	.+22     	; 0xcb4 <__mulsf3x>
     c9e:	c4 cf       	rjmp	.-120    	; 0xc28 <__fp_round>
     ca0:	b5 df       	rcall	.-150    	; 0xc0c <__fp_pscA>
     ca2:	28 f0       	brcs	.+10     	; 0xcae <__mulsf3+0x12>
     ca4:	ba df       	rcall	.-140    	; 0xc1a <__fp_pscB>
     ca6:	18 f0       	brcs	.+6      	; 0xcae <__mulsf3+0x12>
     ca8:	95 23       	and	r25, r21
     caa:	09 f0       	breq	.+2      	; 0xcae <__mulsf3+0x12>
     cac:	a6 cf       	rjmp	.-180    	; 0xbfa <__fp_inf>
     cae:	ab cf       	rjmp	.-170    	; 0xc06 <__fp_nan>
     cb0:	11 24       	eor	r1, r1
     cb2:	ee cf       	rjmp	.-36     	; 0xc90 <__fp_szero>

00000cb4 <__mulsf3x>:
     cb4:	ca df       	rcall	.-108    	; 0xc4a <__fp_split3>
     cb6:	a0 f3       	brcs	.-24     	; 0xca0 <__mulsf3+0x4>

00000cb8 <__mulsf3_pse>:
     cb8:	95 9f       	mul	r25, r21
     cba:	d1 f3       	breq	.-12     	; 0xcb0 <__mulsf3+0x14>
     cbc:	95 0f       	add	r25, r21
     cbe:	50 e0       	ldi	r21, 0x00	; 0
     cc0:	55 1f       	adc	r21, r21
     cc2:	62 9f       	mul	r22, r18
     cc4:	f0 01       	movw	r30, r0
     cc6:	72 9f       	mul	r23, r18
     cc8:	bb 27       	eor	r27, r27
     cca:	f0 0d       	add	r31, r0
     ccc:	b1 1d       	adc	r27, r1
     cce:	63 9f       	mul	r22, r19
     cd0:	aa 27       	eor	r26, r26
     cd2:	f0 0d       	add	r31, r0
     cd4:	b1 1d       	adc	r27, r1
     cd6:	aa 1f       	adc	r26, r26
     cd8:	64 9f       	mul	r22, r20
     cda:	66 27       	eor	r22, r22
     cdc:	b0 0d       	add	r27, r0
     cde:	a1 1d       	adc	r26, r1
     ce0:	66 1f       	adc	r22, r22
     ce2:	82 9f       	mul	r24, r18
     ce4:	22 27       	eor	r18, r18
     ce6:	b0 0d       	add	r27, r0
     ce8:	a1 1d       	adc	r26, r1
     cea:	62 1f       	adc	r22, r18
     cec:	73 9f       	mul	r23, r19
     cee:	b0 0d       	add	r27, r0
     cf0:	a1 1d       	adc	r26, r1
     cf2:	62 1f       	adc	r22, r18
     cf4:	83 9f       	mul	r24, r19
     cf6:	a0 0d       	add	r26, r0
     cf8:	61 1d       	adc	r22, r1
     cfa:	22 1f       	adc	r18, r18
     cfc:	74 9f       	mul	r23, r20
     cfe:	33 27       	eor	r19, r19
     d00:	a0 0d       	add	r26, r0
     d02:	61 1d       	adc	r22, r1
     d04:	23 1f       	adc	r18, r19
     d06:	84 9f       	mul	r24, r20
     d08:	60 0d       	add	r22, r0
     d0a:	21 1d       	adc	r18, r1
     d0c:	82 2f       	mov	r24, r18
     d0e:	76 2f       	mov	r23, r22
     d10:	6a 2f       	mov	r22, r26
     d12:	11 24       	eor	r1, r1
     d14:	9f 57       	subi	r25, 0x7F	; 127
     d16:	50 40       	sbci	r21, 0x00	; 0
     d18:	8a f0       	brmi	.+34     	; 0xd3c <__mulsf3_pse+0x84>
     d1a:	e1 f0       	breq	.+56     	; 0xd54 <__mulsf3_pse+0x9c>
     d1c:	88 23       	and	r24, r24
     d1e:	4a f0       	brmi	.+18     	; 0xd32 <__mulsf3_pse+0x7a>
     d20:	ee 0f       	add	r30, r30
     d22:	ff 1f       	adc	r31, r31
     d24:	bb 1f       	adc	r27, r27
     d26:	66 1f       	adc	r22, r22
     d28:	77 1f       	adc	r23, r23
     d2a:	88 1f       	adc	r24, r24
     d2c:	91 50       	subi	r25, 0x01	; 1
     d2e:	50 40       	sbci	r21, 0x00	; 0
     d30:	a9 f7       	brne	.-22     	; 0xd1c <__mulsf3_pse+0x64>
     d32:	9e 3f       	cpi	r25, 0xFE	; 254
     d34:	51 05       	cpc	r21, r1
     d36:	70 f0       	brcs	.+28     	; 0xd54 <__mulsf3_pse+0x9c>
     d38:	60 cf       	rjmp	.-320    	; 0xbfa <__fp_inf>
     d3a:	aa cf       	rjmp	.-172    	; 0xc90 <__fp_szero>
     d3c:	5f 3f       	cpi	r21, 0xFF	; 255
     d3e:	ec f3       	brlt	.-6      	; 0xd3a <__mulsf3_pse+0x82>
     d40:	98 3e       	cpi	r25, 0xE8	; 232
     d42:	dc f3       	brlt	.-10     	; 0xd3a <__mulsf3_pse+0x82>
     d44:	86 95       	lsr	r24
     d46:	77 95       	ror	r23
     d48:	67 95       	ror	r22
     d4a:	b7 95       	ror	r27
     d4c:	f7 95       	ror	r31
     d4e:	e7 95       	ror	r30
     d50:	9f 5f       	subi	r25, 0xFF	; 255
     d52:	c1 f7       	brne	.-16     	; 0xd44 <__mulsf3_pse+0x8c>
     d54:	fe 2b       	or	r31, r30
     d56:	88 0f       	add	r24, r24
     d58:	91 1d       	adc	r25, r1
     d5a:	96 95       	lsr	r25
     d5c:	87 95       	ror	r24
     d5e:	97 f9       	bld	r25, 7
     d60:	08 95       	ret

00000d62 <malloc>:
     d62:	cf 93       	push	r28
     d64:	df 93       	push	r29
     d66:	82 30       	cpi	r24, 0x02	; 2
     d68:	91 05       	cpc	r25, r1
     d6a:	10 f4       	brcc	.+4      	; 0xd70 <malloc+0xe>
     d6c:	82 e0       	ldi	r24, 0x02	; 2
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	e0 91 8e 02 	lds	r30, 0x028E
     d74:	f0 91 8f 02 	lds	r31, 0x028F
     d78:	20 e0       	ldi	r18, 0x00	; 0
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	a0 e0       	ldi	r26, 0x00	; 0
     d7e:	b0 e0       	ldi	r27, 0x00	; 0
     d80:	30 97       	sbiw	r30, 0x00	; 0
     d82:	39 f1       	breq	.+78     	; 0xdd2 <malloc+0x70>
     d84:	40 81       	ld	r20, Z
     d86:	51 81       	ldd	r21, Z+1	; 0x01
     d88:	48 17       	cp	r20, r24
     d8a:	59 07       	cpc	r21, r25
     d8c:	b8 f0       	brcs	.+46     	; 0xdbc <malloc+0x5a>
     d8e:	48 17       	cp	r20, r24
     d90:	59 07       	cpc	r21, r25
     d92:	71 f4       	brne	.+28     	; 0xdb0 <malloc+0x4e>
     d94:	82 81       	ldd	r24, Z+2	; 0x02
     d96:	93 81       	ldd	r25, Z+3	; 0x03
     d98:	10 97       	sbiw	r26, 0x00	; 0
     d9a:	29 f0       	breq	.+10     	; 0xda6 <malloc+0x44>
     d9c:	13 96       	adiw	r26, 0x03	; 3
     d9e:	9c 93       	st	X, r25
     da0:	8e 93       	st	-X, r24
     da2:	12 97       	sbiw	r26, 0x02	; 2
     da4:	2c c0       	rjmp	.+88     	; 0xdfe <malloc+0x9c>
     da6:	90 93 8f 02 	sts	0x028F, r25
     daa:	80 93 8e 02 	sts	0x028E, r24
     dae:	27 c0       	rjmp	.+78     	; 0xdfe <malloc+0x9c>
     db0:	21 15       	cp	r18, r1
     db2:	31 05       	cpc	r19, r1
     db4:	31 f0       	breq	.+12     	; 0xdc2 <malloc+0x60>
     db6:	42 17       	cp	r20, r18
     db8:	53 07       	cpc	r21, r19
     dba:	18 f0       	brcs	.+6      	; 0xdc2 <malloc+0x60>
     dbc:	a9 01       	movw	r20, r18
     dbe:	db 01       	movw	r26, r22
     dc0:	01 c0       	rjmp	.+2      	; 0xdc4 <malloc+0x62>
     dc2:	ef 01       	movw	r28, r30
     dc4:	9a 01       	movw	r18, r20
     dc6:	bd 01       	movw	r22, r26
     dc8:	df 01       	movw	r26, r30
     dca:	02 80       	ldd	r0, Z+2	; 0x02
     dcc:	f3 81       	ldd	r31, Z+3	; 0x03
     dce:	e0 2d       	mov	r30, r0
     dd0:	d7 cf       	rjmp	.-82     	; 0xd80 <malloc+0x1e>
     dd2:	21 15       	cp	r18, r1
     dd4:	31 05       	cpc	r19, r1
     dd6:	f9 f0       	breq	.+62     	; 0xe16 <malloc+0xb4>
     dd8:	28 1b       	sub	r18, r24
     dda:	39 0b       	sbc	r19, r25
     ddc:	24 30       	cpi	r18, 0x04	; 4
     dde:	31 05       	cpc	r19, r1
     de0:	80 f4       	brcc	.+32     	; 0xe02 <malloc+0xa0>
     de2:	8a 81       	ldd	r24, Y+2	; 0x02
     de4:	9b 81       	ldd	r25, Y+3	; 0x03
     de6:	61 15       	cp	r22, r1
     de8:	71 05       	cpc	r23, r1
     dea:	21 f0       	breq	.+8      	; 0xdf4 <malloc+0x92>
     dec:	fb 01       	movw	r30, r22
     dee:	93 83       	std	Z+3, r25	; 0x03
     df0:	82 83       	std	Z+2, r24	; 0x02
     df2:	04 c0       	rjmp	.+8      	; 0xdfc <malloc+0x9a>
     df4:	90 93 8f 02 	sts	0x028F, r25
     df8:	80 93 8e 02 	sts	0x028E, r24
     dfc:	fe 01       	movw	r30, r28
     dfe:	32 96       	adiw	r30, 0x02	; 2
     e00:	44 c0       	rjmp	.+136    	; 0xe8a <malloc+0x128>
     e02:	fe 01       	movw	r30, r28
     e04:	e2 0f       	add	r30, r18
     e06:	f3 1f       	adc	r31, r19
     e08:	81 93       	st	Z+, r24
     e0a:	91 93       	st	Z+, r25
     e0c:	22 50       	subi	r18, 0x02	; 2
     e0e:	31 09       	sbc	r19, r1
     e10:	39 83       	std	Y+1, r19	; 0x01
     e12:	28 83       	st	Y, r18
     e14:	3a c0       	rjmp	.+116    	; 0xe8a <malloc+0x128>
     e16:	20 91 8c 02 	lds	r18, 0x028C
     e1a:	30 91 8d 02 	lds	r19, 0x028D
     e1e:	23 2b       	or	r18, r19
     e20:	41 f4       	brne	.+16     	; 0xe32 <malloc+0xd0>
     e22:	20 91 02 01 	lds	r18, 0x0102
     e26:	30 91 03 01 	lds	r19, 0x0103
     e2a:	30 93 8d 02 	sts	0x028D, r19
     e2e:	20 93 8c 02 	sts	0x028C, r18
     e32:	20 91 00 01 	lds	r18, 0x0100
     e36:	30 91 01 01 	lds	r19, 0x0101
     e3a:	21 15       	cp	r18, r1
     e3c:	31 05       	cpc	r19, r1
     e3e:	41 f4       	brne	.+16     	; 0xe50 <malloc+0xee>
     e40:	2d b7       	in	r18, 0x3d	; 61
     e42:	3e b7       	in	r19, 0x3e	; 62
     e44:	40 91 04 01 	lds	r20, 0x0104
     e48:	50 91 05 01 	lds	r21, 0x0105
     e4c:	24 1b       	sub	r18, r20
     e4e:	35 0b       	sbc	r19, r21
     e50:	e0 91 8c 02 	lds	r30, 0x028C
     e54:	f0 91 8d 02 	lds	r31, 0x028D
     e58:	e2 17       	cp	r30, r18
     e5a:	f3 07       	cpc	r31, r19
     e5c:	a0 f4       	brcc	.+40     	; 0xe86 <malloc+0x124>
     e5e:	2e 1b       	sub	r18, r30
     e60:	3f 0b       	sbc	r19, r31
     e62:	28 17       	cp	r18, r24
     e64:	39 07       	cpc	r19, r25
     e66:	78 f0       	brcs	.+30     	; 0xe86 <malloc+0x124>
     e68:	ac 01       	movw	r20, r24
     e6a:	4e 5f       	subi	r20, 0xFE	; 254
     e6c:	5f 4f       	sbci	r21, 0xFF	; 255
     e6e:	24 17       	cp	r18, r20
     e70:	35 07       	cpc	r19, r21
     e72:	48 f0       	brcs	.+18     	; 0xe86 <malloc+0x124>
     e74:	4e 0f       	add	r20, r30
     e76:	5f 1f       	adc	r21, r31
     e78:	50 93 8d 02 	sts	0x028D, r21
     e7c:	40 93 8c 02 	sts	0x028C, r20
     e80:	81 93       	st	Z+, r24
     e82:	91 93       	st	Z+, r25
     e84:	02 c0       	rjmp	.+4      	; 0xe8a <malloc+0x128>
     e86:	e0 e0       	ldi	r30, 0x00	; 0
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	cf 01       	movw	r24, r30
     e8c:	df 91       	pop	r29
     e8e:	cf 91       	pop	r28
     e90:	08 95       	ret

00000e92 <free>:
     e92:	cf 93       	push	r28
     e94:	df 93       	push	r29
     e96:	00 97       	sbiw	r24, 0x00	; 0
     e98:	09 f4       	brne	.+2      	; 0xe9c <free+0xa>
     e9a:	87 c0       	rjmp	.+270    	; 0xfaa <free+0x118>
     e9c:	fc 01       	movw	r30, r24
     e9e:	32 97       	sbiw	r30, 0x02	; 2
     ea0:	13 82       	std	Z+3, r1	; 0x03
     ea2:	12 82       	std	Z+2, r1	; 0x02
     ea4:	c0 91 8e 02 	lds	r28, 0x028E
     ea8:	d0 91 8f 02 	lds	r29, 0x028F
     eac:	20 97       	sbiw	r28, 0x00	; 0
     eae:	81 f4       	brne	.+32     	; 0xed0 <free+0x3e>
     eb0:	20 81       	ld	r18, Z
     eb2:	31 81       	ldd	r19, Z+1	; 0x01
     eb4:	28 0f       	add	r18, r24
     eb6:	39 1f       	adc	r19, r25
     eb8:	80 91 8c 02 	lds	r24, 0x028C
     ebc:	90 91 8d 02 	lds	r25, 0x028D
     ec0:	82 17       	cp	r24, r18
     ec2:	93 07       	cpc	r25, r19
     ec4:	79 f5       	brne	.+94     	; 0xf24 <free+0x92>
     ec6:	f0 93 8d 02 	sts	0x028D, r31
     eca:	e0 93 8c 02 	sts	0x028C, r30
     ece:	6d c0       	rjmp	.+218    	; 0xfaa <free+0x118>
     ed0:	de 01       	movw	r26, r28
     ed2:	20 e0       	ldi	r18, 0x00	; 0
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	ae 17       	cp	r26, r30
     ed8:	bf 07       	cpc	r27, r31
     eda:	50 f4       	brcc	.+20     	; 0xef0 <free+0x5e>
     edc:	12 96       	adiw	r26, 0x02	; 2
     ede:	4d 91       	ld	r20, X+
     ee0:	5c 91       	ld	r21, X
     ee2:	13 97       	sbiw	r26, 0x03	; 3
     ee4:	9d 01       	movw	r18, r26
     ee6:	41 15       	cp	r20, r1
     ee8:	51 05       	cpc	r21, r1
     eea:	09 f1       	breq	.+66     	; 0xf2e <free+0x9c>
     eec:	da 01       	movw	r26, r20
     eee:	f3 cf       	rjmp	.-26     	; 0xed6 <free+0x44>
     ef0:	b3 83       	std	Z+3, r27	; 0x03
     ef2:	a2 83       	std	Z+2, r26	; 0x02
     ef4:	40 81       	ld	r20, Z
     ef6:	51 81       	ldd	r21, Z+1	; 0x01
     ef8:	84 0f       	add	r24, r20
     efa:	95 1f       	adc	r25, r21
     efc:	8a 17       	cp	r24, r26
     efe:	9b 07       	cpc	r25, r27
     f00:	71 f4       	brne	.+28     	; 0xf1e <free+0x8c>
     f02:	8d 91       	ld	r24, X+
     f04:	9c 91       	ld	r25, X
     f06:	11 97       	sbiw	r26, 0x01	; 1
     f08:	84 0f       	add	r24, r20
     f0a:	95 1f       	adc	r25, r21
     f0c:	02 96       	adiw	r24, 0x02	; 2
     f0e:	91 83       	std	Z+1, r25	; 0x01
     f10:	80 83       	st	Z, r24
     f12:	12 96       	adiw	r26, 0x02	; 2
     f14:	8d 91       	ld	r24, X+
     f16:	9c 91       	ld	r25, X
     f18:	13 97       	sbiw	r26, 0x03	; 3
     f1a:	93 83       	std	Z+3, r25	; 0x03
     f1c:	82 83       	std	Z+2, r24	; 0x02
     f1e:	21 15       	cp	r18, r1
     f20:	31 05       	cpc	r19, r1
     f22:	29 f4       	brne	.+10     	; 0xf2e <free+0x9c>
     f24:	f0 93 8f 02 	sts	0x028F, r31
     f28:	e0 93 8e 02 	sts	0x028E, r30
     f2c:	3e c0       	rjmp	.+124    	; 0xfaa <free+0x118>
     f2e:	d9 01       	movw	r26, r18
     f30:	13 96       	adiw	r26, 0x03	; 3
     f32:	fc 93       	st	X, r31
     f34:	ee 93       	st	-X, r30
     f36:	12 97       	sbiw	r26, 0x02	; 2
     f38:	4d 91       	ld	r20, X+
     f3a:	5d 91       	ld	r21, X+
     f3c:	a4 0f       	add	r26, r20
     f3e:	b5 1f       	adc	r27, r21
     f40:	ea 17       	cp	r30, r26
     f42:	fb 07       	cpc	r31, r27
     f44:	79 f4       	brne	.+30     	; 0xf64 <free+0xd2>
     f46:	80 81       	ld	r24, Z
     f48:	91 81       	ldd	r25, Z+1	; 0x01
     f4a:	84 0f       	add	r24, r20
     f4c:	95 1f       	adc	r25, r21
     f4e:	02 96       	adiw	r24, 0x02	; 2
     f50:	d9 01       	movw	r26, r18
     f52:	11 96       	adiw	r26, 0x01	; 1
     f54:	9c 93       	st	X, r25
     f56:	8e 93       	st	-X, r24
     f58:	82 81       	ldd	r24, Z+2	; 0x02
     f5a:	93 81       	ldd	r25, Z+3	; 0x03
     f5c:	13 96       	adiw	r26, 0x03	; 3
     f5e:	9c 93       	st	X, r25
     f60:	8e 93       	st	-X, r24
     f62:	12 97       	sbiw	r26, 0x02	; 2
     f64:	e0 e0       	ldi	r30, 0x00	; 0
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	8a 81       	ldd	r24, Y+2	; 0x02
     f6a:	9b 81       	ldd	r25, Y+3	; 0x03
     f6c:	00 97       	sbiw	r24, 0x00	; 0
     f6e:	19 f0       	breq	.+6      	; 0xf76 <free+0xe4>
     f70:	fe 01       	movw	r30, r28
     f72:	ec 01       	movw	r28, r24
     f74:	f9 cf       	rjmp	.-14     	; 0xf68 <free+0xd6>
     f76:	ce 01       	movw	r24, r28
     f78:	02 96       	adiw	r24, 0x02	; 2
     f7a:	28 81       	ld	r18, Y
     f7c:	39 81       	ldd	r19, Y+1	; 0x01
     f7e:	82 0f       	add	r24, r18
     f80:	93 1f       	adc	r25, r19
     f82:	20 91 8c 02 	lds	r18, 0x028C
     f86:	30 91 8d 02 	lds	r19, 0x028D
     f8a:	28 17       	cp	r18, r24
     f8c:	39 07       	cpc	r19, r25
     f8e:	69 f4       	brne	.+26     	; 0xfaa <free+0x118>
     f90:	30 97       	sbiw	r30, 0x00	; 0
     f92:	29 f4       	brne	.+10     	; 0xf9e <free+0x10c>
     f94:	10 92 8f 02 	sts	0x028F, r1
     f98:	10 92 8e 02 	sts	0x028E, r1
     f9c:	02 c0       	rjmp	.+4      	; 0xfa2 <free+0x110>
     f9e:	13 82       	std	Z+3, r1	; 0x03
     fa0:	12 82       	std	Z+2, r1	; 0x02
     fa2:	d0 93 8d 02 	sts	0x028D, r29
     fa6:	c0 93 8c 02 	sts	0x028C, r28
     faa:	df 91       	pop	r29
     fac:	cf 91       	pop	r28
     fae:	08 95       	ret

00000fb0 <strncpy>:
     fb0:	fb 01       	movw	r30, r22
     fb2:	dc 01       	movw	r26, r24
     fb4:	41 50       	subi	r20, 0x01	; 1
     fb6:	50 40       	sbci	r21, 0x00	; 0
     fb8:	48 f0       	brcs	.+18     	; 0xfcc <strncpy+0x1c>
     fba:	01 90       	ld	r0, Z+
     fbc:	0d 92       	st	X+, r0
     fbe:	00 20       	and	r0, r0
     fc0:	c9 f7       	brne	.-14     	; 0xfb4 <strncpy+0x4>
     fc2:	01 c0       	rjmp	.+2      	; 0xfc6 <strncpy+0x16>
     fc4:	1d 92       	st	X+, r1
     fc6:	41 50       	subi	r20, 0x01	; 1
     fc8:	50 40       	sbci	r21, 0x00	; 0
     fca:	e0 f7       	brcc	.-8      	; 0xfc4 <strncpy+0x14>
     fcc:	08 95       	ret

00000fce <fprintf>:
     fce:	a0 e0       	ldi	r26, 0x00	; 0
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	ec ee       	ldi	r30, 0xEC	; 236
     fd4:	f7 e0       	ldi	r31, 0x07	; 7
     fd6:	83 c2       	rjmp	.+1286   	; 0x14de <__prologue_saves__+0x20>
     fd8:	ae 01       	movw	r20, r28
     fda:	47 5f       	subi	r20, 0xF7	; 247
     fdc:	5f 4f       	sbci	r21, 0xFF	; 255
     fde:	6f 81       	ldd	r22, Y+7	; 0x07
     fe0:	78 85       	ldd	r23, Y+8	; 0x08
     fe2:	8d 81       	ldd	r24, Y+5	; 0x05
     fe4:	9e 81       	ldd	r25, Y+6	; 0x06
     fe6:	34 d0       	rcall	.+104    	; 0x1050 <vfprintf>
     fe8:	e2 e0       	ldi	r30, 0x02	; 2
     fea:	95 c2       	rjmp	.+1322   	; 0x1516 <__epilogue_restores__+0x20>

00000fec <fputc>:
     fec:	0f 93       	push	r16
     fee:	1f 93       	push	r17
     ff0:	cf 93       	push	r28
     ff2:	df 93       	push	r29
     ff4:	18 2f       	mov	r17, r24
     ff6:	09 2f       	mov	r16, r25
     ff8:	eb 01       	movw	r28, r22
     ffa:	8b 81       	ldd	r24, Y+3	; 0x03
     ffc:	81 fd       	sbrc	r24, 1
     ffe:	03 c0       	rjmp	.+6      	; 0x1006 <fputc+0x1a>
    1000:	8f ef       	ldi	r24, 0xFF	; 255
    1002:	9f ef       	ldi	r25, 0xFF	; 255
    1004:	20 c0       	rjmp	.+64     	; 0x1046 <fputc+0x5a>
    1006:	82 ff       	sbrs	r24, 2
    1008:	10 c0       	rjmp	.+32     	; 0x102a <fputc+0x3e>
    100a:	4e 81       	ldd	r20, Y+6	; 0x06
    100c:	5f 81       	ldd	r21, Y+7	; 0x07
    100e:	2c 81       	ldd	r18, Y+4	; 0x04
    1010:	3d 81       	ldd	r19, Y+5	; 0x05
    1012:	42 17       	cp	r20, r18
    1014:	53 07       	cpc	r21, r19
    1016:	7c f4       	brge	.+30     	; 0x1036 <fputc+0x4a>
    1018:	e8 81       	ld	r30, Y
    101a:	f9 81       	ldd	r31, Y+1	; 0x01
    101c:	9f 01       	movw	r18, r30
    101e:	2f 5f       	subi	r18, 0xFF	; 255
    1020:	3f 4f       	sbci	r19, 0xFF	; 255
    1022:	39 83       	std	Y+1, r19	; 0x01
    1024:	28 83       	st	Y, r18
    1026:	10 83       	st	Z, r17
    1028:	06 c0       	rjmp	.+12     	; 0x1036 <fputc+0x4a>
    102a:	e8 85       	ldd	r30, Y+8	; 0x08
    102c:	f9 85       	ldd	r31, Y+9	; 0x09
    102e:	81 2f       	mov	r24, r17
    1030:	09 95       	icall
    1032:	89 2b       	or	r24, r25
    1034:	29 f7       	brne	.-54     	; 0x1000 <fputc+0x14>
    1036:	2e 81       	ldd	r18, Y+6	; 0x06
    1038:	3f 81       	ldd	r19, Y+7	; 0x07
    103a:	2f 5f       	subi	r18, 0xFF	; 255
    103c:	3f 4f       	sbci	r19, 0xFF	; 255
    103e:	3f 83       	std	Y+7, r19	; 0x07
    1040:	2e 83       	std	Y+6, r18	; 0x06
    1042:	81 2f       	mov	r24, r17
    1044:	90 2f       	mov	r25, r16
    1046:	df 91       	pop	r29
    1048:	cf 91       	pop	r28
    104a:	1f 91       	pop	r17
    104c:	0f 91       	pop	r16
    104e:	08 95       	ret

00001050 <vfprintf>:
    1050:	ac e0       	ldi	r26, 0x0C	; 12
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	ed e2       	ldi	r30, 0x2D	; 45
    1056:	f8 e0       	ldi	r31, 0x08	; 8
    1058:	32 c2       	rjmp	.+1124   	; 0x14be <__prologue_saves__>
    105a:	7c 01       	movw	r14, r24
    105c:	6b 01       	movw	r12, r22
    105e:	8a 01       	movw	r16, r20
    1060:	fc 01       	movw	r30, r24
    1062:	17 82       	std	Z+7, r1	; 0x07
    1064:	16 82       	std	Z+6, r1	; 0x06
    1066:	83 81       	ldd	r24, Z+3	; 0x03
    1068:	81 ff       	sbrs	r24, 1
    106a:	b0 c1       	rjmp	.+864    	; 0x13cc <vfprintf+0x37c>
    106c:	ce 01       	movw	r24, r28
    106e:	01 96       	adiw	r24, 0x01	; 1
    1070:	4c 01       	movw	r8, r24
    1072:	f7 01       	movw	r30, r14
    1074:	93 81       	ldd	r25, Z+3	; 0x03
    1076:	f6 01       	movw	r30, r12
    1078:	93 fd       	sbrc	r25, 3
    107a:	85 91       	lpm	r24, Z+
    107c:	93 ff       	sbrs	r25, 3
    107e:	81 91       	ld	r24, Z+
    1080:	6f 01       	movw	r12, r30
    1082:	88 23       	and	r24, r24
    1084:	09 f4       	brne	.+2      	; 0x1088 <vfprintf+0x38>
    1086:	9e c1       	rjmp	.+828    	; 0x13c4 <vfprintf+0x374>
    1088:	85 32       	cpi	r24, 0x25	; 37
    108a:	39 f4       	brne	.+14     	; 0x109a <vfprintf+0x4a>
    108c:	93 fd       	sbrc	r25, 3
    108e:	85 91       	lpm	r24, Z+
    1090:	93 ff       	sbrs	r25, 3
    1092:	81 91       	ld	r24, Z+
    1094:	6f 01       	movw	r12, r30
    1096:	85 32       	cpi	r24, 0x25	; 37
    1098:	21 f4       	brne	.+8      	; 0x10a2 <vfprintf+0x52>
    109a:	b7 01       	movw	r22, r14
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	a6 df       	rcall	.-180    	; 0xfec <fputc>
    10a0:	e8 cf       	rjmp	.-48     	; 0x1072 <vfprintf+0x22>
    10a2:	51 2c       	mov	r5, r1
    10a4:	31 2c       	mov	r3, r1
    10a6:	20 e0       	ldi	r18, 0x00	; 0
    10a8:	20 32       	cpi	r18, 0x20	; 32
    10aa:	a0 f4       	brcc	.+40     	; 0x10d4 <vfprintf+0x84>
    10ac:	8b 32       	cpi	r24, 0x2B	; 43
    10ae:	69 f0       	breq	.+26     	; 0x10ca <vfprintf+0x7a>
    10b0:	30 f4       	brcc	.+12     	; 0x10be <vfprintf+0x6e>
    10b2:	80 32       	cpi	r24, 0x20	; 32
    10b4:	59 f0       	breq	.+22     	; 0x10cc <vfprintf+0x7c>
    10b6:	83 32       	cpi	r24, 0x23	; 35
    10b8:	69 f4       	brne	.+26     	; 0x10d4 <vfprintf+0x84>
    10ba:	20 61       	ori	r18, 0x10	; 16
    10bc:	2c c0       	rjmp	.+88     	; 0x1116 <vfprintf+0xc6>
    10be:	8d 32       	cpi	r24, 0x2D	; 45
    10c0:	39 f0       	breq	.+14     	; 0x10d0 <vfprintf+0x80>
    10c2:	80 33       	cpi	r24, 0x30	; 48
    10c4:	39 f4       	brne	.+14     	; 0x10d4 <vfprintf+0x84>
    10c6:	21 60       	ori	r18, 0x01	; 1
    10c8:	26 c0       	rjmp	.+76     	; 0x1116 <vfprintf+0xc6>
    10ca:	22 60       	ori	r18, 0x02	; 2
    10cc:	24 60       	ori	r18, 0x04	; 4
    10ce:	23 c0       	rjmp	.+70     	; 0x1116 <vfprintf+0xc6>
    10d0:	28 60       	ori	r18, 0x08	; 8
    10d2:	21 c0       	rjmp	.+66     	; 0x1116 <vfprintf+0xc6>
    10d4:	27 fd       	sbrc	r18, 7
    10d6:	27 c0       	rjmp	.+78     	; 0x1126 <vfprintf+0xd6>
    10d8:	30 ed       	ldi	r19, 0xD0	; 208
    10da:	38 0f       	add	r19, r24
    10dc:	3a 30       	cpi	r19, 0x0A	; 10
    10de:	78 f4       	brcc	.+30     	; 0x10fe <vfprintf+0xae>
    10e0:	26 ff       	sbrs	r18, 6
    10e2:	06 c0       	rjmp	.+12     	; 0x10f0 <vfprintf+0xa0>
    10e4:	fa e0       	ldi	r31, 0x0A	; 10
    10e6:	5f 9e       	mul	r5, r31
    10e8:	30 0d       	add	r19, r0
    10ea:	11 24       	eor	r1, r1
    10ec:	53 2e       	mov	r5, r19
    10ee:	13 c0       	rjmp	.+38     	; 0x1116 <vfprintf+0xc6>
    10f0:	8a e0       	ldi	r24, 0x0A	; 10
    10f2:	38 9e       	mul	r3, r24
    10f4:	30 0d       	add	r19, r0
    10f6:	11 24       	eor	r1, r1
    10f8:	33 2e       	mov	r3, r19
    10fa:	20 62       	ori	r18, 0x20	; 32
    10fc:	0c c0       	rjmp	.+24     	; 0x1116 <vfprintf+0xc6>
    10fe:	8e 32       	cpi	r24, 0x2E	; 46
    1100:	21 f4       	brne	.+8      	; 0x110a <vfprintf+0xba>
    1102:	26 fd       	sbrc	r18, 6
    1104:	5f c1       	rjmp	.+702    	; 0x13c4 <vfprintf+0x374>
    1106:	20 64       	ori	r18, 0x40	; 64
    1108:	06 c0       	rjmp	.+12     	; 0x1116 <vfprintf+0xc6>
    110a:	8c 36       	cpi	r24, 0x6C	; 108
    110c:	11 f4       	brne	.+4      	; 0x1112 <vfprintf+0xc2>
    110e:	20 68       	ori	r18, 0x80	; 128
    1110:	02 c0       	rjmp	.+4      	; 0x1116 <vfprintf+0xc6>
    1112:	88 36       	cpi	r24, 0x68	; 104
    1114:	41 f4       	brne	.+16     	; 0x1126 <vfprintf+0xd6>
    1116:	f6 01       	movw	r30, r12
    1118:	93 fd       	sbrc	r25, 3
    111a:	85 91       	lpm	r24, Z+
    111c:	93 ff       	sbrs	r25, 3
    111e:	81 91       	ld	r24, Z+
    1120:	6f 01       	movw	r12, r30
    1122:	81 11       	cpse	r24, r1
    1124:	c1 cf       	rjmp	.-126    	; 0x10a8 <vfprintf+0x58>
    1126:	98 2f       	mov	r25, r24
    1128:	9f 7d       	andi	r25, 0xDF	; 223
    112a:	95 54       	subi	r25, 0x45	; 69
    112c:	93 30       	cpi	r25, 0x03	; 3
    112e:	28 f4       	brcc	.+10     	; 0x113a <vfprintf+0xea>
    1130:	0c 5f       	subi	r16, 0xFC	; 252
    1132:	1f 4f       	sbci	r17, 0xFF	; 255
    1134:	ff e3       	ldi	r31, 0x3F	; 63
    1136:	f9 83       	std	Y+1, r31	; 0x01
    1138:	0d c0       	rjmp	.+26     	; 0x1154 <vfprintf+0x104>
    113a:	83 36       	cpi	r24, 0x63	; 99
    113c:	31 f0       	breq	.+12     	; 0x114a <vfprintf+0xfa>
    113e:	83 37       	cpi	r24, 0x73	; 115
    1140:	71 f0       	breq	.+28     	; 0x115e <vfprintf+0x10e>
    1142:	83 35       	cpi	r24, 0x53	; 83
    1144:	09 f0       	breq	.+2      	; 0x1148 <vfprintf+0xf8>
    1146:	57 c0       	rjmp	.+174    	; 0x11f6 <vfprintf+0x1a6>
    1148:	21 c0       	rjmp	.+66     	; 0x118c <vfprintf+0x13c>
    114a:	f8 01       	movw	r30, r16
    114c:	80 81       	ld	r24, Z
    114e:	89 83       	std	Y+1, r24	; 0x01
    1150:	0e 5f       	subi	r16, 0xFE	; 254
    1152:	1f 4f       	sbci	r17, 0xFF	; 255
    1154:	44 24       	eor	r4, r4
    1156:	43 94       	inc	r4
    1158:	51 2c       	mov	r5, r1
    115a:	54 01       	movw	r10, r8
    115c:	14 c0       	rjmp	.+40     	; 0x1186 <vfprintf+0x136>
    115e:	38 01       	movw	r6, r16
    1160:	f2 e0       	ldi	r31, 0x02	; 2
    1162:	6f 0e       	add	r6, r31
    1164:	71 1c       	adc	r7, r1
    1166:	f8 01       	movw	r30, r16
    1168:	a0 80       	ld	r10, Z
    116a:	b1 80       	ldd	r11, Z+1	; 0x01
    116c:	26 ff       	sbrs	r18, 6
    116e:	03 c0       	rjmp	.+6      	; 0x1176 <vfprintf+0x126>
    1170:	65 2d       	mov	r22, r5
    1172:	70 e0       	ldi	r23, 0x00	; 0
    1174:	02 c0       	rjmp	.+4      	; 0x117a <vfprintf+0x12a>
    1176:	6f ef       	ldi	r22, 0xFF	; 255
    1178:	7f ef       	ldi	r23, 0xFF	; 255
    117a:	c5 01       	movw	r24, r10
    117c:	2c 87       	std	Y+12, r18	; 0x0c
    117e:	36 d1       	rcall	.+620    	; 0x13ec <strnlen>
    1180:	2c 01       	movw	r4, r24
    1182:	83 01       	movw	r16, r6
    1184:	2c 85       	ldd	r18, Y+12	; 0x0c
    1186:	2f 77       	andi	r18, 0x7F	; 127
    1188:	22 2e       	mov	r2, r18
    118a:	16 c0       	rjmp	.+44     	; 0x11b8 <vfprintf+0x168>
    118c:	38 01       	movw	r6, r16
    118e:	f2 e0       	ldi	r31, 0x02	; 2
    1190:	6f 0e       	add	r6, r31
    1192:	71 1c       	adc	r7, r1
    1194:	f8 01       	movw	r30, r16
    1196:	a0 80       	ld	r10, Z
    1198:	b1 80       	ldd	r11, Z+1	; 0x01
    119a:	26 ff       	sbrs	r18, 6
    119c:	03 c0       	rjmp	.+6      	; 0x11a4 <vfprintf+0x154>
    119e:	65 2d       	mov	r22, r5
    11a0:	70 e0       	ldi	r23, 0x00	; 0
    11a2:	02 c0       	rjmp	.+4      	; 0x11a8 <vfprintf+0x158>
    11a4:	6f ef       	ldi	r22, 0xFF	; 255
    11a6:	7f ef       	ldi	r23, 0xFF	; 255
    11a8:	c5 01       	movw	r24, r10
    11aa:	2c 87       	std	Y+12, r18	; 0x0c
    11ac:	14 d1       	rcall	.+552    	; 0x13d6 <strnlen_P>
    11ae:	2c 01       	movw	r4, r24
    11b0:	2c 85       	ldd	r18, Y+12	; 0x0c
    11b2:	20 68       	ori	r18, 0x80	; 128
    11b4:	22 2e       	mov	r2, r18
    11b6:	83 01       	movw	r16, r6
    11b8:	23 fc       	sbrc	r2, 3
    11ba:	19 c0       	rjmp	.+50     	; 0x11ee <vfprintf+0x19e>
    11bc:	83 2d       	mov	r24, r3
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	48 16       	cp	r4, r24
    11c2:	59 06       	cpc	r5, r25
    11c4:	a0 f4       	brcc	.+40     	; 0x11ee <vfprintf+0x19e>
    11c6:	b7 01       	movw	r22, r14
    11c8:	80 e2       	ldi	r24, 0x20	; 32
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	0f df       	rcall	.-482    	; 0xfec <fputc>
    11ce:	3a 94       	dec	r3
    11d0:	f5 cf       	rjmp	.-22     	; 0x11bc <vfprintf+0x16c>
    11d2:	f5 01       	movw	r30, r10
    11d4:	27 fc       	sbrc	r2, 7
    11d6:	85 91       	lpm	r24, Z+
    11d8:	27 fe       	sbrs	r2, 7
    11da:	81 91       	ld	r24, Z+
    11dc:	5f 01       	movw	r10, r30
    11de:	b7 01       	movw	r22, r14
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	04 df       	rcall	.-504    	; 0xfec <fputc>
    11e4:	31 10       	cpse	r3, r1
    11e6:	3a 94       	dec	r3
    11e8:	f1 e0       	ldi	r31, 0x01	; 1
    11ea:	4f 1a       	sub	r4, r31
    11ec:	51 08       	sbc	r5, r1
    11ee:	41 14       	cp	r4, r1
    11f0:	51 04       	cpc	r5, r1
    11f2:	79 f7       	brne	.-34     	; 0x11d2 <vfprintf+0x182>
    11f4:	de c0       	rjmp	.+444    	; 0x13b2 <vfprintf+0x362>
    11f6:	84 36       	cpi	r24, 0x64	; 100
    11f8:	11 f0       	breq	.+4      	; 0x11fe <vfprintf+0x1ae>
    11fa:	89 36       	cpi	r24, 0x69	; 105
    11fc:	31 f5       	brne	.+76     	; 0x124a <vfprintf+0x1fa>
    11fe:	f8 01       	movw	r30, r16
    1200:	27 ff       	sbrs	r18, 7
    1202:	07 c0       	rjmp	.+14     	; 0x1212 <vfprintf+0x1c2>
    1204:	60 81       	ld	r22, Z
    1206:	71 81       	ldd	r23, Z+1	; 0x01
    1208:	82 81       	ldd	r24, Z+2	; 0x02
    120a:	93 81       	ldd	r25, Z+3	; 0x03
    120c:	0c 5f       	subi	r16, 0xFC	; 252
    120e:	1f 4f       	sbci	r17, 0xFF	; 255
    1210:	08 c0       	rjmp	.+16     	; 0x1222 <vfprintf+0x1d2>
    1212:	60 81       	ld	r22, Z
    1214:	71 81       	ldd	r23, Z+1	; 0x01
    1216:	88 27       	eor	r24, r24
    1218:	77 fd       	sbrc	r23, 7
    121a:	80 95       	com	r24
    121c:	98 2f       	mov	r25, r24
    121e:	0e 5f       	subi	r16, 0xFE	; 254
    1220:	1f 4f       	sbci	r17, 0xFF	; 255
    1222:	2f 76       	andi	r18, 0x6F	; 111
    1224:	b2 2e       	mov	r11, r18
    1226:	97 ff       	sbrs	r25, 7
    1228:	09 c0       	rjmp	.+18     	; 0x123c <vfprintf+0x1ec>
    122a:	90 95       	com	r25
    122c:	80 95       	com	r24
    122e:	70 95       	com	r23
    1230:	61 95       	neg	r22
    1232:	7f 4f       	sbci	r23, 0xFF	; 255
    1234:	8f 4f       	sbci	r24, 0xFF	; 255
    1236:	9f 4f       	sbci	r25, 0xFF	; 255
    1238:	20 68       	ori	r18, 0x80	; 128
    123a:	b2 2e       	mov	r11, r18
    123c:	2a e0       	ldi	r18, 0x0A	; 10
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	a4 01       	movw	r20, r8
    1242:	df d0       	rcall	.+446    	; 0x1402 <__ultoa_invert>
    1244:	a8 2e       	mov	r10, r24
    1246:	a8 18       	sub	r10, r8
    1248:	43 c0       	rjmp	.+134    	; 0x12d0 <vfprintf+0x280>
    124a:	85 37       	cpi	r24, 0x75	; 117
    124c:	29 f4       	brne	.+10     	; 0x1258 <vfprintf+0x208>
    124e:	2f 7e       	andi	r18, 0xEF	; 239
    1250:	b2 2e       	mov	r11, r18
    1252:	2a e0       	ldi	r18, 0x0A	; 10
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	25 c0       	rjmp	.+74     	; 0x12a2 <vfprintf+0x252>
    1258:	f2 2f       	mov	r31, r18
    125a:	f9 7f       	andi	r31, 0xF9	; 249
    125c:	bf 2e       	mov	r11, r31
    125e:	8f 36       	cpi	r24, 0x6F	; 111
    1260:	c1 f0       	breq	.+48     	; 0x1292 <vfprintf+0x242>
    1262:	18 f4       	brcc	.+6      	; 0x126a <vfprintf+0x21a>
    1264:	88 35       	cpi	r24, 0x58	; 88
    1266:	79 f0       	breq	.+30     	; 0x1286 <vfprintf+0x236>
    1268:	ad c0       	rjmp	.+346    	; 0x13c4 <vfprintf+0x374>
    126a:	80 37       	cpi	r24, 0x70	; 112
    126c:	19 f0       	breq	.+6      	; 0x1274 <vfprintf+0x224>
    126e:	88 37       	cpi	r24, 0x78	; 120
    1270:	21 f0       	breq	.+8      	; 0x127a <vfprintf+0x22a>
    1272:	a8 c0       	rjmp	.+336    	; 0x13c4 <vfprintf+0x374>
    1274:	2f 2f       	mov	r18, r31
    1276:	20 61       	ori	r18, 0x10	; 16
    1278:	b2 2e       	mov	r11, r18
    127a:	b4 fe       	sbrs	r11, 4
    127c:	0d c0       	rjmp	.+26     	; 0x1298 <vfprintf+0x248>
    127e:	8b 2d       	mov	r24, r11
    1280:	84 60       	ori	r24, 0x04	; 4
    1282:	b8 2e       	mov	r11, r24
    1284:	09 c0       	rjmp	.+18     	; 0x1298 <vfprintf+0x248>
    1286:	24 ff       	sbrs	r18, 4
    1288:	0a c0       	rjmp	.+20     	; 0x129e <vfprintf+0x24e>
    128a:	9f 2f       	mov	r25, r31
    128c:	96 60       	ori	r25, 0x06	; 6
    128e:	b9 2e       	mov	r11, r25
    1290:	06 c0       	rjmp	.+12     	; 0x129e <vfprintf+0x24e>
    1292:	28 e0       	ldi	r18, 0x08	; 8
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	05 c0       	rjmp	.+10     	; 0x12a2 <vfprintf+0x252>
    1298:	20 e1       	ldi	r18, 0x10	; 16
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	02 c0       	rjmp	.+4      	; 0x12a2 <vfprintf+0x252>
    129e:	20 e1       	ldi	r18, 0x10	; 16
    12a0:	32 e0       	ldi	r19, 0x02	; 2
    12a2:	f8 01       	movw	r30, r16
    12a4:	b7 fe       	sbrs	r11, 7
    12a6:	07 c0       	rjmp	.+14     	; 0x12b6 <vfprintf+0x266>
    12a8:	60 81       	ld	r22, Z
    12aa:	71 81       	ldd	r23, Z+1	; 0x01
    12ac:	82 81       	ldd	r24, Z+2	; 0x02
    12ae:	93 81       	ldd	r25, Z+3	; 0x03
    12b0:	0c 5f       	subi	r16, 0xFC	; 252
    12b2:	1f 4f       	sbci	r17, 0xFF	; 255
    12b4:	06 c0       	rjmp	.+12     	; 0x12c2 <vfprintf+0x272>
    12b6:	60 81       	ld	r22, Z
    12b8:	71 81       	ldd	r23, Z+1	; 0x01
    12ba:	80 e0       	ldi	r24, 0x00	; 0
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	0e 5f       	subi	r16, 0xFE	; 254
    12c0:	1f 4f       	sbci	r17, 0xFF	; 255
    12c2:	a4 01       	movw	r20, r8
    12c4:	9e d0       	rcall	.+316    	; 0x1402 <__ultoa_invert>
    12c6:	a8 2e       	mov	r10, r24
    12c8:	a8 18       	sub	r10, r8
    12ca:	fb 2d       	mov	r31, r11
    12cc:	ff 77       	andi	r31, 0x7F	; 127
    12ce:	bf 2e       	mov	r11, r31
    12d0:	b6 fe       	sbrs	r11, 6
    12d2:	0b c0       	rjmp	.+22     	; 0x12ea <vfprintf+0x29a>
    12d4:	2b 2d       	mov	r18, r11
    12d6:	2e 7f       	andi	r18, 0xFE	; 254
    12d8:	a5 14       	cp	r10, r5
    12da:	50 f4       	brcc	.+20     	; 0x12f0 <vfprintf+0x2a0>
    12dc:	b4 fe       	sbrs	r11, 4
    12de:	0a c0       	rjmp	.+20     	; 0x12f4 <vfprintf+0x2a4>
    12e0:	b2 fc       	sbrc	r11, 2
    12e2:	08 c0       	rjmp	.+16     	; 0x12f4 <vfprintf+0x2a4>
    12e4:	2b 2d       	mov	r18, r11
    12e6:	2e 7e       	andi	r18, 0xEE	; 238
    12e8:	05 c0       	rjmp	.+10     	; 0x12f4 <vfprintf+0x2a4>
    12ea:	7a 2c       	mov	r7, r10
    12ec:	2b 2d       	mov	r18, r11
    12ee:	03 c0       	rjmp	.+6      	; 0x12f6 <vfprintf+0x2a6>
    12f0:	7a 2c       	mov	r7, r10
    12f2:	01 c0       	rjmp	.+2      	; 0x12f6 <vfprintf+0x2a6>
    12f4:	75 2c       	mov	r7, r5
    12f6:	24 ff       	sbrs	r18, 4
    12f8:	0d c0       	rjmp	.+26     	; 0x1314 <vfprintf+0x2c4>
    12fa:	fe 01       	movw	r30, r28
    12fc:	ea 0d       	add	r30, r10
    12fe:	f1 1d       	adc	r31, r1
    1300:	80 81       	ld	r24, Z
    1302:	80 33       	cpi	r24, 0x30	; 48
    1304:	11 f4       	brne	.+4      	; 0x130a <vfprintf+0x2ba>
    1306:	29 7e       	andi	r18, 0xE9	; 233
    1308:	09 c0       	rjmp	.+18     	; 0x131c <vfprintf+0x2cc>
    130a:	22 ff       	sbrs	r18, 2
    130c:	06 c0       	rjmp	.+12     	; 0x131a <vfprintf+0x2ca>
    130e:	73 94       	inc	r7
    1310:	73 94       	inc	r7
    1312:	04 c0       	rjmp	.+8      	; 0x131c <vfprintf+0x2cc>
    1314:	82 2f       	mov	r24, r18
    1316:	86 78       	andi	r24, 0x86	; 134
    1318:	09 f0       	breq	.+2      	; 0x131c <vfprintf+0x2cc>
    131a:	73 94       	inc	r7
    131c:	23 fd       	sbrc	r18, 3
    131e:	12 c0       	rjmp	.+36     	; 0x1344 <vfprintf+0x2f4>
    1320:	20 ff       	sbrs	r18, 0
    1322:	06 c0       	rjmp	.+12     	; 0x1330 <vfprintf+0x2e0>
    1324:	5a 2c       	mov	r5, r10
    1326:	73 14       	cp	r7, r3
    1328:	18 f4       	brcc	.+6      	; 0x1330 <vfprintf+0x2e0>
    132a:	53 0c       	add	r5, r3
    132c:	57 18       	sub	r5, r7
    132e:	73 2c       	mov	r7, r3
    1330:	73 14       	cp	r7, r3
    1332:	60 f4       	brcc	.+24     	; 0x134c <vfprintf+0x2fc>
    1334:	b7 01       	movw	r22, r14
    1336:	80 e2       	ldi	r24, 0x20	; 32
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	2c 87       	std	Y+12, r18	; 0x0c
    133c:	57 de       	rcall	.-850    	; 0xfec <fputc>
    133e:	73 94       	inc	r7
    1340:	2c 85       	ldd	r18, Y+12	; 0x0c
    1342:	f6 cf       	rjmp	.-20     	; 0x1330 <vfprintf+0x2e0>
    1344:	73 14       	cp	r7, r3
    1346:	10 f4       	brcc	.+4      	; 0x134c <vfprintf+0x2fc>
    1348:	37 18       	sub	r3, r7
    134a:	01 c0       	rjmp	.+2      	; 0x134e <vfprintf+0x2fe>
    134c:	31 2c       	mov	r3, r1
    134e:	24 ff       	sbrs	r18, 4
    1350:	11 c0       	rjmp	.+34     	; 0x1374 <vfprintf+0x324>
    1352:	b7 01       	movw	r22, r14
    1354:	80 e3       	ldi	r24, 0x30	; 48
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	2c 87       	std	Y+12, r18	; 0x0c
    135a:	48 de       	rcall	.-880    	; 0xfec <fputc>
    135c:	2c 85       	ldd	r18, Y+12	; 0x0c
    135e:	22 ff       	sbrs	r18, 2
    1360:	16 c0       	rjmp	.+44     	; 0x138e <vfprintf+0x33e>
    1362:	21 ff       	sbrs	r18, 1
    1364:	03 c0       	rjmp	.+6      	; 0x136c <vfprintf+0x31c>
    1366:	88 e5       	ldi	r24, 0x58	; 88
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	02 c0       	rjmp	.+4      	; 0x1370 <vfprintf+0x320>
    136c:	88 e7       	ldi	r24, 0x78	; 120
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	b7 01       	movw	r22, r14
    1372:	0c c0       	rjmp	.+24     	; 0x138c <vfprintf+0x33c>
    1374:	82 2f       	mov	r24, r18
    1376:	86 78       	andi	r24, 0x86	; 134
    1378:	51 f0       	breq	.+20     	; 0x138e <vfprintf+0x33e>
    137a:	21 fd       	sbrc	r18, 1
    137c:	02 c0       	rjmp	.+4      	; 0x1382 <vfprintf+0x332>
    137e:	80 e2       	ldi	r24, 0x20	; 32
    1380:	01 c0       	rjmp	.+2      	; 0x1384 <vfprintf+0x334>
    1382:	8b e2       	ldi	r24, 0x2B	; 43
    1384:	27 fd       	sbrc	r18, 7
    1386:	8d e2       	ldi	r24, 0x2D	; 45
    1388:	b7 01       	movw	r22, r14
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	2f de       	rcall	.-930    	; 0xfec <fputc>
    138e:	a5 14       	cp	r10, r5
    1390:	30 f4       	brcc	.+12     	; 0x139e <vfprintf+0x34e>
    1392:	b7 01       	movw	r22, r14
    1394:	80 e3       	ldi	r24, 0x30	; 48
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	29 de       	rcall	.-942    	; 0xfec <fputc>
    139a:	5a 94       	dec	r5
    139c:	f8 cf       	rjmp	.-16     	; 0x138e <vfprintf+0x33e>
    139e:	aa 94       	dec	r10
    13a0:	f4 01       	movw	r30, r8
    13a2:	ea 0d       	add	r30, r10
    13a4:	f1 1d       	adc	r31, r1
    13a6:	80 81       	ld	r24, Z
    13a8:	b7 01       	movw	r22, r14
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	1f de       	rcall	.-962    	; 0xfec <fputc>
    13ae:	a1 10       	cpse	r10, r1
    13b0:	f6 cf       	rjmp	.-20     	; 0x139e <vfprintf+0x34e>
    13b2:	33 20       	and	r3, r3
    13b4:	09 f4       	brne	.+2      	; 0x13b8 <vfprintf+0x368>
    13b6:	5d ce       	rjmp	.-838    	; 0x1072 <vfprintf+0x22>
    13b8:	b7 01       	movw	r22, r14
    13ba:	80 e2       	ldi	r24, 0x20	; 32
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	16 de       	rcall	.-980    	; 0xfec <fputc>
    13c0:	3a 94       	dec	r3
    13c2:	f7 cf       	rjmp	.-18     	; 0x13b2 <vfprintf+0x362>
    13c4:	f7 01       	movw	r30, r14
    13c6:	86 81       	ldd	r24, Z+6	; 0x06
    13c8:	97 81       	ldd	r25, Z+7	; 0x07
    13ca:	02 c0       	rjmp	.+4      	; 0x13d0 <vfprintf+0x380>
    13cc:	8f ef       	ldi	r24, 0xFF	; 255
    13ce:	9f ef       	ldi	r25, 0xFF	; 255
    13d0:	2c 96       	adiw	r28, 0x0c	; 12
    13d2:	e2 e1       	ldi	r30, 0x12	; 18
    13d4:	90 c0       	rjmp	.+288    	; 0x14f6 <__epilogue_restores__>

000013d6 <strnlen_P>:
    13d6:	fc 01       	movw	r30, r24
    13d8:	05 90       	lpm	r0, Z+
    13da:	61 50       	subi	r22, 0x01	; 1
    13dc:	70 40       	sbci	r23, 0x00	; 0
    13de:	01 10       	cpse	r0, r1
    13e0:	d8 f7       	brcc	.-10     	; 0x13d8 <strnlen_P+0x2>
    13e2:	80 95       	com	r24
    13e4:	90 95       	com	r25
    13e6:	8e 0f       	add	r24, r30
    13e8:	9f 1f       	adc	r25, r31
    13ea:	08 95       	ret

000013ec <strnlen>:
    13ec:	fc 01       	movw	r30, r24
    13ee:	61 50       	subi	r22, 0x01	; 1
    13f0:	70 40       	sbci	r23, 0x00	; 0
    13f2:	01 90       	ld	r0, Z+
    13f4:	01 10       	cpse	r0, r1
    13f6:	d8 f7       	brcc	.-10     	; 0x13ee <strnlen+0x2>
    13f8:	80 95       	com	r24
    13fa:	90 95       	com	r25
    13fc:	8e 0f       	add	r24, r30
    13fe:	9f 1f       	adc	r25, r31
    1400:	08 95       	ret

00001402 <__ultoa_invert>:
    1402:	fa 01       	movw	r30, r20
    1404:	aa 27       	eor	r26, r26
    1406:	28 30       	cpi	r18, 0x08	; 8
    1408:	51 f1       	breq	.+84     	; 0x145e <__ultoa_invert+0x5c>
    140a:	20 31       	cpi	r18, 0x10	; 16
    140c:	81 f1       	breq	.+96     	; 0x146e <__ultoa_invert+0x6c>
    140e:	e8 94       	clt
    1410:	6f 93       	push	r22
    1412:	6e 7f       	andi	r22, 0xFE	; 254
    1414:	6e 5f       	subi	r22, 0xFE	; 254
    1416:	7f 4f       	sbci	r23, 0xFF	; 255
    1418:	8f 4f       	sbci	r24, 0xFF	; 255
    141a:	9f 4f       	sbci	r25, 0xFF	; 255
    141c:	af 4f       	sbci	r26, 0xFF	; 255
    141e:	b1 e0       	ldi	r27, 0x01	; 1
    1420:	3e d0       	rcall	.+124    	; 0x149e <__ultoa_invert+0x9c>
    1422:	b4 e0       	ldi	r27, 0x04	; 4
    1424:	3c d0       	rcall	.+120    	; 0x149e <__ultoa_invert+0x9c>
    1426:	67 0f       	add	r22, r23
    1428:	78 1f       	adc	r23, r24
    142a:	89 1f       	adc	r24, r25
    142c:	9a 1f       	adc	r25, r26
    142e:	a1 1d       	adc	r26, r1
    1430:	68 0f       	add	r22, r24
    1432:	79 1f       	adc	r23, r25
    1434:	8a 1f       	adc	r24, r26
    1436:	91 1d       	adc	r25, r1
    1438:	a1 1d       	adc	r26, r1
    143a:	6a 0f       	add	r22, r26
    143c:	71 1d       	adc	r23, r1
    143e:	81 1d       	adc	r24, r1
    1440:	91 1d       	adc	r25, r1
    1442:	a1 1d       	adc	r26, r1
    1444:	20 d0       	rcall	.+64     	; 0x1486 <__ultoa_invert+0x84>
    1446:	09 f4       	brne	.+2      	; 0x144a <__ultoa_invert+0x48>
    1448:	68 94       	set
    144a:	3f 91       	pop	r19
    144c:	2a e0       	ldi	r18, 0x0A	; 10
    144e:	26 9f       	mul	r18, r22
    1450:	11 24       	eor	r1, r1
    1452:	30 19       	sub	r19, r0
    1454:	30 5d       	subi	r19, 0xD0	; 208
    1456:	31 93       	st	Z+, r19
    1458:	de f6       	brtc	.-74     	; 0x1410 <__ultoa_invert+0xe>
    145a:	cf 01       	movw	r24, r30
    145c:	08 95       	ret
    145e:	46 2f       	mov	r20, r22
    1460:	47 70       	andi	r20, 0x07	; 7
    1462:	40 5d       	subi	r20, 0xD0	; 208
    1464:	41 93       	st	Z+, r20
    1466:	b3 e0       	ldi	r27, 0x03	; 3
    1468:	0f d0       	rcall	.+30     	; 0x1488 <__ultoa_invert+0x86>
    146a:	c9 f7       	brne	.-14     	; 0x145e <__ultoa_invert+0x5c>
    146c:	f6 cf       	rjmp	.-20     	; 0x145a <__ultoa_invert+0x58>
    146e:	46 2f       	mov	r20, r22
    1470:	4f 70       	andi	r20, 0x0F	; 15
    1472:	40 5d       	subi	r20, 0xD0	; 208
    1474:	4a 33       	cpi	r20, 0x3A	; 58
    1476:	18 f0       	brcs	.+6      	; 0x147e <__ultoa_invert+0x7c>
    1478:	49 5d       	subi	r20, 0xD9	; 217
    147a:	31 fd       	sbrc	r19, 1
    147c:	40 52       	subi	r20, 0x20	; 32
    147e:	41 93       	st	Z+, r20
    1480:	02 d0       	rcall	.+4      	; 0x1486 <__ultoa_invert+0x84>
    1482:	a9 f7       	brne	.-22     	; 0x146e <__ultoa_invert+0x6c>
    1484:	ea cf       	rjmp	.-44     	; 0x145a <__ultoa_invert+0x58>
    1486:	b4 e0       	ldi	r27, 0x04	; 4
    1488:	a6 95       	lsr	r26
    148a:	97 95       	ror	r25
    148c:	87 95       	ror	r24
    148e:	77 95       	ror	r23
    1490:	67 95       	ror	r22
    1492:	ba 95       	dec	r27
    1494:	c9 f7       	brne	.-14     	; 0x1488 <__ultoa_invert+0x86>
    1496:	00 97       	sbiw	r24, 0x00	; 0
    1498:	61 05       	cpc	r22, r1
    149a:	71 05       	cpc	r23, r1
    149c:	08 95       	ret
    149e:	9b 01       	movw	r18, r22
    14a0:	ac 01       	movw	r20, r24
    14a2:	0a 2e       	mov	r0, r26
    14a4:	06 94       	lsr	r0
    14a6:	57 95       	ror	r21
    14a8:	47 95       	ror	r20
    14aa:	37 95       	ror	r19
    14ac:	27 95       	ror	r18
    14ae:	ba 95       	dec	r27
    14b0:	c9 f7       	brne	.-14     	; 0x14a4 <__ultoa_invert+0xa2>
    14b2:	62 0f       	add	r22, r18
    14b4:	73 1f       	adc	r23, r19
    14b6:	84 1f       	adc	r24, r20
    14b8:	95 1f       	adc	r25, r21
    14ba:	a0 1d       	adc	r26, r0
    14bc:	08 95       	ret

000014be <__prologue_saves__>:
    14be:	2f 92       	push	r2
    14c0:	3f 92       	push	r3
    14c2:	4f 92       	push	r4
    14c4:	5f 92       	push	r5
    14c6:	6f 92       	push	r6
    14c8:	7f 92       	push	r7
    14ca:	8f 92       	push	r8
    14cc:	9f 92       	push	r9
    14ce:	af 92       	push	r10
    14d0:	bf 92       	push	r11
    14d2:	cf 92       	push	r12
    14d4:	df 92       	push	r13
    14d6:	ef 92       	push	r14
    14d8:	ff 92       	push	r15
    14da:	0f 93       	push	r16
    14dc:	1f 93       	push	r17
    14de:	cf 93       	push	r28
    14e0:	df 93       	push	r29
    14e2:	cd b7       	in	r28, 0x3d	; 61
    14e4:	de b7       	in	r29, 0x3e	; 62
    14e6:	ca 1b       	sub	r28, r26
    14e8:	db 0b       	sbc	r29, r27
    14ea:	0f b6       	in	r0, 0x3f	; 63
    14ec:	f8 94       	cli
    14ee:	de bf       	out	0x3e, r29	; 62
    14f0:	0f be       	out	0x3f, r0	; 63
    14f2:	cd bf       	out	0x3d, r28	; 61
    14f4:	09 94       	ijmp

000014f6 <__epilogue_restores__>:
    14f6:	2a 88       	ldd	r2, Y+18	; 0x12
    14f8:	39 88       	ldd	r3, Y+17	; 0x11
    14fa:	48 88       	ldd	r4, Y+16	; 0x10
    14fc:	5f 84       	ldd	r5, Y+15	; 0x0f
    14fe:	6e 84       	ldd	r6, Y+14	; 0x0e
    1500:	7d 84       	ldd	r7, Y+13	; 0x0d
    1502:	8c 84       	ldd	r8, Y+12	; 0x0c
    1504:	9b 84       	ldd	r9, Y+11	; 0x0b
    1506:	aa 84       	ldd	r10, Y+10	; 0x0a
    1508:	b9 84       	ldd	r11, Y+9	; 0x09
    150a:	c8 84       	ldd	r12, Y+8	; 0x08
    150c:	df 80       	ldd	r13, Y+7	; 0x07
    150e:	ee 80       	ldd	r14, Y+6	; 0x06
    1510:	fd 80       	ldd	r15, Y+5	; 0x05
    1512:	0c 81       	ldd	r16, Y+4	; 0x04
    1514:	1b 81       	ldd	r17, Y+3	; 0x03
    1516:	aa 81       	ldd	r26, Y+2	; 0x02
    1518:	b9 81       	ldd	r27, Y+1	; 0x01
    151a:	ce 0f       	add	r28, r30
    151c:	d1 1d       	adc	r29, r1
    151e:	0f b6       	in	r0, 0x3f	; 63
    1520:	f8 94       	cli
    1522:	de bf       	out	0x3e, r29	; 62
    1524:	0f be       	out	0x3f, r0	; 63
    1526:	cd bf       	out	0x3d, r28	; 61
    1528:	ed 01       	movw	r28, r26
    152a:	08 95       	ret

0000152c <_exit>:
    152c:	f8 94       	cli

0000152e <__stop_program>:
    152e:	ff cf       	rjmp	.-2      	; 0x152e <__stop_program>
