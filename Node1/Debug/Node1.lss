
Node1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000014a  00800100  00001a08  00001a9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a08  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000013a  0080024a  0080024a  00001be6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001be6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000308  00000000  00000000  00001c42  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000038c9  00000000  00000000  00001f4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000013a6  00000000  00000000  00005813  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001a10  00000000  00000000  00006bb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000828  00000000  00000000  000085cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000008e1  00000000  00000000  00008df4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000162d  00000000  00000000  000096d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002b0  00000000  00000000  0000ad02  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	f5 c0       	rjmp	.+490    	; 0x1ec <__ctors_end>
       2:	00 00       	nop
       4:	0f c1       	rjmp	.+542    	; 0x224 <__bad_interrupt>
       6:	00 00       	nop
       8:	19 c1       	rjmp	.+562    	; 0x23c <__vector_2>
       a:	00 00       	nop
       c:	0b c1       	rjmp	.+534    	; 0x224 <__bad_interrupt>
       e:	00 00       	nop
      10:	09 c1       	rjmp	.+530    	; 0x224 <__bad_interrupt>
      12:	00 00       	nop
      14:	07 c1       	rjmp	.+526    	; 0x224 <__bad_interrupt>
      16:	00 00       	nop
      18:	05 c1       	rjmp	.+522    	; 0x224 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	03 c1       	rjmp	.+518    	; 0x224 <__bad_interrupt>
      1e:	00 00       	nop
      20:	01 c1       	rjmp	.+514    	; 0x224 <__bad_interrupt>
      22:	00 00       	nop
      24:	ff c0       	rjmp	.+510    	; 0x224 <__bad_interrupt>
      26:	00 00       	nop
      28:	fd c0       	rjmp	.+506    	; 0x224 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	fb c0       	rjmp	.+502    	; 0x224 <__bad_interrupt>
      2e:	00 00       	nop
      30:	f9 c0       	rjmp	.+498    	; 0x224 <__bad_interrupt>
      32:	00 00       	nop
      34:	f7 c0       	rjmp	.+494    	; 0x224 <__bad_interrupt>
      36:	00 00       	nop
      38:	f5 c0       	rjmp	.+490    	; 0x224 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	f3 c0       	rjmp	.+486    	; 0x224 <__bad_interrupt>
      3e:	00 00       	nop
      40:	f1 c0       	rjmp	.+482    	; 0x224 <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 22 08 	jmp	0x1044	; 0x1044 <__vector_17>
      48:	ed c0       	rjmp	.+474    	; 0x224 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	0c 94 8a 08 	jmp	0x1114	; 0x1114 <__vector_19>
      50:	e9 c0       	rjmp	.+466    	; 0x224 <__bad_interrupt>
      52:	00 00       	nop
      54:	e7 c0       	rjmp	.+462    	; 0x224 <__bad_interrupt>
      56:	00 00       	nop
      58:	e5 c0       	rjmp	.+458    	; 0x224 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 d1 08 	jmp	0x11a2	; 0x11a2 <__vector_23>
      60:	e1 c0       	rjmp	.+450    	; 0x224 <__bad_interrupt>
      62:	00 00       	nop
      64:	df c0       	rjmp	.+446    	; 0x224 <__bad_interrupt>
      66:	00 00       	nop
      68:	dd c0       	rjmp	.+442    	; 0x224 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	db c0       	rjmp	.+438    	; 0x224 <__bad_interrupt>
	...

00000070 <__trampolines_end>:
      70:	00 00       	nop
      72:	00 00       	nop
      74:	00 5c       	subi	r16, 0xC0	; 192
      76:	00 00       	nop
      78:	0c 00       	.word	0x000c	; ????
      7a:	0c 00       	.word	0x000c	; ????
      7c:	7c 28       	or	r7, r12
      7e:	7c 28       	or	r7, r12
      80:	58 dc       	rcall	.-1872   	; 0xfffff932 <__eeprom_end+0xff7ef932>
      82:	68 00       	.word	0x0068	; ????
      84:	24 10       	cpse	r2, r4
      86:	48 00       	.word	0x0048	; ????
      88:	28 54       	subi	r18, 0x48	; 72
      8a:	28 40       	sbci	r18, 0x08	; 8
      8c:	00 0c       	add	r0, r0
      8e:	00 00       	nop
      90:	00 78       	andi	r16, 0x80	; 128
      92:	84 00       	.word	0x0084	; ????
      94:	84 78       	andi	r24, 0x84	; 132
      96:	00 00       	nop
      98:	54 38       	cpi	r21, 0x84	; 132
      9a:	54 00       	.word	0x0054	; ????
      9c:	10 7c       	andi	r17, 0xC0	; 192
      9e:	10 00       	.word	0x0010	; ????
      a0:	80 40       	sbci	r24, 0x00	; 0
      a2:	00 00       	nop
      a4:	10 10       	cpse	r1, r0
      a6:	10 00       	.word	0x0010	; ????
      a8:	00 40       	sbci	r16, 0x00	; 0
      aa:	00 00       	nop
      ac:	60 10       	cpse	r6, r0
      ae:	0c 00       	.word	0x000c	; ????
      b0:	38 54       	subi	r19, 0x48	; 72
      b2:	38 00       	.word	0x0038	; ????
      b4:	48 7c       	andi	r20, 0xC8	; 200
      b6:	40 00       	.word	0x0040	; ????
      b8:	48 64       	ori	r20, 0x48	; 72
      ba:	58 00       	.word	0x0058	; ????
      bc:	44 54       	subi	r20, 0x44	; 68
      be:	2c 00       	.word	0x002c	; ????
      c0:	1c 10       	cpse	r1, r12
      c2:	7c 00       	.word	0x007c	; ????
      c4:	5c 54       	subi	r21, 0x4C	; 76
      c6:	24 00       	.word	0x0024	; ????
      c8:	38 54       	subi	r19, 0x48	; 72
      ca:	24 00       	.word	0x0024	; ????
      cc:	64 14       	cp	r6, r4
      ce:	0c 00       	.word	0x000c	; ????
      d0:	68 54       	subi	r22, 0x48	; 72
      d2:	2c 00       	.word	0x002c	; ????
      d4:	48 54       	subi	r20, 0x48	; 72
      d6:	38 00       	.word	0x0038	; ????
      d8:	00 48       	sbci	r16, 0x80	; 128
      da:	00 00       	nop
      dc:	80 48       	sbci	r24, 0x80	; 128
      de:	00 00       	nop
      e0:	10 28       	or	r1, r0
      e2:	44 00       	.word	0x0044	; ????
      e4:	28 28       	or	r2, r8
      e6:	28 00       	.word	0x0028	; ????
      e8:	44 28       	or	r4, r4
      ea:	10 00       	.word	0x0010	; ????
      ec:	04 54       	subi	r16, 0x44	; 68
      ee:	08 00       	.word	0x0008	; ????
      f0:	38 44       	sbci	r19, 0x48	; 72
      f2:	5c 00       	.word	0x005c	; ????
      f4:	78 14       	cp	r7, r8
      f6:	78 00       	.word	0x0078	; ????
      f8:	7c 54       	subi	r23, 0x4C	; 76
      fa:	28 00       	.word	0x0028	; ????
      fc:	38 44       	sbci	r19, 0x48	; 72
      fe:	28 00       	.word	0x0028	; ????
     100:	7c 44       	sbci	r23, 0x4C	; 76
     102:	38 00       	.word	0x0038	; ????
     104:	7c 54       	subi	r23, 0x4C	; 76
     106:	44 00       	.word	0x0044	; ????
     108:	7c 14       	cp	r7, r12
     10a:	04 00       	.word	0x0004	; ????
     10c:	38 44       	sbci	r19, 0x48	; 72
     10e:	74 00       	.word	0x0074	; ????
     110:	7c 10       	cpse	r7, r12
     112:	7c 00       	.word	0x007c	; ????
     114:	44 7c       	andi	r20, 0xC4	; 196
     116:	44 00       	.word	0x0044	; ????
     118:	20 40       	sbci	r18, 0x00	; 0
     11a:	3c 00       	.word	0x003c	; ????
     11c:	7c 10       	cpse	r7, r12
     11e:	6c 00       	.word	0x006c	; ????
     120:	7c 40       	sbci	r23, 0x0C	; 12
     122:	40 00       	.word	0x0040	; ????
     124:	7c 18       	sub	r7, r12
     126:	7c 00       	.word	0x007c	; ????
     128:	78 10       	cpse	r7, r8
     12a:	3c 00       	.word	0x003c	; ????
     12c:	38 44       	sbci	r19, 0x48	; 72
     12e:	38 00       	.word	0x0038	; ????
     130:	7c 14       	cp	r7, r12
     132:	08 00       	.word	0x0008	; ????
     134:	38 44       	sbci	r19, 0x48	; 72
     136:	b8 00       	.word	0x00b8	; ????
     138:	7c 14       	cp	r7, r12
     13a:	68 00       	.word	0x0068	; ????
     13c:	48 54       	subi	r20, 0x48	; 72
     13e:	24 00       	.word	0x0024	; ????
     140:	04 7c       	andi	r16, 0xC4	; 196
     142:	04 00       	.word	0x0004	; ????
     144:	7c 40       	sbci	r23, 0x0C	; 12
     146:	7c 00       	.word	0x007c	; ????
     148:	3c 60       	ori	r19, 0x0C	; 12
     14a:	3c 00       	.word	0x003c	; ????
     14c:	7c 30       	cpi	r23, 0x0C	; 12
     14e:	7c 00       	.word	0x007c	; ????
     150:	6c 10       	cpse	r6, r12
     152:	6c 00       	.word	0x006c	; ????
     154:	0c 70       	andi	r16, 0x0C	; 12
     156:	0c 00       	.word	0x000c	; ????
     158:	64 54       	subi	r22, 0x44	; 68
     15a:	4c 00       	.word	0x004c	; ????
     15c:	00 7c       	andi	r16, 0xC0	; 192
     15e:	44 00       	.word	0x0044	; ????
     160:	0c 10       	cpse	r0, r12
     162:	60 00       	.word	0x0060	; ????
     164:	44 7c       	andi	r20, 0xC4	; 196
     166:	00 00       	nop
     168:	08 04       	cpc	r0, r8
     16a:	08 00       	.word	0x0008	; ????
     16c:	80 80       	ld	r8, Z
     16e:	80 00       	.word	0x0080	; ????
     170:	00 04       	cpc	r0, r0
     172:	08 00       	.word	0x0008	; ????
     174:	30 48       	sbci	r19, 0x80	; 128
     176:	78 00       	.word	0x0078	; ????
     178:	7c 48       	sbci	r23, 0x8C	; 140
     17a:	30 00       	.word	0x0030	; ????
     17c:	30 48       	sbci	r19, 0x80	; 128
     17e:	48 00       	.word	0x0048	; ????
     180:	30 48       	sbci	r19, 0x80	; 128
     182:	7c 00       	.word	0x007c	; ????
     184:	30 68       	ori	r19, 0x80	; 128
     186:	50 00       	.word	0x0050	; ????
     188:	10 78       	andi	r17, 0x80	; 128
     18a:	14 00       	.word	0x0014	; ????
     18c:	90 a8       	ldd	r9, Z+48	; 0x30
     18e:	78 00       	.word	0x0078	; ????
     190:	7c 08       	sbc	r7, r12
     192:	70 00       	.word	0x0070	; ????
     194:	50 74       	andi	r21, 0x40	; 64
     196:	40 00       	.word	0x0040	; ????
     198:	80 80       	ld	r8, Z
     19a:	74 00       	.word	0x0074	; ????
     19c:	7c 10       	cpse	r7, r12
     19e:	68 00       	.word	0x0068	; ????
     1a0:	44 7c       	andi	r20, 0xC4	; 196
     1a2:	40 00       	.word	0x0040	; ????
     1a4:	78 10       	cpse	r7, r8
     1a6:	78 00       	.word	0x0078	; ????
     1a8:	78 08       	sbc	r7, r8
     1aa:	70 00       	.word	0x0070	; ????
     1ac:	30 48       	sbci	r19, 0x80	; 128
     1ae:	30 00       	.word	0x0030	; ????
     1b0:	f8 28       	or	r15, r8
     1b2:	10 00       	.word	0x0010	; ????
     1b4:	30 48       	sbci	r19, 0x80	; 128
     1b6:	f8 00       	.word	0x00f8	; ????
     1b8:	78 10       	cpse	r7, r8
     1ba:	08 00       	.word	0x0008	; ????
     1bc:	50 58       	subi	r21, 0x80	; 128
     1be:	28 00       	.word	0x0028	; ????
     1c0:	08 3c       	cpi	r16, 0xC8	; 200
     1c2:	48 00       	.word	0x0048	; ????
     1c4:	38 40       	sbci	r19, 0x08	; 8
     1c6:	78 00       	.word	0x0078	; ????
     1c8:	38 40       	sbci	r19, 0x08	; 8
     1ca:	38 00       	.word	0x0038	; ????
     1cc:	78 20       	and	r7, r8
     1ce:	78 00       	.word	0x0078	; ????
     1d0:	48 30       	cpi	r20, 0x08	; 8
     1d2:	48 00       	.word	0x0048	; ????
     1d4:	98 a0       	ldd	r9, Y+32	; 0x20
     1d6:	78 00       	.word	0x0078	; ????
     1d8:	48 68       	ori	r20, 0x88	; 136
     1da:	58 00       	.word	0x0058	; ????
     1dc:	10 78       	andi	r17, 0x80	; 128
     1de:	84 00       	.word	0x0084	; ????
     1e0:	00 7c       	andi	r16, 0xC0	; 192
     1e2:	00 00       	nop
     1e4:	84 78       	andi	r24, 0x84	; 132
     1e6:	10 00       	.word	0x0010	; ????
     1e8:	08 04       	cpc	r0, r8
     1ea:	08 04       	cpc	r0, r8

000001ec <__ctors_end>:
     1ec:	11 24       	eor	r1, r1
     1ee:	1f be       	out	0x3f, r1	; 63
     1f0:	cf ef       	ldi	r28, 0xFF	; 255
     1f2:	d4 e0       	ldi	r29, 0x04	; 4
     1f4:	de bf       	out	0x3e, r29	; 62
     1f6:	cd bf       	out	0x3d, r28	; 61

000001f8 <__do_copy_data>:
     1f8:	12 e0       	ldi	r17, 0x02	; 2
     1fa:	a0 e0       	ldi	r26, 0x00	; 0
     1fc:	b1 e0       	ldi	r27, 0x01	; 1
     1fe:	e8 e0       	ldi	r30, 0x08	; 8
     200:	fa e1       	ldi	r31, 0x1A	; 26
     202:	02 c0       	rjmp	.+4      	; 0x208 <__do_copy_data+0x10>
     204:	05 90       	lpm	r0, Z+
     206:	0d 92       	st	X+, r0
     208:	aa 34       	cpi	r26, 0x4A	; 74
     20a:	b1 07       	cpc	r27, r17
     20c:	d9 f7       	brne	.-10     	; 0x204 <__do_copy_data+0xc>

0000020e <__do_clear_bss>:
     20e:	23 e0       	ldi	r18, 0x03	; 3
     210:	aa e4       	ldi	r26, 0x4A	; 74
     212:	b2 e0       	ldi	r27, 0x02	; 2
     214:	01 c0       	rjmp	.+2      	; 0x218 <.do_clear_bss_start>

00000216 <.do_clear_bss_loop>:
     216:	1d 92       	st	X+, r1

00000218 <.do_clear_bss_start>:
     218:	a4 38       	cpi	r26, 0x84	; 132
     21a:	b2 07       	cpc	r27, r18
     21c:	e1 f7       	brne	.-8      	; 0x216 <.do_clear_bss_loop>
     21e:	4f d2       	rcall	.+1182   	; 0x6be <main>
     220:	0c 94 02 0d 	jmp	0x1a04	; 0x1a04 <_exit>

00000224 <__bad_interrupt>:
     224:	ed ce       	rjmp	.-550    	; 0x0 <__vectors>

00000226 <adc_init>:
/*!
 * Initialize atmega162 to interface with the interrupt signal
 * of the ADC through Port D pin 2
 */
void adc_init(void){
	DDRD  &= ~(1 << DDD2);
     226:	8a 98       	cbi	0x11, 2	; 17
	PORTD |= (1 << PD2);
     228:	92 9a       	sbi	0x12, 2	; 18
     22a:	08 95       	ret

0000022c <adc_read_channel>:
 * @param[in] ch analog channel to perform conversion on
 * @return digital read of analog signal
 */
uint8_t adc_read_channel(uint8_t ch)
{	
	*adc_adr = (ch | 0b0100);
     22c:	84 60       	ori	r24, 0x04	; 4
     22e:	80 93 00 11 	sts	0x1100, r24
	
	while ((PIND & (1<<PIND2))); // wait until pin is high, adc read complete when pin is high
     232:	82 99       	sbic	0x10, 2	; 16
     234:	fe cf       	rjmp	.-4      	; 0x232 <adc_read_channel+0x6>
	
	return *adc_adr;
     236:	80 91 00 11 	lds	r24, 0x1100
}
     23a:	08 95       	ret

0000023c <__vector_2>:
 * Takes the message, and places it in the corresponding recieve buffer, and clears
 * the interrupt.
 * Overwrite the oldest message if there is no room in 
 * buffer. 
 */
ISR(INT1_vect){
     23c:	1f 92       	push	r1
     23e:	0f 92       	push	r0
     240:	0f b6       	in	r0, 0x3f	; 63
     242:	0f 92       	push	r0
     244:	11 24       	eor	r1, r1
     246:	ff 92       	push	r15
     248:	0f 93       	push	r16
     24a:	1f 93       	push	r17
     24c:	2f 93       	push	r18
     24e:	3f 93       	push	r19
     250:	4f 93       	push	r20
     252:	5f 93       	push	r21
     254:	6f 93       	push	r22
     256:	7f 93       	push	r23
     258:	8f 93       	push	r24
     25a:	9f 93       	push	r25
     25c:	af 93       	push	r26
     25e:	bf 93       	push	r27
     260:	ef 93       	push	r30
     262:	ff 93       	push	r31
     264:	cf 93       	push	r28
     266:	df 93       	push	r29
     268:	cd b7       	in	r28, 0x3d	; 61
     26a:	de b7       	in	r29, 0x3e	; 62
     26c:	2e 97       	sbiw	r28, 0x0e	; 14
     26e:	de bf       	out	0x3e, r29	; 62
     270:	cd bf       	out	0x3d, r28	; 61
	cli();	
     272:	f8 94       	cli
	///\todo implement overflow such that new data replaces old?
	// pick correct buffer, RXB1 has highest priority now
	volatile uint8_t n			  = 0;
     274:	19 82       	std	Y+1, r1	; 0x01
	volatile uint8_t MCP_RXBn	  = MCP_RXB0;
     276:	80 e6       	ldi	r24, 0x60	; 96
     278:	8a 83       	std	Y+2, r24	; 0x02
	volatile uint8_t MCP_READ_RXn = MCP_READ_RX0;
     27a:	80 e9       	ldi	r24, 0x90	; 144
     27c:	8b 83       	std	Y+3, r24	; 0x03
	volatile uint8_t MCP_RXnIF    = MCP_RX0IF;
     27e:	81 e0       	ldi	r24, 0x01	; 1
     280:	8c 83       	std	Y+4, r24	; 0x04
	if (mcp_readstatus() & 0x02)
     282:	fa d2       	rcall	.+1524   	; 0x878 <mcp_readstatus>
     284:	81 ff       	sbrs	r24, 1
     286:	08 c0       	rjmp	.+16     	; 0x298 <__vector_2+0x5c>
	{	
		n = 1;
     288:	81 e0       	ldi	r24, 0x01	; 1
     28a:	89 83       	std	Y+1, r24	; 0x01
		MCP_RXBn	 = MCP_RXB1;
     28c:	80 e7       	ldi	r24, 0x70	; 112
     28e:	8a 83       	std	Y+2, r24	; 0x02
		MCP_READ_RXn = MCP_READ_RX1;
     290:	84 e9       	ldi	r24, 0x94	; 148
     292:	8b 83       	std	Y+3, r24	; 0x03
		MCP_RXnIF    = MCP_RX1IF;
     294:	82 e0       	ldi	r24, 0x02	; 2
     296:	8c 83       	std	Y+4, r24	; 0x04
	}
	
	// if there is room in buffer first
	//if ((rx_head[n]+1)%RX_BUFFER_MAX != rx_tail[n]){
    	volatile can_msg_t msg = {};
     298:	fe 01       	movw	r30, r28
     29a:	35 96       	adiw	r30, 0x05	; 5
     29c:	8a e0       	ldi	r24, 0x0A	; 10
     29e:	df 01       	movw	r26, r30
     2a0:	1d 92       	st	X+, r1
     2a2:	8a 95       	dec	r24
     2a4:	e9 f7       	brne	.-6      	; 0x2a0 <__vector_2+0x64>
    	
    	msg.length = mcp_read(MCP_RXBn | MCP_RXBnDLC) & MCP_DLC_MASK;
     2a6:	8a 81       	ldd	r24, Y+2	; 0x02
     2a8:	85 66       	ori	r24, 0x65	; 101
     2aa:	b9 d2       	rcall	.+1394   	; 0x81e <mcp_read>
     2ac:	8f 70       	andi	r24, 0x0F	; 15
     2ae:	8e 83       	std	Y+6, r24	; 0x06
    	
    	spi_ss_low();
     2b0:	ec d6       	rcall	.+3544   	; 0x108a <spi_ss_low>
    	spi_transmit(MCP_READ_RXn | 0x00); // sid
     2b2:	8b 81       	ldd	r24, Y+3	; 0x03
     2b4:	f5 d6       	rcall	.+3562   	; 0x10a0 <spi_transmit>
    	msg.sid = spi_transmit(0);
     2b6:	80 e0       	ldi	r24, 0x00	; 0
     2b8:	f3 d6       	rcall	.+3558   	; 0x10a0 <spi_transmit>
     2ba:	8d 83       	std	Y+5, r24	; 0x05
    	spi_ss_high();
     2bc:	e8 d6       	rcall	.+3536   	; 0x108e <spi_ss_high>
    	
    	spi_ss_low();
     2be:	e5 d6       	rcall	.+3530   	; 0x108a <spi_ss_low>
    	spi_transmit(MCP_READ_RXn | 0x02);
     2c0:	8b 81       	ldd	r24, Y+3	; 0x03
     2c2:	82 60       	ori	r24, 0x02	; 2
     2c4:	ed d6       	rcall	.+3546   	; 0x10a0 <spi_transmit>
    	
    	for (uint8_t i = 0; i < msg.length; ++i)
     2c6:	8e 81       	ldd	r24, Y+6	; 0x06
     2c8:	88 23       	and	r24, r24
     2ca:	81 f0       	breq	.+32     	; 0x2ec <__vector_2+0xb0>
     2cc:	f1 2c       	mov	r15, r1
    	{
    		msg.data[i] = spi_transmit(0);
     2ce:	0f 2d       	mov	r16, r15
     2d0:	10 e0       	ldi	r17, 0x00	; 0
     2d2:	80 e0       	ldi	r24, 0x00	; 0
     2d4:	e5 d6       	rcall	.+3530   	; 0x10a0 <spi_transmit>
     2d6:	e7 e0       	ldi	r30, 0x07	; 7
     2d8:	f0 e0       	ldi	r31, 0x00	; 0
     2da:	ec 0f       	add	r30, r28
     2dc:	fd 1f       	adc	r31, r29
     2de:	e0 0f       	add	r30, r16
     2e0:	f1 1f       	adc	r31, r17
     2e2:	80 83       	st	Z, r24
    	spi_ss_high();
    	
    	spi_ss_low();
    	spi_transmit(MCP_READ_RXn | 0x02);
    	
    	for (uint8_t i = 0; i < msg.length; ++i)
     2e4:	f3 94       	inc	r15
     2e6:	8e 81       	ldd	r24, Y+6	; 0x06
     2e8:	f8 16       	cp	r15, r24
     2ea:	88 f3       	brcs	.-30     	; 0x2ce <__vector_2+0x92>
    	{
    		msg.data[i] = spi_transmit(0);
    	}
    	spi_ss_high();
     2ec:	d0 d6       	rcall	.+3488   	; 0x108e <spi_ss_high>
        
    	rx_buffer[n][rx_head[n]] = msg;
     2ee:	29 81       	ldd	r18, Y+1	; 0x01
     2f0:	e9 81       	ldd	r30, Y+1	; 0x01
     2f2:	f0 e0       	ldi	r31, 0x00	; 0
     2f4:	e4 5b       	subi	r30, 0xB4	; 180
     2f6:	fd 4f       	sbci	r31, 0xFD	; 253
     2f8:	80 81       	ld	r24, Z
     2fa:	90 e0       	ldi	r25, 0x00	; 0
     2fc:	dc 01       	movw	r26, r24
     2fe:	aa 0f       	add	r26, r26
     300:	bb 1f       	adc	r27, r27
     302:	88 0f       	add	r24, r24
     304:	99 1f       	adc	r25, r25
     306:	88 0f       	add	r24, r24
     308:	99 1f       	adc	r25, r25
     30a:	88 0f       	add	r24, r24
     30c:	99 1f       	adc	r25, r25
     30e:	a8 0f       	add	r26, r24
     310:	b9 1f       	adc	r27, r25
     312:	80 e5       	ldi	r24, 0x50	; 80
     314:	28 9f       	mul	r18, r24
     316:	a0 0d       	add	r26, r0
     318:	b1 1d       	adc	r27, r1
     31a:	11 24       	eor	r1, r1
     31c:	a2 5b       	subi	r26, 0xB2	; 178
     31e:	bd 4f       	sbci	r27, 0xFD	; 253
     320:	8a e0       	ldi	r24, 0x0A	; 10
     322:	fe 01       	movw	r30, r28
     324:	35 96       	adiw	r30, 0x05	; 5
     326:	01 90       	ld	r0, Z+
     328:	0d 92       	st	X+, r0
     32a:	8a 95       	dec	r24
     32c:	e1 f7       	brne	.-8      	; 0x326 <__vector_2+0xea>
    	rx_head[n] = (rx_head[n]+1) % RX_BUFFER_MAX;
     32e:	e9 81       	ldd	r30, Y+1	; 0x01
     330:	f0 e0       	ldi	r31, 0x00	; 0
     332:	a9 81       	ldd	r26, Y+1	; 0x01
     334:	b0 e0       	ldi	r27, 0x00	; 0
     336:	a4 5b       	subi	r26, 0xB4	; 180
     338:	bd 4f       	sbci	r27, 0xFD	; 253
     33a:	8c 91       	ld	r24, X
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	01 96       	adiw	r24, 0x01	; 1
     340:	87 70       	andi	r24, 0x07	; 7
     342:	90 78       	andi	r25, 0x80	; 128
     344:	e4 5b       	subi	r30, 0xB4	; 180
     346:	fd 4f       	sbci	r31, 0xFD	; 253
     348:	80 83       	st	Z, r24
	//}

    mcp_bitmodify(MCP_CANINTF, MCP_RXnIF, 0);
     34a:	6c 81       	ldd	r22, Y+4	; 0x04
     34c:	40 e0       	ldi	r20, 0x00	; 0
     34e:	8c e2       	ldi	r24, 0x2C	; 44
     350:	9e d2       	rcall	.+1340   	; 0x88e <mcp_bitmodify>
	sei();
     352:	78 94       	sei
}
     354:	2e 96       	adiw	r28, 0x0e	; 14
     356:	0f b6       	in	r0, 0x3f	; 63
     358:	f8 94       	cli
     35a:	de bf       	out	0x3e, r29	; 62
     35c:	0f be       	out	0x3f, r0	; 63
     35e:	cd bf       	out	0x3d, r28	; 61
     360:	df 91       	pop	r29
     362:	cf 91       	pop	r28
     364:	ff 91       	pop	r31
     366:	ef 91       	pop	r30
     368:	bf 91       	pop	r27
     36a:	af 91       	pop	r26
     36c:	9f 91       	pop	r25
     36e:	8f 91       	pop	r24
     370:	7f 91       	pop	r23
     372:	6f 91       	pop	r22
     374:	5f 91       	pop	r21
     376:	4f 91       	pop	r20
     378:	3f 91       	pop	r19
     37a:	2f 91       	pop	r18
     37c:	1f 91       	pop	r17
     37e:	0f 91       	pop	r16
     380:	ff 90       	pop	r15
     382:	0f 90       	pop	r0
     384:	0f be       	out	0x3f, r0	; 63
     386:	0f 90       	pop	r0
     388:	1f 90       	pop	r1
     38a:	18 95       	reti

0000038c <can_init>:
/*!
 * Initialize can controller and mcp. 
 */
void can_init()
{
	mcp_init();
     38c:	94 d2       	rcall	.+1320   	; 0x8b6 <mcp_init>
	
	// enable interupt
	mcp_bitmodify(MCP_CANINTE, MCP_RX_INT, MCP_RX_INT);
     38e:	43 e0       	ldi	r20, 0x03	; 3
     390:	63 e0       	ldi	r22, 0x03	; 3
     392:	8b e2       	ldi	r24, 0x2B	; 43
     394:	7c d2       	rcall	.+1272   	; 0x88e <mcp_bitmodify>
	GICR |= (1 << INT1); 
     396:	8b b7       	in	r24, 0x3b	; 59
     398:	80 68       	ori	r24, 0x80	; 128
     39a:	8b bf       	out	0x3b, r24	; 59
     39c:	08 95       	ret

0000039e <can_print_msg>:
/*!
 * Print msg to uart_out stream 
 * Requires inclusion of "uart.h" and will only be included if uart.h is included
 */
void can_print_msg(can_msg_t msg)
{
     39e:	af 92       	push	r10
     3a0:	bf 92       	push	r11
     3a2:	cf 92       	push	r12
     3a4:	df 92       	push	r13
     3a6:	ef 92       	push	r14
     3a8:	ff 92       	push	r15
     3aa:	0f 93       	push	r16
     3ac:	1f 93       	push	r17
     3ae:	cf 93       	push	r28
     3b0:	df 93       	push	r29
     3b2:	cd b7       	in	r28, 0x3d	; 61
     3b4:	de b7       	in	r29, 0x3e	; 62
     3b6:	2a 97       	sbiw	r28, 0x0a	; 10
     3b8:	0f b6       	in	r0, 0x3f	; 63
     3ba:	f8 94       	cli
     3bc:	de bf       	out	0x3e, r29	; 62
     3be:	0f be       	out	0x3f, r0	; 63
     3c0:	cd bf       	out	0x3d, r28	; 61
     3c2:	09 83       	std	Y+1, r16	; 0x01
     3c4:	a1 2e       	mov	r10, r17
     3c6:	1a 83       	std	Y+2, r17	; 0x02
     3c8:	2b 83       	std	Y+3, r18	; 0x03
     3ca:	3c 83       	std	Y+4, r19	; 0x04
     3cc:	4d 83       	std	Y+5, r20	; 0x05
     3ce:	5e 83       	std	Y+6, r21	; 0x06
     3d0:	6f 83       	std	Y+7, r22	; 0x07
     3d2:	78 87       	std	Y+8, r23	; 0x08
     3d4:	89 87       	std	Y+9, r24	; 0x09
     3d6:	9a 87       	std	Y+10, r25	; 0x0a
	fprintf(&uart_out, "SID:%i\n", msg.sid);
     3d8:	1f 92       	push	r1
     3da:	0f 93       	push	r16
     3dc:	85 e3       	ldi	r24, 0x35	; 53
     3de:	91 e0       	ldi	r25, 0x01	; 1
     3e0:	9f 93       	push	r25
     3e2:	8f 93       	push	r24
     3e4:	87 e2       	ldi	r24, 0x27	; 39
     3e6:	91 e0       	ldi	r25, 0x01	; 1
     3e8:	9f 93       	push	r25
     3ea:	8f 93       	push	r24
     3ec:	0e 94 21 0a 	call	0x1442	; 0x1442 <fprintf>
	for (uint8_t i = 0; i < msg.length; ++i)
     3f0:	0f 90       	pop	r0
     3f2:	0f 90       	pop	r0
     3f4:	0f 90       	pop	r0
     3f6:	0f 90       	pop	r0
     3f8:	0f 90       	pop	r0
     3fa:	0f 90       	pop	r0
     3fc:	11 23       	and	r17, r17
     3fe:	09 f1       	breq	.+66     	; 0x442 <can_print_msg+0xa4>
     400:	6e 01       	movw	r12, r28
     402:	83 e0       	ldi	r24, 0x03	; 3
     404:	c8 0e       	add	r12, r24
     406:	d1 1c       	adc	r13, r1
     408:	b1 2c       	mov	r11, r1
	{
		fprintf(&uart_out, "%x ", msg.data[i]);
     40a:	0f 2e       	mov	r0, r31
     40c:	fd e3       	ldi	r31, 0x3D	; 61
     40e:	ef 2e       	mov	r14, r31
     410:	f1 e0       	ldi	r31, 0x01	; 1
     412:	ff 2e       	mov	r15, r31
     414:	f0 2d       	mov	r31, r0
     416:	07 e2       	ldi	r16, 0x27	; 39
     418:	11 e0       	ldi	r17, 0x01	; 1
     41a:	f6 01       	movw	r30, r12
     41c:	81 91       	ld	r24, Z+
     41e:	6f 01       	movw	r12, r30
     420:	1f 92       	push	r1
     422:	8f 93       	push	r24
     424:	ff 92       	push	r15
     426:	ef 92       	push	r14
     428:	1f 93       	push	r17
     42a:	0f 93       	push	r16
     42c:	0e 94 21 0a 	call	0x1442	; 0x1442 <fprintf>
 * Requires inclusion of "uart.h" and will only be included if uart.h is included
 */
void can_print_msg(can_msg_t msg)
{
	fprintf(&uart_out, "SID:%i\n", msg.sid);
	for (uint8_t i = 0; i < msg.length; ++i)
     430:	b3 94       	inc	r11
     432:	0f 90       	pop	r0
     434:	0f 90       	pop	r0
     436:	0f 90       	pop	r0
     438:	0f 90       	pop	r0
     43a:	0f 90       	pop	r0
     43c:	0f 90       	pop	r0
     43e:	ba 10       	cpse	r11, r10
     440:	ec cf       	rjmp	.-40     	; 0x41a <can_print_msg+0x7c>
	{
		fprintf(&uart_out, "%x ", msg.data[i]);
	}
	fprintf(&uart_out, "\n");
     442:	67 e2       	ldi	r22, 0x27	; 39
     444:	71 e0       	ldi	r23, 0x01	; 1
     446:	8a e0       	ldi	r24, 0x0A	; 10
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	0e 94 30 0a 	call	0x1460	; 0x1460 <fputc>
}
     44e:	2a 96       	adiw	r28, 0x0a	; 10
     450:	0f b6       	in	r0, 0x3f	; 63
     452:	f8 94       	cli
     454:	de bf       	out	0x3e, r29	; 62
     456:	0f be       	out	0x3f, r0	; 63
     458:	cd bf       	out	0x3d, r28	; 61
     45a:	df 91       	pop	r29
     45c:	cf 91       	pop	r28
     45e:	1f 91       	pop	r17
     460:	0f 91       	pop	r16
     462:	ff 90       	pop	r15
     464:	ef 90       	pop	r14
     466:	df 90       	pop	r13
     468:	cf 90       	pop	r12
     46a:	bf 90       	pop	r11
     46c:	af 90       	pop	r10
     46e:	08 95       	ret

00000470 <can_send>:
 * Send message on can bus using the specified tx hardware buffer.
 * @param msg Msg to send on bus
 * @param tx_buffer_select Tx buffer to put the message into. 
 */
void can_send(can_msg_t msg, uint8_t tx_buffer_select)
{
     470:	df 92       	push	r13
     472:	ef 92       	push	r14
     474:	ff 92       	push	r15
     476:	0f 93       	push	r16
     478:	1f 93       	push	r17
     47a:	cf 93       	push	r28
     47c:	df 93       	push	r29
     47e:	cd b7       	in	r28, 0x3d	; 61
     480:	de b7       	in	r29, 0x3e	; 62
     482:	2a 97       	sbiw	r28, 0x0a	; 10
     484:	0f b6       	in	r0, 0x3f	; 63
     486:	f8 94       	cli
     488:	de bf       	out	0x3e, r29	; 62
     48a:	0f be       	out	0x3f, r0	; 63
     48c:	cd bf       	out	0x3d, r28	; 61
     48e:	09 83       	std	Y+1, r16	; 0x01
     490:	d1 2e       	mov	r13, r17
     492:	1a 83       	std	Y+2, r17	; 0x02
     494:	2b 83       	std	Y+3, r18	; 0x03
     496:	3c 83       	std	Y+4, r19	; 0x04
     498:	4d 83       	std	Y+5, r20	; 0x05
     49a:	5e 83       	std	Y+6, r21	; 0x06
     49c:	6f 83       	std	Y+7, r22	; 0x07
     49e:	78 87       	std	Y+8, r23	; 0x08
     4a0:	89 87       	std	Y+9, r24	; 0x09
     4a2:	9a 87       	std	Y+10, r25	; 0x0a
	/// \todo check for buffer full, can return false if buffer is full
	
	
	uint8_t MCP_TXBn = MCP_TXB0;
	uint8_t MCP_LOAD_TXn = MCP_LOAD_TX0;
	switch (tx_buffer_select)
     4a4:	81 e0       	ldi	r24, 0x01	; 1
     4a6:	e8 16       	cp	r14, r24
     4a8:	49 f0       	breq	.+18     	; 0x4bc <can_send+0x4c>
     4aa:	e2 e0       	ldi	r30, 0x02	; 2
     4ac:	ee 16       	cp	r14, r30
     4ae:	19 f0       	breq	.+6      	; 0x4b6 <can_send+0x46>
{
	/// \todo check for buffer full, can return false if buffer is full
	
	
	uint8_t MCP_TXBn = MCP_TXB0;
	uint8_t MCP_LOAD_TXn = MCP_LOAD_TX0;
     4b0:	00 e4       	ldi	r16, 0x40	; 64
void can_send(can_msg_t msg, uint8_t tx_buffer_select)
{
	/// \todo check for buffer full, can return false if buffer is full
	
	
	uint8_t MCP_TXBn = MCP_TXB0;
     4b2:	10 e3       	ldi	r17, 0x30	; 48
     4b4:	05 c0       	rjmp	.+10     	; 0x4c0 <can_send+0x50>
		MCP_TXBn = MCP_TXB1;
		MCP_LOAD_TXn = MCP_LOAD_TX1;
		break;
	case 2:
		MCP_TXBn = MCP_TXB2;
		MCP_LOAD_TXn = MCP_LOAD_TX2;
     4b6:	04 e4       	ldi	r16, 0x44	; 68
	case 1:
		MCP_TXBn = MCP_TXB1;
		MCP_LOAD_TXn = MCP_LOAD_TX1;
		break;
	case 2:
		MCP_TXBn = MCP_TXB2;
     4b8:	10 e5       	ldi	r17, 0x50	; 80
		MCP_LOAD_TXn = MCP_LOAD_TX2;
		break;
     4ba:	02 c0       	rjmp	.+4      	; 0x4c0 <can_send+0x50>
		MCP_TXBn = MCP_TXB0;
		MCP_LOAD_TXn = MCP_LOAD_TX0;
		break;
	case 1:
		MCP_TXBn = MCP_TXB1;
		MCP_LOAD_TXn = MCP_LOAD_TX1;
     4bc:	02 e4       	ldi	r16, 0x42	; 66
	case 0:
		MCP_TXBn = MCP_TXB0;
		MCP_LOAD_TXn = MCP_LOAD_TX0;
		break;
	case 1:
		MCP_TXBn = MCP_TXB1;
     4be:	10 e4       	ldi	r17, 0x40	; 64
		break;
	}
	//fprintf(&uart_out, "MCP_TXBn=%x\tMCP_LOAD_TXn=%x\n", MCP_TXBn, MCP_LOAD_TXn);
	
	// set tx length
	mcp_write(MCP_TXBn | MCP_TXBnDLC, msg.length);
     4c0:	6d 2d       	mov	r22, r13
     4c2:	81 2f       	mov	r24, r17
     4c4:	85 60       	ori	r24, 0x05	; 5
     4c6:	b9 d1       	rcall	.+882    	; 0x83a <mcp_write>
	
	// write sid
	mcp_write(MCP_TXBn | MCP_TXBnSIDL, 0x00);		// use only SIDH
     4c8:	60 e0       	ldi	r22, 0x00	; 0
     4ca:	81 2f       	mov	r24, r17
     4cc:	82 60       	ori	r24, 0x02	; 2
     4ce:	b5 d1       	rcall	.+874    	; 0x83a <mcp_write>
	mcp_write(MCP_TXBn | MCP_TXBnSIDH , msg.sid);
     4d0:	69 81       	ldd	r22, Y+1	; 0x01
     4d2:	81 2f       	mov	r24, r17
     4d4:	81 60       	ori	r24, 0x01	; 1
     4d6:	b1 d1       	rcall	.+866    	; 0x83a <mcp_write>
	
	// write data
	spi_ss_low();
     4d8:	d8 d5       	rcall	.+2992   	; 0x108a <spi_ss_low>
	spi_transmit(MCP_LOAD_TXn | 0x01); ///\todo add define to explain
     4da:	80 2f       	mov	r24, r16
     4dc:	81 60       	ori	r24, 0x01	; 1
     4de:	e0 d5       	rcall	.+3008   	; 0x10a0 <spi_transmit>
	for (uint8_t i = 0; i < msg.length; ++i)
     4e0:	dd 20       	and	r13, r13
     4e2:	59 f0       	breq	.+22     	; 0x4fa <can_send+0x8a>
     4e4:	8e 01       	movw	r16, r28
     4e6:	0d 5f       	subi	r16, 0xFD	; 253
     4e8:	1f 4f       	sbci	r17, 0xFF	; 255
     4ea:	f1 2c       	mov	r15, r1
	{
		spi_transmit(msg.data[i]);
     4ec:	f8 01       	movw	r30, r16
     4ee:	81 91       	ld	r24, Z+
     4f0:	8f 01       	movw	r16, r30
     4f2:	d6 d5       	rcall	.+2988   	; 0x10a0 <spi_transmit>
	mcp_write(MCP_TXBn | MCP_TXBnSIDH , msg.sid);
	
	// write data
	spi_ss_low();
	spi_transmit(MCP_LOAD_TXn | 0x01); ///\todo add define to explain
	for (uint8_t i = 0; i < msg.length; ++i)
     4f4:	f3 94       	inc	r15
     4f6:	fd 10       	cpse	r15, r13
     4f8:	f9 cf       	rjmp	.-14     	; 0x4ec <can_send+0x7c>
	{
		spi_transmit(msg.data[i]);
	}
	spi_ss_high();
     4fa:	c9 d5       	rcall	.+2962   	; 0x108e <spi_ss_high>
	
	mcp_rts(tx_buffer_select);
     4fc:	8e 2d       	mov	r24, r14
     4fe:	ac d1       	rcall	.+856    	; 0x858 <mcp_rts>

}
     500:	2a 96       	adiw	r28, 0x0a	; 10
     502:	0f b6       	in	r0, 0x3f	; 63
     504:	f8 94       	cli
     506:	de bf       	out	0x3e, r29	; 62
     508:	0f be       	out	0x3f, r0	; 63
     50a:	cd bf       	out	0x3d, r28	; 61
     50c:	df 91       	pop	r29
     50e:	cf 91       	pop	r28
     510:	1f 91       	pop	r17
     512:	0f 91       	pop	r16
     514:	ff 90       	pop	r15
     516:	ef 90       	pop	r14
     518:	df 90       	pop	r13
     51a:	08 95       	ret

0000051c <can_read_buffer>:
 * @param rx_buffer_select 0 or 1, which buffer too read from. Undefined behaviour for other values.
 * @return return the oldest message in the buffer. If buffer is empty, then returned
 * 		   message will have SID = MSG_INVALID and length=0. 
 */
can_msg_t can_read_buffer(uint8_t rx_buffer_select)
{
     51c:	cf 93       	push	r28
     51e:	df 93       	push	r29
	const uint8_t n = rx_buffer_select; // not different but just a shorter variable name
	
	can_msg_t msg = {};
     520:	2a e0       	ldi	r18, 0x0A	; 10
     522:	fc 01       	movw	r30, r24
     524:	11 92       	st	Z+, r1
     526:	2a 95       	dec	r18
     528:	e9 f7       	brne	.-6      	; 0x524 <can_read_buffer+0x8>
	
	if (rx_head[n] != rx_tail[n])
     52a:	70 e0       	ldi	r23, 0x00	; 0
     52c:	fb 01       	movw	r30, r22
     52e:	e4 5b       	subi	r30, 0xB4	; 180
     530:	fd 4f       	sbci	r31, 0xFD	; 253
     532:	30 81       	ld	r19, Z
     534:	fb 01       	movw	r30, r22
     536:	e6 5b       	subi	r30, 0xB6	; 182
     538:	fd 4f       	sbci	r31, 0xFD	; 253
     53a:	20 81       	ld	r18, Z
     53c:	32 17       	cp	r19, r18
     53e:	29 f1       	breq	.+74     	; 0x58a <can_read_buffer+0x6e>
	{
		msg = rx_buffer[n][rx_tail[n]];
     540:	ef 01       	movw	r28, r30
     542:	20 81       	ld	r18, Z
     544:	30 e0       	ldi	r19, 0x00	; 0
     546:	f9 01       	movw	r30, r18
     548:	ee 0f       	add	r30, r30
     54a:	ff 1f       	adc	r31, r31
     54c:	22 0f       	add	r18, r18
     54e:	33 1f       	adc	r19, r19
     550:	22 0f       	add	r18, r18
     552:	33 1f       	adc	r19, r19
     554:	22 0f       	add	r18, r18
     556:	33 1f       	adc	r19, r19
     558:	e2 0f       	add	r30, r18
     55a:	f3 1f       	adc	r31, r19
     55c:	20 e5       	ldi	r18, 0x50	; 80
     55e:	26 9f       	mul	r18, r22
     560:	a0 01       	movw	r20, r0
     562:	27 9f       	mul	r18, r23
     564:	50 0d       	add	r21, r0
     566:	11 24       	eor	r1, r1
     568:	e4 0f       	add	r30, r20
     56a:	f5 1f       	adc	r31, r21
     56c:	e2 5b       	subi	r30, 0xB2	; 178
     56e:	fd 4f       	sbci	r31, 0xFD	; 253
     570:	2a e0       	ldi	r18, 0x0A	; 10
     572:	dc 01       	movw	r26, r24
     574:	01 90       	ld	r0, Z+
     576:	0d 92       	st	X+, r0
     578:	2a 95       	dec	r18
     57a:	e1 f7       	brne	.-8      	; 0x574 <can_read_buffer+0x58>
		rx_tail[n] = (rx_tail[n] + 1)%RX_BUFFER_MAX;
     57c:	28 81       	ld	r18, Y
     57e:	30 e0       	ldi	r19, 0x00	; 0
     580:	2f 5f       	subi	r18, 0xFF	; 255
     582:	3f 4f       	sbci	r19, 0xFF	; 255
     584:	27 70       	andi	r18, 0x07	; 7
     586:	30 78       	andi	r19, 0x80	; 128
     588:	28 83       	st	Y, r18
	}
		
	return msg;
}
     58a:	df 91       	pop	r29
     58c:	cf 91       	pop	r28
     58e:	08 95       	ret

00000590 <game_init_menu>:
		default:
			break;
	}
}

void game_tick_playing(){
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	f2 c2       	rjmp	.+1508   	; 0xb78 <menu_move_cursor>
     594:	08 95       	ret

00000596 <game_init>:
     596:	fc df       	rcall	.-8      	; 0x590 <game_init_menu>
     598:	81 e0       	ldi	r24, 0x01	; 1
     59a:	80 93 ee 02 	sts	0x02EE, r24
     59e:	08 95       	ret

000005a0 <game_start>:
     5a0:	27 e2       	ldi	r18, 0x27	; 39
     5a2:	31 e0       	ldi	r19, 0x01	; 1
     5a4:	4e e0       	ldi	r20, 0x0E	; 14
     5a6:	50 e0       	ldi	r21, 0x00	; 0
     5a8:	61 e0       	ldi	r22, 0x01	; 1
     5aa:	70 e0       	ldi	r23, 0x00	; 0
     5ac:	81 e4       	ldi	r24, 0x41	; 65
     5ae:	91 e0       	ldi	r25, 0x01	; 1
     5b0:	89 c7       	rjmp	.+3858   	; 0x14c4 <fwrite>
     5b2:	08 95       	ret

000005b4 <game_tick_menu>:
}

void game_tick_menu(){
	static BOOL joy_released = TRUE;
	
	menu_print_current();
     5b4:	6d d2       	rcall	.+1242   	; 0xa90 <menu_print_current>
	
	joystick_t joy = joy_get_state();
     5b6:	74 d0       	rcall	.+232    	; 0x6a0 <joy_get_state>
     5b8:	86 2f       	mov	r24, r22
     5ba:	67 2f       	mov	r22, r23
	
	direction_t joy_dir = joy_direction(joy.x, joy.y);
     5bc:	39 d0       	rcall	.+114    	; 0x630 <joy_direction>
	
	switch (joy_dir){
     5be:	82 30       	cpi	r24, 0x02	; 2
     5c0:	59 f0       	breq	.+22     	; 0x5d8 <game_tick_menu+0x24>
     5c2:	28 f4       	brcc	.+10     	; 0x5ce <game_tick_menu+0x1a>
     5c4:	88 23       	and	r24, r24
     5c6:	11 f1       	breq	.+68     	; 0x60c <game_tick_menu+0x58>
     5c8:	81 30       	cpi	r24, 0x01	; 1
     5ca:	c1 f0       	breq	.+48     	; 0x5fc <game_tick_menu+0x48>
     5cc:	08 95       	ret
     5ce:	83 30       	cpi	r24, 0x03	; 3
     5d0:	61 f0       	breq	.+24     	; 0x5ea <game_tick_menu+0x36>
     5d2:	84 30       	cpi	r24, 0x04	; 4
     5d4:	19 f1       	breq	.+70     	; 0x61c <game_tick_menu+0x68>
     5d6:	08 95       	ret
		case UP:
			if (joy_released){
     5d8:	80 91 06 01 	lds	r24, 0x0106
     5dc:	88 23       	and	r24, r24
     5de:	09 f1       	breq	.+66     	; 0x622 <game_tick_menu+0x6e>
				joy_released = FALSE;
     5e0:	10 92 06 01 	sts	0x0106, r1
				menu_move_cursor(-1);
     5e4:	8f ef       	ldi	r24, 0xFF	; 255
     5e6:	c8 c2       	rjmp	.+1424   	; 0xb78 <menu_move_cursor>
     5e8:	08 95       	ret
			}
			break;
		case DOWN:
			if (joy_released){
     5ea:	80 91 06 01 	lds	r24, 0x0106
     5ee:	88 23       	and	r24, r24
     5f0:	c1 f0       	breq	.+48     	; 0x622 <game_tick_menu+0x6e>
				joy_released = FALSE;
     5f2:	10 92 06 01 	sts	0x0106, r1
				menu_move_cursor(1);
     5f6:	81 e0       	ldi	r24, 0x01	; 1
     5f8:	bf c2       	rjmp	.+1406   	; 0xb78 <menu_move_cursor>
     5fa:	08 95       	ret
			}
			break;
			
		case RIGHT:
			if (joy_released){
     5fc:	80 91 06 01 	lds	r24, 0x0106
     600:	88 23       	and	r24, r24
     602:	79 f0       	breq	.+30     	; 0x622 <game_tick_menu+0x6e>
				joy_released = FALSE;
     604:	10 92 06 01 	sts	0x0106, r1
				menu_enter_current();
     608:	e5 c2       	rjmp	.+1482   	; 0xbd4 <menu_enter_current>
     60a:	08 95       	ret
			}
			break;
		
		case LEFT:
			if (joy_released){
     60c:	80 91 06 01 	lds	r24, 0x0106
     610:	88 23       	and	r24, r24
     612:	39 f0       	breq	.+14     	; 0x622 <game_tick_menu+0x6e>
				joy_released = FALSE;
     614:	10 92 06 01 	sts	0x0106, r1
				menu_enter_parent();
     618:	51 c3       	rjmp	.+1698   	; 0xcbc <menu_enter_parent>
     61a:	08 95       	ret
			}
			break;
		
		case NEUTRAL:
			joy_released = TRUE;
     61c:	81 e0       	ldi	r24, 0x01	; 1
     61e:	80 93 06 01 	sts	0x0106, r24
     622:	08 95       	ret

00000624 <game_tick>:
}


void game_tick(){
	
	switch (game_state){
     624:	80 91 ee 02 	lds	r24, 0x02EE
     628:	81 30       	cpi	r24, 0x01	; 1
     62a:	09 f4       	brne	.+2      	; 0x62e <game_tick+0xa>
		case game_INVALID:
			
			break;
		case game_IN_MENU:
			
			game_tick_menu();
     62c:	c3 cf       	rjmp	.-122    	; 0x5b4 <game_tick_menu>
     62e:	08 95       	ret

00000630 <joy_direction>:
	msg.length = 4;
	
	fprintf(&uart_out, "joy sent: %i\t%i\t%i\t%i\n",   joy_xs, joy_ys, joy_dir, joy_click);
	
	can_send(msg, 0);
}
     630:	28 2f       	mov	r18, r24
     632:	30 e0       	ldi	r19, 0x00	; 0
     634:	28 56       	subi	r18, 0x68	; 104
     636:	31 09       	sbc	r19, r1
     638:	21 33       	cpi	r18, 0x31	; 49
     63a:	31 05       	cpc	r19, r1
     63c:	38 f4       	brcc	.+14     	; 0x64c <joy_direction+0x1c>
     63e:	26 2f       	mov	r18, r22
     640:	30 e0       	ldi	r19, 0x00	; 0
     642:	28 56       	subi	r18, 0x68	; 104
     644:	31 09       	sbc	r19, r1
     646:	21 33       	cpi	r18, 0x31	; 49
     648:	31 05       	cpc	r19, r1
     64a:	10 f1       	brcs	.+68     	; 0x690 <joy_direction+0x60>
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	80 58       	subi	r24, 0x80	; 128
     650:	91 09       	sbc	r25, r1
     652:	70 e0       	ldi	r23, 0x00	; 0
     654:	60 58       	subi	r22, 0x80	; 128
     656:	71 09       	sbc	r23, r1
     658:	9b 01       	movw	r18, r22
     65a:	77 23       	and	r23, r23
     65c:	24 f4       	brge	.+8      	; 0x666 <joy_direction+0x36>
     65e:	22 27       	eor	r18, r18
     660:	33 27       	eor	r19, r19
     662:	26 1b       	sub	r18, r22
     664:	37 0b       	sbc	r19, r23
     666:	28 17       	cp	r18, r24
     668:	39 07       	cpc	r19, r25
     66a:	a4 f0       	brlt	.+40     	; 0x694 <joy_direction+0x64>
     66c:	31 95       	neg	r19
     66e:	21 95       	neg	r18
     670:	31 09       	sbc	r19, r1
     672:	82 17       	cp	r24, r18
     674:	93 07       	cpc	r25, r19
     676:	84 f0       	brlt	.+32     	; 0x698 <joy_direction+0x68>
     678:	9c 01       	movw	r18, r24
     67a:	99 23       	and	r25, r25
     67c:	24 f4       	brge	.+8      	; 0x686 <joy_direction+0x56>
     67e:	22 27       	eor	r18, r18
     680:	33 27       	eor	r19, r19
     682:	28 1b       	sub	r18, r24
     684:	39 0b       	sbc	r19, r25
     686:	26 17       	cp	r18, r22
     688:	37 07       	cpc	r19, r23
     68a:	44 f4       	brge	.+16     	; 0x69c <joy_direction+0x6c>
     68c:	82 e0       	ldi	r24, 0x02	; 2
     68e:	08 95       	ret
     690:	84 e0       	ldi	r24, 0x04	; 4
     692:	08 95       	ret
     694:	81 e0       	ldi	r24, 0x01	; 1
     696:	08 95       	ret
     698:	80 e0       	ldi	r24, 0x00	; 0
     69a:	08 95       	ret
     69c:	83 e0       	ldi	r24, 0x03	; 3
     69e:	08 95       	ret

000006a0 <joy_get_state>:
     6a0:	cf 93       	push	r28
     6a2:	81 e0       	ldi	r24, 0x01	; 1
     6a4:	c3 dd       	rcall	.-1146   	; 0x22c <adc_read_channel>
     6a6:	c8 2f       	mov	r28, r24
     6a8:	80 e0       	ldi	r24, 0x00	; 0
     6aa:	c0 dd       	rcall	.-1152   	; 0x22c <adc_read_channel>
     6ac:	95 b1       	in	r25, 0x05	; 5
     6ae:	90 95       	com	r25
     6b0:	6c 2f       	mov	r22, r28
     6b2:	78 2f       	mov	r23, r24
     6b4:	89 2f       	mov	r24, r25
     6b6:	81 70       	andi	r24, 0x01	; 1
     6b8:	cf 91       	pop	r28
     6ba:	08 95       	ret

000006bc <joystick_init>:

/// Initialize joystick
void joystick_init(void){
     6bc:	08 95       	ret

000006be <main>:

#include "mcp2515.h"


int main()
{
     6be:	cf 93       	push	r28
     6c0:	df 93       	push	r29
     6c2:	cd b7       	in	r28, 0x3d	; 61
     6c4:	de b7       	in	r29, 0x3e	; 62
     6c6:	64 97       	sbiw	r28, 0x14	; 20
     6c8:	0f b6       	in	r0, 0x3f	; 63
     6ca:	f8 94       	cli
     6cc:	de bf       	out	0x3e, r29	; 62
     6ce:	0f be       	out	0x3f, r0	; 63
     6d0:	cd bf       	out	0x3d, r28	; 61
	cli();
     6d2:	f8 94       	cli
	
	// SRAM init
	MCUCR |= (1 << SRE);
     6d4:	85 b7       	in	r24, 0x35	; 53
     6d6:	80 68       	ori	r24, 0x80	; 128
     6d8:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1 << XMM2);
     6da:	80 b7       	in	r24, 0x30	; 48
     6dc:	80 62       	ori	r24, 0x20	; 32
     6de:	80 bf       	out	0x30, r24	; 48
	
	uart_init();
     6e0:	6a d5       	rcall	.+2772   	; 0x11b6 <uart_init>
	
	// setup heap
	__malloc_heap_start = (char*)RAM_ADR;
     6e2:	80 e0       	ldi	r24, 0x00	; 0
     6e4:	98 e1       	ldi	r25, 0x18	; 24
     6e6:	90 93 03 01 	sts	0x0103, r25
     6ea:	80 93 02 01 	sts	0x0102, r24
	__malloc_heap_end   = (char*)(RAM_ADR + RAM_SIZE);
     6ee:	80 e0       	ldi	r24, 0x00	; 0
     6f0:	90 e2       	ldi	r25, 0x20	; 32
     6f2:	90 93 01 01 	sts	0x0101, r25
     6f6:	80 93 00 01 	sts	0x0100, r24
	
	adc_init(); // adc init (must be after sram init)
     6fa:	95 dd       	rcall	.-1238   	; 0x226 <adc_init>
	oled_init();
     6fc:	cb d3       	rcall	.+1942   	; 0xe94 <oled_init>
	menu_init(); // after oled
     6fe:	73 d1       	rcall	.+742    	; 0x9e6 <menu_init>
	
	spi_init();
     700:	c8 d4       	rcall	.+2448   	; 0x1092 <spi_init>
	can_init(); // after spi
     702:	44 de       	rcall	.-888    	; 0x38c <can_init>
	
	sei();
     704:	78 94       	sei
	
	// NOTE(rendellc): required for sram test
	stdout = &uart_out; 
     706:	87 e2       	ldi	r24, 0x27	; 39
     708:	91 e0       	ldi	r25, 0x01	; 1
     70a:	90 93 81 03 	sts	0x0381, r25
     70e:	80 93 80 03 	sts	0x0380, r24
	stdin  = &uart_in;
     712:	89 e1       	ldi	r24, 0x19	; 25
     714:	91 e0       	ldi	r25, 0x01	; 1
     716:	90 93 7f 03 	sts	0x037F, r25
     71a:	80 93 7e 03 	sts	0x037E, r24
	
	oled_home();
     71e:	e4 d2       	rcall	.+1480   	; 0xce8 <oled_home>
	
	game_init(); // after menu_init
     720:	3a df       	rcall	.-396    	; 0x596 <game_init>
	
	uint8_t i = 0;
	
	//mcp_loopback_set();
	
	can_msg_t msg = {};
     722:	fe 01       	movw	r30, r28
     724:	31 96       	adiw	r30, 0x01	; 1
     726:	8a e0       	ldi	r24, 0x0A	; 10
     728:	df 01       	movw	r26, r30
     72a:	1d 92       	st	X+, r1
     72c:	8a 95       	dec	r24
     72e:	e9 f7       	brne	.-6      	; 0x72a <main+0x6c>
	msg.length = 1;
     730:	81 e0       	ldi	r24, 0x01	; 1
     732:	8a 83       	std	Y+2, r24	; 0x02
	msg.data[0] = 'a';
     734:	81 e6       	ldi	r24, 0x61	; 97
     736:	8b 83       	std	Y+3, r24	; 0x03
	msg.sid = can_GAME_INFO;
     738:	84 e0       	ldi	r24, 0x04	; 4
     73a:	89 83       	std	Y+1, r24	; 0x01
	
	fprintf(&uart_out, "Sent message\n");
     73c:	27 e2       	ldi	r18, 0x27	; 39
     73e:	31 e0       	ldi	r19, 0x01	; 1
     740:	4d e0       	ldi	r20, 0x0D	; 13
     742:	50 e0       	ldi	r21, 0x00	; 0
     744:	61 e0       	ldi	r22, 0x01	; 1
     746:	70 e0       	ldi	r23, 0x00	; 0
     748:	80 e5       	ldi	r24, 0x50	; 80
     74a:	91 e0       	ldi	r25, 0x01	; 1
     74c:	bb d6       	rcall	.+3446   	; 0x14c4 <fwrite>
	can_print_msg(msg);
     74e:	09 81       	ldd	r16, Y+1	; 0x01
     750:	1a 81       	ldd	r17, Y+2	; 0x02
     752:	2b 81       	ldd	r18, Y+3	; 0x03
     754:	3c 81       	ldd	r19, Y+4	; 0x04
     756:	4d 81       	ldd	r20, Y+5	; 0x05
     758:	5e 81       	ldd	r21, Y+6	; 0x06
     75a:	6f 81       	ldd	r22, Y+7	; 0x07
     75c:	78 85       	ldd	r23, Y+8	; 0x08
     75e:	89 85       	ldd	r24, Y+9	; 0x09
     760:	9a 85       	ldd	r25, Y+10	; 0x0a
     762:	1d de       	rcall	.-966    	; 0x39e <can_print_msg>
	
	fprintf(&uart_out, "entering loop\n");
     764:	27 e2       	ldi	r18, 0x27	; 39
     766:	31 e0       	ldi	r19, 0x01	; 1
     768:	4e e0       	ldi	r20, 0x0E	; 14
     76a:	50 e0       	ldi	r21, 0x00	; 0
     76c:	61 e0       	ldi	r22, 0x01	; 1
     76e:	70 e0       	ldi	r23, 0x00	; 0
     770:	8e e5       	ldi	r24, 0x5E	; 94
     772:	91 e0       	ldi	r25, 0x01	; 1
     774:	a7 d6       	rcall	.+3406   	; 0x14c4 <fwrite>
		//oled_fill(0xFF);
				
		can_send(msg,0);
		
		
		fprintf(&uart_out, "canctrl status %u\n", mcp_readstatus());
     776:	0f 2e       	mov	r0, r31
     778:	fd e6       	ldi	r31, 0x6D	; 109
     77a:	af 2e       	mov	r10, r31
     77c:	f1 e0       	ldi	r31, 0x01	; 1
     77e:	bf 2e       	mov	r11, r31
     780:	f0 2d       	mov	r31, r0
     782:	0f 2e       	mov	r0, r31
     784:	f7 e2       	ldi	r31, 0x27	; 39
     786:	cf 2e       	mov	r12, r31
     788:	f1 e0       	ldi	r31, 0x01	; 1
     78a:	df 2e       	mov	r13, r31
     78c:	f0 2d       	mov	r31, r0
	fprintf(&uart_out, "entering loop\n");
	while (1)
	{
		//oled_fill(0xFF);
				
		can_send(msg,0);
     78e:	e1 2c       	mov	r14, r1
     790:	09 81       	ldd	r16, Y+1	; 0x01
     792:	1a 81       	ldd	r17, Y+2	; 0x02
     794:	2b 81       	ldd	r18, Y+3	; 0x03
     796:	3c 81       	ldd	r19, Y+4	; 0x04
     798:	4d 81       	ldd	r20, Y+5	; 0x05
     79a:	5e 81       	ldd	r21, Y+6	; 0x06
     79c:	6f 81       	ldd	r22, Y+7	; 0x07
     79e:	78 85       	ldd	r23, Y+8	; 0x08
     7a0:	89 85       	ldd	r24, Y+9	; 0x09
     7a2:	9a 85       	ldd	r25, Y+10	; 0x0a
     7a4:	65 de       	rcall	.-822    	; 0x470 <can_send>
		
		
		fprintf(&uart_out, "canctrl status %u\n", mcp_readstatus());
     7a6:	68 d0       	rcall	.+208    	; 0x878 <mcp_readstatus>
     7a8:	1f 92       	push	r1
     7aa:	8f 93       	push	r24
     7ac:	bf 92       	push	r11
     7ae:	af 92       	push	r10
     7b0:	df 92       	push	r13
     7b2:	cf 92       	push	r12
     7b4:	46 d6       	rcall	.+3212   	; 0x1442 <fprintf>

		can_msg_t recieved_msg = can_read_buffer(0);
     7b6:	60 e0       	ldi	r22, 0x00	; 0
     7b8:	ce 01       	movw	r24, r28
     7ba:	0b 96       	adiw	r24, 0x0b	; 11
     7bc:	af de       	rcall	.-674    	; 0x51c <can_read_buffer>
		
		
		if (recieved_msg.sid != can_INVALID){
     7be:	0f 90       	pop	r0
     7c0:	0f 90       	pop	r0
     7c2:	0f 90       	pop	r0
     7c4:	0f 90       	pop	r0
     7c6:	0f 90       	pop	r0
     7c8:	0f 90       	pop	r0
     7ca:	8b 85       	ldd	r24, Y+11	; 0x0b
     7cc:	88 23       	and	r24, r24
     7ce:	99 f0       	breq	.+38     	; 0x7f6 <main+0x138>
			fprintf(&uart_out, "Recieved message\n");
     7d0:	96 01       	movw	r18, r12
     7d2:	41 e1       	ldi	r20, 0x11	; 17
     7d4:	50 e0       	ldi	r21, 0x00	; 0
     7d6:	61 e0       	ldi	r22, 0x01	; 1
     7d8:	70 e0       	ldi	r23, 0x00	; 0
     7da:	80 e8       	ldi	r24, 0x80	; 128
     7dc:	91 e0       	ldi	r25, 0x01	; 1
     7de:	72 d6       	rcall	.+3300   	; 0x14c4 <fwrite>
			can_print_msg(recieved_msg);
     7e0:	0b 85       	ldd	r16, Y+11	; 0x0b
     7e2:	1c 85       	ldd	r17, Y+12	; 0x0c
     7e4:	2d 85       	ldd	r18, Y+13	; 0x0d
     7e6:	3e 85       	ldd	r19, Y+14	; 0x0e
     7e8:	4f 85       	ldd	r20, Y+15	; 0x0f
     7ea:	58 89       	ldd	r21, Y+16	; 0x10
     7ec:	69 89       	ldd	r22, Y+17	; 0x11
     7ee:	7a 89       	ldd	r23, Y+18	; 0x12
     7f0:	8b 89       	ldd	r24, Y+19	; 0x13
     7f2:	9c 89       	ldd	r25, Y+20	; 0x14
     7f4:	d4 dd       	rcall	.-1112   	; 0x39e <can_print_msg>
		}
	
		
		game_tick();
     7f6:	16 df       	rcall	.-468    	; 0x624 <game_tick>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7f8:	bf ef       	ldi	r27, 0xFF	; 255
     7fa:	2f e7       	ldi	r18, 0x7F	; 127
     7fc:	81 e0       	ldi	r24, 0x01	; 1
     7fe:	b1 50       	subi	r27, 0x01	; 1
     800:	20 40       	sbci	r18, 0x00	; 0
     802:	80 40       	sbci	r24, 0x00	; 0
     804:	e1 f7       	brne	.-8      	; 0x7fe <main+0x140>
     806:	00 c0       	rjmp	.+0      	; 0x808 <main+0x14a>
     808:	00 c0       	rjmp	.+0      	; 0x80a <main+0x14c>
		
		_delay_ms(100);
	}
     80a:	c1 cf       	rjmp	.-126    	; 0x78e <main+0xd0>

0000080c <mcp_reset>:



void mcp_reset()
{
	spi_ss_low();
     80c:	3e d4       	rcall	.+2172   	; 0x108a <spi_ss_low>
	spi_transmit(MCP_RESET);
     80e:	80 ec       	ldi	r24, 0xC0	; 192
     810:	47 d4       	rcall	.+2190   	; 0x10a0 <spi_transmit>
	spi_ss_high();
     812:	3d d4       	rcall	.+2170   	; 0x108e <spi_ss_high>
	
	for (uint8_t _ = 0; _ < 128; ++_);	// Wait for 128 cycles
     814:	80 e0       	ldi	r24, 0x00	; 0
     816:	8f 5f       	subi	r24, 0xFF	; 255
     818:	80 38       	cpi	r24, 0x80	; 128
     81a:	e9 f7       	brne	.-6      	; 0x816 <mcp_reset+0xa>
	
	#ifdef MCP_DEBUG
	fprintf(&uart_out, "MCP_RESET\n");
	#endif // MCP_DEBUG
}
     81c:	08 95       	ret

0000081e <mcp_read>:

uint8_t mcp_read(uint8_t adr)
{
     81e:	cf 93       	push	r28
     820:	c8 2f       	mov	r28, r24
	spi_ss_low();
     822:	33 d4       	rcall	.+2150   	; 0x108a <spi_ss_low>
	spi_transmit(MCP_READ);
     824:	83 e0       	ldi	r24, 0x03	; 3
     826:	3c d4       	rcall	.+2168   	; 0x10a0 <spi_transmit>
	spi_transmit(adr);
     828:	8c 2f       	mov	r24, r28
     82a:	3a d4       	rcall	.+2164   	; 0x10a0 <spi_transmit>
	uint8_t read = spi_transmit(0);
     82c:	80 e0       	ldi	r24, 0x00	; 0
     82e:	38 d4       	rcall	.+2160   	; 0x10a0 <spi_transmit>
     830:	c8 2f       	mov	r28, r24
	spi_ss_high();
     832:	2d d4       	rcall	.+2138   	; 0x108e <spi_ss_high>
	#ifdef MCP_DEBUG
	fprintf(&uart_out, "MCP_READ %x %x\n", adr, read);
	#endif // MCP_DEBUG
	
	return read;
}
     834:	8c 2f       	mov	r24, r28
     836:	cf 91       	pop	r28
     838:	08 95       	ret

0000083a <mcp_write>:
	return data;
}


void mcp_write(uint8_t adr, uint8_t data)
{
     83a:	cf 93       	push	r28
     83c:	df 93       	push	r29
     83e:	d8 2f       	mov	r29, r24
     840:	c6 2f       	mov	r28, r22
	spi_ss_low();
     842:	23 d4       	rcall	.+2118   	; 0x108a <spi_ss_low>
	spi_transmit(MCP_WRITE);
     844:	82 e0       	ldi	r24, 0x02	; 2
     846:	2c d4       	rcall	.+2136   	; 0x10a0 <spi_transmit>
	spi_transmit(adr);
     848:	8d 2f       	mov	r24, r29
     84a:	2a d4       	rcall	.+2132   	; 0x10a0 <spi_transmit>
	spi_transmit(data);
     84c:	8c 2f       	mov	r24, r28
     84e:	28 d4       	rcall	.+2128   	; 0x10a0 <spi_transmit>
	spi_ss_high();
     850:	1e d4       	rcall	.+2108   	; 0x108e <spi_ss_high>
	
	
	#ifdef MCP_DEBUG
	fprintf(&uart_out, "MCP_WRITE\t%x\t%i\n", adr, data);
	#endif // MCP_DEBUG
}
     852:	df 91       	pop	r29
     854:	cf 91       	pop	r28
     856:	08 95       	ret

00000858 <mcp_rts>:

void mcp_rts(uint8_t tx_buffer_select)
{
     858:	cf 93       	push	r28
     85a:	c8 2f       	mov	r28, r24
	spi_ss_low();
     85c:	16 d4       	rcall	.+2092   	; 0x108a <spi_ss_low>
	spi_transmit(MCP_RTS | (1<<tx_buffer_select));
     85e:	21 e0       	ldi	r18, 0x01	; 1
     860:	30 e0       	ldi	r19, 0x00	; 0
     862:	c9 01       	movw	r24, r18
     864:	02 c0       	rjmp	.+4      	; 0x86a <mcp_rts+0x12>
     866:	88 0f       	add	r24, r24
     868:	99 1f       	adc	r25, r25
     86a:	ca 95       	dec	r28
     86c:	e2 f7       	brpl	.-8      	; 0x866 <mcp_rts+0xe>
     86e:	80 68       	ori	r24, 0x80	; 128
     870:	17 d4       	rcall	.+2094   	; 0x10a0 <spi_transmit>
	spi_ss_high();
     872:	0d d4       	rcall	.+2074   	; 0x108e <spi_ss_high>
	
	#ifdef MCP_DEBUG
	fprintf(&uart_out, "MCP_RTS\t%i\n", tx_buffer);
	#endif // MCP_DEBUG
}
     874:	cf 91       	pop	r28
     876:	08 95       	ret

00000878 <mcp_readstatus>:

uint8_t mcp_readstatus()
{
     878:	cf 93       	push	r28
	spi_ss_low();
     87a:	07 d4       	rcall	.+2062   	; 0x108a <spi_ss_low>
	spi_transmit(MCP_READ_STATUS);
     87c:	80 ea       	ldi	r24, 0xA0	; 160
     87e:	10 d4       	rcall	.+2080   	; 0x10a0 <spi_transmit>
	uint8_t status = spi_transmit(0);
     880:	80 e0       	ldi	r24, 0x00	; 0
     882:	0e d4       	rcall	.+2076   	; 0x10a0 <spi_transmit>
     884:	c8 2f       	mov	r28, r24
	spi_ss_high();
     886:	03 d4       	rcall	.+2054   	; 0x108e <spi_ss_high>
	#ifdef MCP_DEBUG
	fprintf(&uart_out, "MCP_READ_STATUS\t%x\n", status);
	#endif // MCP_DEBUG
	
	return status;
}
     888:	8c 2f       	mov	r24, r28
     88a:	cf 91       	pop	r28
     88c:	08 95       	ret

0000088e <mcp_bitmodify>:

void mcp_bitmodify(uint8_t adr, uint8_t mask, uint8_t data)
{
     88e:	1f 93       	push	r17
     890:	cf 93       	push	r28
     892:	df 93       	push	r29
     894:	18 2f       	mov	r17, r24
     896:	d6 2f       	mov	r29, r22
     898:	c4 2f       	mov	r28, r20
	spi_ss_low();
     89a:	f7 d3       	rcall	.+2030   	; 0x108a <spi_ss_low>
	spi_transmit(MCP_BITMOD);
     89c:	85 e0       	ldi	r24, 0x05	; 5
     89e:	00 d4       	rcall	.+2048   	; 0x10a0 <spi_transmit>
	spi_transmit(adr);
     8a0:	81 2f       	mov	r24, r17
     8a2:	fe d3       	rcall	.+2044   	; 0x10a0 <spi_transmit>
	spi_transmit(mask);
     8a4:	8d 2f       	mov	r24, r29
     8a6:	fc d3       	rcall	.+2040   	; 0x10a0 <spi_transmit>
	spi_transmit(data);
     8a8:	8c 2f       	mov	r24, r28
     8aa:	fa d3       	rcall	.+2036   	; 0x10a0 <spi_transmit>
	spi_ss_high();
     8ac:	f0 d3       	rcall	.+2016   	; 0x108e <spi_ss_high>
	
	#ifdef MCP_DEBUG
	fprintf(&uart_out, "MCP_BITMOD\t%x\t%x\t%x\n", adr, mask, data);
	#endif // MCP_DEBUG
}
     8ae:	df 91       	pop	r29
     8b0:	cf 91       	pop	r28
     8b2:	1f 91       	pop	r17
     8b4:	08 95       	ret

000008b6 <mcp_init>:
#include "uart.h"


void mcp_init()
{
	mcp_reset();
     8b6:	aa df       	rcall	.-172    	; 0x80c <mcp_reset>
	const uint8_t BRP		= 1;	// TQ = 2*Tosc*(BRP+1)  = 250 ns
	const uint8_t PrSeg		= 1;	// tPropSeg = (PrSeg + 1)
	const uint8_t PhSeg1	= 2;	// tPS1 = (PhSeg1 + 1)*TQ
	const uint8_t PhSeg2	= 2;	// tPS2 = (PhSeg2 + 1)*TQ
	
	mcp_write(MCP_CNF1, BRP);
     8b8:	61 e0       	ldi	r22, 0x01	; 1
     8ba:	8a e2       	ldi	r24, 0x2A	; 42
     8bc:	be df       	rcall	.-132    	; 0x83a <mcp_write>
	mcp_write(MCP_CNF2, PrSeg | (PhSeg1 << 3));
     8be:	61 e1       	ldi	r22, 0x11	; 17
     8c0:	89 e2       	ldi	r24, 0x29	; 41
     8c2:	bb df       	rcall	.-138    	; 0x83a <mcp_write>
	mcp_write(MCP_CNF3, PhSeg2);
     8c4:	62 e0       	ldi	r22, 0x02	; 2
     8c6:	88 e2       	ldi	r24, 0x28	; 40
     8c8:	b8 df       	rcall	.-144    	; 0x83a <mcp_write>


	// Setup Rx registers
	//mcp_write(MCP_RXM0SIDH, 0);
	//mcp_write(MCP_RXM0SIDL, 0);
	mcp_bitmodify(MCP_RXB0CTRL, 0x60, 0x60);
     8ca:	40 e6       	ldi	r20, 0x60	; 96
     8cc:	60 e6       	ldi	r22, 0x60	; 96
     8ce:	80 e6       	ldi	r24, 0x60	; 96
     8d0:	de df       	rcall	.-68     	; 0x88e <mcp_bitmodify>
	mcp_bitmodify(MCP_RXB1CTRL, 0x60, 0x60);	
     8d2:	40 e6       	ldi	r20, 0x60	; 96
     8d4:	60 e6       	ldi	r22, 0x60	; 96
     8d6:	80 e7       	ldi	r24, 0x70	; 112
     8d8:	da df       	rcall	.-76     	; 0x88e <mcp_bitmodify>
	
	// go to normal mode
	mcp_bitmodify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);
     8da:	40 e0       	ldi	r20, 0x00	; 0
     8dc:	60 ee       	ldi	r22, 0xE0	; 224
     8de:	8f e0       	ldi	r24, 0x0F	; 15
     8e0:	d6 cf       	rjmp	.-84     	; 0x88e <mcp_bitmodify>
     8e2:	08 95       	ret

000008e4 <menu_action_nothing>:
		///\todo this can't be right?
		// should probably check for parent->submenu[i] != NULL
		if (1)
			free(&parent->submenus[i]);
	}
}
     8e4:	27 e2       	ldi	r18, 0x27	; 39
     8e6:	31 e0       	ldi	r19, 0x01	; 1
     8e8:	48 e0       	ldi	r20, 0x08	; 8
     8ea:	50 e0       	ldi	r21, 0x00	; 0
     8ec:	61 e0       	ldi	r22, 0x01	; 1
     8ee:	70 e0       	ldi	r23, 0x00	; 0
     8f0:	82 e9       	ldi	r24, 0x92	; 146
     8f2:	91 e0       	ldi	r25, 0x01	; 1
     8f4:	e7 c5       	rjmp	.+3022   	; 0x14c4 <fwrite>
     8f6:	08 95       	ret

000008f8 <menu_init_menu>:
     8f8:	cf 92       	push	r12
     8fa:	df 92       	push	r13
     8fc:	ef 92       	push	r14
     8fe:	ff 92       	push	r15
     900:	0f 93       	push	r16
     902:	1f 93       	push	r17
     904:	cf 93       	push	r28
     906:	df 93       	push	r29
     908:	6c 01       	movw	r12, r24
     90a:	7b 01       	movw	r14, r22
     90c:	8a 01       	movw	r16, r20
     90e:	80 91 f2 02 	lds	r24, 0x02F2
     912:	90 91 f3 02 	lds	r25, 0x02F3
     916:	68 17       	cp	r22, r24
     918:	79 07       	cpc	r23, r25
     91a:	c9 f0       	breq	.+50     	; 0x94e <menu_init_menu+0x56>
     91c:	fb 01       	movw	r30, r22
     91e:	84 a1       	ldd	r24, Z+36	; 0x24
     920:	95 a1       	ldd	r25, Z+37	; 0x25
     922:	89 2b       	or	r24, r25
     924:	a1 f0       	breq	.+40     	; 0x94e <menu_init_menu+0x56>
     926:	ff 92       	push	r15
     928:	6f 93       	push	r22
     92a:	8b e9       	ldi	r24, 0x9B	; 155
     92c:	91 e0       	ldi	r25, 0x01	; 1
     92e:	9f 93       	push	r25
     930:	8f 93       	push	r24
     932:	87 e2       	ldi	r24, 0x27	; 39
     934:	91 e0       	ldi	r25, 0x01	; 1
     936:	9f 93       	push	r25
     938:	8f 93       	push	r24
     93a:	83 d5       	rcall	.+2822   	; 0x1442 <fprintf>
     93c:	0f 90       	pop	r0
     93e:	0f 90       	pop	r0
     940:	0f 90       	pop	r0
     942:	0f 90       	pop	r0
     944:	0f 90       	pop	r0
     946:	0f 90       	pop	r0
     948:	80 e0       	ldi	r24, 0x00	; 0
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	43 c0       	rjmp	.+134    	; 0x9d4 <menu_init_menu+0xdc>
     94e:	8a e2       	ldi	r24, 0x2A	; 42
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	41 d4       	rcall	.+2178   	; 0x11d6 <malloc>
     954:	ec 01       	movw	r28, r24
     956:	fc 01       	movw	r30, r24
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	11 92       	st	Z+, r1
     95c:	8f 5f       	subi	r24, 0xFF	; 255
     95e:	88 31       	cpi	r24, 0x18	; 24
     960:	e1 f7       	brne	.-8      	; 0x95a <menu_init_menu+0x62>
     962:	47 e1       	ldi	r20, 0x17	; 23
     964:	50 e0       	ldi	r21, 0x00	; 0
     966:	b6 01       	movw	r22, r12
     968:	ce 01       	movw	r24, r28
     96a:	5c d5       	rcall	.+2744   	; 0x1424 <strncpy>
     96c:	fe 01       	movw	r30, r28
     96e:	87 e0       	ldi	r24, 0x07	; 7
     970:	11 8e       	std	Z+25, r1	; 0x19
     972:	10 8e       	std	Z+24, r1	; 0x18
     974:	81 50       	subi	r24, 0x01	; 1
     976:	32 96       	adiw	r30, 0x02	; 2
     978:	81 11       	cpse	r24, r1
     97a:	fa cf       	rjmp	.-12     	; 0x970 <menu_init_menu+0x78>
     97c:	e1 14       	cp	r14, r1
     97e:	f1 04       	cpc	r15, r1
     980:	19 f4       	brne	.+6      	; 0x988 <menu_init_menu+0x90>
     982:	df a3       	std	Y+39, r29	; 0x27
     984:	ce a3       	std	Y+38, r28	; 0x26
     986:	22 c0       	rjmp	.+68     	; 0x9cc <menu_init_menu+0xd4>
     988:	ff a2       	std	Y+39, r15	; 0x27
     98a:	ee a2       	std	Y+38, r14	; 0x26
     98c:	f7 01       	movw	r30, r14
     98e:	80 8d       	ldd	r24, Z+24	; 0x18
     990:	91 8d       	ldd	r25, Z+25	; 0x19
     992:	89 2b       	or	r24, r25
     994:	41 f0       	breq	.+16     	; 0x9a6 <menu_init_menu+0xae>
     996:	21 e0       	ldi	r18, 0x01	; 1
     998:	30 e0       	ldi	r19, 0x00	; 0
     99a:	a9 01       	movw	r20, r18
     99c:	82 8d       	ldd	r24, Z+26	; 0x1a
     99e:	93 8d       	ldd	r25, Z+27	; 0x1b
     9a0:	89 2b       	or	r24, r25
     9a2:	71 f4       	brne	.+28     	; 0x9c0 <menu_init_menu+0xc8>
     9a4:	02 c0       	rjmp	.+4      	; 0x9aa <menu_init_menu+0xb2>
     9a6:	40 e0       	ldi	r20, 0x00	; 0
     9a8:	50 e0       	ldi	r21, 0x00	; 0
     9aa:	44 5f       	subi	r20, 0xF4	; 244
     9ac:	5f 4f       	sbci	r21, 0xFF	; 255
     9ae:	ca 01       	movw	r24, r20
     9b0:	88 0f       	add	r24, r24
     9b2:	99 1f       	adc	r25, r25
     9b4:	f7 01       	movw	r30, r14
     9b6:	e8 0f       	add	r30, r24
     9b8:	f9 1f       	adc	r31, r25
     9ba:	d1 83       	std	Z+1, r29	; 0x01
     9bc:	c0 83       	st	Z, r28
     9be:	06 c0       	rjmp	.+12     	; 0x9cc <menu_init_menu+0xd4>
     9c0:	2f 5f       	subi	r18, 0xFF	; 255
     9c2:	3f 4f       	sbci	r19, 0xFF	; 255
     9c4:	32 96       	adiw	r30, 0x02	; 2
     9c6:	27 30       	cpi	r18, 0x07	; 7
     9c8:	31 05       	cpc	r19, r1
     9ca:	39 f7       	brne	.-50     	; 0x99a <menu_init_menu+0xa2>
     9cc:	19 a7       	std	Y+41, r17	; 0x29
     9ce:	08 a7       	std	Y+40, r16	; 0x28
     9d0:	8c 2f       	mov	r24, r28
     9d2:	9d 2f       	mov	r25, r29
     9d4:	df 91       	pop	r29
     9d6:	cf 91       	pop	r28
     9d8:	1f 91       	pop	r17
     9da:	0f 91       	pop	r16
     9dc:	ff 90       	pop	r15
     9de:	ef 90       	pop	r14
     9e0:	df 90       	pop	r13
     9e2:	cf 90       	pop	r12
     9e4:	08 95       	ret

000009e6 <menu_init>:
     9e6:	cf 93       	push	r28
     9e8:	df 93       	push	r29
     9ea:	68 de       	rcall	.-816    	; 0x6bc <joystick_init>
     9ec:	60 91 f2 02 	lds	r22, 0x02F2
     9f0:	70 91 f3 02 	lds	r23, 0x02F3
     9f4:	42 e7       	ldi	r20, 0x72	; 114
     9f6:	54 e0       	ldi	r21, 0x04	; 4
     9f8:	8f ea       	ldi	r24, 0xAF	; 175
     9fa:	91 e0       	ldi	r25, 0x01	; 1
     9fc:	7d df       	rcall	.-262    	; 0x8f8 <menu_init_menu>
     9fe:	90 93 f3 02 	sts	0x02F3, r25
     a02:	80 93 f2 02 	sts	0x02F2, r24
     a06:	40 ed       	ldi	r20, 0xD0	; 208
     a08:	52 e0       	ldi	r21, 0x02	; 2
     a0a:	bc 01       	movw	r22, r24
     a0c:	84 eb       	ldi	r24, 0xB4	; 180
     a0e:	91 e0       	ldi	r25, 0x01	; 1
     a10:	73 df       	rcall	.-282    	; 0x8f8 <menu_init_menu>
     a12:	60 91 f2 02 	lds	r22, 0x02F2
     a16:	70 91 f3 02 	lds	r23, 0x02F3
     a1a:	42 e7       	ldi	r20, 0x72	; 114
     a1c:	54 e0       	ldi	r21, 0x04	; 4
     a1e:	8a eb       	ldi	r24, 0xBA	; 186
     a20:	91 e0       	ldi	r25, 0x01	; 1
     a22:	6a df       	rcall	.-300    	; 0x8f8 <menu_init_menu>
     a24:	60 91 f2 02 	lds	r22, 0x02F2
     a28:	70 91 f3 02 	lds	r23, 0x02F3
     a2c:	42 e7       	ldi	r20, 0x72	; 114
     a2e:	54 e0       	ldi	r21, 0x04	; 4
     a30:	85 ec       	ldi	r24, 0xC5	; 197
     a32:	91 e0       	ldi	r25, 0x01	; 1
     a34:	61 df       	rcall	.-318    	; 0x8f8 <menu_init_menu>
     a36:	60 91 f2 02 	lds	r22, 0x02F2
     a3a:	70 91 f3 02 	lds	r23, 0x02F3
     a3e:	42 e7       	ldi	r20, 0x72	; 114
     a40:	54 e0       	ldi	r21, 0x04	; 4
     a42:	8f ec       	ldi	r24, 0xCF	; 207
     a44:	91 e0       	ldi	r25, 0x01	; 1
     a46:	58 df       	rcall	.-336    	; 0x8f8 <menu_init_menu>
     a48:	ec 01       	movw	r28, r24
     a4a:	42 e7       	ldi	r20, 0x72	; 114
     a4c:	54 e0       	ldi	r21, 0x04	; 4
     a4e:	bc 01       	movw	r22, r24
     a50:	85 ed       	ldi	r24, 0xD5	; 213
     a52:	91 e0       	ldi	r25, 0x01	; 1
     a54:	51 df       	rcall	.-350    	; 0x8f8 <menu_init_menu>
     a56:	42 e7       	ldi	r20, 0x72	; 114
     a58:	54 e0       	ldi	r21, 0x04	; 4
     a5a:	be 01       	movw	r22, r28
     a5c:	87 ee       	ldi	r24, 0xE7	; 231
     a5e:	91 e0       	ldi	r25, 0x01	; 1
     a60:	4b df       	rcall	.-362    	; 0x8f8 <menu_init_menu>
     a62:	42 e7       	ldi	r20, 0x72	; 114
     a64:	54 e0       	ldi	r21, 0x04	; 4
     a66:	be 01       	movw	r22, r28
     a68:	84 ef       	ldi	r24, 0xF4	; 244
     a6a:	91 e0       	ldi	r25, 0x01	; 1
     a6c:	45 df       	rcall	.-374    	; 0x8f8 <menu_init_menu>
     a6e:	42 e7       	ldi	r20, 0x72	; 114
     a70:	54 e0       	ldi	r21, 0x04	; 4
     a72:	be 01       	movw	r22, r28
     a74:	8f ef       	ldi	r24, 0xFF	; 255
     a76:	91 e0       	ldi	r25, 0x01	; 1
     a78:	3f df       	rcall	.-386    	; 0x8f8 <menu_init_menu>
     a7a:	80 91 f2 02 	lds	r24, 0x02F2
     a7e:	90 91 f3 02 	lds	r25, 0x02F3
     a82:	90 93 f1 02 	sts	0x02F1, r25
     a86:	80 93 f0 02 	sts	0x02F0, r24
     a8a:	df 91       	pop	r29
     a8c:	cf 91       	pop	r28
     a8e:	08 95       	ret

00000a90 <menu_print_current>:
     a90:	cf 92       	push	r12
     a92:	df 92       	push	r13
     a94:	ef 92       	push	r14
     a96:	ff 92       	push	r15
     a98:	0f 93       	push	r16
     a9a:	1f 93       	push	r17
     a9c:	cf 93       	push	r28
     a9e:	df 93       	push	r29
     aa0:	23 d1       	rcall	.+582    	; 0xce8 <oled_home>
     aa2:	80 91 f1 02 	lds	r24, 0x02F1
     aa6:	8f 93       	push	r24
     aa8:	80 91 f0 02 	lds	r24, 0x02F0
     aac:	8f 93       	push	r24
     aae:	8b ea       	ldi	r24, 0xAB	; 171
     ab0:	91 e0       	ldi	r25, 0x01	; 1
     ab2:	9f 93       	push	r25
     ab4:	8f 93       	push	r24
     ab6:	87 e0       	ldi	r24, 0x07	; 7
     ab8:	91 e0       	ldi	r25, 0x01	; 1
     aba:	9f 93       	push	r25
     abc:	8f 93       	push	r24
     abe:	c1 d4       	rcall	.+2434   	; 0x1442 <fprintf>
     ac0:	0f 90       	pop	r0
     ac2:	0f 90       	pop	r0
     ac4:	0f 90       	pop	r0
     ac6:	0f 90       	pop	r0
     ac8:	0f 90       	pop	r0
     aca:	0f 90       	pop	r0
     acc:	c0 e0       	ldi	r28, 0x00	; 0
     ace:	d0 e0       	ldi	r29, 0x00	; 0
     ad0:	0f 2e       	mov	r0, r31
     ad2:	fb ea       	ldi	r31, 0xAB	; 171
     ad4:	ef 2e       	mov	r14, r31
     ad6:	f1 e0       	ldi	r31, 0x01	; 1
     ad8:	ff 2e       	mov	r15, r31
     ada:	f0 2d       	mov	r31, r0
     adc:	07 e0       	ldi	r16, 0x07	; 7
     ade:	11 e0       	ldi	r17, 0x01	; 1
     ae0:	6e 01       	movw	r12, r28
     ae2:	80 91 f0 02 	lds	r24, 0x02F0
     ae6:	90 91 f1 02 	lds	r25, 0x02F1
     aea:	de 01       	movw	r26, r28
     aec:	1c 96       	adiw	r26, 0x0c	; 12
     aee:	aa 0f       	add	r26, r26
     af0:	bb 1f       	adc	r27, r27
     af2:	a8 0f       	add	r26, r24
     af4:	b9 1f       	adc	r27, r25
     af6:	8d 91       	ld	r24, X+
     af8:	9c 91       	ld	r25, X
     afa:	89 2b       	or	r24, r25
     afc:	79 f1       	breq	.+94     	; 0xb5c <menu_print_current+0xcc>
     afe:	80 91 ef 02 	lds	r24, 0x02EF
     b02:	c8 13       	cpse	r28, r24
     b04:	09 c0       	rjmp	.+18     	; 0xb18 <menu_print_current+0x88>
     b06:	98 01       	movw	r18, r16
     b08:	42 e0       	ldi	r20, 0x02	; 2
     b0a:	50 e0       	ldi	r21, 0x00	; 0
     b0c:	61 e0       	ldi	r22, 0x01	; 1
     b0e:	70 e0       	ldi	r23, 0x00	; 0
     b10:	84 e1       	ldi	r24, 0x14	; 20
     b12:	92 e0       	ldi	r25, 0x02	; 2
     b14:	d7 d4       	rcall	.+2478   	; 0x14c4 <fwrite>
     b16:	08 c0       	rjmp	.+16     	; 0xb28 <menu_print_current+0x98>
     b18:	98 01       	movw	r18, r16
     b1a:	42 e0       	ldi	r20, 0x02	; 2
     b1c:	50 e0       	ldi	r21, 0x00	; 0
     b1e:	61 e0       	ldi	r22, 0x01	; 1
     b20:	70 e0       	ldi	r23, 0x00	; 0
     b22:	87 e1       	ldi	r24, 0x17	; 23
     b24:	92 e0       	ldi	r25, 0x02	; 2
     b26:	ce d4       	rcall	.+2460   	; 0x14c4 <fwrite>
     b28:	e0 91 f0 02 	lds	r30, 0x02F0
     b2c:	f0 91 f1 02 	lds	r31, 0x02F1
     b30:	8c e0       	ldi	r24, 0x0C	; 12
     b32:	c8 0e       	add	r12, r24
     b34:	d1 1c       	adc	r13, r1
     b36:	cc 0c       	add	r12, r12
     b38:	dd 1c       	adc	r13, r13
     b3a:	ec 0d       	add	r30, r12
     b3c:	fd 1d       	adc	r31, r13
     b3e:	81 81       	ldd	r24, Z+1	; 0x01
     b40:	8f 93       	push	r24
     b42:	80 81       	ld	r24, Z
     b44:	8f 93       	push	r24
     b46:	ff 92       	push	r15
     b48:	ef 92       	push	r14
     b4a:	1f 93       	push	r17
     b4c:	0f 93       	push	r16
     b4e:	79 d4       	rcall	.+2290   	; 0x1442 <fprintf>
     b50:	0f 90       	pop	r0
     b52:	0f 90       	pop	r0
     b54:	0f 90       	pop	r0
     b56:	0f 90       	pop	r0
     b58:	0f 90       	pop	r0
     b5a:	0f 90       	pop	r0
     b5c:	21 96       	adiw	r28, 0x01	; 1
     b5e:	c7 30       	cpi	r28, 0x07	; 7
     b60:	d1 05       	cpc	r29, r1
     b62:	09 f0       	breq	.+2      	; 0xb66 <menu_print_current+0xd6>
     b64:	bd cf       	rjmp	.-134    	; 0xae0 <menu_print_current+0x50>
     b66:	df 91       	pop	r29
     b68:	cf 91       	pop	r28
     b6a:	1f 91       	pop	r17
     b6c:	0f 91       	pop	r16
     b6e:	ff 90       	pop	r15
     b70:	ef 90       	pop	r14
     b72:	df 90       	pop	r13
     b74:	cf 90       	pop	r12
     b76:	08 95       	ret

00000b78 <menu_move_cursor>:
     b78:	1f 93       	push	r17
     b7a:	cf 93       	push	r28
     b7c:	df 93       	push	r29
     b7e:	10 91 ef 02 	lds	r17, 0x02EF
     b82:	18 0f       	add	r17, r24
     b84:	c1 2f       	mov	r28, r17
     b86:	d0 e0       	ldi	r29, 0x00	; 0
     b88:	1f 92       	push	r1
     b8a:	1f 93       	push	r17
     b8c:	2a e1       	ldi	r18, 0x1A	; 26
     b8e:	32 e0       	ldi	r19, 0x02	; 2
     b90:	3f 93       	push	r19
     b92:	2f 93       	push	r18
     b94:	27 e2       	ldi	r18, 0x27	; 39
     b96:	31 e0       	ldi	r19, 0x01	; 1
     b98:	3f 93       	push	r19
     b9a:	2f 93       	push	r18
     b9c:	52 d4       	rcall	.+2212   	; 0x1442 <fprintf>
     b9e:	20 91 f0 02 	lds	r18, 0x02F0
     ba2:	30 91 f1 02 	lds	r19, 0x02F1
     ba6:	2c 96       	adiw	r28, 0x0c	; 12
     ba8:	cc 0f       	add	r28, r28
     baa:	dd 1f       	adc	r29, r29
     bac:	c2 0f       	add	r28, r18
     bae:	d3 1f       	adc	r29, r19
     bb0:	0f 90       	pop	r0
     bb2:	0f 90       	pop	r0
     bb4:	0f 90       	pop	r0
     bb6:	0f 90       	pop	r0
     bb8:	0f 90       	pop	r0
     bba:	0f 90       	pop	r0
     bbc:	28 81       	ld	r18, Y
     bbe:	39 81       	ldd	r19, Y+1	; 0x01
     bc0:	23 2b       	or	r18, r19
     bc2:	21 f0       	breq	.+8      	; 0xbcc <menu_move_cursor+0x54>
     bc4:	17 30       	cpi	r17, 0x07	; 7
     bc6:	10 f4       	brcc	.+4      	; 0xbcc <menu_move_cursor+0x54>
     bc8:	10 93 ef 02 	sts	0x02EF, r17
     bcc:	df 91       	pop	r29
     bce:	cf 91       	pop	r28
     bd0:	1f 91       	pop	r17
     bd2:	08 95       	ret

00000bd4 <menu_enter_current>:



void menu_enter_current(void)
{
     bd4:	cf 93       	push	r28
     bd6:	df 93       	push	r29
	oled_fill(0x00); // needed if next submenu has fewer menus than current
     bd8:	80 e0       	ldi	r24, 0x00	; 0
     bda:	1c d1       	rcall	.+568    	; 0xe14 <oled_fill>
	
	// check if current choice is valid and that current choice has any children
	if (current->submenus[subchoice] != NULL && current->submenus[subchoice]->submenus[0] != NULL){
     bdc:	80 91 f0 02 	lds	r24, 0x02F0
     be0:	90 91 f1 02 	lds	r25, 0x02F1
     be4:	e0 91 ef 02 	lds	r30, 0x02EF
     be8:	f0 e0       	ldi	r31, 0x00	; 0
     bea:	3c 96       	adiw	r30, 0x0c	; 12
     bec:	ee 0f       	add	r30, r30
     bee:	ff 1f       	adc	r31, r31
     bf0:	e8 0f       	add	r30, r24
     bf2:	f9 1f       	adc	r31, r25
     bf4:	01 90       	ld	r0, Z+
     bf6:	f0 81       	ld	r31, Z
     bf8:	e0 2d       	mov	r30, r0
     bfa:	30 97       	sbiw	r30, 0x00	; 0
     bfc:	09 f4       	brne	.+2      	; 0xc00 <menu_enter_current+0x2c>
     bfe:	48 c0       	rjmp	.+144    	; 0xc90 <menu_enter_current+0xbc>
     c00:	80 8d       	ldd	r24, Z+24	; 0x18
     c02:	91 8d       	ldd	r25, Z+25	; 0x19
     c04:	89 2b       	or	r24, r25
     c06:	09 f4       	brne	.+2      	; 0xc0a <menu_enter_current+0x36>
     c08:	43 c0       	rjmp	.+134    	; 0xc90 <menu_enter_current+0xbc>
		//fprintf(&uart_out, "current: %p\n", current);
		//fprintf(&uart_out, "next:    %p\n", current->submenus[subchoice]);
	
		fprintf(&uart_out, "nothing: \t%p\n", menu_action_nothing);
     c0a:	82 e7       	ldi	r24, 0x72	; 114
     c0c:	94 e0       	ldi	r25, 0x04	; 4
     c0e:	9f 93       	push	r25
     c10:	8f 93       	push	r24
     c12:	8d e2       	ldi	r24, 0x2D	; 45
     c14:	92 e0       	ldi	r25, 0x02	; 2
     c16:	9f 93       	push	r25
     c18:	8f 93       	push	r24
     c1a:	c7 e2       	ldi	r28, 0x27	; 39
     c1c:	d1 e0       	ldi	r29, 0x01	; 1
     c1e:	df 93       	push	r29
     c20:	cf 93       	push	r28
     c22:	0f d4       	rcall	.+2078   	; 0x1442 <fprintf>
		fprintf(&uart_out, "action : \t\t%p\n", (*(current->submenus[subchoice]->action)));
     c24:	80 91 f0 02 	lds	r24, 0x02F0
     c28:	90 91 f1 02 	lds	r25, 0x02F1
     c2c:	e0 91 ef 02 	lds	r30, 0x02EF
     c30:	f0 e0       	ldi	r31, 0x00	; 0
     c32:	3c 96       	adiw	r30, 0x0c	; 12
     c34:	ee 0f       	add	r30, r30
     c36:	ff 1f       	adc	r31, r31
     c38:	e8 0f       	add	r30, r24
     c3a:	f9 1f       	adc	r31, r25
     c3c:	01 90       	ld	r0, Z+
     c3e:	f0 81       	ld	r31, Z
     c40:	e0 2d       	mov	r30, r0
     c42:	81 a5       	ldd	r24, Z+41	; 0x29
     c44:	8f 93       	push	r24
     c46:	80 a5       	ldd	r24, Z+40	; 0x28
     c48:	8f 93       	push	r24
     c4a:	8b e3       	ldi	r24, 0x3B	; 59
     c4c:	92 e0       	ldi	r25, 0x02	; 2
     c4e:	9f 93       	push	r25
     c50:	8f 93       	push	r24
     c52:	df 93       	push	r29
     c54:	cf 93       	push	r28
     c56:	f5 d3       	rcall	.+2026   	; 0x1442 <fprintf>
		
		current = current->submenus[subchoice];
     c58:	80 91 f0 02 	lds	r24, 0x02F0
     c5c:	90 91 f1 02 	lds	r25, 0x02F1
     c60:	e0 91 ef 02 	lds	r30, 0x02EF
     c64:	f0 e0       	ldi	r31, 0x00	; 0
     c66:	3c 96       	adiw	r30, 0x0c	; 12
     c68:	ee 0f       	add	r30, r30
     c6a:	ff 1f       	adc	r31, r31
     c6c:	e8 0f       	add	r30, r24
     c6e:	f9 1f       	adc	r31, r25
     c70:	80 81       	ld	r24, Z
     c72:	91 81       	ldd	r25, Z+1	; 0x01
     c74:	90 93 f1 02 	sts	0x02F1, r25
     c78:	80 93 f0 02 	sts	0x02F0, r24
		subchoice = 0;
     c7c:	10 92 ef 02 	sts	0x02EF, r1
     c80:	8d b7       	in	r24, 0x3d	; 61
     c82:	9e b7       	in	r25, 0x3e	; 62
     c84:	0c 96       	adiw	r24, 0x0c	; 12
     c86:	0f b6       	in	r0, 0x3f	; 63
     c88:	f8 94       	cli
     c8a:	9e bf       	out	0x3e, r25	; 62
     c8c:	0f be       	out	0x3f, r0	; 63
     c8e:	8d bf       	out	0x3d, r24	; 61
	}
	
	current->submenus[subchoice]->action();
     c90:	80 91 f0 02 	lds	r24, 0x02F0
     c94:	90 91 f1 02 	lds	r25, 0x02F1
     c98:	e0 91 ef 02 	lds	r30, 0x02EF
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	3c 96       	adiw	r30, 0x0c	; 12
     ca0:	ee 0f       	add	r30, r30
     ca2:	ff 1f       	adc	r31, r31
     ca4:	e8 0f       	add	r30, r24
     ca6:	f9 1f       	adc	r31, r25
     ca8:	01 90       	ld	r0, Z+
     caa:	f0 81       	ld	r31, Z
     cac:	e0 2d       	mov	r30, r0
     cae:	00 a4       	ldd	r0, Z+40	; 0x28
     cb0:	f1 a5       	ldd	r31, Z+41	; 0x29
     cb2:	e0 2d       	mov	r30, r0
     cb4:	09 95       	icall
}
     cb6:	df 91       	pop	r29
     cb8:	cf 91       	pop	r28
     cba:	08 95       	ret

00000cbc <menu_enter_parent>:


void menu_enter_parent(void){
	oled_fill(0x00);
     cbc:	80 e0       	ldi	r24, 0x00	; 0
     cbe:	aa d0       	rcall	.+340    	; 0xe14 <oled_fill>
	
	current = current->parent;
     cc0:	e0 91 f0 02 	lds	r30, 0x02F0
     cc4:	f0 91 f1 02 	lds	r31, 0x02F1
     cc8:	86 a1       	ldd	r24, Z+38	; 0x26
     cca:	97 a1       	ldd	r25, Z+39	; 0x27
     ccc:	90 93 f1 02 	sts	0x02F1, r25
     cd0:	80 93 f0 02 	sts	0x02F0, r24
     cd4:	08 95       	ret

00000cd6 <oled_autorefresh_init>:
/// Reset oled display by initializing, clearing screen and setting cursor to home.
void oled_reset(){
	/// \note This is exexctly the same as oled_init except oled_fill and oled_home are called twice
	oled_init(); 
	oled_fill(0);
	oled_home();
     cd6:	89 b7       	in	r24, 0x39	; 57
     cd8:	82 60       	ori	r24, 0x02	; 2
     cda:	89 bf       	out	0x39, r24	; 57
     cdc:	83 b7       	in	r24, 0x33	; 51
     cde:	85 60       	ori	r24, 0x05	; 5
     ce0:	83 bf       	out	0x33, r24	; 51
     ce2:	87 e2       	ldi	r24, 0x27	; 39
     ce4:	81 bf       	out	0x31, r24	; 49
     ce6:	08 95       	ret

00000ce8 <oled_home>:
     ce8:	10 92 f5 02 	sts	0x02F5, r1
     cec:	10 92 f4 02 	sts	0x02F4, r1
     cf0:	08 95       	ret

00000cf2 <oled_newline>:
     cf2:	10 92 f5 02 	sts	0x02F5, r1
     cf6:	80 91 f4 02 	lds	r24, 0x02F4
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	01 96       	adiw	r24, 0x01	; 1
     cfe:	87 70       	andi	r24, 0x07	; 7
     d00:	90 78       	andi	r25, 0x80	; 128
     d02:	80 93 f4 02 	sts	0x02F4, r24
     d06:	08 95       	ret

00000d08 <oled_goto_nextpos>:
     d08:	20 91 f5 02 	lds	r18, 0x02F5
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	2f 5f       	subi	r18, 0xFF	; 255
     d10:	3f 4f       	sbci	r19, 0xFF	; 255
     d12:	2f 77       	andi	r18, 0x7F	; 127
     d14:	30 78       	andi	r19, 0x80	; 128
     d16:	20 93 f5 02 	sts	0x02F5, r18
     d1a:	80 91 f4 02 	lds	r24, 0x02F4
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	41 e0       	ldi	r20, 0x01	; 1
     d22:	50 e0       	ldi	r21, 0x00	; 0
     d24:	22 23       	and	r18, r18
     d26:	11 f0       	breq	.+4      	; 0xd2c <oled_goto_nextpos+0x24>
     d28:	40 e0       	ldi	r20, 0x00	; 0
     d2a:	50 e0       	ldi	r21, 0x00	; 0
     d2c:	84 0f       	add	r24, r20
     d2e:	95 1f       	adc	r25, r21
     d30:	87 70       	andi	r24, 0x07	; 7
     d32:	90 78       	andi	r25, 0x80	; 128
     d34:	99 23       	and	r25, r25
     d36:	24 f4       	brge	.+8      	; 0xd40 <oled_goto_nextpos+0x38>
     d38:	01 97       	sbiw	r24, 0x01	; 1
     d3a:	88 6f       	ori	r24, 0xF8	; 248
     d3c:	9f 6f       	ori	r25, 0xFF	; 255
     d3e:	01 96       	adiw	r24, 0x01	; 1
     d40:	80 93 f4 02 	sts	0x02F4, r24
     d44:	08 95       	ret

00000d46 <oled_buffchar>:
     d46:	0f 93       	push	r16
     d48:	1f 93       	push	r17
     d4a:	cf 93       	push	r28
     d4c:	df 93       	push	r29
     d4e:	08 2f       	mov	r16, r24
     d50:	80 32       	cpi	r24, 0x20	; 32
     d52:	90 f1       	brcs	.+100    	; 0xdb8 <oled_buffchar+0x72>
     d54:	20 91 f5 02 	lds	r18, 0x02F5
     d58:	22 23       	and	r18, r18
     d5a:	74 f1       	brlt	.+92     	; 0xdb8 <oled_buffchar+0x72>
     d5c:	80 91 f4 02 	lds	r24, 0x02F4
     d60:	88 30       	cpi	r24, 0x08	; 8
     d62:	50 f5       	brcc	.+84     	; 0xdb8 <oled_buffchar+0x72>
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	2c 5f       	subi	r18, 0xFC	; 252
     d68:	3f 4f       	sbci	r19, 0xFF	; 255
     d6a:	20 38       	cpi	r18, 0x80	; 128
     d6c:	31 05       	cpc	r19, r1
     d6e:	6c f1       	brlt	.+90     	; 0xdca <oled_buffchar+0x84>
     d70:	c0 df       	rcall	.-128    	; 0xcf2 <oled_newline>
     d72:	2b c0       	rjmp	.+86     	; 0xdca <oled_buffchar+0x84>
     d74:	80 91 f4 02 	lds	r24, 0x02F4
     d78:	a0 91 f5 02 	lds	r26, 0x02F5
     d7c:	b0 e0       	ldi	r27, 0x00	; 0
     d7e:	90 e8       	ldi	r25, 0x80	; 128
     d80:	89 9f       	mul	r24, r25
     d82:	a0 0d       	add	r26, r0
     d84:	b1 1d       	adc	r27, r1
     d86:	11 24       	eor	r1, r1
     d88:	80 91 15 01 	lds	r24, 0x0115
     d8c:	90 91 16 01 	lds	r25, 0x0116
     d90:	a8 0f       	add	r26, r24
     d92:	b9 1f       	adc	r27, r25
     d94:	ce 01       	movw	r24, r28
     d96:	80 0f       	add	r24, r16
     d98:	91 1f       	adc	r25, r17
     d9a:	e0 91 17 01 	lds	r30, 0x0117
     d9e:	f0 91 18 01 	lds	r31, 0x0118
     da2:	e8 0f       	add	r30, r24
     da4:	f9 1f       	adc	r31, r25
     da6:	85 91       	lpm	r24, Z+
     da8:	94 91       	lpm	r25, Z
     daa:	8c 93       	st	X, r24
     dac:	ad df       	rcall	.-166    	; 0xd08 <oled_goto_nextpos>
     dae:	21 96       	adiw	r28, 0x01	; 1
     db0:	c4 30       	cpi	r28, 0x04	; 4
     db2:	d1 05       	cpc	r29, r1
     db4:	f9 f6       	brne	.-66     	; 0xd74 <oled_buffchar+0x2e>
     db6:	13 c0       	rjmp	.+38     	; 0xdde <oled_buffchar+0x98>
     db8:	0a 30       	cpi	r16, 0x0A	; 10
     dba:	11 f4       	brne	.+4      	; 0xdc0 <oled_buffchar+0x7a>
     dbc:	9a df       	rcall	.-204    	; 0xcf2 <oled_newline>
     dbe:	21 c0       	rjmp	.+66     	; 0xe02 <oled_buffchar+0xbc>
     dc0:	0d 30       	cpi	r16, 0x0D	; 13
     dc2:	f9 f4       	brne	.+62     	; 0xe02 <oled_buffchar+0xbc>
     dc4:	10 92 f5 02 	sts	0x02F5, r1
     dc8:	1c c0       	rjmp	.+56     	; 0xe02 <oled_buffchar+0xbc>
     dca:	10 e0       	ldi	r17, 0x00	; 0
     dcc:	00 52       	subi	r16, 0x20	; 32
     dce:	11 09       	sbc	r17, r1
     dd0:	00 0f       	add	r16, r16
     dd2:	11 1f       	adc	r17, r17
     dd4:	00 0f       	add	r16, r16
     dd6:	11 1f       	adc	r17, r17
     dd8:	c0 e0       	ldi	r28, 0x00	; 0
     dda:	d0 e0       	ldi	r29, 0x00	; 0
     ddc:	cb cf       	rjmp	.-106    	; 0xd74 <oled_buffchar+0x2e>
     dde:	80 91 f4 02 	lds	r24, 0x02F4
     de2:	e0 91 f5 02 	lds	r30, 0x02F5
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	90 e8       	ldi	r25, 0x80	; 128
     dea:	89 9f       	mul	r24, r25
     dec:	e0 0d       	add	r30, r0
     dee:	f1 1d       	adc	r31, r1
     df0:	11 24       	eor	r1, r1
     df2:	80 91 15 01 	lds	r24, 0x0115
     df6:	90 91 16 01 	lds	r25, 0x0116
     dfa:	e8 0f       	add	r30, r24
     dfc:	f9 1f       	adc	r31, r25
     dfe:	10 82       	st	Z, r1
     e00:	83 df       	rcall	.-250    	; 0xd08 <oled_goto_nextpos>
     e02:	df 91       	pop	r29
     e04:	cf 91       	pop	r28
     e06:	1f 91       	pop	r17
     e08:	0f 91       	pop	r16
     e0a:	08 95       	ret

00000e0c <oled_putchar>:
     e0c:	9c df       	rcall	.-200    	; 0xd46 <oled_buffchar>
     e0e:	80 e0       	ldi	r24, 0x00	; 0
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	08 95       	ret

00000e14 <oled_fill>:
     e14:	00 c0       	rjmp	.+0      	; 0xe16 <oled_fill+0x2>
     e16:	00 c0       	rjmp	.+0      	; 0xe18 <oled_fill+0x4>
     e18:	00 00       	nop
     e1a:	91 e2       	ldi	r25, 0x21	; 33
     e1c:	90 93 00 10 	sts	0x1000, r25
     e20:	00 c0       	rjmp	.+0      	; 0xe22 <oled_fill+0xe>
     e22:	00 c0       	rjmp	.+0      	; 0xe24 <oled_fill+0x10>
     e24:	00 00       	nop
     e26:	10 92 00 10 	sts	0x1000, r1
     e2a:	00 c0       	rjmp	.+0      	; 0xe2c <oled_fill+0x18>
     e2c:	00 c0       	rjmp	.+0      	; 0xe2e <oled_fill+0x1a>
     e2e:	00 00       	nop
     e30:	9f e7       	ldi	r25, 0x7F	; 127
     e32:	90 93 00 10 	sts	0x1000, r25
     e36:	00 c0       	rjmp	.+0      	; 0xe38 <oled_fill+0x24>
     e38:	00 c0       	rjmp	.+0      	; 0xe3a <oled_fill+0x26>
     e3a:	00 00       	nop
     e3c:	92 e2       	ldi	r25, 0x22	; 34
     e3e:	90 93 00 10 	sts	0x1000, r25
     e42:	00 c0       	rjmp	.+0      	; 0xe44 <oled_fill+0x30>
     e44:	00 c0       	rjmp	.+0      	; 0xe46 <oled_fill+0x32>
     e46:	00 00       	nop
     e48:	10 92 00 10 	sts	0x1000, r1
     e4c:	00 c0       	rjmp	.+0      	; 0xe4e <oled_fill+0x3a>
     e4e:	00 c0       	rjmp	.+0      	; 0xe50 <oled_fill+0x3c>
     e50:	00 00       	nop
     e52:	97 e0       	ldi	r25, 0x07	; 7
     e54:	90 93 00 10 	sts	0x1000, r25
     e58:	60 e0       	ldi	r22, 0x00	; 0
     e5a:	70 e0       	ldi	r23, 0x00	; 0
     e5c:	a0 e0       	ldi	r26, 0x00	; 0
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	15 c0       	rjmp	.+42     	; 0xe8c <oled_fill+0x78>
     e62:	a9 01       	movw	r20, r18
     e64:	46 0f       	add	r20, r22
     e66:	57 1f       	adc	r21, r23
     e68:	e0 91 15 01 	lds	r30, 0x0115
     e6c:	f0 91 16 01 	lds	r31, 0x0116
     e70:	e4 0f       	add	r30, r20
     e72:	f5 1f       	adc	r31, r21
     e74:	80 83       	st	Z, r24
     e76:	2f 5f       	subi	r18, 0xFF	; 255
     e78:	3f 4f       	sbci	r19, 0xFF	; 255
     e7a:	20 38       	cpi	r18, 0x80	; 128
     e7c:	31 05       	cpc	r19, r1
     e7e:	89 f7       	brne	.-30     	; 0xe62 <oled_fill+0x4e>
     e80:	60 58       	subi	r22, 0x80	; 128
     e82:	7f 4f       	sbci	r23, 0xFF	; 255
     e84:	61 15       	cp	r22, r1
     e86:	24 e0       	ldi	r18, 0x04	; 4
     e88:	72 07       	cpc	r23, r18
     e8a:	19 f0       	breq	.+6      	; 0xe92 <oled_fill+0x7e>
     e8c:	2a 2f       	mov	r18, r26
     e8e:	39 2f       	mov	r19, r25
     e90:	e8 cf       	rjmp	.-48     	; 0xe62 <oled_fill+0x4e>
     e92:	08 95       	ret

00000e94 <oled_init>:
     e94:	f8 94       	cli
     e96:	00 c0       	rjmp	.+0      	; 0xe98 <oled_init+0x4>
     e98:	00 c0       	rjmp	.+0      	; 0xe9a <oled_init+0x6>
     e9a:	00 00       	nop
     e9c:	8e ea       	ldi	r24, 0xAE	; 174
     e9e:	80 93 00 10 	sts	0x1000, r24
     ea2:	00 c0       	rjmp	.+0      	; 0xea4 <oled_init+0x10>
     ea4:	00 c0       	rjmp	.+0      	; 0xea6 <oled_init+0x12>
     ea6:	00 00       	nop
     ea8:	81 ea       	ldi	r24, 0xA1	; 161
     eaa:	80 93 00 10 	sts	0x1000, r24
     eae:	00 c0       	rjmp	.+0      	; 0xeb0 <oled_init+0x1c>
     eb0:	00 c0       	rjmp	.+0      	; 0xeb2 <oled_init+0x1e>
     eb2:	00 00       	nop
     eb4:	8a ed       	ldi	r24, 0xDA	; 218
     eb6:	80 93 00 10 	sts	0x1000, r24
     eba:	00 c0       	rjmp	.+0      	; 0xebc <oled_init+0x28>
     ebc:	00 c0       	rjmp	.+0      	; 0xebe <oled_init+0x2a>
     ebe:	00 00       	nop
     ec0:	82 e1       	ldi	r24, 0x12	; 18
     ec2:	80 93 00 10 	sts	0x1000, r24
     ec6:	00 c0       	rjmp	.+0      	; 0xec8 <oled_init+0x34>
     ec8:	00 c0       	rjmp	.+0      	; 0xeca <oled_init+0x36>
     eca:	00 00       	nop
     ecc:	88 ec       	ldi	r24, 0xC8	; 200
     ece:	80 93 00 10 	sts	0x1000, r24
     ed2:	00 c0       	rjmp	.+0      	; 0xed4 <oled_init+0x40>
     ed4:	00 c0       	rjmp	.+0      	; 0xed6 <oled_init+0x42>
     ed6:	00 00       	nop
     ed8:	88 ea       	ldi	r24, 0xA8	; 168
     eda:	80 93 00 10 	sts	0x1000, r24
     ede:	00 c0       	rjmp	.+0      	; 0xee0 <oled_init+0x4c>
     ee0:	00 c0       	rjmp	.+0      	; 0xee2 <oled_init+0x4e>
     ee2:	00 00       	nop
     ee4:	8f e3       	ldi	r24, 0x3F	; 63
     ee6:	80 93 00 10 	sts	0x1000, r24
     eea:	00 c0       	rjmp	.+0      	; 0xeec <oled_init+0x58>
     eec:	00 c0       	rjmp	.+0      	; 0xeee <oled_init+0x5a>
     eee:	00 00       	nop
     ef0:	85 ed       	ldi	r24, 0xD5	; 213
     ef2:	80 93 00 10 	sts	0x1000, r24
     ef6:	00 c0       	rjmp	.+0      	; 0xef8 <oled_init+0x64>
     ef8:	00 c0       	rjmp	.+0      	; 0xefa <oled_init+0x66>
     efa:	00 00       	nop
     efc:	80 e8       	ldi	r24, 0x80	; 128
     efe:	80 93 00 10 	sts	0x1000, r24
     f02:	00 c0       	rjmp	.+0      	; 0xf04 <oled_init+0x70>
     f04:	00 c0       	rjmp	.+0      	; 0xf06 <oled_init+0x72>
     f06:	00 00       	nop
     f08:	81 e8       	ldi	r24, 0x81	; 129
     f0a:	80 93 00 10 	sts	0x1000, r24
     f0e:	00 c0       	rjmp	.+0      	; 0xf10 <oled_init+0x7c>
     f10:	00 c0       	rjmp	.+0      	; 0xf12 <oled_init+0x7e>
     f12:	00 00       	nop
     f14:	80 e5       	ldi	r24, 0x50	; 80
     f16:	80 93 00 10 	sts	0x1000, r24
     f1a:	00 c0       	rjmp	.+0      	; 0xf1c <oled_init+0x88>
     f1c:	00 c0       	rjmp	.+0      	; 0xf1e <oled_init+0x8a>
     f1e:	00 00       	nop
     f20:	89 ed       	ldi	r24, 0xD9	; 217
     f22:	80 93 00 10 	sts	0x1000, r24
     f26:	00 c0       	rjmp	.+0      	; 0xf28 <oled_init+0x94>
     f28:	00 c0       	rjmp	.+0      	; 0xf2a <oled_init+0x96>
     f2a:	00 00       	nop
     f2c:	81 e2       	ldi	r24, 0x21	; 33
     f2e:	80 93 00 10 	sts	0x1000, r24
     f32:	00 c0       	rjmp	.+0      	; 0xf34 <oled_init+0xa0>
     f34:	00 c0       	rjmp	.+0      	; 0xf36 <oled_init+0xa2>
     f36:	00 00       	nop
     f38:	80 e2       	ldi	r24, 0x20	; 32
     f3a:	80 93 00 10 	sts	0x1000, r24
     f3e:	00 c0       	rjmp	.+0      	; 0xf40 <oled_init+0xac>
     f40:	00 c0       	rjmp	.+0      	; 0xf42 <oled_init+0xae>
     f42:	00 00       	nop
     f44:	10 92 00 10 	sts	0x1000, r1
     f48:	00 c0       	rjmp	.+0      	; 0xf4a <oled_init+0xb6>
     f4a:	00 c0       	rjmp	.+0      	; 0xf4c <oled_init+0xb8>
     f4c:	00 00       	nop
     f4e:	8b ed       	ldi	r24, 0xDB	; 219
     f50:	80 93 00 10 	sts	0x1000, r24
     f54:	00 c0       	rjmp	.+0      	; 0xf56 <oled_init+0xc2>
     f56:	00 c0       	rjmp	.+0      	; 0xf58 <oled_init+0xc4>
     f58:	00 00       	nop
     f5a:	80 e3       	ldi	r24, 0x30	; 48
     f5c:	80 93 00 10 	sts	0x1000, r24
     f60:	00 c0       	rjmp	.+0      	; 0xf62 <oled_init+0xce>
     f62:	00 c0       	rjmp	.+0      	; 0xf64 <oled_init+0xd0>
     f64:	00 00       	nop
     f66:	8d ea       	ldi	r24, 0xAD	; 173
     f68:	80 93 00 10 	sts	0x1000, r24
     f6c:	00 c0       	rjmp	.+0      	; 0xf6e <oled_init+0xda>
     f6e:	00 c0       	rjmp	.+0      	; 0xf70 <oled_init+0xdc>
     f70:	00 00       	nop
     f72:	10 92 00 10 	sts	0x1000, r1
     f76:	00 c0       	rjmp	.+0      	; 0xf78 <oled_init+0xe4>
     f78:	00 c0       	rjmp	.+0      	; 0xf7a <oled_init+0xe6>
     f7a:	00 00       	nop
     f7c:	84 ea       	ldi	r24, 0xA4	; 164
     f7e:	80 93 00 10 	sts	0x1000, r24
     f82:	00 c0       	rjmp	.+0      	; 0xf84 <oled_init+0xf0>
     f84:	00 c0       	rjmp	.+0      	; 0xf86 <oled_init+0xf2>
     f86:	00 00       	nop
     f88:	86 ea       	ldi	r24, 0xA6	; 166
     f8a:	80 93 00 10 	sts	0x1000, r24
     f8e:	00 c0       	rjmp	.+0      	; 0xf90 <oled_init+0xfc>
     f90:	00 c0       	rjmp	.+0      	; 0xf92 <oled_init+0xfe>
     f92:	00 00       	nop
     f94:	8f ea       	ldi	r24, 0xAF	; 175
     f96:	80 93 00 10 	sts	0x1000, r24
     f9a:	80 e0       	ldi	r24, 0x00	; 0
     f9c:	3b df       	rcall	.-394    	; 0xe14 <oled_fill>
     f9e:	a4 de       	rcall	.-696    	; 0xce8 <oled_home>
     fa0:	9a ce       	rjmp	.-716    	; 0xcd6 <oled_autorefresh_init>
     fa2:	08 95       	ret

00000fa4 <oled_update>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     fa4:	00 c0       	rjmp	.+0      	; 0xfa6 <oled_update+0x2>
     fa6:	00 c0       	rjmp	.+0      	; 0xfa8 <oled_update+0x4>
     fa8:	00 00       	nop
}

/// Write command to oled
void write_c(uint8_t cmd){
	_delay_us(1);
	*((uint8_t *)OLED_C_ADR) = cmd;
     faa:	81 e2       	ldi	r24, 0x21	; 33
     fac:	80 93 00 10 	sts	0x1000, r24
     fb0:	00 c0       	rjmp	.+0      	; 0xfb2 <oled_update+0xe>
     fb2:	00 c0       	rjmp	.+0      	; 0xfb4 <oled_update+0x10>
     fb4:	00 00       	nop
     fb6:	10 92 00 10 	sts	0x1000, r1
     fba:	00 c0       	rjmp	.+0      	; 0xfbc <oled_update+0x18>
     fbc:	00 c0       	rjmp	.+0      	; 0xfbe <oled_update+0x1a>
     fbe:	00 00       	nop
     fc0:	8f e7       	ldi	r24, 0x7F	; 127
     fc2:	80 93 00 10 	sts	0x1000, r24
     fc6:	00 c0       	rjmp	.+0      	; 0xfc8 <oled_update+0x24>
     fc8:	00 c0       	rjmp	.+0      	; 0xfca <oled_update+0x26>
     fca:	00 00       	nop
     fcc:	82 e2       	ldi	r24, 0x22	; 34
     fce:	80 93 00 10 	sts	0x1000, r24
     fd2:	00 c0       	rjmp	.+0      	; 0xfd4 <oled_update+0x30>
     fd4:	00 c0       	rjmp	.+0      	; 0xfd6 <oled_update+0x32>
     fd6:	00 00       	nop
     fd8:	10 92 00 10 	sts	0x1000, r1
     fdc:	00 c0       	rjmp	.+0      	; 0xfde <oled_update+0x3a>
     fde:	00 c0       	rjmp	.+0      	; 0xfe0 <oled_update+0x3c>
     fe0:	00 00       	nop
     fe2:	87 e0       	ldi	r24, 0x07	; 7
     fe4:	80 93 00 10 	sts	0x1000, r24
     fe8:	00 c0       	rjmp	.+0      	; 0xfea <oled_update+0x46>
     fea:	00 c0       	rjmp	.+0      	; 0xfec <oled_update+0x48>
     fec:	00 00       	nop
     fee:	10 92 00 10 	sts	0x1000, r1
     ff2:	00 c0       	rjmp	.+0      	; 0xff4 <oled_update+0x50>
     ff4:	00 c0       	rjmp	.+0      	; 0xff6 <oled_update+0x52>
     ff6:	00 00       	nop
     ff8:	80 e1       	ldi	r24, 0x10	; 16
     ffa:	80 93 00 10 	sts	0x1000, r24
     ffe:	40 e0       	ldi	r20, 0x00	; 0
    1000:	50 e0       	ldi	r21, 0x00	; 0
//////////////////////////////////////////////////////////////////////////

/**
 * Go sequentially through the buffer and write data to the display. 
 */
void oled_update(){
    1002:	70 e0       	ldi	r23, 0x00	; 0
    1004:	60 e0       	ldi	r22, 0x00	; 0
}

/// Write data to oled
void write_d(uint8_t data){
	_delay_us(1); // delay may be increased to 1000 to make debug easier, works without any delay
	*((uint8_t *)OLED_D_ADR) = data;
    1006:	a1 e0       	ldi	r26, 0x01	; 1
    1008:	b0 e1       	ldi	r27, 0x10	; 16
    100a:	18 c0       	rjmp	.+48     	; 0x103c <oled_update+0x98>
    100c:	9c 01       	movw	r18, r24
    100e:	24 0f       	add	r18, r20
    1010:	35 1f       	adc	r19, r21
	write_c(SET_LOW_COL_ADR  | 0x00);
	write_c(SET_HIGH_COL_ADR | 0x00);
	
	for (int page = 0; page<OLED_PAGES; ++page){
		for (int seg = 0; seg<OLED_WIDTH; ++seg){
			write_d(buffer[page*OLED_WIDTH + seg]);
    1012:	e0 91 15 01 	lds	r30, 0x0115
    1016:	f0 91 16 01 	lds	r31, 0x0116
    101a:	e2 0f       	add	r30, r18
    101c:	f3 1f       	adc	r31, r19
    101e:	20 81       	ld	r18, Z
    1020:	00 c0       	rjmp	.+0      	; 0x1022 <oled_update+0x7e>
    1022:	00 c0       	rjmp	.+0      	; 0x1024 <oled_update+0x80>
    1024:	00 00       	nop
}

/// Write data to oled
void write_d(uint8_t data){
	_delay_us(1); // delay may be increased to 1000 to make debug easier, works without any delay
	*((uint8_t *)OLED_D_ADR) = data;
    1026:	2c 93       	st	X, r18
	
	write_c(SET_LOW_COL_ADR  | 0x00);
	write_c(SET_HIGH_COL_ADR | 0x00);
	
	for (int page = 0; page<OLED_PAGES; ++page){
		for (int seg = 0; seg<OLED_WIDTH; ++seg){
    1028:	01 96       	adiw	r24, 0x01	; 1
    102a:	80 38       	cpi	r24, 0x80	; 128
    102c:	91 05       	cpc	r25, r1
    102e:	71 f7       	brne	.-36     	; 0x100c <oled_update+0x68>
    1030:	40 58       	subi	r20, 0x80	; 128
    1032:	5f 4f       	sbci	r21, 0xFF	; 255
	write_c(SET_PAGE_ADR);write_c(0x00); write_c(OLED_PAGES-1);
	
	write_c(SET_LOW_COL_ADR  | 0x00);
	write_c(SET_HIGH_COL_ADR | 0x00);
	
	for (int page = 0; page<OLED_PAGES; ++page){
    1034:	41 15       	cp	r20, r1
    1036:	84 e0       	ldi	r24, 0x04	; 4
    1038:	58 07       	cpc	r21, r24
    103a:	19 f0       	breq	.+6      	; 0x1042 <oled_update+0x9e>
//////////////////////////////////////////////////////////////////////////

/**
 * Go sequentially through the buffer and write data to the display. 
 */
void oled_update(){
    103c:	87 2f       	mov	r24, r23
    103e:	96 2f       	mov	r25, r22
    1040:	e5 cf       	rjmp	.-54     	; 0x100c <oled_update+0x68>
    1042:	08 95       	ret

00001044 <__vector_17>:
/// Make oled into a output file stream
FILE oled_out = FDEV_SETUP_STREAM(oled_putchar, NULL, _FDEV_SETUP_WRITE);


/// Interrupt vector which refreshes the display
ISR(TIMER0_OVF_vect){
    1044:	1f 92       	push	r1
    1046:	0f 92       	push	r0
    1048:	0f b6       	in	r0, 0x3f	; 63
    104a:	0f 92       	push	r0
    104c:	11 24       	eor	r1, r1
    104e:	2f 93       	push	r18
    1050:	3f 93       	push	r19
    1052:	4f 93       	push	r20
    1054:	5f 93       	push	r21
    1056:	6f 93       	push	r22
    1058:	7f 93       	push	r23
    105a:	8f 93       	push	r24
    105c:	9f 93       	push	r25
    105e:	af 93       	push	r26
    1060:	bf 93       	push	r27
    1062:	ef 93       	push	r30
    1064:	ff 93       	push	r31
	oled_update();
    1066:	9e df       	rcall	.-196    	; 0xfa4 <oled_update>
}
    1068:	ff 91       	pop	r31
    106a:	ef 91       	pop	r30
    106c:	bf 91       	pop	r27
    106e:	af 91       	pop	r26
    1070:	9f 91       	pop	r25
    1072:	8f 91       	pop	r24
    1074:	7f 91       	pop	r23
    1076:	6f 91       	pop	r22
    1078:	5f 91       	pop	r21
    107a:	4f 91       	pop	r20
    107c:	3f 91       	pop	r19
    107e:	2f 91       	pop	r18
    1080:	0f 90       	pop	r0
    1082:	0f be       	out	0x3f, r0	; 63
    1084:	0f 90       	pop	r0
    1086:	1f 90       	pop	r1
    1088:	18 95       	reti

0000108a <spi_ss_low>:
#include "avr/io.h"
#include <stdio.h>

/// Set slave select line low
void spi_ss_low(){
	PORTB &= ~(1 << PB4);
    108a:	c4 98       	cbi	0x18, 4	; 24
    108c:	08 95       	ret

0000108e <spi_ss_high>:
}

/// Set slave select line high
void spi_ss_high(){
	PORTB |= (1 << PB4);
    108e:	c4 9a       	sbi	0x18, 4	; 24
    1090:	08 95       	ret

00001092 <spi_init>:

/// Initialize Atmega162 as SPI master
void spi_init()
{
	// setup IO pins
	DDRB |= (1<<DDB4 | 1<<DDB5 | 1<<DDB7);
    1092:	87 b3       	in	r24, 0x17	; 23
    1094:	80 6b       	ori	r24, 0xB0	; 176
    1096:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1<<DDB6); // not necessary
    1098:	be 98       	cbi	0x17, 6	; 23
	
	// setup SPI
	SPCR = (1<<SPE | 1<<MSTR | 1<<SPR0 | 1<<CPOL | 1<<CPHA) & ~(/*1<<CPOL | 1<<CPHA |*/ 1<<DORD);
    109a:	8d e5       	ldi	r24, 0x5D	; 93
    109c:	8d b9       	out	0x0d, r24	; 13
    109e:	08 95       	ret

000010a0 <spi_transmit>:
/** Transmit one byte of data. 
 * Wait until byte is recieved and return recieved byte. 
 */
uint8_t spi_transmit(uint8_t data)
{
	SPDR = data;
    10a0:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
    10a2:	77 9b       	sbis	0x0e, 7	; 14
    10a4:	fe cf       	rjmp	.-4      	; 0x10a2 <spi_transmit+0x2>
	
	return SPDR;
    10a6:	8f b1       	in	r24, 0x0f	; 15
    10a8:	08 95       	ret

000010aa <uart_send>:

}

/// Busy wait transmission of msg
int uart_send(unsigned char msg){
	while (!(UCSR0A & (1 << UDRE0)));
    10aa:	5d 9b       	sbis	0x0b, 5	; 11
    10ac:	fe cf       	rjmp	.-4      	; 0x10aa <uart_send>
	UDR0 = msg;
    10ae:	8c b9       	out	0x0c, r24	; 12
	return 0;
}
    10b0:	80 e0       	ldi	r24, 0x00	; 0
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	08 95       	ret

000010b6 <uart_recv>:


/// Read data from buffer
unsigned char uart_recv(){
	char returnval = 0;
	if(recvhead != recvtail)
    10b6:	20 91 f8 02 	lds	r18, 0x02F8
    10ba:	30 91 f9 02 	lds	r19, 0x02F9
    10be:	80 91 f6 02 	lds	r24, 0x02F6
    10c2:	90 91 f7 02 	lds	r25, 0x02F7
    10c6:	28 17       	cp	r18, r24
    10c8:	39 07       	cpc	r19, r25
    10ca:	11 f1       	breq	.+68     	; 0x1110 <uart_recv+0x5a>
	{
		returnval = recv_buffer[recvtail++];
    10cc:	80 91 f6 02 	lds	r24, 0x02F6
    10d0:	90 91 f7 02 	lds	r25, 0x02F7
    10d4:	9c 01       	movw	r18, r24
    10d6:	2f 5f       	subi	r18, 0xFF	; 255
    10d8:	3f 4f       	sbci	r19, 0xFF	; 255
    10da:	30 93 f7 02 	sts	0x02F7, r19
    10de:	20 93 f6 02 	sts	0x02F6, r18
    10e2:	fc 01       	movw	r30, r24
    10e4:	e6 50       	subi	r30, 0x06	; 6
    10e6:	fd 4f       	sbci	r31, 0xFD	; 253
    10e8:	80 81       	ld	r24, Z
		recvtail = recvtail%BUFFER_MAX;
    10ea:	20 91 f6 02 	lds	r18, 0x02F6
    10ee:	30 91 f7 02 	lds	r19, 0x02F7
    10f2:	2f 77       	andi	r18, 0x7F	; 127
    10f4:	30 78       	andi	r19, 0x80	; 128
    10f6:	33 23       	and	r19, r19
    10f8:	34 f4       	brge	.+12     	; 0x1106 <uart_recv+0x50>
    10fa:	21 50       	subi	r18, 0x01	; 1
    10fc:	31 09       	sbc	r19, r1
    10fe:	20 68       	ori	r18, 0x80	; 128
    1100:	3f 6f       	ori	r19, 0xFF	; 255
    1102:	2f 5f       	subi	r18, 0xFF	; 255
    1104:	3f 4f       	sbci	r19, 0xFF	; 255
    1106:	30 93 f7 02 	sts	0x02F7, r19
    110a:	20 93 f6 02 	sts	0x02F6, r18
    110e:	08 95       	ret
}


/// Read data from buffer
unsigned char uart_recv(){
	char returnval = 0;
    1110:	80 e0       	ldi	r24, 0x00	; 0
	{
		returnval = recv_buffer[recvtail++];
		recvtail = recvtail%BUFFER_MAX;
	}
	return returnval;
}
    1112:	08 95       	ret

00001114 <__vector_19>:
volatile char recv_buffer[BUFFER_MAX]; 	/*!< Buffer for storing recieved data*/
volatile int recvhead = 0; 				/*!< Head of buffer. Where next recieved byte will be placed. */
volatile int recvtail = 0; 				/*!< Tail of buffer. Where next read will occour. */

/// Interrupt vector for Rx. Place recieved data into buffer.
ISR(USART0_RXC_vect){
    1114:	1f 92       	push	r1
    1116:	0f 92       	push	r0
    1118:	0f b6       	in	r0, 0x3f	; 63
    111a:	0f 92       	push	r0
    111c:	11 24       	eor	r1, r1
    111e:	2f 93       	push	r18
    1120:	3f 93       	push	r19
    1122:	4f 93       	push	r20
    1124:	8f 93       	push	r24
    1126:	9f 93       	push	r25
    1128:	ef 93       	push	r30
    112a:	ff 93       	push	r31
	cli();
    112c:	f8 94       	cli
	char input = UDR0;
    112e:	4c b1       	in	r20, 0x0c	; 12
	if((recvhead+1)%BUFFER_MAX != recvtail){		// Sjekk at bufferen ikke er full
    1130:	80 91 f8 02 	lds	r24, 0x02F8
    1134:	90 91 f9 02 	lds	r25, 0x02F9
    1138:	20 91 f6 02 	lds	r18, 0x02F6
    113c:	30 91 f7 02 	lds	r19, 0x02F7
    1140:	01 96       	adiw	r24, 0x01	; 1
    1142:	8f 77       	andi	r24, 0x7F	; 127
    1144:	90 78       	andi	r25, 0x80	; 128
    1146:	99 23       	and	r25, r25
    1148:	24 f4       	brge	.+8      	; 0x1152 <__vector_19+0x3e>
    114a:	01 97       	sbiw	r24, 0x01	; 1
    114c:	80 68       	ori	r24, 0x80	; 128
    114e:	9f 6f       	ori	r25, 0xFF	; 255
    1150:	01 96       	adiw	r24, 0x01	; 1
    1152:	82 17       	cp	r24, r18
    1154:	93 07       	cpc	r25, r19
    1156:	c1 f0       	breq	.+48     	; 0x1188 <__vector_19+0x74>
		recv_buffer[recvhead] = input;				// If so, legg inn byte
    1158:	e0 91 f8 02 	lds	r30, 0x02F8
    115c:	f0 91 f9 02 	lds	r31, 0x02F9
    1160:	e6 50       	subi	r30, 0x06	; 6
    1162:	fd 4f       	sbci	r31, 0xFD	; 253
    1164:	40 83       	st	Z, r20
		recvhead = (recvhead+1)%BUFFER_MAX;
    1166:	80 91 f8 02 	lds	r24, 0x02F8
    116a:	90 91 f9 02 	lds	r25, 0x02F9
    116e:	01 96       	adiw	r24, 0x01	; 1
    1170:	8f 77       	andi	r24, 0x7F	; 127
    1172:	90 78       	andi	r25, 0x80	; 128
    1174:	99 23       	and	r25, r25
    1176:	24 f4       	brge	.+8      	; 0x1180 <__vector_19+0x6c>
    1178:	01 97       	sbiw	r24, 0x01	; 1
    117a:	80 68       	ori	r24, 0x80	; 128
    117c:	9f 6f       	ori	r25, 0xFF	; 255
    117e:	01 96       	adiw	r24, 0x01	; 1
    1180:	90 93 f9 02 	sts	0x02F9, r25
    1184:	80 93 f8 02 	sts	0x02F8, r24
	}
	sei();
    1188:	78 94       	sei
}
    118a:	ff 91       	pop	r31
    118c:	ef 91       	pop	r30
    118e:	9f 91       	pop	r25
    1190:	8f 91       	pop	r24
    1192:	4f 91       	pop	r20
    1194:	3f 91       	pop	r19
    1196:	2f 91       	pop	r18
    1198:	0f 90       	pop	r0
    119a:	0f be       	out	0x3f, r0	; 63
    119c:	0f 90       	pop	r0
    119e:	1f 90       	pop	r1
    11a0:	18 95       	reti

000011a2 <__vector_23>:

///\todo remove interrupt from Tx
ISR(USART0_TXC_vect){
    11a2:	1f 92       	push	r1
    11a4:	0f 92       	push	r0
    11a6:	0f b6       	in	r0, 0x3f	; 63
    11a8:	0f 92       	push	r0
    11aa:	11 24       	eor	r1, r1
	
}
    11ac:	0f 90       	pop	r0
    11ae:	0f be       	out	0x3f, r0	; 63
    11b0:	0f 90       	pop	r0
    11b2:	1f 90       	pop	r1
    11b4:	18 95       	reti

000011b6 <uart_init>:

///Initialize uart
void uart_init(){
	// set baud rate
	int timerval = (F_CPU/(16*BAUD) - 1);
	UBRR0L = timerval&0xFF;
    11b6:	8f e1       	ldi	r24, 0x1F	; 31
    11b8:	89 b9       	out	0x09, r24	; 9
	UBRR0H = (timerval>>8)&0x0F;
    11ba:	10 bc       	out	0x20, r1	; 32
	
	// enable interupts on Rx & Tx, and enable Rx & Tx 
	UCSR0B |= (1 << RXCIE0) | (1 << TXCIE0) | (1 << RXEN0) | (1 << TXEN0);
    11bc:	8a b1       	in	r24, 0x0a	; 10
    11be:	88 6d       	ori	r24, 0xD8	; 216
    11c0:	8a b9       	out	0x0a, r24	; 10
	
	// enable async mode
	UCSR0C &= ~(1 << UMSEL0);
    11c2:	80 b5       	in	r24, 0x20	; 32
    11c4:	8f 7b       	andi	r24, 0xBF	; 191
    11c6:	80 bd       	out	0x20, r24	; 32
	
	// parity disable
	UCSR0C &= ~((1 << UPM00) | (1 << UPM10));
    11c8:	80 b5       	in	r24, 0x20	; 32
    11ca:	8f 7e       	andi	r24, 0xEF	; 239
    11cc:	80 bd       	out	0x20, r24	; 32
	
	// stop bit to 1
	UCSR0C &= ~(1 << USBS0);
    11ce:	80 b5       	in	r24, 0x20	; 32
    11d0:	87 7f       	andi	r24, 0xF7	; 247
    11d2:	80 bd       	out	0x20, r24	; 32
    11d4:	08 95       	ret

000011d6 <malloc>:
    11d6:	cf 93       	push	r28
    11d8:	df 93       	push	r29
    11da:	82 30       	cpi	r24, 0x02	; 2
    11dc:	91 05       	cpc	r25, r1
    11de:	10 f4       	brcc	.+4      	; 0x11e4 <malloc+0xe>
    11e0:	82 e0       	ldi	r24, 0x02	; 2
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	e0 91 7c 03 	lds	r30, 0x037C
    11e8:	f0 91 7d 03 	lds	r31, 0x037D
    11ec:	20 e0       	ldi	r18, 0x00	; 0
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	a0 e0       	ldi	r26, 0x00	; 0
    11f2:	b0 e0       	ldi	r27, 0x00	; 0
    11f4:	30 97       	sbiw	r30, 0x00	; 0
    11f6:	39 f1       	breq	.+78     	; 0x1246 <malloc+0x70>
    11f8:	40 81       	ld	r20, Z
    11fa:	51 81       	ldd	r21, Z+1	; 0x01
    11fc:	48 17       	cp	r20, r24
    11fe:	59 07       	cpc	r21, r25
    1200:	b8 f0       	brcs	.+46     	; 0x1230 <malloc+0x5a>
    1202:	48 17       	cp	r20, r24
    1204:	59 07       	cpc	r21, r25
    1206:	71 f4       	brne	.+28     	; 0x1224 <malloc+0x4e>
    1208:	82 81       	ldd	r24, Z+2	; 0x02
    120a:	93 81       	ldd	r25, Z+3	; 0x03
    120c:	10 97       	sbiw	r26, 0x00	; 0
    120e:	29 f0       	breq	.+10     	; 0x121a <malloc+0x44>
    1210:	13 96       	adiw	r26, 0x03	; 3
    1212:	9c 93       	st	X, r25
    1214:	8e 93       	st	-X, r24
    1216:	12 97       	sbiw	r26, 0x02	; 2
    1218:	2c c0       	rjmp	.+88     	; 0x1272 <malloc+0x9c>
    121a:	90 93 7d 03 	sts	0x037D, r25
    121e:	80 93 7c 03 	sts	0x037C, r24
    1222:	27 c0       	rjmp	.+78     	; 0x1272 <malloc+0x9c>
    1224:	21 15       	cp	r18, r1
    1226:	31 05       	cpc	r19, r1
    1228:	31 f0       	breq	.+12     	; 0x1236 <malloc+0x60>
    122a:	42 17       	cp	r20, r18
    122c:	53 07       	cpc	r21, r19
    122e:	18 f0       	brcs	.+6      	; 0x1236 <malloc+0x60>
    1230:	a9 01       	movw	r20, r18
    1232:	db 01       	movw	r26, r22
    1234:	01 c0       	rjmp	.+2      	; 0x1238 <malloc+0x62>
    1236:	ef 01       	movw	r28, r30
    1238:	9a 01       	movw	r18, r20
    123a:	bd 01       	movw	r22, r26
    123c:	df 01       	movw	r26, r30
    123e:	02 80       	ldd	r0, Z+2	; 0x02
    1240:	f3 81       	ldd	r31, Z+3	; 0x03
    1242:	e0 2d       	mov	r30, r0
    1244:	d7 cf       	rjmp	.-82     	; 0x11f4 <malloc+0x1e>
    1246:	21 15       	cp	r18, r1
    1248:	31 05       	cpc	r19, r1
    124a:	f9 f0       	breq	.+62     	; 0x128a <malloc+0xb4>
    124c:	28 1b       	sub	r18, r24
    124e:	39 0b       	sbc	r19, r25
    1250:	24 30       	cpi	r18, 0x04	; 4
    1252:	31 05       	cpc	r19, r1
    1254:	80 f4       	brcc	.+32     	; 0x1276 <malloc+0xa0>
    1256:	8a 81       	ldd	r24, Y+2	; 0x02
    1258:	9b 81       	ldd	r25, Y+3	; 0x03
    125a:	61 15       	cp	r22, r1
    125c:	71 05       	cpc	r23, r1
    125e:	21 f0       	breq	.+8      	; 0x1268 <malloc+0x92>
    1260:	fb 01       	movw	r30, r22
    1262:	93 83       	std	Z+3, r25	; 0x03
    1264:	82 83       	std	Z+2, r24	; 0x02
    1266:	04 c0       	rjmp	.+8      	; 0x1270 <malloc+0x9a>
    1268:	90 93 7d 03 	sts	0x037D, r25
    126c:	80 93 7c 03 	sts	0x037C, r24
    1270:	fe 01       	movw	r30, r28
    1272:	32 96       	adiw	r30, 0x02	; 2
    1274:	44 c0       	rjmp	.+136    	; 0x12fe <malloc+0x128>
    1276:	fe 01       	movw	r30, r28
    1278:	e2 0f       	add	r30, r18
    127a:	f3 1f       	adc	r31, r19
    127c:	81 93       	st	Z+, r24
    127e:	91 93       	st	Z+, r25
    1280:	22 50       	subi	r18, 0x02	; 2
    1282:	31 09       	sbc	r19, r1
    1284:	39 83       	std	Y+1, r19	; 0x01
    1286:	28 83       	st	Y, r18
    1288:	3a c0       	rjmp	.+116    	; 0x12fe <malloc+0x128>
    128a:	20 91 7a 03 	lds	r18, 0x037A
    128e:	30 91 7b 03 	lds	r19, 0x037B
    1292:	23 2b       	or	r18, r19
    1294:	41 f4       	brne	.+16     	; 0x12a6 <malloc+0xd0>
    1296:	20 91 02 01 	lds	r18, 0x0102
    129a:	30 91 03 01 	lds	r19, 0x0103
    129e:	30 93 7b 03 	sts	0x037B, r19
    12a2:	20 93 7a 03 	sts	0x037A, r18
    12a6:	20 91 00 01 	lds	r18, 0x0100
    12aa:	30 91 01 01 	lds	r19, 0x0101
    12ae:	21 15       	cp	r18, r1
    12b0:	31 05       	cpc	r19, r1
    12b2:	41 f4       	brne	.+16     	; 0x12c4 <malloc+0xee>
    12b4:	2d b7       	in	r18, 0x3d	; 61
    12b6:	3e b7       	in	r19, 0x3e	; 62
    12b8:	40 91 04 01 	lds	r20, 0x0104
    12bc:	50 91 05 01 	lds	r21, 0x0105
    12c0:	24 1b       	sub	r18, r20
    12c2:	35 0b       	sbc	r19, r21
    12c4:	e0 91 7a 03 	lds	r30, 0x037A
    12c8:	f0 91 7b 03 	lds	r31, 0x037B
    12cc:	e2 17       	cp	r30, r18
    12ce:	f3 07       	cpc	r31, r19
    12d0:	a0 f4       	brcc	.+40     	; 0x12fa <malloc+0x124>
    12d2:	2e 1b       	sub	r18, r30
    12d4:	3f 0b       	sbc	r19, r31
    12d6:	28 17       	cp	r18, r24
    12d8:	39 07       	cpc	r19, r25
    12da:	78 f0       	brcs	.+30     	; 0x12fa <malloc+0x124>
    12dc:	ac 01       	movw	r20, r24
    12de:	4e 5f       	subi	r20, 0xFE	; 254
    12e0:	5f 4f       	sbci	r21, 0xFF	; 255
    12e2:	24 17       	cp	r18, r20
    12e4:	35 07       	cpc	r19, r21
    12e6:	48 f0       	brcs	.+18     	; 0x12fa <malloc+0x124>
    12e8:	4e 0f       	add	r20, r30
    12ea:	5f 1f       	adc	r21, r31
    12ec:	50 93 7b 03 	sts	0x037B, r21
    12f0:	40 93 7a 03 	sts	0x037A, r20
    12f4:	81 93       	st	Z+, r24
    12f6:	91 93       	st	Z+, r25
    12f8:	02 c0       	rjmp	.+4      	; 0x12fe <malloc+0x128>
    12fa:	e0 e0       	ldi	r30, 0x00	; 0
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	cf 01       	movw	r24, r30
    1300:	df 91       	pop	r29
    1302:	cf 91       	pop	r28
    1304:	08 95       	ret

00001306 <free>:
    1306:	cf 93       	push	r28
    1308:	df 93       	push	r29
    130a:	00 97       	sbiw	r24, 0x00	; 0
    130c:	09 f4       	brne	.+2      	; 0x1310 <free+0xa>
    130e:	87 c0       	rjmp	.+270    	; 0x141e <free+0x118>
    1310:	fc 01       	movw	r30, r24
    1312:	32 97       	sbiw	r30, 0x02	; 2
    1314:	13 82       	std	Z+3, r1	; 0x03
    1316:	12 82       	std	Z+2, r1	; 0x02
    1318:	c0 91 7c 03 	lds	r28, 0x037C
    131c:	d0 91 7d 03 	lds	r29, 0x037D
    1320:	20 97       	sbiw	r28, 0x00	; 0
    1322:	81 f4       	brne	.+32     	; 0x1344 <free+0x3e>
    1324:	20 81       	ld	r18, Z
    1326:	31 81       	ldd	r19, Z+1	; 0x01
    1328:	28 0f       	add	r18, r24
    132a:	39 1f       	adc	r19, r25
    132c:	80 91 7a 03 	lds	r24, 0x037A
    1330:	90 91 7b 03 	lds	r25, 0x037B
    1334:	82 17       	cp	r24, r18
    1336:	93 07       	cpc	r25, r19
    1338:	79 f5       	brne	.+94     	; 0x1398 <free+0x92>
    133a:	f0 93 7b 03 	sts	0x037B, r31
    133e:	e0 93 7a 03 	sts	0x037A, r30
    1342:	6d c0       	rjmp	.+218    	; 0x141e <free+0x118>
    1344:	de 01       	movw	r26, r28
    1346:	20 e0       	ldi	r18, 0x00	; 0
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	ae 17       	cp	r26, r30
    134c:	bf 07       	cpc	r27, r31
    134e:	50 f4       	brcc	.+20     	; 0x1364 <free+0x5e>
    1350:	12 96       	adiw	r26, 0x02	; 2
    1352:	4d 91       	ld	r20, X+
    1354:	5c 91       	ld	r21, X
    1356:	13 97       	sbiw	r26, 0x03	; 3
    1358:	9d 01       	movw	r18, r26
    135a:	41 15       	cp	r20, r1
    135c:	51 05       	cpc	r21, r1
    135e:	09 f1       	breq	.+66     	; 0x13a2 <free+0x9c>
    1360:	da 01       	movw	r26, r20
    1362:	f3 cf       	rjmp	.-26     	; 0x134a <free+0x44>
    1364:	b3 83       	std	Z+3, r27	; 0x03
    1366:	a2 83       	std	Z+2, r26	; 0x02
    1368:	40 81       	ld	r20, Z
    136a:	51 81       	ldd	r21, Z+1	; 0x01
    136c:	84 0f       	add	r24, r20
    136e:	95 1f       	adc	r25, r21
    1370:	8a 17       	cp	r24, r26
    1372:	9b 07       	cpc	r25, r27
    1374:	71 f4       	brne	.+28     	; 0x1392 <free+0x8c>
    1376:	8d 91       	ld	r24, X+
    1378:	9c 91       	ld	r25, X
    137a:	11 97       	sbiw	r26, 0x01	; 1
    137c:	84 0f       	add	r24, r20
    137e:	95 1f       	adc	r25, r21
    1380:	02 96       	adiw	r24, 0x02	; 2
    1382:	91 83       	std	Z+1, r25	; 0x01
    1384:	80 83       	st	Z, r24
    1386:	12 96       	adiw	r26, 0x02	; 2
    1388:	8d 91       	ld	r24, X+
    138a:	9c 91       	ld	r25, X
    138c:	13 97       	sbiw	r26, 0x03	; 3
    138e:	93 83       	std	Z+3, r25	; 0x03
    1390:	82 83       	std	Z+2, r24	; 0x02
    1392:	21 15       	cp	r18, r1
    1394:	31 05       	cpc	r19, r1
    1396:	29 f4       	brne	.+10     	; 0x13a2 <free+0x9c>
    1398:	f0 93 7d 03 	sts	0x037D, r31
    139c:	e0 93 7c 03 	sts	0x037C, r30
    13a0:	3e c0       	rjmp	.+124    	; 0x141e <free+0x118>
    13a2:	d9 01       	movw	r26, r18
    13a4:	13 96       	adiw	r26, 0x03	; 3
    13a6:	fc 93       	st	X, r31
    13a8:	ee 93       	st	-X, r30
    13aa:	12 97       	sbiw	r26, 0x02	; 2
    13ac:	4d 91       	ld	r20, X+
    13ae:	5d 91       	ld	r21, X+
    13b0:	a4 0f       	add	r26, r20
    13b2:	b5 1f       	adc	r27, r21
    13b4:	ea 17       	cp	r30, r26
    13b6:	fb 07       	cpc	r31, r27
    13b8:	79 f4       	brne	.+30     	; 0x13d8 <free+0xd2>
    13ba:	80 81       	ld	r24, Z
    13bc:	91 81       	ldd	r25, Z+1	; 0x01
    13be:	84 0f       	add	r24, r20
    13c0:	95 1f       	adc	r25, r21
    13c2:	02 96       	adiw	r24, 0x02	; 2
    13c4:	d9 01       	movw	r26, r18
    13c6:	11 96       	adiw	r26, 0x01	; 1
    13c8:	9c 93       	st	X, r25
    13ca:	8e 93       	st	-X, r24
    13cc:	82 81       	ldd	r24, Z+2	; 0x02
    13ce:	93 81       	ldd	r25, Z+3	; 0x03
    13d0:	13 96       	adiw	r26, 0x03	; 3
    13d2:	9c 93       	st	X, r25
    13d4:	8e 93       	st	-X, r24
    13d6:	12 97       	sbiw	r26, 0x02	; 2
    13d8:	e0 e0       	ldi	r30, 0x00	; 0
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	8a 81       	ldd	r24, Y+2	; 0x02
    13de:	9b 81       	ldd	r25, Y+3	; 0x03
    13e0:	00 97       	sbiw	r24, 0x00	; 0
    13e2:	19 f0       	breq	.+6      	; 0x13ea <free+0xe4>
    13e4:	fe 01       	movw	r30, r28
    13e6:	ec 01       	movw	r28, r24
    13e8:	f9 cf       	rjmp	.-14     	; 0x13dc <free+0xd6>
    13ea:	ce 01       	movw	r24, r28
    13ec:	02 96       	adiw	r24, 0x02	; 2
    13ee:	28 81       	ld	r18, Y
    13f0:	39 81       	ldd	r19, Y+1	; 0x01
    13f2:	82 0f       	add	r24, r18
    13f4:	93 1f       	adc	r25, r19
    13f6:	20 91 7a 03 	lds	r18, 0x037A
    13fa:	30 91 7b 03 	lds	r19, 0x037B
    13fe:	28 17       	cp	r18, r24
    1400:	39 07       	cpc	r19, r25
    1402:	69 f4       	brne	.+26     	; 0x141e <free+0x118>
    1404:	30 97       	sbiw	r30, 0x00	; 0
    1406:	29 f4       	brne	.+10     	; 0x1412 <free+0x10c>
    1408:	10 92 7d 03 	sts	0x037D, r1
    140c:	10 92 7c 03 	sts	0x037C, r1
    1410:	02 c0       	rjmp	.+4      	; 0x1416 <free+0x110>
    1412:	13 82       	std	Z+3, r1	; 0x03
    1414:	12 82       	std	Z+2, r1	; 0x02
    1416:	d0 93 7b 03 	sts	0x037B, r29
    141a:	c0 93 7a 03 	sts	0x037A, r28
    141e:	df 91       	pop	r29
    1420:	cf 91       	pop	r28
    1422:	08 95       	ret

00001424 <strncpy>:
    1424:	fb 01       	movw	r30, r22
    1426:	dc 01       	movw	r26, r24
    1428:	41 50       	subi	r20, 0x01	; 1
    142a:	50 40       	sbci	r21, 0x00	; 0
    142c:	48 f0       	brcs	.+18     	; 0x1440 <strncpy+0x1c>
    142e:	01 90       	ld	r0, Z+
    1430:	0d 92       	st	X+, r0
    1432:	00 20       	and	r0, r0
    1434:	c9 f7       	brne	.-14     	; 0x1428 <strncpy+0x4>
    1436:	01 c0       	rjmp	.+2      	; 0x143a <strncpy+0x16>
    1438:	1d 92       	st	X+, r1
    143a:	41 50       	subi	r20, 0x01	; 1
    143c:	50 40       	sbci	r21, 0x00	; 0
    143e:	e0 f7       	brcc	.-8      	; 0x1438 <strncpy+0x14>
    1440:	08 95       	ret

00001442 <fprintf>:
    1442:	a0 e0       	ldi	r26, 0x00	; 0
    1444:	b0 e0       	ldi	r27, 0x00	; 0
    1446:	e6 e2       	ldi	r30, 0x26	; 38
    1448:	fa e0       	ldi	r31, 0x0A	; 10
    144a:	b5 c2       	rjmp	.+1386   	; 0x19b6 <__prologue_saves__+0x20>
    144c:	ae 01       	movw	r20, r28
    144e:	47 5f       	subi	r20, 0xF7	; 247
    1450:	5f 4f       	sbci	r21, 0xFF	; 255
    1452:	6f 81       	ldd	r22, Y+7	; 0x07
    1454:	78 85       	ldd	r23, Y+8	; 0x08
    1456:	8d 81       	ldd	r24, Y+5	; 0x05
    1458:	9e 81       	ldd	r25, Y+6	; 0x06
    145a:	66 d0       	rcall	.+204    	; 0x1528 <vfprintf>
    145c:	e2 e0       	ldi	r30, 0x02	; 2
    145e:	c7 c2       	rjmp	.+1422   	; 0x19ee <__epilogue_restores__+0x20>

00001460 <fputc>:
    1460:	0f 93       	push	r16
    1462:	1f 93       	push	r17
    1464:	cf 93       	push	r28
    1466:	df 93       	push	r29
    1468:	18 2f       	mov	r17, r24
    146a:	09 2f       	mov	r16, r25
    146c:	eb 01       	movw	r28, r22
    146e:	8b 81       	ldd	r24, Y+3	; 0x03
    1470:	81 fd       	sbrc	r24, 1
    1472:	03 c0       	rjmp	.+6      	; 0x147a <fputc+0x1a>
    1474:	8f ef       	ldi	r24, 0xFF	; 255
    1476:	9f ef       	ldi	r25, 0xFF	; 255
    1478:	20 c0       	rjmp	.+64     	; 0x14ba <fputc+0x5a>
    147a:	82 ff       	sbrs	r24, 2
    147c:	10 c0       	rjmp	.+32     	; 0x149e <fputc+0x3e>
    147e:	4e 81       	ldd	r20, Y+6	; 0x06
    1480:	5f 81       	ldd	r21, Y+7	; 0x07
    1482:	2c 81       	ldd	r18, Y+4	; 0x04
    1484:	3d 81       	ldd	r19, Y+5	; 0x05
    1486:	42 17       	cp	r20, r18
    1488:	53 07       	cpc	r21, r19
    148a:	7c f4       	brge	.+30     	; 0x14aa <fputc+0x4a>
    148c:	e8 81       	ld	r30, Y
    148e:	f9 81       	ldd	r31, Y+1	; 0x01
    1490:	9f 01       	movw	r18, r30
    1492:	2f 5f       	subi	r18, 0xFF	; 255
    1494:	3f 4f       	sbci	r19, 0xFF	; 255
    1496:	39 83       	std	Y+1, r19	; 0x01
    1498:	28 83       	st	Y, r18
    149a:	10 83       	st	Z, r17
    149c:	06 c0       	rjmp	.+12     	; 0x14aa <fputc+0x4a>
    149e:	e8 85       	ldd	r30, Y+8	; 0x08
    14a0:	f9 85       	ldd	r31, Y+9	; 0x09
    14a2:	81 2f       	mov	r24, r17
    14a4:	09 95       	icall
    14a6:	89 2b       	or	r24, r25
    14a8:	29 f7       	brne	.-54     	; 0x1474 <fputc+0x14>
    14aa:	2e 81       	ldd	r18, Y+6	; 0x06
    14ac:	3f 81       	ldd	r19, Y+7	; 0x07
    14ae:	2f 5f       	subi	r18, 0xFF	; 255
    14b0:	3f 4f       	sbci	r19, 0xFF	; 255
    14b2:	3f 83       	std	Y+7, r19	; 0x07
    14b4:	2e 83       	std	Y+6, r18	; 0x06
    14b6:	81 2f       	mov	r24, r17
    14b8:	90 2f       	mov	r25, r16
    14ba:	df 91       	pop	r29
    14bc:	cf 91       	pop	r28
    14be:	1f 91       	pop	r17
    14c0:	0f 91       	pop	r16
    14c2:	08 95       	ret

000014c4 <fwrite>:
    14c4:	a0 e0       	ldi	r26, 0x00	; 0
    14c6:	b0 e0       	ldi	r27, 0x00	; 0
    14c8:	e7 e6       	ldi	r30, 0x67	; 103
    14ca:	fa e0       	ldi	r31, 0x0A	; 10
    14cc:	6a c2       	rjmp	.+1236   	; 0x19a2 <__prologue_saves__+0xc>
    14ce:	6b 01       	movw	r12, r22
    14d0:	4a 01       	movw	r8, r20
    14d2:	79 01       	movw	r14, r18
    14d4:	d9 01       	movw	r26, r18
    14d6:	13 96       	adiw	r26, 0x03	; 3
    14d8:	2c 91       	ld	r18, X
    14da:	21 ff       	sbrs	r18, 1
    14dc:	1d c0       	rjmp	.+58     	; 0x1518 <fwrite+0x54>
    14de:	c0 e0       	ldi	r28, 0x00	; 0
    14e0:	d0 e0       	ldi	r29, 0x00	; 0
    14e2:	c8 15       	cp	r28, r8
    14e4:	d9 05       	cpc	r29, r9
    14e6:	d9 f0       	breq	.+54     	; 0x151e <fwrite+0x5a>
    14e8:	8c 01       	movw	r16, r24
    14ea:	5c 01       	movw	r10, r24
    14ec:	ac 0c       	add	r10, r12
    14ee:	bd 1c       	adc	r11, r13
    14f0:	c8 01       	movw	r24, r16
    14f2:	0a 15       	cp	r16, r10
    14f4:	1b 05       	cpc	r17, r11
    14f6:	71 f0       	breq	.+28     	; 0x1514 <fwrite+0x50>
    14f8:	0f 5f       	subi	r16, 0xFF	; 255
    14fa:	1f 4f       	sbci	r17, 0xFF	; 255
    14fc:	d7 01       	movw	r26, r14
    14fe:	18 96       	adiw	r26, 0x08	; 8
    1500:	ed 91       	ld	r30, X+
    1502:	fc 91       	ld	r31, X
    1504:	19 97       	sbiw	r26, 0x09	; 9
    1506:	b7 01       	movw	r22, r14
    1508:	dc 01       	movw	r26, r24
    150a:	8c 91       	ld	r24, X
    150c:	09 95       	icall
    150e:	89 2b       	or	r24, r25
    1510:	79 f3       	breq	.-34     	; 0x14f0 <fwrite+0x2c>
    1512:	05 c0       	rjmp	.+10     	; 0x151e <fwrite+0x5a>
    1514:	21 96       	adiw	r28, 0x01	; 1
    1516:	e5 cf       	rjmp	.-54     	; 0x14e2 <fwrite+0x1e>
    1518:	80 e0       	ldi	r24, 0x00	; 0
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	01 c0       	rjmp	.+2      	; 0x1520 <fwrite+0x5c>
    151e:	ce 01       	movw	r24, r28
    1520:	cd b7       	in	r28, 0x3d	; 61
    1522:	de b7       	in	r29, 0x3e	; 62
    1524:	ec e0       	ldi	r30, 0x0C	; 12
    1526:	59 c2       	rjmp	.+1202   	; 0x19da <__epilogue_restores__+0xc>

00001528 <vfprintf>:
    1528:	ac e0       	ldi	r26, 0x0C	; 12
    152a:	b0 e0       	ldi	r27, 0x00	; 0
    152c:	e9 e9       	ldi	r30, 0x99	; 153
    152e:	fa e0       	ldi	r31, 0x0A	; 10
    1530:	32 c2       	rjmp	.+1124   	; 0x1996 <__prologue_saves__>
    1532:	7c 01       	movw	r14, r24
    1534:	6b 01       	movw	r12, r22
    1536:	8a 01       	movw	r16, r20
    1538:	fc 01       	movw	r30, r24
    153a:	17 82       	std	Z+7, r1	; 0x07
    153c:	16 82       	std	Z+6, r1	; 0x06
    153e:	83 81       	ldd	r24, Z+3	; 0x03
    1540:	81 ff       	sbrs	r24, 1
    1542:	b0 c1       	rjmp	.+864    	; 0x18a4 <vfprintf+0x37c>
    1544:	ce 01       	movw	r24, r28
    1546:	01 96       	adiw	r24, 0x01	; 1
    1548:	4c 01       	movw	r8, r24
    154a:	f7 01       	movw	r30, r14
    154c:	93 81       	ldd	r25, Z+3	; 0x03
    154e:	f6 01       	movw	r30, r12
    1550:	93 fd       	sbrc	r25, 3
    1552:	85 91       	lpm	r24, Z+
    1554:	93 ff       	sbrs	r25, 3
    1556:	81 91       	ld	r24, Z+
    1558:	6f 01       	movw	r12, r30
    155a:	88 23       	and	r24, r24
    155c:	09 f4       	brne	.+2      	; 0x1560 <vfprintf+0x38>
    155e:	9e c1       	rjmp	.+828    	; 0x189c <vfprintf+0x374>
    1560:	85 32       	cpi	r24, 0x25	; 37
    1562:	39 f4       	brne	.+14     	; 0x1572 <vfprintf+0x4a>
    1564:	93 fd       	sbrc	r25, 3
    1566:	85 91       	lpm	r24, Z+
    1568:	93 ff       	sbrs	r25, 3
    156a:	81 91       	ld	r24, Z+
    156c:	6f 01       	movw	r12, r30
    156e:	85 32       	cpi	r24, 0x25	; 37
    1570:	21 f4       	brne	.+8      	; 0x157a <vfprintf+0x52>
    1572:	b7 01       	movw	r22, r14
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	74 df       	rcall	.-280    	; 0x1460 <fputc>
    1578:	e8 cf       	rjmp	.-48     	; 0x154a <vfprintf+0x22>
    157a:	51 2c       	mov	r5, r1
    157c:	31 2c       	mov	r3, r1
    157e:	20 e0       	ldi	r18, 0x00	; 0
    1580:	20 32       	cpi	r18, 0x20	; 32
    1582:	a0 f4       	brcc	.+40     	; 0x15ac <vfprintf+0x84>
    1584:	8b 32       	cpi	r24, 0x2B	; 43
    1586:	69 f0       	breq	.+26     	; 0x15a2 <vfprintf+0x7a>
    1588:	30 f4       	brcc	.+12     	; 0x1596 <vfprintf+0x6e>
    158a:	80 32       	cpi	r24, 0x20	; 32
    158c:	59 f0       	breq	.+22     	; 0x15a4 <vfprintf+0x7c>
    158e:	83 32       	cpi	r24, 0x23	; 35
    1590:	69 f4       	brne	.+26     	; 0x15ac <vfprintf+0x84>
    1592:	20 61       	ori	r18, 0x10	; 16
    1594:	2c c0       	rjmp	.+88     	; 0x15ee <vfprintf+0xc6>
    1596:	8d 32       	cpi	r24, 0x2D	; 45
    1598:	39 f0       	breq	.+14     	; 0x15a8 <vfprintf+0x80>
    159a:	80 33       	cpi	r24, 0x30	; 48
    159c:	39 f4       	brne	.+14     	; 0x15ac <vfprintf+0x84>
    159e:	21 60       	ori	r18, 0x01	; 1
    15a0:	26 c0       	rjmp	.+76     	; 0x15ee <vfprintf+0xc6>
    15a2:	22 60       	ori	r18, 0x02	; 2
    15a4:	24 60       	ori	r18, 0x04	; 4
    15a6:	23 c0       	rjmp	.+70     	; 0x15ee <vfprintf+0xc6>
    15a8:	28 60       	ori	r18, 0x08	; 8
    15aa:	21 c0       	rjmp	.+66     	; 0x15ee <vfprintf+0xc6>
    15ac:	27 fd       	sbrc	r18, 7
    15ae:	27 c0       	rjmp	.+78     	; 0x15fe <vfprintf+0xd6>
    15b0:	30 ed       	ldi	r19, 0xD0	; 208
    15b2:	38 0f       	add	r19, r24
    15b4:	3a 30       	cpi	r19, 0x0A	; 10
    15b6:	78 f4       	brcc	.+30     	; 0x15d6 <vfprintf+0xae>
    15b8:	26 ff       	sbrs	r18, 6
    15ba:	06 c0       	rjmp	.+12     	; 0x15c8 <vfprintf+0xa0>
    15bc:	fa e0       	ldi	r31, 0x0A	; 10
    15be:	5f 9e       	mul	r5, r31
    15c0:	30 0d       	add	r19, r0
    15c2:	11 24       	eor	r1, r1
    15c4:	53 2e       	mov	r5, r19
    15c6:	13 c0       	rjmp	.+38     	; 0x15ee <vfprintf+0xc6>
    15c8:	8a e0       	ldi	r24, 0x0A	; 10
    15ca:	38 9e       	mul	r3, r24
    15cc:	30 0d       	add	r19, r0
    15ce:	11 24       	eor	r1, r1
    15d0:	33 2e       	mov	r3, r19
    15d2:	20 62       	ori	r18, 0x20	; 32
    15d4:	0c c0       	rjmp	.+24     	; 0x15ee <vfprintf+0xc6>
    15d6:	8e 32       	cpi	r24, 0x2E	; 46
    15d8:	21 f4       	brne	.+8      	; 0x15e2 <vfprintf+0xba>
    15da:	26 fd       	sbrc	r18, 6
    15dc:	5f c1       	rjmp	.+702    	; 0x189c <vfprintf+0x374>
    15de:	20 64       	ori	r18, 0x40	; 64
    15e0:	06 c0       	rjmp	.+12     	; 0x15ee <vfprintf+0xc6>
    15e2:	8c 36       	cpi	r24, 0x6C	; 108
    15e4:	11 f4       	brne	.+4      	; 0x15ea <vfprintf+0xc2>
    15e6:	20 68       	ori	r18, 0x80	; 128
    15e8:	02 c0       	rjmp	.+4      	; 0x15ee <vfprintf+0xc6>
    15ea:	88 36       	cpi	r24, 0x68	; 104
    15ec:	41 f4       	brne	.+16     	; 0x15fe <vfprintf+0xd6>
    15ee:	f6 01       	movw	r30, r12
    15f0:	93 fd       	sbrc	r25, 3
    15f2:	85 91       	lpm	r24, Z+
    15f4:	93 ff       	sbrs	r25, 3
    15f6:	81 91       	ld	r24, Z+
    15f8:	6f 01       	movw	r12, r30
    15fa:	81 11       	cpse	r24, r1
    15fc:	c1 cf       	rjmp	.-126    	; 0x1580 <vfprintf+0x58>
    15fe:	98 2f       	mov	r25, r24
    1600:	9f 7d       	andi	r25, 0xDF	; 223
    1602:	95 54       	subi	r25, 0x45	; 69
    1604:	93 30       	cpi	r25, 0x03	; 3
    1606:	28 f4       	brcc	.+10     	; 0x1612 <vfprintf+0xea>
    1608:	0c 5f       	subi	r16, 0xFC	; 252
    160a:	1f 4f       	sbci	r17, 0xFF	; 255
    160c:	ff e3       	ldi	r31, 0x3F	; 63
    160e:	f9 83       	std	Y+1, r31	; 0x01
    1610:	0d c0       	rjmp	.+26     	; 0x162c <vfprintf+0x104>
    1612:	83 36       	cpi	r24, 0x63	; 99
    1614:	31 f0       	breq	.+12     	; 0x1622 <vfprintf+0xfa>
    1616:	83 37       	cpi	r24, 0x73	; 115
    1618:	71 f0       	breq	.+28     	; 0x1636 <vfprintf+0x10e>
    161a:	83 35       	cpi	r24, 0x53	; 83
    161c:	09 f0       	breq	.+2      	; 0x1620 <vfprintf+0xf8>
    161e:	57 c0       	rjmp	.+174    	; 0x16ce <vfprintf+0x1a6>
    1620:	21 c0       	rjmp	.+66     	; 0x1664 <vfprintf+0x13c>
    1622:	f8 01       	movw	r30, r16
    1624:	80 81       	ld	r24, Z
    1626:	89 83       	std	Y+1, r24	; 0x01
    1628:	0e 5f       	subi	r16, 0xFE	; 254
    162a:	1f 4f       	sbci	r17, 0xFF	; 255
    162c:	44 24       	eor	r4, r4
    162e:	43 94       	inc	r4
    1630:	51 2c       	mov	r5, r1
    1632:	54 01       	movw	r10, r8
    1634:	14 c0       	rjmp	.+40     	; 0x165e <vfprintf+0x136>
    1636:	38 01       	movw	r6, r16
    1638:	f2 e0       	ldi	r31, 0x02	; 2
    163a:	6f 0e       	add	r6, r31
    163c:	71 1c       	adc	r7, r1
    163e:	f8 01       	movw	r30, r16
    1640:	a0 80       	ld	r10, Z
    1642:	b1 80       	ldd	r11, Z+1	; 0x01
    1644:	26 ff       	sbrs	r18, 6
    1646:	03 c0       	rjmp	.+6      	; 0x164e <vfprintf+0x126>
    1648:	65 2d       	mov	r22, r5
    164a:	70 e0       	ldi	r23, 0x00	; 0
    164c:	02 c0       	rjmp	.+4      	; 0x1652 <vfprintf+0x12a>
    164e:	6f ef       	ldi	r22, 0xFF	; 255
    1650:	7f ef       	ldi	r23, 0xFF	; 255
    1652:	c5 01       	movw	r24, r10
    1654:	2c 87       	std	Y+12, r18	; 0x0c
    1656:	36 d1       	rcall	.+620    	; 0x18c4 <strnlen>
    1658:	2c 01       	movw	r4, r24
    165a:	83 01       	movw	r16, r6
    165c:	2c 85       	ldd	r18, Y+12	; 0x0c
    165e:	2f 77       	andi	r18, 0x7F	; 127
    1660:	22 2e       	mov	r2, r18
    1662:	16 c0       	rjmp	.+44     	; 0x1690 <vfprintf+0x168>
    1664:	38 01       	movw	r6, r16
    1666:	f2 e0       	ldi	r31, 0x02	; 2
    1668:	6f 0e       	add	r6, r31
    166a:	71 1c       	adc	r7, r1
    166c:	f8 01       	movw	r30, r16
    166e:	a0 80       	ld	r10, Z
    1670:	b1 80       	ldd	r11, Z+1	; 0x01
    1672:	26 ff       	sbrs	r18, 6
    1674:	03 c0       	rjmp	.+6      	; 0x167c <vfprintf+0x154>
    1676:	65 2d       	mov	r22, r5
    1678:	70 e0       	ldi	r23, 0x00	; 0
    167a:	02 c0       	rjmp	.+4      	; 0x1680 <vfprintf+0x158>
    167c:	6f ef       	ldi	r22, 0xFF	; 255
    167e:	7f ef       	ldi	r23, 0xFF	; 255
    1680:	c5 01       	movw	r24, r10
    1682:	2c 87       	std	Y+12, r18	; 0x0c
    1684:	14 d1       	rcall	.+552    	; 0x18ae <strnlen_P>
    1686:	2c 01       	movw	r4, r24
    1688:	2c 85       	ldd	r18, Y+12	; 0x0c
    168a:	20 68       	ori	r18, 0x80	; 128
    168c:	22 2e       	mov	r2, r18
    168e:	83 01       	movw	r16, r6
    1690:	23 fc       	sbrc	r2, 3
    1692:	19 c0       	rjmp	.+50     	; 0x16c6 <vfprintf+0x19e>
    1694:	83 2d       	mov	r24, r3
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	48 16       	cp	r4, r24
    169a:	59 06       	cpc	r5, r25
    169c:	a0 f4       	brcc	.+40     	; 0x16c6 <vfprintf+0x19e>
    169e:	b7 01       	movw	r22, r14
    16a0:	80 e2       	ldi	r24, 0x20	; 32
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	dd de       	rcall	.-582    	; 0x1460 <fputc>
    16a6:	3a 94       	dec	r3
    16a8:	f5 cf       	rjmp	.-22     	; 0x1694 <vfprintf+0x16c>
    16aa:	f5 01       	movw	r30, r10
    16ac:	27 fc       	sbrc	r2, 7
    16ae:	85 91       	lpm	r24, Z+
    16b0:	27 fe       	sbrs	r2, 7
    16b2:	81 91       	ld	r24, Z+
    16b4:	5f 01       	movw	r10, r30
    16b6:	b7 01       	movw	r22, r14
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	d2 de       	rcall	.-604    	; 0x1460 <fputc>
    16bc:	31 10       	cpse	r3, r1
    16be:	3a 94       	dec	r3
    16c0:	f1 e0       	ldi	r31, 0x01	; 1
    16c2:	4f 1a       	sub	r4, r31
    16c4:	51 08       	sbc	r5, r1
    16c6:	41 14       	cp	r4, r1
    16c8:	51 04       	cpc	r5, r1
    16ca:	79 f7       	brne	.-34     	; 0x16aa <vfprintf+0x182>
    16cc:	de c0       	rjmp	.+444    	; 0x188a <vfprintf+0x362>
    16ce:	84 36       	cpi	r24, 0x64	; 100
    16d0:	11 f0       	breq	.+4      	; 0x16d6 <vfprintf+0x1ae>
    16d2:	89 36       	cpi	r24, 0x69	; 105
    16d4:	31 f5       	brne	.+76     	; 0x1722 <vfprintf+0x1fa>
    16d6:	f8 01       	movw	r30, r16
    16d8:	27 ff       	sbrs	r18, 7
    16da:	07 c0       	rjmp	.+14     	; 0x16ea <vfprintf+0x1c2>
    16dc:	60 81       	ld	r22, Z
    16de:	71 81       	ldd	r23, Z+1	; 0x01
    16e0:	82 81       	ldd	r24, Z+2	; 0x02
    16e2:	93 81       	ldd	r25, Z+3	; 0x03
    16e4:	0c 5f       	subi	r16, 0xFC	; 252
    16e6:	1f 4f       	sbci	r17, 0xFF	; 255
    16e8:	08 c0       	rjmp	.+16     	; 0x16fa <vfprintf+0x1d2>
    16ea:	60 81       	ld	r22, Z
    16ec:	71 81       	ldd	r23, Z+1	; 0x01
    16ee:	88 27       	eor	r24, r24
    16f0:	77 fd       	sbrc	r23, 7
    16f2:	80 95       	com	r24
    16f4:	98 2f       	mov	r25, r24
    16f6:	0e 5f       	subi	r16, 0xFE	; 254
    16f8:	1f 4f       	sbci	r17, 0xFF	; 255
    16fa:	2f 76       	andi	r18, 0x6F	; 111
    16fc:	b2 2e       	mov	r11, r18
    16fe:	97 ff       	sbrs	r25, 7
    1700:	09 c0       	rjmp	.+18     	; 0x1714 <vfprintf+0x1ec>
    1702:	90 95       	com	r25
    1704:	80 95       	com	r24
    1706:	70 95       	com	r23
    1708:	61 95       	neg	r22
    170a:	7f 4f       	sbci	r23, 0xFF	; 255
    170c:	8f 4f       	sbci	r24, 0xFF	; 255
    170e:	9f 4f       	sbci	r25, 0xFF	; 255
    1710:	20 68       	ori	r18, 0x80	; 128
    1712:	b2 2e       	mov	r11, r18
    1714:	2a e0       	ldi	r18, 0x0A	; 10
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	a4 01       	movw	r20, r8
    171a:	df d0       	rcall	.+446    	; 0x18da <__ultoa_invert>
    171c:	a8 2e       	mov	r10, r24
    171e:	a8 18       	sub	r10, r8
    1720:	43 c0       	rjmp	.+134    	; 0x17a8 <vfprintf+0x280>
    1722:	85 37       	cpi	r24, 0x75	; 117
    1724:	29 f4       	brne	.+10     	; 0x1730 <vfprintf+0x208>
    1726:	2f 7e       	andi	r18, 0xEF	; 239
    1728:	b2 2e       	mov	r11, r18
    172a:	2a e0       	ldi	r18, 0x0A	; 10
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	25 c0       	rjmp	.+74     	; 0x177a <vfprintf+0x252>
    1730:	f2 2f       	mov	r31, r18
    1732:	f9 7f       	andi	r31, 0xF9	; 249
    1734:	bf 2e       	mov	r11, r31
    1736:	8f 36       	cpi	r24, 0x6F	; 111
    1738:	c1 f0       	breq	.+48     	; 0x176a <vfprintf+0x242>
    173a:	18 f4       	brcc	.+6      	; 0x1742 <vfprintf+0x21a>
    173c:	88 35       	cpi	r24, 0x58	; 88
    173e:	79 f0       	breq	.+30     	; 0x175e <vfprintf+0x236>
    1740:	ad c0       	rjmp	.+346    	; 0x189c <vfprintf+0x374>
    1742:	80 37       	cpi	r24, 0x70	; 112
    1744:	19 f0       	breq	.+6      	; 0x174c <vfprintf+0x224>
    1746:	88 37       	cpi	r24, 0x78	; 120
    1748:	21 f0       	breq	.+8      	; 0x1752 <vfprintf+0x22a>
    174a:	a8 c0       	rjmp	.+336    	; 0x189c <vfprintf+0x374>
    174c:	2f 2f       	mov	r18, r31
    174e:	20 61       	ori	r18, 0x10	; 16
    1750:	b2 2e       	mov	r11, r18
    1752:	b4 fe       	sbrs	r11, 4
    1754:	0d c0       	rjmp	.+26     	; 0x1770 <vfprintf+0x248>
    1756:	8b 2d       	mov	r24, r11
    1758:	84 60       	ori	r24, 0x04	; 4
    175a:	b8 2e       	mov	r11, r24
    175c:	09 c0       	rjmp	.+18     	; 0x1770 <vfprintf+0x248>
    175e:	24 ff       	sbrs	r18, 4
    1760:	0a c0       	rjmp	.+20     	; 0x1776 <vfprintf+0x24e>
    1762:	9f 2f       	mov	r25, r31
    1764:	96 60       	ori	r25, 0x06	; 6
    1766:	b9 2e       	mov	r11, r25
    1768:	06 c0       	rjmp	.+12     	; 0x1776 <vfprintf+0x24e>
    176a:	28 e0       	ldi	r18, 0x08	; 8
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	05 c0       	rjmp	.+10     	; 0x177a <vfprintf+0x252>
    1770:	20 e1       	ldi	r18, 0x10	; 16
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	02 c0       	rjmp	.+4      	; 0x177a <vfprintf+0x252>
    1776:	20 e1       	ldi	r18, 0x10	; 16
    1778:	32 e0       	ldi	r19, 0x02	; 2
    177a:	f8 01       	movw	r30, r16
    177c:	b7 fe       	sbrs	r11, 7
    177e:	07 c0       	rjmp	.+14     	; 0x178e <vfprintf+0x266>
    1780:	60 81       	ld	r22, Z
    1782:	71 81       	ldd	r23, Z+1	; 0x01
    1784:	82 81       	ldd	r24, Z+2	; 0x02
    1786:	93 81       	ldd	r25, Z+3	; 0x03
    1788:	0c 5f       	subi	r16, 0xFC	; 252
    178a:	1f 4f       	sbci	r17, 0xFF	; 255
    178c:	06 c0       	rjmp	.+12     	; 0x179a <vfprintf+0x272>
    178e:	60 81       	ld	r22, Z
    1790:	71 81       	ldd	r23, Z+1	; 0x01
    1792:	80 e0       	ldi	r24, 0x00	; 0
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	0e 5f       	subi	r16, 0xFE	; 254
    1798:	1f 4f       	sbci	r17, 0xFF	; 255
    179a:	a4 01       	movw	r20, r8
    179c:	9e d0       	rcall	.+316    	; 0x18da <__ultoa_invert>
    179e:	a8 2e       	mov	r10, r24
    17a0:	a8 18       	sub	r10, r8
    17a2:	fb 2d       	mov	r31, r11
    17a4:	ff 77       	andi	r31, 0x7F	; 127
    17a6:	bf 2e       	mov	r11, r31
    17a8:	b6 fe       	sbrs	r11, 6
    17aa:	0b c0       	rjmp	.+22     	; 0x17c2 <vfprintf+0x29a>
    17ac:	2b 2d       	mov	r18, r11
    17ae:	2e 7f       	andi	r18, 0xFE	; 254
    17b0:	a5 14       	cp	r10, r5
    17b2:	50 f4       	brcc	.+20     	; 0x17c8 <vfprintf+0x2a0>
    17b4:	b4 fe       	sbrs	r11, 4
    17b6:	0a c0       	rjmp	.+20     	; 0x17cc <vfprintf+0x2a4>
    17b8:	b2 fc       	sbrc	r11, 2
    17ba:	08 c0       	rjmp	.+16     	; 0x17cc <vfprintf+0x2a4>
    17bc:	2b 2d       	mov	r18, r11
    17be:	2e 7e       	andi	r18, 0xEE	; 238
    17c0:	05 c0       	rjmp	.+10     	; 0x17cc <vfprintf+0x2a4>
    17c2:	7a 2c       	mov	r7, r10
    17c4:	2b 2d       	mov	r18, r11
    17c6:	03 c0       	rjmp	.+6      	; 0x17ce <vfprintf+0x2a6>
    17c8:	7a 2c       	mov	r7, r10
    17ca:	01 c0       	rjmp	.+2      	; 0x17ce <vfprintf+0x2a6>
    17cc:	75 2c       	mov	r7, r5
    17ce:	24 ff       	sbrs	r18, 4
    17d0:	0d c0       	rjmp	.+26     	; 0x17ec <vfprintf+0x2c4>
    17d2:	fe 01       	movw	r30, r28
    17d4:	ea 0d       	add	r30, r10
    17d6:	f1 1d       	adc	r31, r1
    17d8:	80 81       	ld	r24, Z
    17da:	80 33       	cpi	r24, 0x30	; 48
    17dc:	11 f4       	brne	.+4      	; 0x17e2 <vfprintf+0x2ba>
    17de:	29 7e       	andi	r18, 0xE9	; 233
    17e0:	09 c0       	rjmp	.+18     	; 0x17f4 <vfprintf+0x2cc>
    17e2:	22 ff       	sbrs	r18, 2
    17e4:	06 c0       	rjmp	.+12     	; 0x17f2 <vfprintf+0x2ca>
    17e6:	73 94       	inc	r7
    17e8:	73 94       	inc	r7
    17ea:	04 c0       	rjmp	.+8      	; 0x17f4 <vfprintf+0x2cc>
    17ec:	82 2f       	mov	r24, r18
    17ee:	86 78       	andi	r24, 0x86	; 134
    17f0:	09 f0       	breq	.+2      	; 0x17f4 <vfprintf+0x2cc>
    17f2:	73 94       	inc	r7
    17f4:	23 fd       	sbrc	r18, 3
    17f6:	12 c0       	rjmp	.+36     	; 0x181c <vfprintf+0x2f4>
    17f8:	20 ff       	sbrs	r18, 0
    17fa:	06 c0       	rjmp	.+12     	; 0x1808 <vfprintf+0x2e0>
    17fc:	5a 2c       	mov	r5, r10
    17fe:	73 14       	cp	r7, r3
    1800:	18 f4       	brcc	.+6      	; 0x1808 <vfprintf+0x2e0>
    1802:	53 0c       	add	r5, r3
    1804:	57 18       	sub	r5, r7
    1806:	73 2c       	mov	r7, r3
    1808:	73 14       	cp	r7, r3
    180a:	60 f4       	brcc	.+24     	; 0x1824 <vfprintf+0x2fc>
    180c:	b7 01       	movw	r22, r14
    180e:	80 e2       	ldi	r24, 0x20	; 32
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	2c 87       	std	Y+12, r18	; 0x0c
    1814:	25 de       	rcall	.-950    	; 0x1460 <fputc>
    1816:	73 94       	inc	r7
    1818:	2c 85       	ldd	r18, Y+12	; 0x0c
    181a:	f6 cf       	rjmp	.-20     	; 0x1808 <vfprintf+0x2e0>
    181c:	73 14       	cp	r7, r3
    181e:	10 f4       	brcc	.+4      	; 0x1824 <vfprintf+0x2fc>
    1820:	37 18       	sub	r3, r7
    1822:	01 c0       	rjmp	.+2      	; 0x1826 <vfprintf+0x2fe>
    1824:	31 2c       	mov	r3, r1
    1826:	24 ff       	sbrs	r18, 4
    1828:	11 c0       	rjmp	.+34     	; 0x184c <vfprintf+0x324>
    182a:	b7 01       	movw	r22, r14
    182c:	80 e3       	ldi	r24, 0x30	; 48
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	2c 87       	std	Y+12, r18	; 0x0c
    1832:	16 de       	rcall	.-980    	; 0x1460 <fputc>
    1834:	2c 85       	ldd	r18, Y+12	; 0x0c
    1836:	22 ff       	sbrs	r18, 2
    1838:	16 c0       	rjmp	.+44     	; 0x1866 <vfprintf+0x33e>
    183a:	21 ff       	sbrs	r18, 1
    183c:	03 c0       	rjmp	.+6      	; 0x1844 <vfprintf+0x31c>
    183e:	88 e5       	ldi	r24, 0x58	; 88
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	02 c0       	rjmp	.+4      	; 0x1848 <vfprintf+0x320>
    1844:	88 e7       	ldi	r24, 0x78	; 120
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	b7 01       	movw	r22, r14
    184a:	0c c0       	rjmp	.+24     	; 0x1864 <vfprintf+0x33c>
    184c:	82 2f       	mov	r24, r18
    184e:	86 78       	andi	r24, 0x86	; 134
    1850:	51 f0       	breq	.+20     	; 0x1866 <vfprintf+0x33e>
    1852:	21 fd       	sbrc	r18, 1
    1854:	02 c0       	rjmp	.+4      	; 0x185a <vfprintf+0x332>
    1856:	80 e2       	ldi	r24, 0x20	; 32
    1858:	01 c0       	rjmp	.+2      	; 0x185c <vfprintf+0x334>
    185a:	8b e2       	ldi	r24, 0x2B	; 43
    185c:	27 fd       	sbrc	r18, 7
    185e:	8d e2       	ldi	r24, 0x2D	; 45
    1860:	b7 01       	movw	r22, r14
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	fd dd       	rcall	.-1030   	; 0x1460 <fputc>
    1866:	a5 14       	cp	r10, r5
    1868:	30 f4       	brcc	.+12     	; 0x1876 <vfprintf+0x34e>
    186a:	b7 01       	movw	r22, r14
    186c:	80 e3       	ldi	r24, 0x30	; 48
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	f7 dd       	rcall	.-1042   	; 0x1460 <fputc>
    1872:	5a 94       	dec	r5
    1874:	f8 cf       	rjmp	.-16     	; 0x1866 <vfprintf+0x33e>
    1876:	aa 94       	dec	r10
    1878:	f4 01       	movw	r30, r8
    187a:	ea 0d       	add	r30, r10
    187c:	f1 1d       	adc	r31, r1
    187e:	80 81       	ld	r24, Z
    1880:	b7 01       	movw	r22, r14
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	ed dd       	rcall	.-1062   	; 0x1460 <fputc>
    1886:	a1 10       	cpse	r10, r1
    1888:	f6 cf       	rjmp	.-20     	; 0x1876 <vfprintf+0x34e>
    188a:	33 20       	and	r3, r3
    188c:	09 f4       	brne	.+2      	; 0x1890 <vfprintf+0x368>
    188e:	5d ce       	rjmp	.-838    	; 0x154a <vfprintf+0x22>
    1890:	b7 01       	movw	r22, r14
    1892:	80 e2       	ldi	r24, 0x20	; 32
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	e4 dd       	rcall	.-1080   	; 0x1460 <fputc>
    1898:	3a 94       	dec	r3
    189a:	f7 cf       	rjmp	.-18     	; 0x188a <vfprintf+0x362>
    189c:	f7 01       	movw	r30, r14
    189e:	86 81       	ldd	r24, Z+6	; 0x06
    18a0:	97 81       	ldd	r25, Z+7	; 0x07
    18a2:	02 c0       	rjmp	.+4      	; 0x18a8 <vfprintf+0x380>
    18a4:	8f ef       	ldi	r24, 0xFF	; 255
    18a6:	9f ef       	ldi	r25, 0xFF	; 255
    18a8:	2c 96       	adiw	r28, 0x0c	; 12
    18aa:	e2 e1       	ldi	r30, 0x12	; 18
    18ac:	90 c0       	rjmp	.+288    	; 0x19ce <__epilogue_restores__>

000018ae <strnlen_P>:
    18ae:	fc 01       	movw	r30, r24
    18b0:	05 90       	lpm	r0, Z+
    18b2:	61 50       	subi	r22, 0x01	; 1
    18b4:	70 40       	sbci	r23, 0x00	; 0
    18b6:	01 10       	cpse	r0, r1
    18b8:	d8 f7       	brcc	.-10     	; 0x18b0 <strnlen_P+0x2>
    18ba:	80 95       	com	r24
    18bc:	90 95       	com	r25
    18be:	8e 0f       	add	r24, r30
    18c0:	9f 1f       	adc	r25, r31
    18c2:	08 95       	ret

000018c4 <strnlen>:
    18c4:	fc 01       	movw	r30, r24
    18c6:	61 50       	subi	r22, 0x01	; 1
    18c8:	70 40       	sbci	r23, 0x00	; 0
    18ca:	01 90       	ld	r0, Z+
    18cc:	01 10       	cpse	r0, r1
    18ce:	d8 f7       	brcc	.-10     	; 0x18c6 <strnlen+0x2>
    18d0:	80 95       	com	r24
    18d2:	90 95       	com	r25
    18d4:	8e 0f       	add	r24, r30
    18d6:	9f 1f       	adc	r25, r31
    18d8:	08 95       	ret

000018da <__ultoa_invert>:
    18da:	fa 01       	movw	r30, r20
    18dc:	aa 27       	eor	r26, r26
    18de:	28 30       	cpi	r18, 0x08	; 8
    18e0:	51 f1       	breq	.+84     	; 0x1936 <__ultoa_invert+0x5c>
    18e2:	20 31       	cpi	r18, 0x10	; 16
    18e4:	81 f1       	breq	.+96     	; 0x1946 <__ultoa_invert+0x6c>
    18e6:	e8 94       	clt
    18e8:	6f 93       	push	r22
    18ea:	6e 7f       	andi	r22, 0xFE	; 254
    18ec:	6e 5f       	subi	r22, 0xFE	; 254
    18ee:	7f 4f       	sbci	r23, 0xFF	; 255
    18f0:	8f 4f       	sbci	r24, 0xFF	; 255
    18f2:	9f 4f       	sbci	r25, 0xFF	; 255
    18f4:	af 4f       	sbci	r26, 0xFF	; 255
    18f6:	b1 e0       	ldi	r27, 0x01	; 1
    18f8:	3e d0       	rcall	.+124    	; 0x1976 <__ultoa_invert+0x9c>
    18fa:	b4 e0       	ldi	r27, 0x04	; 4
    18fc:	3c d0       	rcall	.+120    	; 0x1976 <__ultoa_invert+0x9c>
    18fe:	67 0f       	add	r22, r23
    1900:	78 1f       	adc	r23, r24
    1902:	89 1f       	adc	r24, r25
    1904:	9a 1f       	adc	r25, r26
    1906:	a1 1d       	adc	r26, r1
    1908:	68 0f       	add	r22, r24
    190a:	79 1f       	adc	r23, r25
    190c:	8a 1f       	adc	r24, r26
    190e:	91 1d       	adc	r25, r1
    1910:	a1 1d       	adc	r26, r1
    1912:	6a 0f       	add	r22, r26
    1914:	71 1d       	adc	r23, r1
    1916:	81 1d       	adc	r24, r1
    1918:	91 1d       	adc	r25, r1
    191a:	a1 1d       	adc	r26, r1
    191c:	20 d0       	rcall	.+64     	; 0x195e <__ultoa_invert+0x84>
    191e:	09 f4       	brne	.+2      	; 0x1922 <__ultoa_invert+0x48>
    1920:	68 94       	set
    1922:	3f 91       	pop	r19
    1924:	2a e0       	ldi	r18, 0x0A	; 10
    1926:	26 9f       	mul	r18, r22
    1928:	11 24       	eor	r1, r1
    192a:	30 19       	sub	r19, r0
    192c:	30 5d       	subi	r19, 0xD0	; 208
    192e:	31 93       	st	Z+, r19
    1930:	de f6       	brtc	.-74     	; 0x18e8 <__ultoa_invert+0xe>
    1932:	cf 01       	movw	r24, r30
    1934:	08 95       	ret
    1936:	46 2f       	mov	r20, r22
    1938:	47 70       	andi	r20, 0x07	; 7
    193a:	40 5d       	subi	r20, 0xD0	; 208
    193c:	41 93       	st	Z+, r20
    193e:	b3 e0       	ldi	r27, 0x03	; 3
    1940:	0f d0       	rcall	.+30     	; 0x1960 <__ultoa_invert+0x86>
    1942:	c9 f7       	brne	.-14     	; 0x1936 <__ultoa_invert+0x5c>
    1944:	f6 cf       	rjmp	.-20     	; 0x1932 <__ultoa_invert+0x58>
    1946:	46 2f       	mov	r20, r22
    1948:	4f 70       	andi	r20, 0x0F	; 15
    194a:	40 5d       	subi	r20, 0xD0	; 208
    194c:	4a 33       	cpi	r20, 0x3A	; 58
    194e:	18 f0       	brcs	.+6      	; 0x1956 <__ultoa_invert+0x7c>
    1950:	49 5d       	subi	r20, 0xD9	; 217
    1952:	31 fd       	sbrc	r19, 1
    1954:	40 52       	subi	r20, 0x20	; 32
    1956:	41 93       	st	Z+, r20
    1958:	02 d0       	rcall	.+4      	; 0x195e <__ultoa_invert+0x84>
    195a:	a9 f7       	brne	.-22     	; 0x1946 <__ultoa_invert+0x6c>
    195c:	ea cf       	rjmp	.-44     	; 0x1932 <__ultoa_invert+0x58>
    195e:	b4 e0       	ldi	r27, 0x04	; 4
    1960:	a6 95       	lsr	r26
    1962:	97 95       	ror	r25
    1964:	87 95       	ror	r24
    1966:	77 95       	ror	r23
    1968:	67 95       	ror	r22
    196a:	ba 95       	dec	r27
    196c:	c9 f7       	brne	.-14     	; 0x1960 <__ultoa_invert+0x86>
    196e:	00 97       	sbiw	r24, 0x00	; 0
    1970:	61 05       	cpc	r22, r1
    1972:	71 05       	cpc	r23, r1
    1974:	08 95       	ret
    1976:	9b 01       	movw	r18, r22
    1978:	ac 01       	movw	r20, r24
    197a:	0a 2e       	mov	r0, r26
    197c:	06 94       	lsr	r0
    197e:	57 95       	ror	r21
    1980:	47 95       	ror	r20
    1982:	37 95       	ror	r19
    1984:	27 95       	ror	r18
    1986:	ba 95       	dec	r27
    1988:	c9 f7       	brne	.-14     	; 0x197c <__ultoa_invert+0xa2>
    198a:	62 0f       	add	r22, r18
    198c:	73 1f       	adc	r23, r19
    198e:	84 1f       	adc	r24, r20
    1990:	95 1f       	adc	r25, r21
    1992:	a0 1d       	adc	r26, r0
    1994:	08 95       	ret

00001996 <__prologue_saves__>:
    1996:	2f 92       	push	r2
    1998:	3f 92       	push	r3
    199a:	4f 92       	push	r4
    199c:	5f 92       	push	r5
    199e:	6f 92       	push	r6
    19a0:	7f 92       	push	r7
    19a2:	8f 92       	push	r8
    19a4:	9f 92       	push	r9
    19a6:	af 92       	push	r10
    19a8:	bf 92       	push	r11
    19aa:	cf 92       	push	r12
    19ac:	df 92       	push	r13
    19ae:	ef 92       	push	r14
    19b0:	ff 92       	push	r15
    19b2:	0f 93       	push	r16
    19b4:	1f 93       	push	r17
    19b6:	cf 93       	push	r28
    19b8:	df 93       	push	r29
    19ba:	cd b7       	in	r28, 0x3d	; 61
    19bc:	de b7       	in	r29, 0x3e	; 62
    19be:	ca 1b       	sub	r28, r26
    19c0:	db 0b       	sbc	r29, r27
    19c2:	0f b6       	in	r0, 0x3f	; 63
    19c4:	f8 94       	cli
    19c6:	de bf       	out	0x3e, r29	; 62
    19c8:	0f be       	out	0x3f, r0	; 63
    19ca:	cd bf       	out	0x3d, r28	; 61
    19cc:	09 94       	ijmp

000019ce <__epilogue_restores__>:
    19ce:	2a 88       	ldd	r2, Y+18	; 0x12
    19d0:	39 88       	ldd	r3, Y+17	; 0x11
    19d2:	48 88       	ldd	r4, Y+16	; 0x10
    19d4:	5f 84       	ldd	r5, Y+15	; 0x0f
    19d6:	6e 84       	ldd	r6, Y+14	; 0x0e
    19d8:	7d 84       	ldd	r7, Y+13	; 0x0d
    19da:	8c 84       	ldd	r8, Y+12	; 0x0c
    19dc:	9b 84       	ldd	r9, Y+11	; 0x0b
    19de:	aa 84       	ldd	r10, Y+10	; 0x0a
    19e0:	b9 84       	ldd	r11, Y+9	; 0x09
    19e2:	c8 84       	ldd	r12, Y+8	; 0x08
    19e4:	df 80       	ldd	r13, Y+7	; 0x07
    19e6:	ee 80       	ldd	r14, Y+6	; 0x06
    19e8:	fd 80       	ldd	r15, Y+5	; 0x05
    19ea:	0c 81       	ldd	r16, Y+4	; 0x04
    19ec:	1b 81       	ldd	r17, Y+3	; 0x03
    19ee:	aa 81       	ldd	r26, Y+2	; 0x02
    19f0:	b9 81       	ldd	r27, Y+1	; 0x01
    19f2:	ce 0f       	add	r28, r30
    19f4:	d1 1d       	adc	r29, r1
    19f6:	0f b6       	in	r0, 0x3f	; 63
    19f8:	f8 94       	cli
    19fa:	de bf       	out	0x3e, r29	; 62
    19fc:	0f be       	out	0x3f, r0	; 63
    19fe:	cd bf       	out	0x3d, r28	; 61
    1a00:	ed 01       	movw	r28, r26
    1a02:	08 95       	ret

00001a04 <_exit>:
    1a04:	f8 94       	cli

00001a06 <__stop_program>:
    1a06:	ff cf       	rjmp	.-2      	; 0x1a06 <__stop_program>
