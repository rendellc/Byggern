
Node1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000132  00800100  00001aec  00001b80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001aec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000013d  00800232  00800232  00001cb2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001cb2  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000328  00000000  00000000  00001d0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003856  00000000  00000000  00002036  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000012de  00000000  00000000  0000588c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001abc  00000000  00000000  00006b6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000090c  00000000  00000000  00008628  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000a18  00000000  00000000  00008f34  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001764  00000000  00000000  0000994c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002e8  00000000  00000000  0000b0b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	f5 c0       	rjmp	.+490    	; 0x1ec <__ctors_end>
       2:	00 00       	nop
       4:	0f c1       	rjmp	.+542    	; 0x224 <__bad_interrupt>
       6:	00 00       	nop
       8:	19 c1       	rjmp	.+562    	; 0x23c <__vector_2>
       a:	00 00       	nop
       c:	0b c1       	rjmp	.+534    	; 0x224 <__bad_interrupt>
       e:	00 00       	nop
      10:	09 c1       	rjmp	.+530    	; 0x224 <__bad_interrupt>
      12:	00 00       	nop
      14:	07 c1       	rjmp	.+526    	; 0x224 <__bad_interrupt>
      16:	00 00       	nop
      18:	05 c1       	rjmp	.+522    	; 0x224 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	56 c3       	rjmp	.+1708   	; 0x6ca <__vector_7>
      1e:	00 00       	nop
      20:	01 c1       	rjmp	.+514    	; 0x224 <__bad_interrupt>
      22:	00 00       	nop
      24:	ff c0       	rjmp	.+510    	; 0x224 <__bad_interrupt>
      26:	00 00       	nop
      28:	fd c0       	rjmp	.+506    	; 0x224 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	fb c0       	rjmp	.+502    	; 0x224 <__bad_interrupt>
      2e:	00 00       	nop
      30:	f9 c0       	rjmp	.+498    	; 0x224 <__bad_interrupt>
      32:	00 00       	nop
      34:	f7 c0       	rjmp	.+494    	; 0x224 <__bad_interrupt>
      36:	00 00       	nop
      38:	f5 c0       	rjmp	.+490    	; 0x224 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	f3 c0       	rjmp	.+486    	; 0x224 <__bad_interrupt>
      3e:	00 00       	nop
      40:	f1 c0       	rjmp	.+482    	; 0x224 <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 7f 08 	jmp	0x10fe	; 0x10fe <__vector_17>
      48:	ed c0       	rjmp	.+474    	; 0x224 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	0c 94 e1 08 	jmp	0x11c2	; 0x11c2 <__vector_19>
      50:	e9 c0       	rjmp	.+466    	; 0x224 <__bad_interrupt>
      52:	00 00       	nop
      54:	e7 c0       	rjmp	.+462    	; 0x224 <__bad_interrupt>
      56:	00 00       	nop
      58:	e5 c0       	rjmp	.+458    	; 0x224 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 26 09 	jmp	0x124c	; 0x124c <__vector_23>
      60:	e1 c0       	rjmp	.+450    	; 0x224 <__bad_interrupt>
      62:	00 00       	nop
      64:	df c0       	rjmp	.+446    	; 0x224 <__bad_interrupt>
      66:	00 00       	nop
      68:	dd c0       	rjmp	.+442    	; 0x224 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	db c0       	rjmp	.+438    	; 0x224 <__bad_interrupt>
	...

00000070 <__trampolines_end>:
      70:	00 00       	nop
      72:	00 00       	nop
      74:	00 5c       	subi	r16, 0xC0	; 192
      76:	00 00       	nop
      78:	0c 00       	.word	0x000c	; ????
      7a:	0c 00       	.word	0x000c	; ????
      7c:	7c 28       	or	r7, r12
      7e:	7c 28       	or	r7, r12
      80:	58 dc       	rcall	.-1872   	; 0xfffff932 <__eeprom_end+0xff7ef932>
      82:	68 00       	.word	0x0068	; ????
      84:	24 10       	cpse	r2, r4
      86:	48 00       	.word	0x0048	; ????
      88:	28 54       	subi	r18, 0x48	; 72
      8a:	28 40       	sbci	r18, 0x08	; 8
      8c:	00 0c       	add	r0, r0
      8e:	00 00       	nop
      90:	00 78       	andi	r16, 0x80	; 128
      92:	84 00       	.word	0x0084	; ????
      94:	84 78       	andi	r24, 0x84	; 132
      96:	00 00       	nop
      98:	54 38       	cpi	r21, 0x84	; 132
      9a:	54 00       	.word	0x0054	; ????
      9c:	10 7c       	andi	r17, 0xC0	; 192
      9e:	10 00       	.word	0x0010	; ????
      a0:	80 40       	sbci	r24, 0x00	; 0
      a2:	00 00       	nop
      a4:	10 10       	cpse	r1, r0
      a6:	10 00       	.word	0x0010	; ????
      a8:	00 40       	sbci	r16, 0x00	; 0
      aa:	00 00       	nop
      ac:	60 10       	cpse	r6, r0
      ae:	0c 00       	.word	0x000c	; ????
      b0:	38 54       	subi	r19, 0x48	; 72
      b2:	38 00       	.word	0x0038	; ????
      b4:	48 7c       	andi	r20, 0xC8	; 200
      b6:	40 00       	.word	0x0040	; ????
      b8:	48 64       	ori	r20, 0x48	; 72
      ba:	58 00       	.word	0x0058	; ????
      bc:	44 54       	subi	r20, 0x44	; 68
      be:	2c 00       	.word	0x002c	; ????
      c0:	1c 10       	cpse	r1, r12
      c2:	7c 00       	.word	0x007c	; ????
      c4:	5c 54       	subi	r21, 0x4C	; 76
      c6:	24 00       	.word	0x0024	; ????
      c8:	38 54       	subi	r19, 0x48	; 72
      ca:	24 00       	.word	0x0024	; ????
      cc:	64 14       	cp	r6, r4
      ce:	0c 00       	.word	0x000c	; ????
      d0:	68 54       	subi	r22, 0x48	; 72
      d2:	2c 00       	.word	0x002c	; ????
      d4:	48 54       	subi	r20, 0x48	; 72
      d6:	38 00       	.word	0x0038	; ????
      d8:	00 48       	sbci	r16, 0x80	; 128
      da:	00 00       	nop
      dc:	80 48       	sbci	r24, 0x80	; 128
      de:	00 00       	nop
      e0:	10 28       	or	r1, r0
      e2:	44 00       	.word	0x0044	; ????
      e4:	28 28       	or	r2, r8
      e6:	28 00       	.word	0x0028	; ????
      e8:	44 28       	or	r4, r4
      ea:	10 00       	.word	0x0010	; ????
      ec:	04 54       	subi	r16, 0x44	; 68
      ee:	08 00       	.word	0x0008	; ????
      f0:	38 44       	sbci	r19, 0x48	; 72
      f2:	5c 00       	.word	0x005c	; ????
      f4:	78 14       	cp	r7, r8
      f6:	78 00       	.word	0x0078	; ????
      f8:	7c 54       	subi	r23, 0x4C	; 76
      fa:	28 00       	.word	0x0028	; ????
      fc:	38 44       	sbci	r19, 0x48	; 72
      fe:	28 00       	.word	0x0028	; ????
     100:	7c 44       	sbci	r23, 0x4C	; 76
     102:	38 00       	.word	0x0038	; ????
     104:	7c 54       	subi	r23, 0x4C	; 76
     106:	44 00       	.word	0x0044	; ????
     108:	7c 14       	cp	r7, r12
     10a:	04 00       	.word	0x0004	; ????
     10c:	38 44       	sbci	r19, 0x48	; 72
     10e:	74 00       	.word	0x0074	; ????
     110:	7c 10       	cpse	r7, r12
     112:	7c 00       	.word	0x007c	; ????
     114:	44 7c       	andi	r20, 0xC4	; 196
     116:	44 00       	.word	0x0044	; ????
     118:	20 40       	sbci	r18, 0x00	; 0
     11a:	3c 00       	.word	0x003c	; ????
     11c:	7c 10       	cpse	r7, r12
     11e:	6c 00       	.word	0x006c	; ????
     120:	7c 40       	sbci	r23, 0x0C	; 12
     122:	40 00       	.word	0x0040	; ????
     124:	7c 18       	sub	r7, r12
     126:	7c 00       	.word	0x007c	; ????
     128:	78 10       	cpse	r7, r8
     12a:	3c 00       	.word	0x003c	; ????
     12c:	38 44       	sbci	r19, 0x48	; 72
     12e:	38 00       	.word	0x0038	; ????
     130:	7c 14       	cp	r7, r12
     132:	08 00       	.word	0x0008	; ????
     134:	38 44       	sbci	r19, 0x48	; 72
     136:	b8 00       	.word	0x00b8	; ????
     138:	7c 14       	cp	r7, r12
     13a:	68 00       	.word	0x0068	; ????
     13c:	48 54       	subi	r20, 0x48	; 72
     13e:	24 00       	.word	0x0024	; ????
     140:	04 7c       	andi	r16, 0xC4	; 196
     142:	04 00       	.word	0x0004	; ????
     144:	7c 40       	sbci	r23, 0x0C	; 12
     146:	7c 00       	.word	0x007c	; ????
     148:	3c 60       	ori	r19, 0x0C	; 12
     14a:	3c 00       	.word	0x003c	; ????
     14c:	7c 30       	cpi	r23, 0x0C	; 12
     14e:	7c 00       	.word	0x007c	; ????
     150:	6c 10       	cpse	r6, r12
     152:	6c 00       	.word	0x006c	; ????
     154:	0c 70       	andi	r16, 0x0C	; 12
     156:	0c 00       	.word	0x000c	; ????
     158:	64 54       	subi	r22, 0x44	; 68
     15a:	4c 00       	.word	0x004c	; ????
     15c:	00 7c       	andi	r16, 0xC0	; 192
     15e:	44 00       	.word	0x0044	; ????
     160:	0c 10       	cpse	r0, r12
     162:	60 00       	.word	0x0060	; ????
     164:	44 7c       	andi	r20, 0xC4	; 196
     166:	00 00       	nop
     168:	08 04       	cpc	r0, r8
     16a:	08 00       	.word	0x0008	; ????
     16c:	80 80       	ld	r8, Z
     16e:	80 00       	.word	0x0080	; ????
     170:	00 04       	cpc	r0, r0
     172:	08 00       	.word	0x0008	; ????
     174:	30 48       	sbci	r19, 0x80	; 128
     176:	78 00       	.word	0x0078	; ????
     178:	7c 48       	sbci	r23, 0x8C	; 140
     17a:	30 00       	.word	0x0030	; ????
     17c:	30 48       	sbci	r19, 0x80	; 128
     17e:	48 00       	.word	0x0048	; ????
     180:	30 48       	sbci	r19, 0x80	; 128
     182:	7c 00       	.word	0x007c	; ????
     184:	30 68       	ori	r19, 0x80	; 128
     186:	50 00       	.word	0x0050	; ????
     188:	10 78       	andi	r17, 0x80	; 128
     18a:	14 00       	.word	0x0014	; ????
     18c:	90 a8       	ldd	r9, Z+48	; 0x30
     18e:	78 00       	.word	0x0078	; ????
     190:	7c 08       	sbc	r7, r12
     192:	70 00       	.word	0x0070	; ????
     194:	50 74       	andi	r21, 0x40	; 64
     196:	40 00       	.word	0x0040	; ????
     198:	80 80       	ld	r8, Z
     19a:	74 00       	.word	0x0074	; ????
     19c:	7c 10       	cpse	r7, r12
     19e:	68 00       	.word	0x0068	; ????
     1a0:	44 7c       	andi	r20, 0xC4	; 196
     1a2:	40 00       	.word	0x0040	; ????
     1a4:	78 10       	cpse	r7, r8
     1a6:	78 00       	.word	0x0078	; ????
     1a8:	78 08       	sbc	r7, r8
     1aa:	70 00       	.word	0x0070	; ????
     1ac:	30 48       	sbci	r19, 0x80	; 128
     1ae:	30 00       	.word	0x0030	; ????
     1b0:	f8 28       	or	r15, r8
     1b2:	10 00       	.word	0x0010	; ????
     1b4:	30 48       	sbci	r19, 0x80	; 128
     1b6:	f8 00       	.word	0x00f8	; ????
     1b8:	78 10       	cpse	r7, r8
     1ba:	08 00       	.word	0x0008	; ????
     1bc:	50 58       	subi	r21, 0x80	; 128
     1be:	28 00       	.word	0x0028	; ????
     1c0:	08 3c       	cpi	r16, 0xC8	; 200
     1c2:	48 00       	.word	0x0048	; ????
     1c4:	38 40       	sbci	r19, 0x08	; 8
     1c6:	78 00       	.word	0x0078	; ????
     1c8:	38 40       	sbci	r19, 0x08	; 8
     1ca:	38 00       	.word	0x0038	; ????
     1cc:	78 20       	and	r7, r8
     1ce:	78 00       	.word	0x0078	; ????
     1d0:	48 30       	cpi	r20, 0x08	; 8
     1d2:	48 00       	.word	0x0048	; ????
     1d4:	98 a0       	ldd	r9, Y+32	; 0x20
     1d6:	78 00       	.word	0x0078	; ????
     1d8:	48 68       	ori	r20, 0x88	; 136
     1da:	58 00       	.word	0x0058	; ????
     1dc:	10 78       	andi	r17, 0x80	; 128
     1de:	84 00       	.word	0x0084	; ????
     1e0:	00 7c       	andi	r16, 0xC0	; 192
     1e2:	00 00       	nop
     1e4:	84 78       	andi	r24, 0x84	; 132
     1e6:	10 00       	.word	0x0010	; ????
     1e8:	08 04       	cpc	r0, r8
     1ea:	08 04       	cpc	r0, r8

000001ec <__ctors_end>:
     1ec:	11 24       	eor	r1, r1
     1ee:	1f be       	out	0x3f, r1	; 63
     1f0:	cf ef       	ldi	r28, 0xFF	; 255
     1f2:	d4 e0       	ldi	r29, 0x04	; 4
     1f4:	de bf       	out	0x3e, r29	; 62
     1f6:	cd bf       	out	0x3d, r28	; 61

000001f8 <__do_copy_data>:
     1f8:	12 e0       	ldi	r17, 0x02	; 2
     1fa:	a0 e0       	ldi	r26, 0x00	; 0
     1fc:	b1 e0       	ldi	r27, 0x01	; 1
     1fe:	ec ee       	ldi	r30, 0xEC	; 236
     200:	fa e1       	ldi	r31, 0x1A	; 26
     202:	02 c0       	rjmp	.+4      	; 0x208 <__do_copy_data+0x10>
     204:	05 90       	lpm	r0, Z+
     206:	0d 92       	st	X+, r0
     208:	a2 33       	cpi	r26, 0x32	; 50
     20a:	b1 07       	cpc	r27, r17
     20c:	d9 f7       	brne	.-10     	; 0x204 <__do_copy_data+0xc>

0000020e <__do_clear_bss>:
     20e:	23 e0       	ldi	r18, 0x03	; 3
     210:	a2 e3       	ldi	r26, 0x32	; 50
     212:	b2 e0       	ldi	r27, 0x02	; 2
     214:	01 c0       	rjmp	.+2      	; 0x218 <.do_clear_bss_start>

00000216 <.do_clear_bss_loop>:
     216:	1d 92       	st	X+, r1

00000218 <.do_clear_bss_start>:
     218:	af 36       	cpi	r26, 0x6F	; 111
     21a:	b2 07       	cpc	r27, r18
     21c:	e1 f7       	brne	.-8      	; 0x216 <.do_clear_bss_loop>
     21e:	90 d3       	rcall	.+1824   	; 0x940 <main>
     220:	0c 94 74 0d 	jmp	0x1ae8	; 0x1ae8 <_exit>

00000224 <__bad_interrupt>:
     224:	ed ce       	rjmp	.-550    	; 0x0 <__vectors>

00000226 <adc_init>:
/*!
 * Initialize atmega162 to interface with the interrupt signal
 * of the ADC through Port D pin 2
 */
void adc_init(void){
	DDRD  &= ~(1 << DDD2);
     226:	8a 98       	cbi	0x11, 2	; 17
	PORTD |=  (1 << PD2);
     228:	92 9a       	sbi	0x12, 2	; 18
     22a:	08 95       	ret

0000022c <adc_read_channel>:
 * @param[in] ch analog channel to perform conversion on
 * @return digital read of analog signal
 */
uint8_t adc_read_channel(uint8_t ch)
{	
	*adc_adr = (ch | 0b0100);
     22c:	84 60       	ori	r24, 0x04	; 4
     22e:	80 93 00 11 	sts	0x1100, r24
	
	while ((PIND & (1<<PIND2))); // wait until pin is high, adc read complete when pin is high
     232:	82 99       	sbic	0x10, 2	; 16
     234:	fe cf       	rjmp	.-4      	; 0x232 <adc_read_channel+0x6>
	
	return *adc_adr;
     236:	80 91 00 11 	lds	r24, 0x1100
}
     23a:	08 95       	ret

0000023c <__vector_2>:
	fprintf(&uart_out, "SID:%i\n", msg.sid);
	for (uint8_t i = 0; i < msg.length; ++i)
	{
		fprintf(&uart_out, "%x ", msg.data[i]);
	}
	fprintf(&uart_out, "\n");
     23c:	1f 92       	push	r1
     23e:	0f 92       	push	r0
     240:	0f b6       	in	r0, 0x3f	; 63
     242:	0f 92       	push	r0
     244:	11 24       	eor	r1, r1
     246:	df 92       	push	r13
     248:	ef 92       	push	r14
     24a:	ff 92       	push	r15
     24c:	0f 93       	push	r16
     24e:	1f 93       	push	r17
     250:	2f 93       	push	r18
     252:	3f 93       	push	r19
     254:	4f 93       	push	r20
     256:	5f 93       	push	r21
     258:	6f 93       	push	r22
     25a:	7f 93       	push	r23
     25c:	8f 93       	push	r24
     25e:	9f 93       	push	r25
     260:	af 93       	push	r26
     262:	bf 93       	push	r27
     264:	ef 93       	push	r30
     266:	ff 93       	push	r31
     268:	cf 93       	push	r28
     26a:	df 93       	push	r29
     26c:	cd b7       	in	r28, 0x3d	; 61
     26e:	de b7       	in	r29, 0x3e	; 62
     270:	2e 97       	sbiw	r28, 0x0e	; 14
     272:	de bf       	out	0x3e, r29	; 62
     274:	cd bf       	out	0x3d, r28	; 61
     276:	1e 86       	std	Y+14, r1	; 0x0e
     278:	80 e6       	ldi	r24, 0x60	; 96
     27a:	8d 87       	std	Y+13, r24	; 0x0d
     27c:	80 e9       	ldi	r24, 0x90	; 144
     27e:	8c 87       	std	Y+12, r24	; 0x0c
     280:	11 e0       	ldi	r17, 0x01	; 1
     282:	1b 87       	std	Y+11, r17	; 0x0b
     284:	ca d3       	rcall	.+1940   	; 0xa1a <mcp_readstatus>
     286:	81 ff       	sbrs	r24, 1
     288:	07 c0       	rjmp	.+14     	; 0x298 <__vector_2+0x5c>
     28a:	1e 87       	std	Y+14, r17	; 0x0e
     28c:	80 e7       	ldi	r24, 0x70	; 112
     28e:	8d 87       	std	Y+13, r24	; 0x0d
     290:	84 e9       	ldi	r24, 0x94	; 148
     292:	8c 87       	std	Y+12, r24	; 0x0c
     294:	82 e0       	ldi	r24, 0x02	; 2
     296:	8b 87       	std	Y+11, r24	; 0x0b
     298:	8e 01       	movw	r16, r28
     29a:	0f 5f       	subi	r16, 0xFF	; 255
     29c:	1f 4f       	sbci	r17, 0xFF	; 255
     29e:	8a e0       	ldi	r24, 0x0A	; 10
     2a0:	f8 01       	movw	r30, r16
     2a2:	11 92       	st	Z+, r1
     2a4:	8a 95       	dec	r24
     2a6:	e9 f7       	brne	.-6      	; 0x2a2 <__vector_2+0x66>
     2a8:	8d 85       	ldd	r24, Y+13	; 0x0d
     2aa:	85 66       	ori	r24, 0x65	; 101
     2ac:	76 d3       	rcall	.+1772   	; 0x99a <mcp_read>
     2ae:	8f 70       	andi	r24, 0x0F	; 15
     2b0:	8a 83       	std	Y+2, r24	; 0x02
     2b2:	48 d7       	rcall	.+3728   	; 0x1144 <spi_ss_low>
     2b4:	8c 85       	ldd	r24, Y+12	; 0x0c
     2b6:	51 d7       	rcall	.+3746   	; 0x115a <spi_transmit>
     2b8:	80 e0       	ldi	r24, 0x00	; 0
     2ba:	4f d7       	rcall	.+3742   	; 0x115a <spi_transmit>
     2bc:	89 83       	std	Y+1, r24	; 0x01
     2be:	44 d7       	rcall	.+3720   	; 0x1148 <spi_ss_high>
     2c0:	41 d7       	rcall	.+3714   	; 0x1144 <spi_ss_low>
     2c2:	8c 85       	ldd	r24, Y+12	; 0x0c
     2c4:	82 60       	ori	r24, 0x02	; 2
     2c6:	49 d7       	rcall	.+3730   	; 0x115a <spi_transmit>
     2c8:	d1 2c       	mov	r13, r1
     2ca:	8a 81       	ldd	r24, Y+2	; 0x02
     2cc:	d8 16       	cp	r13, r24
     2ce:	68 f4       	brcc	.+26     	; 0x2ea <__vector_2+0xae>
     2d0:	ed 2c       	mov	r14, r13
     2d2:	f1 2c       	mov	r15, r1
     2d4:	80 e0       	ldi	r24, 0x00	; 0
     2d6:	41 d7       	rcall	.+3714   	; 0x115a <spi_transmit>
     2d8:	e3 e0       	ldi	r30, 0x03	; 3
     2da:	f0 e0       	ldi	r31, 0x00	; 0
     2dc:	ec 0f       	add	r30, r28
     2de:	fd 1f       	adc	r31, r29
     2e0:	ee 0d       	add	r30, r14
     2e2:	ff 1d       	adc	r31, r15
     2e4:	80 83       	st	Z, r24
     2e6:	d3 94       	inc	r13
     2e8:	f0 cf       	rjmp	.-32     	; 0x2ca <__vector_2+0x8e>
     2ea:	2e d7       	rcall	.+3676   	; 0x1148 <spi_ss_high>
     2ec:	2e 85       	ldd	r18, Y+14	; 0x0e
     2ee:	ae 85       	ldd	r26, Y+14	; 0x0e
     2f0:	b0 e0       	ldi	r27, 0x00	; 0
     2f2:	ac 5c       	subi	r26, 0xCC	; 204
     2f4:	bd 4f       	sbci	r27, 0xFD	; 253
     2f6:	9c 91       	ld	r25, X
     2f8:	8a e0       	ldi	r24, 0x0A	; 10
     2fa:	f0 e5       	ldi	r31, 0x50	; 80
     2fc:	2f 9f       	mul	r18, r31
     2fe:	d0 01       	movw	r26, r0
     300:	11 24       	eor	r1, r1
     302:	89 9f       	mul	r24, r25
     304:	a0 0d       	add	r26, r0
     306:	b1 1d       	adc	r27, r1
     308:	11 24       	eor	r1, r1
     30a:	aa 5c       	subi	r26, 0xCA	; 202
     30c:	bd 4f       	sbci	r27, 0xFD	; 253
     30e:	f8 01       	movw	r30, r16
     310:	01 90       	ld	r0, Z+
     312:	0d 92       	st	X+, r0
     314:	8a 95       	dec	r24
     316:	e1 f7       	brne	.-8      	; 0x310 <__vector_2+0xd4>
     318:	ee 85       	ldd	r30, Y+14	; 0x0e
     31a:	f0 e0       	ldi	r31, 0x00	; 0
     31c:	ae 85       	ldd	r26, Y+14	; 0x0e
     31e:	b0 e0       	ldi	r27, 0x00	; 0
     320:	ac 5c       	subi	r26, 0xCC	; 204
     322:	bd 4f       	sbci	r27, 0xFD	; 253
     324:	8c 91       	ld	r24, X
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	01 96       	adiw	r24, 0x01	; 1
     32a:	87 70       	andi	r24, 0x07	; 7
     32c:	99 27       	eor	r25, r25
     32e:	ec 5c       	subi	r30, 0xCC	; 204
     330:	fd 4f       	sbci	r31, 0xFD	; 253
     332:	80 83       	st	Z, r24
     334:	6b 85       	ldd	r22, Y+11	; 0x0b
     336:	40 e0       	ldi	r20, 0x00	; 0
     338:	8c e2       	ldi	r24, 0x2C	; 44
     33a:	80 d3       	rcall	.+1792   	; 0xa3c <mcp_bitmodify>
     33c:	2e 96       	adiw	r28, 0x0e	; 14
     33e:	0f b6       	in	r0, 0x3f	; 63
     340:	f8 94       	cli
     342:	de bf       	out	0x3e, r29	; 62
     344:	0f be       	out	0x3f, r0	; 63
     346:	cd bf       	out	0x3d, r28	; 61
     348:	df 91       	pop	r29
     34a:	cf 91       	pop	r28
     34c:	ff 91       	pop	r31
     34e:	ef 91       	pop	r30
     350:	bf 91       	pop	r27
     352:	af 91       	pop	r26
     354:	9f 91       	pop	r25
     356:	8f 91       	pop	r24
     358:	7f 91       	pop	r23
     35a:	6f 91       	pop	r22
     35c:	5f 91       	pop	r21
     35e:	4f 91       	pop	r20
     360:	3f 91       	pop	r19
     362:	2f 91       	pop	r18
     364:	1f 91       	pop	r17
     366:	0f 91       	pop	r16
     368:	ff 90       	pop	r15
     36a:	ef 90       	pop	r14
     36c:	df 90       	pop	r13
     36e:	0f 90       	pop	r0
     370:	0f be       	out	0x3f, r0	; 63
     372:	0f 90       	pop	r0
     374:	1f 90       	pop	r1
     376:	18 95       	reti

00000378 <can_init>:
     378:	7b d3       	rcall	.+1782   	; 0xa70 <mcp_init>
     37a:	43 e0       	ldi	r20, 0x03	; 3
     37c:	63 e0       	ldi	r22, 0x03	; 3
     37e:	8b e2       	ldi	r24, 0x2B	; 43
     380:	5d d3       	rcall	.+1722   	; 0xa3c <mcp_bitmodify>
     382:	8b b7       	in	r24, 0x3b	; 59
     384:	80 68       	ori	r24, 0x80	; 128
     386:	8b bf       	out	0x3b, r24	; 59
     388:	08 95       	ret

0000038a <can_send>:
 * Send message on can bus using the specified tx hardware buffer.
 * @param msg Msg to send on bus
 * @param tx_buffer_select Tx buffer to put the message into. 
 */
void can_send(can_msg_t msg, uint8_t tx_buffer_select)
{
     38a:	cf 92       	push	r12
     38c:	df 92       	push	r13
     38e:	ef 92       	push	r14
     390:	ff 92       	push	r15
     392:	0f 93       	push	r16
     394:	1f 93       	push	r17
     396:	cf 93       	push	r28
     398:	df 93       	push	r29
     39a:	cd b7       	in	r28, 0x3d	; 61
     39c:	de b7       	in	r29, 0x3e	; 62
     39e:	2a 97       	sbiw	r28, 0x0a	; 10
     3a0:	0f b6       	in	r0, 0x3f	; 63
     3a2:	f8 94       	cli
     3a4:	de bf       	out	0x3e, r29	; 62
     3a6:	0f be       	out	0x3f, r0	; 63
     3a8:	cd bf       	out	0x3d, r28	; 61
     3aa:	09 83       	std	Y+1, r16	; 0x01
     3ac:	f1 2e       	mov	r15, r17
     3ae:	1a 83       	std	Y+2, r17	; 0x02
     3b0:	2b 83       	std	Y+3, r18	; 0x03
     3b2:	3c 83       	std	Y+4, r19	; 0x04
     3b4:	4d 83       	std	Y+5, r20	; 0x05
     3b6:	5e 83       	std	Y+6, r21	; 0x06
     3b8:	6f 83       	std	Y+7, r22	; 0x07
     3ba:	78 87       	std	Y+8, r23	; 0x08
     3bc:	89 87       	std	Y+9, r24	; 0x09
     3be:	9a 87       	std	Y+10, r25	; 0x0a
	/// \todo check for buffer full, can return false if buffer is full
	
	uint8_t MCP_TXBn = MCP_TXB0;
	uint8_t MCP_LOAD_TXn = MCP_LOAD_TX0;
	switch (tx_buffer_select)
     3c0:	81 e0       	ldi	r24, 0x01	; 1
     3c2:	e8 16       	cp	r14, r24
     3c4:	31 f0       	breq	.+12     	; 0x3d2 <can_send+0x48>
     3c6:	e2 e0       	ldi	r30, 0x02	; 2
     3c8:	ee 12       	cpse	r14, r30
     3ca:	06 c0       	rjmp	.+12     	; 0x3d8 <can_send+0x4e>
		MCP_TXBn = MCP_TXB1;
		MCP_LOAD_TXn = MCP_LOAD_TX1;
		break;
	case 2:
		MCP_TXBn = MCP_TXB2;
		MCP_LOAD_TXn = MCP_LOAD_TX2;
     3cc:	14 e4       	ldi	r17, 0x44	; 68
	case 1:
		MCP_TXBn = MCP_TXB1;
		MCP_LOAD_TXn = MCP_LOAD_TX1;
		break;
	case 2:
		MCP_TXBn = MCP_TXB2;
     3ce:	00 e5       	ldi	r16, 0x50	; 80
		MCP_LOAD_TXn = MCP_LOAD_TX2;
		break;
     3d0:	05 c0       	rjmp	.+10     	; 0x3dc <can_send+0x52>
		MCP_TXBn = MCP_TXB0;
		MCP_LOAD_TXn = MCP_LOAD_TX0;
		break;
	case 1:
		MCP_TXBn = MCP_TXB1;
		MCP_LOAD_TXn = MCP_LOAD_TX1;
     3d2:	12 e4       	ldi	r17, 0x42	; 66
	case 0:
		MCP_TXBn = MCP_TXB0;
		MCP_LOAD_TXn = MCP_LOAD_TX0;
		break;
	case 1:
		MCP_TXBn = MCP_TXB1;
     3d4:	00 e4       	ldi	r16, 0x40	; 64
     3d6:	02 c0       	rjmp	.+4      	; 0x3dc <can_send+0x52>
void can_send(can_msg_t msg, uint8_t tx_buffer_select)
{
	/// \todo check for buffer full, can return false if buffer is full
	
	uint8_t MCP_TXBn = MCP_TXB0;
	uint8_t MCP_LOAD_TXn = MCP_LOAD_TX0;
     3d8:	10 e4       	ldi	r17, 0x40	; 64
 */
void can_send(can_msg_t msg, uint8_t tx_buffer_select)
{
	/// \todo check for buffer full, can return false if buffer is full
	
	uint8_t MCP_TXBn = MCP_TXB0;
     3da:	00 e3       	ldi	r16, 0x30	; 48
		break;
	}
	//fprintf(&uart_out, "MCP_TXBn=%x\tMCP_LOAD_TXn=%x\n", MCP_TXBn, MCP_LOAD_TXn);
	
	// set tx length
	mcp_write(MCP_TXBn | MCP_TXBnDLC, msg.length);
     3dc:	6f 2d       	mov	r22, r15
     3de:	80 2f       	mov	r24, r16
     3e0:	85 60       	ori	r24, 0x05	; 5
     3e2:	f1 d2       	rcall	.+1506   	; 0x9c6 <mcp_write>
	
	// write sid
	mcp_write(MCP_TXBn | MCP_TXBnSIDL, 0x00);		// use only SIDH
     3e4:	60 e0       	ldi	r22, 0x00	; 0
     3e6:	80 2f       	mov	r24, r16
     3e8:	82 60       	ori	r24, 0x02	; 2
     3ea:	ed d2       	rcall	.+1498   	; 0x9c6 <mcp_write>
	mcp_write(MCP_TXBn | MCP_TXBnSIDH , msg.sid);
     3ec:	69 81       	ldd	r22, Y+1	; 0x01
     3ee:	80 2f       	mov	r24, r16
     3f0:	81 60       	ori	r24, 0x01	; 1
     3f2:	e9 d2       	rcall	.+1490   	; 0x9c6 <mcp_write>
	
	// write data
	spi_ss_low();
     3f4:	a7 d6       	rcall	.+3406   	; 0x1144 <spi_ss_low>
	spi_transmit(MCP_LOAD_TXn | 0x01); ///\todo add define to explain
     3f6:	81 2f       	mov	r24, r17
     3f8:	81 60       	ori	r24, 0x01	; 1
     3fa:	af d6       	rcall	.+3422   	; 0x115a <spi_transmit>
     3fc:	6e 01       	movw	r12, r28
     3fe:	f3 e0       	ldi	r31, 0x03	; 3
     400:	cf 0e       	add	r12, r31
     402:	d1 1c       	adc	r13, r1
	for (uint8_t i = 0; i < msg.length; ++i)
     404:	86 01       	movw	r16, r12
     406:	80 2f       	mov	r24, r16
     408:	8c 19       	sub	r24, r12
     40a:	8f 15       	cp	r24, r15
     40c:	28 f4       	brcc	.+10     	; 0x418 <can_send+0x8e>
	{
		spi_transmit(msg.data[i]);
     40e:	f8 01       	movw	r30, r16
     410:	81 91       	ld	r24, Z+
     412:	8f 01       	movw	r16, r30
     414:	a2 d6       	rcall	.+3396   	; 0x115a <spi_transmit>
     416:	f7 cf       	rjmp	.-18     	; 0x406 <can_send+0x7c>
	}
	spi_ss_high();
     418:	97 d6       	rcall	.+3374   	; 0x1148 <spi_ss_high>
	
	mcp_rts(tx_buffer_select);
     41a:	8e 2d       	mov	r24, r14
     41c:	e9 d2       	rcall	.+1490   	; 0x9f0 <mcp_rts>

}
     41e:	2a 96       	adiw	r28, 0x0a	; 10
     420:	0f b6       	in	r0, 0x3f	; 63
     422:	f8 94       	cli
     424:	de bf       	out	0x3e, r29	; 62
     426:	0f be       	out	0x3f, r0	; 63
     428:	cd bf       	out	0x3d, r28	; 61
     42a:	df 91       	pop	r29
     42c:	cf 91       	pop	r28
     42e:	1f 91       	pop	r17
     430:	0f 91       	pop	r16
     432:	ff 90       	pop	r15
     434:	ef 90       	pop	r14
     436:	df 90       	pop	r13
     438:	cf 90       	pop	r12
     43a:	08 95       	ret

0000043c <can_read_buffer>:
 * @param rx_buffer_select 0 or 1, which buffer too read from. Undefined behaviour for other values.
 * @return return the oldest message in the buffer. If buffer is empty, then returned
 * 		   message will have SID = MSG_INVALID and length=0. 
 */
can_msg_t can_read_buffer(uint8_t rx_buffer_select)
{
     43c:	cf 93       	push	r28
     43e:	df 93       	push	r29
	const uint8_t n = rx_buffer_select; // not different but just a shorter variable name
	
	can_msg_t msg = {};
     440:	2a e0       	ldi	r18, 0x0A	; 10
     442:	fc 01       	movw	r30, r24
     444:	32 2f       	mov	r19, r18
     446:	11 92       	st	Z+, r1
     448:	3a 95       	dec	r19
     44a:	e9 f7       	brne	.-6      	; 0x446 <can_read_buffer+0xa>
	
	if (rx_head[n] != rx_tail[n])
     44c:	70 e0       	ldi	r23, 0x00	; 0
     44e:	fb 01       	movw	r30, r22
     450:	ec 5c       	subi	r30, 0xCC	; 204
     452:	fd 4f       	sbci	r31, 0xFD	; 253
     454:	40 81       	ld	r20, Z
     456:	eb 01       	movw	r28, r22
     458:	ce 5c       	subi	r28, 0xCE	; 206
     45a:	dd 4f       	sbci	r29, 0xFD	; 253
     45c:	38 81       	ld	r19, Y
     45e:	43 17       	cp	r20, r19
     460:	c9 f0       	breq	.+50     	; 0x494 <can_read_buffer+0x58>
	{
		msg = rx_buffer[n][rx_tail[n]];
     462:	38 81       	ld	r19, Y
     464:	40 e5       	ldi	r20, 0x50	; 80
     466:	46 9f       	mul	r20, r22
     468:	f0 01       	movw	r30, r0
     46a:	47 9f       	mul	r20, r23
     46c:	f0 0d       	add	r31, r0
     46e:	11 24       	eor	r1, r1
     470:	23 9f       	mul	r18, r19
     472:	e0 0d       	add	r30, r0
     474:	f1 1d       	adc	r31, r1
     476:	11 24       	eor	r1, r1
     478:	ea 5c       	subi	r30, 0xCA	; 202
     47a:	fd 4f       	sbci	r31, 0xFD	; 253
     47c:	dc 01       	movw	r26, r24
     47e:	01 90       	ld	r0, Z+
     480:	0d 92       	st	X+, r0
     482:	2a 95       	dec	r18
     484:	e1 f7       	brne	.-8      	; 0x47e <can_read_buffer+0x42>
		rx_tail[n] = (rx_tail[n] + 1)%RX_BUFFER_MAX;
     486:	28 81       	ld	r18, Y
     488:	30 e0       	ldi	r19, 0x00	; 0
     48a:	2f 5f       	subi	r18, 0xFF	; 255
     48c:	3f 4f       	sbci	r19, 0xFF	; 255
     48e:	27 70       	andi	r18, 0x07	; 7
     490:	33 27       	eor	r19, r19
     492:	28 83       	st	Y, r18
	}
		
	return msg;
}
     494:	df 91       	pop	r29
     496:	cf 91       	pop	r28
     498:	08 95       	ret

0000049a <game_init>:
	menu_handle_input();
}


void game_set_state(game_state_t state){
	game_state = state;
     49a:	81 e0       	ldi	r24, 0x01	; 1
     49c:	80 93 d9 02 	sts	0x02D9, r24
     4a0:	eb e8       	ldi	r30, 0x8B	; 139
     4a2:	f0 e0       	ldi	r31, 0x00	; 0
     4a4:	80 81       	ld	r24, Z
     4a6:	80 68       	ori	r24, 0x80	; 128
     4a8:	80 83       	st	Z, r24
     4aa:	ea e8       	ldi	r30, 0x8A	; 138
     4ac:	f0 e0       	ldi	r31, 0x00	; 0
     4ae:	80 81       	ld	r24, Z
     4b0:	8c 60       	ori	r24, 0x0C	; 12
     4b2:	80 83       	st	Z, r24
     4b4:	82 e8       	ldi	r24, 0x82	; 130
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	90 93 87 00 	sts	0x0087, r25
     4bc:	80 93 86 00 	sts	0x0086, r24
     4c0:	ed e7       	ldi	r30, 0x7D	; 125
     4c2:	f0 e0       	ldi	r31, 0x00	; 0
     4c4:	80 81       	ld	r24, Z
     4c6:	80 61       	ori	r24, 0x10	; 16
     4c8:	80 83       	st	Z, r24
     4ca:	08 95       	ret

000004cc <game_tick_paused>:
     4cc:	ef 92       	push	r14
     4ce:	0f 93       	push	r16
     4d0:	1f 93       	push	r17
     4d2:	cf 93       	push	r28
     4d4:	df 93       	push	r29
     4d6:	cd b7       	in	r28, 0x3d	; 61
     4d8:	de b7       	in	r29, 0x3e	; 62
     4da:	2a 97       	sbiw	r28, 0x0a	; 10
     4dc:	0f b6       	in	r0, 0x3f	; 63
     4de:	f8 94       	cli
     4e0:	de bf       	out	0x3e, r29	; 62
     4e2:	0f be       	out	0x3f, r0	; 63
     4e4:	cd bf       	out	0x3d, r28	; 61
     4e6:	80 91 d7 02 	lds	r24, 0x02D7
     4ea:	81 11       	cpse	r24, r1
     4ec:	09 c0       	rjmp	.+18     	; 0x500 <__stack+0x1>
     4ee:	81 e0       	ldi	r24, 0x01	; 1
     4f0:	80 93 d7 02 	sts	0x02D7, r24
     4f4:	68 e2       	ldi	r22, 0x28	; 40
     4f6:	71 e0       	ldi	r23, 0x01	; 1
     4f8:	86 e3       	ldi	r24, 0x36	; 54
     4fa:	91 e0       	ldi	r25, 0x01	; 1
     4fc:	0e 94 de 0a 	call	0x15bc	; 0x15bc <fputs>
     500:	15 d2       	rcall	.+1066   	; 0x92c <touch_get_state>
     502:	91 3f       	cpi	r25, 0xF1	; 241
     504:	b0 f0       	brcs	.+44     	; 0x532 <__stack+0x33>
     506:	fe 01       	movw	r30, r28
     508:	31 96       	adiw	r30, 0x01	; 1
     50a:	8a e0       	ldi	r24, 0x0A	; 10
     50c:	df 01       	movw	r26, r30
     50e:	1d 92       	st	X+, r1
     510:	8a 95       	dec	r24
     512:	e9 f7       	brne	.-6      	; 0x50e <__stack+0xf>
     514:	e1 2c       	mov	r14, r1
     516:	01 e0       	ldi	r16, 0x01	; 1
     518:	11 e0       	ldi	r17, 0x01	; 1
     51a:	2b e0       	ldi	r18, 0x0B	; 11
     51c:	3c 81       	ldd	r19, Y+4	; 0x04
     51e:	4d 81       	ldd	r20, Y+5	; 0x05
     520:	5e 81       	ldd	r21, Y+6	; 0x06
     522:	6f 81       	ldd	r22, Y+7	; 0x07
     524:	78 85       	ldd	r23, Y+8	; 0x08
     526:	89 85       	ldd	r24, Y+9	; 0x09
     528:	9a 85       	ldd	r25, Y+10	; 0x0a
     52a:	2f df       	rcall	.-418    	; 0x38a <can_send>
     52c:	82 e0       	ldi	r24, 0x02	; 2
     52e:	80 93 d9 02 	sts	0x02D9, r24
     532:	2a 96       	adiw	r28, 0x0a	; 10
     534:	0f b6       	in	r0, 0x3f	; 63
     536:	f8 94       	cli
     538:	de bf       	out	0x3e, r29	; 62
     53a:	0f be       	out	0x3f, r0	; 63
     53c:	cd bf       	out	0x3d, r28	; 61
     53e:	df 91       	pop	r29
     540:	cf 91       	pop	r28
     542:	1f 91       	pop	r17
     544:	0f 91       	pop	r16
     546:	ef 90       	pop	r14
     548:	08 95       	ret

0000054a <game_tick_playing>:
     54a:	cf 92       	push	r12
     54c:	df 92       	push	r13
     54e:	ef 92       	push	r14
     550:	0f 93       	push	r16
     552:	1f 93       	push	r17
     554:	cf 93       	push	r28
     556:	df 93       	push	r29
     558:	cd b7       	in	r28, 0x3d	; 61
     55a:	de b7       	in	r29, 0x3e	; 62
     55c:	65 97       	sbiw	r28, 0x15	; 21
     55e:	0f b6       	in	r0, 0x3f	; 63
     560:	f8 94       	cli
     562:	de bf       	out	0x3e, r29	; 62
     564:	0f be       	out	0x3f, r0	; 63
     566:	cd bf       	out	0x3d, r28	; 61
     568:	80 91 d6 02 	lds	r24, 0x02D6
     56c:	8f 5f       	subi	r24, 0xFF	; 255
     56e:	80 93 d6 02 	sts	0x02D6, r24
     572:	9e 01       	movw	r18, r28
     574:	2f 5f       	subi	r18, 0xFF	; 255
     576:	3f 4f       	sbci	r19, 0xFF	; 255
     578:	69 01       	movw	r12, r18
     57a:	88 23       	and	r24, r24
     57c:	a9 f0       	breq	.+42     	; 0x5a8 <game_tick_playing+0x5e>
     57e:	8a e0       	ldi	r24, 0x0A	; 10
     580:	d9 01       	movw	r26, r18
     582:	e8 2f       	mov	r30, r24
     584:	1d 92       	st	X+, r1
     586:	ea 95       	dec	r30
     588:	e9 f7       	brne	.-6      	; 0x584 <game_tick_playing+0x3a>
     58a:	91 e0       	ldi	r25, 0x01	; 1
     58c:	99 83       	std	Y+1, r25	; 0x01
     58e:	8b 83       	std	Y+3, r24	; 0x03
     590:	e1 2c       	mov	r14, r1
     592:	01 e0       	ldi	r16, 0x01	; 1
     594:	11 e0       	ldi	r17, 0x01	; 1
     596:	2a e0       	ldi	r18, 0x0A	; 10
     598:	3c 81       	ldd	r19, Y+4	; 0x04
     59a:	4d 81       	ldd	r20, Y+5	; 0x05
     59c:	5e 81       	ldd	r21, Y+6	; 0x06
     59e:	6f 81       	ldd	r22, Y+7	; 0x07
     5a0:	78 85       	ldd	r23, Y+8	; 0x08
     5a2:	89 85       	ldd	r24, Y+9	; 0x09
     5a4:	9a 85       	ldd	r25, Y+10	; 0x0a
     5a6:	f1 de       	rcall	.-542    	; 0x38a <can_send>
     5a8:	ac d1       	rcall	.+856    	; 0x902 <joy_get_state>
     5aa:	16 2f       	mov	r17, r22
     5ac:	bf d1       	rcall	.+894    	; 0x92c <touch_get_state>
     5ae:	08 2f       	mov	r16, r24
     5b0:	fe 01       	movw	r30, r28
     5b2:	3b 96       	adiw	r30, 0x0b	; 11
     5b4:	8a e0       	ldi	r24, 0x0A	; 10
     5b6:	df 01       	movw	r26, r30
     5b8:	1d 92       	st	X+, r1
     5ba:	8a 95       	dec	r24
     5bc:	e9 f7       	brne	.-6      	; 0x5b8 <game_tick_playing+0x6e>
     5be:	81 e0       	ldi	r24, 0x01	; 1
     5c0:	8b 87       	std	Y+11, r24	; 0x0b
     5c2:	84 e0       	ldi	r24, 0x04	; 4
     5c4:	8c 87       	std	Y+12, r24	; 0x0c
     5c6:	8c e0       	ldi	r24, 0x0C	; 12
     5c8:	8d 87       	std	Y+13, r24	; 0x0d
     5ca:	80 91 06 01 	lds	r24, 0x0106
     5ce:	84 31       	cpi	r24, 0x14	; 20
     5d0:	19 f0       	breq	.+6      	; 0x5d8 <game_tick_playing+0x8e>
     5d2:	85 31       	cpi	r24, 0x15	; 21
     5d4:	89 f0       	breq	.+34     	; 0x5f8 <game_tick_playing+0xae>
     5d6:	2c c0       	rjmp	.+88     	; 0x630 <game_tick_playing+0xe6>
     5d8:	08 8b       	std	Y+16, r16	; 0x10
     5da:	81 2f       	mov	r24, r17
     5dc:	9d 8b       	std	Y+21, r25	; 0x15
     5de:	53 d1       	rcall	.+678    	; 0x886 <convert_range>
     5e0:	8e 87       	std	Y+14, r24	; 0x0e
     5e2:	81 e0       	ldi	r24, 0x01	; 1
     5e4:	9d 89       	ldd	r25, Y+21	; 0x15
     5e6:	91 3f       	cpi	r25, 0xF1	; 241
     5e8:	08 f4       	brcc	.+2      	; 0x5ec <game_tick_playing+0xa2>
     5ea:	80 e0       	ldi	r24, 0x00	; 0
     5ec:	8f 87       	std	Y+15, r24	; 0x0f
     5ee:	1f 92       	push	r1
     5f0:	0f 93       	push	r16
     5f2:	8d e4       	ldi	r24, 0x4D	; 77
     5f4:	91 e0       	ldi	r25, 0x01	; 1
     5f6:	0f c0       	rjmp	.+30     	; 0x616 <game_tick_playing+0xcc>
     5f8:	18 8b       	std	Y+16, r17	; 0x10
     5fa:	80 2f       	mov	r24, r16
     5fc:	9d 8b       	std	Y+21, r25	; 0x15
     5fe:	43 d1       	rcall	.+646    	; 0x886 <convert_range>
     600:	8e 87       	std	Y+14, r24	; 0x0e
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	9d 89       	ldd	r25, Y+21	; 0x15
     606:	91 3f       	cpi	r25, 0xF1	; 241
     608:	08 f4       	brcc	.+2      	; 0x60c <game_tick_playing+0xc2>
     60a:	80 e0       	ldi	r24, 0x00	; 0
     60c:	8f 87       	std	Y+15, r24	; 0x0f
     60e:	1f 92       	push	r1
     610:	1f 93       	push	r17
     612:	8b e5       	ldi	r24, 0x5B	; 91
     614:	91 e0       	ldi	r25, 0x01	; 1
     616:	9f 93       	push	r25
     618:	8f 93       	push	r24
     61a:	88 e2       	ldi	r24, 0x28	; 40
     61c:	91 e0       	ldi	r25, 0x01	; 1
     61e:	9f 93       	push	r25
     620:	8f 93       	push	r24
     622:	8b d7       	rcall	.+3862   	; 0x153a <fprintf>
     624:	0f 90       	pop	r0
     626:	0f 90       	pop	r0
     628:	0f 90       	pop	r0
     62a:	0f 90       	pop	r0
     62c:	0f 90       	pop	r0
     62e:	0f 90       	pop	r0
     630:	e1 2c       	mov	r14, r1
     632:	0b 85       	ldd	r16, Y+11	; 0x0b
     634:	1c 85       	ldd	r17, Y+12	; 0x0c
     636:	2d 85       	ldd	r18, Y+13	; 0x0d
     638:	3e 85       	ldd	r19, Y+14	; 0x0e
     63a:	4f 85       	ldd	r20, Y+15	; 0x0f
     63c:	58 89       	ldd	r21, Y+16	; 0x10
     63e:	69 89       	ldd	r22, Y+17	; 0x11
     640:	7a 89       	ldd	r23, Y+18	; 0x12
     642:	8b 89       	ldd	r24, Y+19	; 0x13
     644:	9c 89       	ldd	r25, Y+20	; 0x14
     646:	a1 de       	rcall	.-702    	; 0x38a <can_send>
     648:	60 e0       	ldi	r22, 0x00	; 0
     64a:	c6 01       	movw	r24, r12
     64c:	f7 de       	rcall	.-530    	; 0x43c <can_read_buffer>
     64e:	89 81       	ldd	r24, Y+1	; 0x01
     650:	13 e0       	ldi	r17, 0x03	; 3
     652:	88 23       	and	r24, r24
     654:	f1 f0       	breq	.+60     	; 0x692 <game_tick_playing+0x148>
     656:	82 30       	cpi	r24, 0x02	; 2
     658:	51 f0       	breq	.+20     	; 0x66e <game_tick_playing+0x124>
     65a:	83 30       	cpi	r24, 0x03	; 3
     65c:	a9 f0       	breq	.+42     	; 0x688 <game_tick_playing+0x13e>
     65e:	81 30       	cpi	r24, 0x01	; 1
     660:	99 f0       	breq	.+38     	; 0x688 <game_tick_playing+0x13e>
     662:	68 e2       	ldi	r22, 0x28	; 40
     664:	71 e0       	ldi	r23, 0x01	; 1
     666:	89 e7       	ldi	r24, 0x79	; 121
     668:	91 e0       	ldi	r25, 0x01	; 1
     66a:	a8 d7       	rcall	.+3920   	; 0x15bc <fputs>
     66c:	0d c0       	rjmp	.+26     	; 0x688 <game_tick_playing+0x13e>
     66e:	8b 81       	ldd	r24, Y+3	; 0x03
     670:	8a 30       	cpi	r24, 0x0A	; 10
     672:	51 f4       	brne	.+20     	; 0x688 <game_tick_playing+0x13e>
     674:	8c 81       	ldd	r24, Y+4	; 0x04
     676:	88 23       	and	r24, r24
     678:	39 f0       	breq	.+14     	; 0x688 <game_tick_playing+0x13e>
     67a:	68 e2       	ldi	r22, 0x28	; 40
     67c:	71 e0       	ldi	r23, 0x01	; 1
     67e:	8b e6       	ldi	r24, 0x6B	; 107
     680:	91 e0       	ldi	r25, 0x01	; 1
     682:	9c d7       	rcall	.+3896   	; 0x15bc <fputs>
     684:	10 93 d9 02 	sts	0x02D9, r17
     688:	60 e0       	ldi	r22, 0x00	; 0
     68a:	c6 01       	movw	r24, r12
     68c:	d7 de       	rcall	.-594    	; 0x43c <can_read_buffer>
     68e:	89 81       	ldd	r24, Y+1	; 0x01
     690:	e0 cf       	rjmp	.-64     	; 0x652 <game_tick_playing+0x108>
     692:	65 96       	adiw	r28, 0x15	; 21
     694:	0f b6       	in	r0, 0x3f	; 63
     696:	f8 94       	cli
     698:	de bf       	out	0x3e, r29	; 62
     69a:	0f be       	out	0x3f, r0	; 63
     69c:	cd bf       	out	0x3d, r28	; 61
     69e:	df 91       	pop	r29
     6a0:	cf 91       	pop	r28
     6a2:	1f 91       	pop	r17
     6a4:	0f 91       	pop	r16
     6a6:	ef 90       	pop	r14
     6a8:	df 90       	pop	r13
     6aa:	cf 90       	pop	r12
     6ac:	08 95       	ret

000006ae <game_tick_menu>:
     6ae:	8c d2       	rcall	.+1304   	; 0xbc8 <menu_print_current>
     6b0:	45 c3       	rjmp	.+1674   	; 0xd3c <menu_handle_input>

000006b2 <game_tick>:
     6b2:	80 91 d9 02 	lds	r24, 0x02D9
     6b6:	82 30       	cpi	r24, 0x02	; 2
     6b8:	29 f0       	breq	.+10     	; 0x6c4 <game_tick+0x12>
     6ba:	83 30       	cpi	r24, 0x03	; 3
     6bc:	21 f0       	breq	.+8      	; 0x6c6 <game_tick+0x14>
     6be:	81 30       	cpi	r24, 0x01	; 1
     6c0:	19 f4       	brne	.+6      	; 0x6c8 <game_tick+0x16>
     6c2:	f5 cf       	rjmp	.-22     	; 0x6ae <game_tick_menu>
     6c4:	42 cf       	rjmp	.-380    	; 0x54a <game_tick_playing>
     6c6:	02 cf       	rjmp	.-508    	; 0x4cc <game_tick_paused>
     6c8:	08 95       	ret

000006ca <__vector_7>:
     6ca:	1f 92       	push	r1
     6cc:	0f 92       	push	r0
     6ce:	0f b6       	in	r0, 0x3f	; 63
     6d0:	0f 92       	push	r0
     6d2:	11 24       	eor	r1, r1
     6d4:	2f 93       	push	r18
     6d6:	3f 93       	push	r19
     6d8:	4f 93       	push	r20
     6da:	5f 93       	push	r21
     6dc:	6f 93       	push	r22
     6de:	7f 93       	push	r23
     6e0:	8f 93       	push	r24
     6e2:	9f 93       	push	r25
     6e4:	af 93       	push	r26
     6e6:	bf 93       	push	r27
     6e8:	ef 93       	push	r30
     6ea:	ff 93       	push	r31
     6ec:	80 91 d8 02 	lds	r24, 0x02D8
     6f0:	8f 5f       	subi	r24, 0xFF	; 255
     6f2:	80 93 d8 02 	sts	0x02D8, r24
     6f6:	81 11       	cpse	r24, r1
     6f8:	13 c0       	rjmp	.+38     	; 0x720 <__vector_7+0x56>
     6fa:	80 91 d9 02 	lds	r24, 0x02D9
     6fe:	1f 92       	push	r1
     700:	8f 93       	push	r24
     702:	8e ea       	ldi	r24, 0xAE	; 174
     704:	91 e0       	ldi	r25, 0x01	; 1
     706:	9f 93       	push	r25
     708:	8f 93       	push	r24
     70a:	88 e2       	ldi	r24, 0x28	; 40
     70c:	91 e0       	ldi	r25, 0x01	; 1
     70e:	9f 93       	push	r25
     710:	8f 93       	push	r24
     712:	13 d7       	rcall	.+3622   	; 0x153a <fprintf>
     714:	0f 90       	pop	r0
     716:	0f 90       	pop	r0
     718:	0f 90       	pop	r0
     71a:	0f 90       	pop	r0
     71c:	0f 90       	pop	r0
     71e:	0f 90       	pop	r0
     720:	c8 df       	rcall	.-112    	; 0x6b2 <game_tick>
     722:	ff 91       	pop	r31
     724:	ef 91       	pop	r30
     726:	bf 91       	pop	r27
     728:	af 91       	pop	r26
     72a:	9f 91       	pop	r25
     72c:	8f 91       	pop	r24
     72e:	7f 91       	pop	r23
     730:	6f 91       	pop	r22
     732:	5f 91       	pop	r21
     734:	4f 91       	pop	r20
     736:	3f 91       	pop	r19
     738:	2f 91       	pop	r18
     73a:	0f 90       	pop	r0
     73c:	0f be       	out	0x3f, r0	; 63
     73e:	0f 90       	pop	r0
     740:	1f 90       	pop	r1
     742:	18 95       	reti

00000744 <game_start>:
	
	
}

//////////////////////////////////////////////////////////////////////////
void game_start(){
     744:	ef 92       	push	r14
     746:	0f 93       	push	r16
     748:	1f 93       	push	r17
     74a:	cf 93       	push	r28
     74c:	df 93       	push	r29
     74e:	cd b7       	in	r28, 0x3d	; 61
     750:	de b7       	in	r29, 0x3e	; 62
     752:	2a 97       	sbiw	r28, 0x0a	; 10
     754:	0f b6       	in	r0, 0x3f	; 63
     756:	f8 94       	cli
     758:	de bf       	out	0x3e, r29	; 62
     75a:	0f be       	out	0x3f, r0	; 63
     75c:	cd bf       	out	0x3d, r28	; 61
	
	can_msg_t msg = {};
     75e:	fe 01       	movw	r30, r28
     760:	31 96       	adiw	r30, 0x01	; 1
     762:	8a e0       	ldi	r24, 0x0A	; 10
     764:	df 01       	movw	r26, r30
     766:	1d 92       	st	X+, r1
     768:	8a 95       	dec	r24
     76a:	e9 f7       	brne	.-6      	; 0x766 <game_start+0x22>
	msg.sid = can_GAME_CMD;
     76c:	81 e0       	ldi	r24, 0x01	; 1
     76e:	89 83       	std	Y+1, r24	; 0x01
	msg.data[0] = game_cmd_RESET_GAME;
     770:	9b e0       	ldi	r25, 0x0B	; 11
     772:	9b 83       	std	Y+3, r25	; 0x03
	msg.length = 1;
     774:	8a 83       	std	Y+2, r24	; 0x02
	can_send(msg,0);
     776:	e1 2c       	mov	r14, r1
     778:	01 e0       	ldi	r16, 0x01	; 1
     77a:	11 e0       	ldi	r17, 0x01	; 1
     77c:	2b e0       	ldi	r18, 0x0B	; 11
     77e:	3c 81       	ldd	r19, Y+4	; 0x04
     780:	4d 81       	ldd	r20, Y+5	; 0x05
     782:	5e 81       	ldd	r21, Y+6	; 0x06
     784:	6f 81       	ldd	r22, Y+7	; 0x07
     786:	78 85       	ldd	r23, Y+8	; 0x08
     788:	89 85       	ldd	r24, Y+9	; 0x09
     78a:	9a 85       	ldd	r25, Y+10	; 0x0a
     78c:	fe dd       	rcall	.-1028   	; 0x38a <can_send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     78e:	bf ef       	ldi	r27, 0xFF	; 255
     790:	2f ef       	ldi	r18, 0xFF	; 255
     792:	8e e0       	ldi	r24, 0x0E	; 14
     794:	b1 50       	subi	r27, 0x01	; 1
     796:	20 40       	sbci	r18, 0x00	; 0
     798:	80 40       	sbci	r24, 0x00	; 0
     79a:	e1 f7       	brne	.-8      	; 0x794 <game_start+0x50>
     79c:	00 c0       	rjmp	.+0      	; 0x79e <game_start+0x5a>
     79e:	00 00       	nop
	
	// wait for node2 to acknowledge
	_delay_ms(1000);
	
	game_state = game_PLAYING; // \note dont use game_set_state here since state will be set by the above can message
     7a0:	82 e0       	ldi	r24, 0x02	; 2
     7a2:	80 93 d9 02 	sts	0x02D9, r24
	
	fprintf(&uart_out, "game starting\n");
     7a6:	68 e2       	ldi	r22, 0x28	; 40
     7a8:	71 e0       	ldi	r23, 0x01	; 1
     7aa:	85 eb       	ldi	r24, 0xB5	; 181
     7ac:	91 e0       	ldi	r25, 0x01	; 1
}
     7ae:	2a 96       	adiw	r28, 0x0a	; 10
     7b0:	0f b6       	in	r0, 0x3f	; 63
     7b2:	f8 94       	cli
     7b4:	de bf       	out	0x3e, r29	; 62
     7b6:	0f be       	out	0x3f, r0	; 63
     7b8:	cd bf       	out	0x3d, r28	; 61
     7ba:	df 91       	pop	r29
     7bc:	cf 91       	pop	r28
     7be:	1f 91       	pop	r17
     7c0:	0f 91       	pop	r16
     7c2:	ef 90       	pop	r14
	// wait for node2 to acknowledge
	_delay_ms(1000);
	
	game_state = game_PLAYING; // \note dont use game_set_state here since state will be set by the above can message
	
	fprintf(&uart_out, "game starting\n");
     7c4:	fb c6       	rjmp	.+3574   	; 0x15bc <fputs>

000007c6 <game_setting_standard>:
}


void game_setting_standard(){
     7c6:	ef 92       	push	r14
     7c8:	0f 93       	push	r16
     7ca:	1f 93       	push	r17
     7cc:	cf 93       	push	r28
     7ce:	df 93       	push	r29
     7d0:	cd b7       	in	r28, 0x3d	; 61
     7d2:	de b7       	in	r29, 0x3e	; 62
     7d4:	2a 97       	sbiw	r28, 0x0a	; 10
     7d6:	0f b6       	in	r0, 0x3f	; 63
     7d8:	f8 94       	cli
     7da:	de bf       	out	0x3e, r29	; 62
     7dc:	0f be       	out	0x3f, r0	; 63
     7de:	cd bf       	out	0x3d, r28	; 61
	oled_pos(7, 0);
     7e0:	60 e0       	ldi	r22, 0x00	; 0
     7e2:	87 e0       	ldi	r24, 0x07	; 7
     7e4:	10 d3       	rcall	.+1568   	; 0xe06 <oled_pos>
	fprintf(&oled_out, "active: standard");
     7e6:	68 e0       	ldi	r22, 0x08	; 8
     7e8:	71 e0       	ldi	r23, 0x01	; 1
     7ea:	84 ec       	ldi	r24, 0xC4	; 196
     7ec:	91 e0       	ldi	r25, 0x01	; 1
     7ee:	e6 d6       	rcall	.+3532   	; 0x15bc <fputs>
	can_msg_t setting_msg;
	setting_msg.sid = can_GAME_CMD;
	setting_msg.length = 2;
	setting_msg.data[0] = game_cmd_CHANGE_SETTING;
	setting_msg.data[1] = game_setting_STANDARD;
	can_send(setting_msg,0);
     7f0:	e1 2c       	mov	r14, r1
     7f2:	01 e0       	ldi	r16, 0x01	; 1
     7f4:	12 e0       	ldi	r17, 0x02	; 2
     7f6:	2f e0       	ldi	r18, 0x0F	; 15
     7f8:	34 e1       	ldi	r19, 0x14	; 20
     7fa:	4d 81       	ldd	r20, Y+5	; 0x05
     7fc:	5e 81       	ldd	r21, Y+6	; 0x06
     7fe:	6f 81       	ldd	r22, Y+7	; 0x07
     800:	78 85       	ldd	r23, Y+8	; 0x08
     802:	89 85       	ldd	r24, Y+9	; 0x09
     804:	9a 85       	ldd	r25, Y+10	; 0x0a
     806:	c1 dd       	rcall	.-1150   	; 0x38a <can_send>
	
	game_setting = game_setting_STANDARD;
     808:	84 e1       	ldi	r24, 0x14	; 20
     80a:	80 93 06 01 	sts	0x0106, r24
}
     80e:	2a 96       	adiw	r28, 0x0a	; 10
     810:	0f b6       	in	r0, 0x3f	; 63
     812:	f8 94       	cli
     814:	de bf       	out	0x3e, r29	; 62
     816:	0f be       	out	0x3f, r0	; 63
     818:	cd bf       	out	0x3d, r28	; 61
     81a:	df 91       	pop	r29
     81c:	cf 91       	pop	r28
     81e:	1f 91       	pop	r17
     820:	0f 91       	pop	r16
     822:	ef 90       	pop	r14
     824:	08 95       	ret

00000826 <game_setting_alternative>:


void game_setting_alternative(){
     826:	ef 92       	push	r14
     828:	0f 93       	push	r16
     82a:	1f 93       	push	r17
     82c:	cf 93       	push	r28
     82e:	df 93       	push	r29
     830:	cd b7       	in	r28, 0x3d	; 61
     832:	de b7       	in	r29, 0x3e	; 62
     834:	2a 97       	sbiw	r28, 0x0a	; 10
     836:	0f b6       	in	r0, 0x3f	; 63
     838:	f8 94       	cli
     83a:	de bf       	out	0x3e, r29	; 62
     83c:	0f be       	out	0x3f, r0	; 63
     83e:	cd bf       	out	0x3d, r28	; 61
	oled_pos(7, 0);
     840:	60 e0       	ldi	r22, 0x00	; 0
     842:	87 e0       	ldi	r24, 0x07	; 7
     844:	e0 d2       	rcall	.+1472   	; 0xe06 <oled_pos>
	fprintf(&oled_out, "active: alternative");
     846:	68 e0       	ldi	r22, 0x08	; 8
     848:	71 e0       	ldi	r23, 0x01	; 1
     84a:	85 ed       	ldi	r24, 0xD5	; 213
     84c:	91 e0       	ldi	r25, 0x01	; 1
     84e:	b6 d6       	rcall	.+3436   	; 0x15bc <fputs>
	can_msg_t setting_msg;
	setting_msg.sid = can_GAME_CMD;
	setting_msg.length = 2;
	setting_msg.data[0] = game_cmd_CHANGE_SETTING;
	setting_msg.data[1] = game_setting_ALTERNATIVE;
	can_send(setting_msg,0);
     850:	e1 2c       	mov	r14, r1
     852:	01 e0       	ldi	r16, 0x01	; 1
     854:	12 e0       	ldi	r17, 0x02	; 2
     856:	2f e0       	ldi	r18, 0x0F	; 15
     858:	35 e1       	ldi	r19, 0x15	; 21
     85a:	4d 81       	ldd	r20, Y+5	; 0x05
     85c:	5e 81       	ldd	r21, Y+6	; 0x06
     85e:	6f 81       	ldd	r22, Y+7	; 0x07
     860:	78 85       	ldd	r23, Y+8	; 0x08
     862:	89 85       	ldd	r24, Y+9	; 0x09
     864:	9a 85       	ldd	r25, Y+10	; 0x0a
     866:	91 dd       	rcall	.-1246   	; 0x38a <can_send>
	
	
	game_setting = game_setting_ALTERNATIVE;
     868:	85 e1       	ldi	r24, 0x15	; 21
     86a:	80 93 06 01 	sts	0x0106, r24
}
     86e:	2a 96       	adiw	r28, 0x0a	; 10
     870:	0f b6       	in	r0, 0x3f	; 63
     872:	f8 94       	cli
     874:	de bf       	out	0x3e, r29	; 62
     876:	0f be       	out	0x3f, r0	; 63
     878:	cd bf       	out	0x3d, r28	; 61
     87a:	df 91       	pop	r29
     87c:	cf 91       	pop	r28
     87e:	1f 91       	pop	r17
     880:	0f 91       	pop	r16
     882:	ef 90       	pop	r14
     884:	08 95       	ret

00000886 <convert_range>:
#define CLICK_PIN PE0 /*!< Pin on atmega162 which joy click is connected to */

/// Convert range from 0-to-255 to -100-to-100
int8_t convert_range(uint8_t data){
	/// \test this must be tested for rounding errors
	return (int8_t)((200*data) / 255 - 100);
     886:	28 ec       	ldi	r18, 0xC8	; 200
     888:	82 9f       	mul	r24, r18
     88a:	c0 01       	movw	r24, r0
     88c:	11 24       	eor	r1, r1
     88e:	6f ef       	ldi	r22, 0xFF	; 255
     890:	70 e0       	ldi	r23, 0x00	; 0
     892:	f6 d4       	rcall	.+2540   	; 0x1280 <__divmodhi4>

	//return (float)data*0.784314 - 100;
}
     894:	8c e9       	ldi	r24, 0x9C	; 156
     896:	86 0f       	add	r24, r22
     898:	08 95       	ret

0000089a <joy_direction>:
 * Calculate direction of joystick based on coordinates
 * @param[in] joy_x X axis of joystick
 * @param[in] joy_y Y axis of joystick
 */
direction_t joy_direction(uint8_t joy_x, uint8_t joy_y){
	if (abs(joy_x-128) < ANALOG_THRESH && abs(joy_y-128) < ANALOG_THRESH){
     89a:	98 e9       	ldi	r25, 0x98	; 152
     89c:	98 0f       	add	r25, r24
     89e:	91 33       	cpi	r25, 0x31	; 49
     8a0:	20 f4       	brcc	.+8      	; 0x8aa <joy_direction+0x10>
     8a2:	98 e9       	ldi	r25, 0x98	; 152
     8a4:	96 0f       	add	r25, r22
     8a6:	91 33       	cpi	r25, 0x31	; 49
     8a8:	20 f1       	brcs	.+72     	; 0x8f2 <joy_direction+0x58>
		return NEUTRAL;
	}
	
	if (joy_x - 128 > abs(joy_y - 128))
     8aa:	48 2f       	mov	r20, r24
     8ac:	50 e0       	ldi	r21, 0x00	; 0
     8ae:	ca 01       	movw	r24, r20
     8b0:	80 58       	subi	r24, 0x80	; 128
     8b2:	91 09       	sbc	r25, r1
     8b4:	70 e0       	ldi	r23, 0x00	; 0
     8b6:	60 58       	subi	r22, 0x80	; 128
     8b8:	71 09       	sbc	r23, r1
     8ba:	9b 01       	movw	r18, r22
     8bc:	77 ff       	sbrs	r23, 7
     8be:	04 c0       	rjmp	.+8      	; 0x8c8 <joy_direction+0x2e>
     8c0:	22 27       	eor	r18, r18
     8c2:	33 27       	eor	r19, r19
     8c4:	26 1b       	sub	r18, r22
     8c6:	37 0b       	sbc	r19, r23
     8c8:	28 17       	cp	r18, r24
     8ca:	39 07       	cpc	r19, r25
     8cc:	a4 f0       	brlt	.+40     	; 0x8f6 <joy_direction+0x5c>
		return RIGHT;
	else if (joy_x - 128 < - abs(joy_y - 128))
     8ce:	4f 57       	subi	r20, 0x7F	; 127
     8d0:	51 09       	sbc	r21, r1
     8d2:	31 95       	neg	r19
     8d4:	21 95       	neg	r18
     8d6:	31 09       	sbc	r19, r1
     8d8:	24 17       	cp	r18, r20
     8da:	35 07       	cpc	r19, r21
     8dc:	74 f4       	brge	.+28     	; 0x8fa <joy_direction+0x60>
		return LEFT;
	else if (joy_y - 128 > abs(joy_x - 128))
     8de:	97 ff       	sbrs	r25, 7
     8e0:	03 c0       	rjmp	.+6      	; 0x8e8 <joy_direction+0x4e>
     8e2:	91 95       	neg	r25
     8e4:	81 95       	neg	r24
     8e6:	91 09       	sbc	r25, r1
     8e8:	86 17       	cp	r24, r22
     8ea:	97 07       	cpc	r25, r23
     8ec:	44 f4       	brge	.+16     	; 0x8fe <joy_direction+0x64>
		return UP;
     8ee:	82 e0       	ldi	r24, 0x02	; 2
     8f0:	08 95       	ret
 * @param[in] joy_x X axis of joystick
 * @param[in] joy_y Y axis of joystick
 */
direction_t joy_direction(uint8_t joy_x, uint8_t joy_y){
	if (abs(joy_x-128) < ANALOG_THRESH && abs(joy_y-128) < ANALOG_THRESH){
		return NEUTRAL;
     8f2:	84 e0       	ldi	r24, 0x04	; 4
     8f4:	08 95       	ret
	}
	
	if (joy_x - 128 > abs(joy_y - 128))
		return RIGHT;
     8f6:	81 e0       	ldi	r24, 0x01	; 1
     8f8:	08 95       	ret
	else if (joy_x - 128 < - abs(joy_y - 128))
		return LEFT;
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	08 95       	ret
	else if (joy_y - 128 > abs(joy_x - 128))
		return UP;
	else
		return DOWN;
     8fe:	83 e0       	ldi	r24, 0x03	; 3
		
	
	
}
     900:	08 95       	ret

00000902 <joy_get_state>:

/// get current state of joystick
joystick_t joy_get_state(){
     902:	cf 93       	push	r28
     904:	df 93       	push	r29
     906:	1f 92       	push	r1
     908:	cd b7       	in	r28, 0x3d	; 61
     90a:	de b7       	in	r29, 0x3e	; 62
	joystick_t joy_state = {};
	
	joy_state.x = adc_read_channel(CH_JOY_X);
     90c:	81 e0       	ldi	r24, 0x01	; 1
     90e:	8e dc       	rcall	.-1764   	; 0x22c <adc_read_channel>
     910:	68 2f       	mov	r22, r24
	joy_state.y = adc_read_channel(CH_JOY_Y);
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	69 83       	std	Y+1, r22	; 0x01
     916:	8a dc       	rcall	.-1772   	; 0x22c <adc_read_channel>
	joy_state.click = !(PINE & (1 << CLICK_PIN));
     918:	95 b1       	in	r25, 0x05	; 5
     91a:	90 95       	com	r25
	
	return joy_state;
}
     91c:	69 81       	ldd	r22, Y+1	; 0x01
     91e:	78 2f       	mov	r23, r24
     920:	89 2f       	mov	r24, r25
     922:	81 70       	andi	r24, 0x01	; 1
     924:	0f 90       	pop	r0
     926:	df 91       	pop	r29
     928:	cf 91       	pop	r28
     92a:	08 95       	ret

0000092c <touch_get_state>:
	can_send(msg, 0);
		
}
*/

touch_t touch_get_state(){
     92c:	cf 93       	push	r28
	uint8_t slider = adc_read_channel(CH_SLIDER);
     92e:	82 e0       	ldi	r24, 0x02	; 2
     930:	7d dc       	rcall	.-1798   	; 0x22c <adc_read_channel>
     932:	c8 2f       	mov	r28, r24
	uint8_t button = adc_read_channel(CH_TOUCH);
     934:	83 e0       	ldi	r24, 0x03	; 3
     936:	7a dc       	rcall	.-1804   	; 0x22c <adc_read_channel>
     938:	98 2f       	mov	r25, r24
	touch.button = button;
	touch.slider = slider;
	
	
	return touch;
}
     93a:	8c 2f       	mov	r24, r28
     93c:	cf 91       	pop	r28
     93e:	08 95       	ret

00000940 <main>:
#include "mcp2515.h"


int main()
{
	cli();
     940:	f8 94       	cli
	
	// SRAM init
	MCUCR |= (1 << SRE);
     942:	85 b7       	in	r24, 0x35	; 53
     944:	80 68       	ori	r24, 0x80	; 128
     946:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1 << XMM2);
     948:	80 b7       	in	r24, 0x30	; 48
     94a:	80 62       	ori	r24, 0x20	; 32
     94c:	80 bf       	out	0x30, r24	; 48
	
	uart_init();
     94e:	88 d4       	rcall	.+2320   	; 0x1260 <uart_init>
	// setup heap
	__malloc_heap_start = (char*)RAM_ADR;
     950:	80 e0       	ldi	r24, 0x00	; 0
     952:	98 e1       	ldi	r25, 0x18	; 24
     954:	90 93 03 01 	sts	0x0103, r25
     958:	80 93 02 01 	sts	0x0102, r24
	__malloc_heap_end   = (char*)(RAM_ADR + RAM_SIZE);
     95c:	80 e0       	ldi	r24, 0x00	; 0
     95e:	90 e2       	ldi	r25, 0x20	; 32
     960:	90 93 01 01 	sts	0x0101, r25
     964:	80 93 00 01 	sts	0x0100, r24
	
	adc_init(); // adc init (must be after sram init)
     968:	5e dc       	rcall	.-1860   	; 0x226 <adc_init>
	oled_init();
     96a:	f8 d2       	rcall	.+1520   	; 0xf5c <oled_init>
	oled_home();
     96c:	23 d2       	rcall	.+1094   	; 0xdb4 <oled_home>
	menu_init(); // after oled
     96e:	ec d0       	rcall	.+472    	; 0xb48 <menu_init>
	spi_init();
     970:	ed d3       	rcall	.+2010   	; 0x114c <spi_init>
	can_init(); // after spi
     972:	02 dd       	rcall	.-1532   	; 0x378 <can_init>
	game_init(); // after menu_init
     974:	92 dd       	rcall	.-1244   	; 0x49a <game_init>
	
	sei();
     976:	78 94       	sei
	
	// NOTE(rendellc): required for sram test
	stdout = &uart_out; 
     978:	88 e2       	ldi	r24, 0x28	; 40
     97a:	91 e0       	ldi	r25, 0x01	; 1
     97c:	90 93 6c 03 	sts	0x036C, r25
     980:	80 93 6b 03 	sts	0x036B, r24
	stdin  = &uart_in;
     984:	8a e1       	ldi	r24, 0x1A	; 26
     986:	91 e0       	ldi	r25, 0x01	; 1
     988:	90 93 6a 03 	sts	0x036A, r25
     98c:	80 93 69 03 	sts	0x0369, r24
     990:	ff cf       	rjmp	.-2      	; 0x990 <main+0x50>

00000992 <mcp_reset>:



void mcp_reset()
{
	spi_ss_low();
     992:	d8 d3       	rcall	.+1968   	; 0x1144 <spi_ss_low>
	spi_transmit(MCP_RESET);
     994:	80 ec       	ldi	r24, 0xC0	; 192
     996:	e1 d3       	rcall	.+1986   	; 0x115a <spi_transmit>
	spi_ss_high();
     998:	d7 c3       	rjmp	.+1966   	; 0x1148 <spi_ss_high>

0000099a <mcp_read>:
	fprintf(&uart_out, "MCP_RESET\n");
	#endif // MCP_DEBUG
}

uint8_t mcp_read(uint8_t adr)
{
     99a:	1f 93       	push	r17
     99c:	cf 93       	push	r28
     99e:	df 93       	push	r29
     9a0:	1f 92       	push	r1
     9a2:	cd b7       	in	r28, 0x3d	; 61
     9a4:	de b7       	in	r29, 0x3e	; 62
     9a6:	18 2f       	mov	r17, r24
	spi_ss_low();
     9a8:	cd d3       	rcall	.+1946   	; 0x1144 <spi_ss_low>
	spi_transmit(MCP_READ);
     9aa:	83 e0       	ldi	r24, 0x03	; 3
     9ac:	d6 d3       	rcall	.+1964   	; 0x115a <spi_transmit>
	spi_transmit(adr);
     9ae:	81 2f       	mov	r24, r17
     9b0:	d4 d3       	rcall	.+1960   	; 0x115a <spi_transmit>
	uint8_t read = spi_transmit(0);
     9b2:	80 e0       	ldi	r24, 0x00	; 0
     9b4:	d2 d3       	rcall	.+1956   	; 0x115a <spi_transmit>
	spi_ss_high();
     9b6:	89 83       	std	Y+1, r24	; 0x01
     9b8:	c7 d3       	rcall	.+1934   	; 0x1148 <spi_ss_high>
	#ifdef MCP_DEBUG
	fprintf(&uart_out, "MCP_READ %x %x\n", adr, read);
	#endif // MCP_DEBUG
	
	return read;
}
     9ba:	89 81       	ldd	r24, Y+1	; 0x01
     9bc:	0f 90       	pop	r0
     9be:	df 91       	pop	r29
     9c0:	cf 91       	pop	r28
     9c2:	1f 91       	pop	r17
     9c4:	08 95       	ret

000009c6 <mcp_write>:
	return data;
}


void mcp_write(uint8_t adr, uint8_t data)
{
     9c6:	1f 93       	push	r17
     9c8:	cf 93       	push	r28
     9ca:	df 93       	push	r29
     9cc:	1f 92       	push	r1
     9ce:	cd b7       	in	r28, 0x3d	; 61
     9d0:	de b7       	in	r29, 0x3e	; 62
     9d2:	18 2f       	mov	r17, r24
	spi_ss_low();
     9d4:	69 83       	std	Y+1, r22	; 0x01
     9d6:	b6 d3       	rcall	.+1900   	; 0x1144 <spi_ss_low>
	spi_transmit(MCP_WRITE);
     9d8:	82 e0       	ldi	r24, 0x02	; 2
     9da:	bf d3       	rcall	.+1918   	; 0x115a <spi_transmit>
	spi_transmit(adr);
     9dc:	81 2f       	mov	r24, r17
     9de:	bd d3       	rcall	.+1914   	; 0x115a <spi_transmit>
	spi_transmit(data);
     9e0:	69 81       	ldd	r22, Y+1	; 0x01
     9e2:	86 2f       	mov	r24, r22
     9e4:	ba d3       	rcall	.+1908   	; 0x115a <spi_transmit>
	
	
	#ifdef MCP_DEBUG
	fprintf(&uart_out, "MCP_WRITE\t%x\t%i\n", adr, data);
	#endif // MCP_DEBUG
}
     9e6:	0f 90       	pop	r0
     9e8:	df 91       	pop	r29
     9ea:	cf 91       	pop	r28
     9ec:	1f 91       	pop	r17
{
	spi_ss_low();
	spi_transmit(MCP_WRITE);
	spi_transmit(adr);
	spi_transmit(data);
	spi_ss_high();
     9ee:	ac c3       	rjmp	.+1880   	; 0x1148 <spi_ss_high>

000009f0 <mcp_rts>:
	fprintf(&uart_out, "MCP_WRITE\t%x\t%i\n", adr, data);
	#endif // MCP_DEBUG
}

void mcp_rts(uint8_t tx_buffer_select)
{
     9f0:	cf 93       	push	r28
     9f2:	df 93       	push	r29
     9f4:	1f 92       	push	r1
     9f6:	cd b7       	in	r28, 0x3d	; 61
     9f8:	de b7       	in	r29, 0x3e	; 62
	spi_ss_low();
     9fa:	89 83       	std	Y+1, r24	; 0x01
     9fc:	a3 d3       	rcall	.+1862   	; 0x1144 <spi_ss_low>
	spi_transmit(MCP_RTS | (1<<tx_buffer_select));
     9fe:	21 e0       	ldi	r18, 0x01	; 1
     a00:	30 e0       	ldi	r19, 0x00	; 0
     a02:	89 81       	ldd	r24, Y+1	; 0x01
     a04:	01 c0       	rjmp	.+2      	; 0xa08 <mcp_rts+0x18>
     a06:	22 0f       	add	r18, r18
     a08:	8a 95       	dec	r24
     a0a:	ea f7       	brpl	.-6      	; 0xa06 <mcp_rts+0x16>
     a0c:	82 2f       	mov	r24, r18
     a0e:	80 68       	ori	r24, 0x80	; 128
     a10:	a4 d3       	rcall	.+1864   	; 0x115a <spi_transmit>
	spi_ss_high();
	
	#ifdef MCP_DEBUG
	fprintf(&uart_out, "MCP_RTS\t%i\n", tx_buffer);
	#endif // MCP_DEBUG
}
     a12:	0f 90       	pop	r0
     a14:	df 91       	pop	r29
     a16:	cf 91       	pop	r28

void mcp_rts(uint8_t tx_buffer_select)
{
	spi_ss_low();
	spi_transmit(MCP_RTS | (1<<tx_buffer_select));
	spi_ss_high();
     a18:	97 c3       	rjmp	.+1838   	; 0x1148 <spi_ss_high>

00000a1a <mcp_readstatus>:
	fprintf(&uart_out, "MCP_RTS\t%i\n", tx_buffer);
	#endif // MCP_DEBUG
}

uint8_t mcp_readstatus()
{
     a1a:	cf 93       	push	r28
     a1c:	df 93       	push	r29
     a1e:	1f 92       	push	r1
     a20:	cd b7       	in	r28, 0x3d	; 61
     a22:	de b7       	in	r29, 0x3e	; 62
	spi_ss_low();
     a24:	8f d3       	rcall	.+1822   	; 0x1144 <spi_ss_low>
	spi_transmit(MCP_READ_STATUS);
     a26:	80 ea       	ldi	r24, 0xA0	; 160
     a28:	98 d3       	rcall	.+1840   	; 0x115a <spi_transmit>
	uint8_t status = spi_transmit(0);
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	96 d3       	rcall	.+1836   	; 0x115a <spi_transmit>
	spi_ss_high();
     a2e:	89 83       	std	Y+1, r24	; 0x01
     a30:	8b d3       	rcall	.+1814   	; 0x1148 <spi_ss_high>
	#ifdef MCP_DEBUG
	fprintf(&uart_out, "MCP_READ_STATUS\t%x\n", status);
	#endif // MCP_DEBUG
	
	return status;
}
     a32:	89 81       	ldd	r24, Y+1	; 0x01
     a34:	0f 90       	pop	r0
     a36:	df 91       	pop	r29
     a38:	cf 91       	pop	r28
     a3a:	08 95       	ret

00000a3c <mcp_bitmodify>:

void mcp_bitmodify(uint8_t adr, uint8_t mask, uint8_t data)
{
     a3c:	1f 93       	push	r17
     a3e:	cf 93       	push	r28
     a40:	df 93       	push	r29
     a42:	00 d0       	rcall	.+0      	; 0xa44 <mcp_bitmodify+0x8>
     a44:	cd b7       	in	r28, 0x3d	; 61
     a46:	de b7       	in	r29, 0x3e	; 62
     a48:	18 2f       	mov	r17, r24
	spi_ss_low();
     a4a:	4a 83       	std	Y+2, r20	; 0x02
     a4c:	69 83       	std	Y+1, r22	; 0x01
     a4e:	7a d3       	rcall	.+1780   	; 0x1144 <spi_ss_low>
	spi_transmit(MCP_BITMOD);
     a50:	85 e0       	ldi	r24, 0x05	; 5
     a52:	83 d3       	rcall	.+1798   	; 0x115a <spi_transmit>
	spi_transmit(adr);
     a54:	81 2f       	mov	r24, r17
     a56:	81 d3       	rcall	.+1794   	; 0x115a <spi_transmit>
	spi_transmit(mask);
     a58:	69 81       	ldd	r22, Y+1	; 0x01
     a5a:	86 2f       	mov	r24, r22
     a5c:	7e d3       	rcall	.+1788   	; 0x115a <spi_transmit>
	spi_transmit(data);
     a5e:	4a 81       	ldd	r20, Y+2	; 0x02
     a60:	84 2f       	mov	r24, r20
     a62:	7b d3       	rcall	.+1782   	; 0x115a <spi_transmit>
	spi_ss_high();
	
	#ifdef MCP_DEBUG
	fprintf(&uart_out, "MCP_BITMOD\t%x\t%x\t%x\n", adr, mask, data);
	#endif // MCP_DEBUG
}
     a64:	0f 90       	pop	r0
     a66:	0f 90       	pop	r0
     a68:	df 91       	pop	r29
     a6a:	cf 91       	pop	r28
     a6c:	1f 91       	pop	r17
	spi_ss_low();
	spi_transmit(MCP_BITMOD);
	spi_transmit(adr);
	spi_transmit(mask);
	spi_transmit(data);
	spi_ss_high();
     a6e:	6c c3       	rjmp	.+1752   	; 0x1148 <spi_ss_high>

00000a70 <mcp_init>:
#include "uart.h"


void mcp_init()
{
	mcp_reset();
     a70:	90 df       	rcall	.-224    	; 0x992 <mcp_reset>
	const uint8_t BRP		= 1;	// TQ = 2*Tosc*(BRP+1)  = 250 ns
	const uint8_t PrSeg		= 1;	// tPropSeg = (PrSeg + 1)
	const uint8_t PhSeg1	= 2;	// tPS1 = (PhSeg1 + 1)*TQ
	const uint8_t PhSeg2	= 2;	// tPS2 = (PhSeg2 + 1)*TQ
	
	mcp_write(MCP_CNF1, BRP);
     a72:	61 e0       	ldi	r22, 0x01	; 1
     a74:	8a e2       	ldi	r24, 0x2A	; 42
     a76:	a7 df       	rcall	.-178    	; 0x9c6 <mcp_write>
	mcp_write(MCP_CNF2, PrSeg | (PhSeg1 << 3));
     a78:	61 e1       	ldi	r22, 0x11	; 17
     a7a:	89 e2       	ldi	r24, 0x29	; 41
     a7c:	a4 df       	rcall	.-184    	; 0x9c6 <mcp_write>
	mcp_write(MCP_CNF3, PhSeg2);
     a7e:	62 e0       	ldi	r22, 0x02	; 2
     a80:	88 e2       	ldi	r24, 0x28	; 40
     a82:	a1 df       	rcall	.-190    	; 0x9c6 <mcp_write>


	// Setup Rx registers
	//mcp_write(MCP_RXM0SIDH, 0);
	//mcp_write(MCP_RXM0SIDL, 0);
	mcp_bitmodify(MCP_RXB0CTRL, 0x60, 0x60);
     a84:	40 e6       	ldi	r20, 0x60	; 96
     a86:	60 e6       	ldi	r22, 0x60	; 96
     a88:	80 e6       	ldi	r24, 0x60	; 96
     a8a:	d8 df       	rcall	.-80     	; 0xa3c <mcp_bitmodify>
	mcp_bitmodify(MCP_RXB1CTRL, 0x60, 0x60);	
     a8c:	40 e6       	ldi	r20, 0x60	; 96
     a8e:	60 e6       	ldi	r22, 0x60	; 96
     a90:	80 e7       	ldi	r24, 0x70	; 112
     a92:	d4 df       	rcall	.-88     	; 0xa3c <mcp_bitmodify>
	
	// go to normal mode
	mcp_bitmodify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);
     a94:	40 e0       	ldi	r20, 0x00	; 0
     a96:	60 ee       	ldi	r22, 0xE0	; 224
     a98:	8f e0       	ldi	r24, 0x0F	; 15
     a9a:	d0 cf       	rjmp	.-96     	; 0xa3c <mcp_bitmodify>

00000a9c <menu_action_nothing>:
		///\todo this can't be right?
		// should probably check for parent->submenu[i] != NULL
		if (1)
			free(&parent->submenus[i]);
	}
}
     a9c:	08 95       	ret

00000a9e <menu_show_highscore>:
     a9e:	31 df       	rcall	.-414    	; 0x902 <joy_get_state>
     aa0:	86 2f       	mov	r24, r22
     aa2:	67 2f       	mov	r22, r23
     aa4:	fa de       	rcall	.-524    	; 0x89a <joy_direction>
     aa6:	81 11       	cpse	r24, r1
     aa8:	fa cf       	rjmp	.-12     	; 0xa9e <menu_show_highscore>
     aaa:	08 95       	ret

00000aac <menu_init_menu>:
     aac:	cf 92       	push	r12
     aae:	df 92       	push	r13
     ab0:	ef 92       	push	r14
     ab2:	ff 92       	push	r15
     ab4:	0f 93       	push	r16
     ab6:	1f 93       	push	r17
     ab8:	cf 93       	push	r28
     aba:	df 93       	push	r29
     abc:	6c 01       	movw	r12, r24
     abe:	8b 01       	movw	r16, r22
     ac0:	7a 01       	movw	r14, r20
     ac2:	8a e2       	ldi	r24, 0x2A	; 42
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	03 d4       	rcall	.+2054   	; 0x12ce <malloc>
     ac8:	ec 01       	movw	r28, r24
     aca:	fc 01       	movw	r30, r24
     acc:	88 e1       	ldi	r24, 0x18	; 24
     ace:	11 92       	st	Z+, r1
     ad0:	81 50       	subi	r24, 0x01	; 1
     ad2:	e9 f7       	brne	.-6      	; 0xace <menu_init_menu+0x22>
     ad4:	47 e1       	ldi	r20, 0x17	; 23
     ad6:	50 e0       	ldi	r21, 0x00	; 0
     ad8:	b6 01       	movw	r22, r12
     ada:	ce 01       	movw	r24, r28
     adc:	1f d5       	rcall	.+2622   	; 0x151c <strncpy>
     ade:	80 e0       	ldi	r24, 0x00	; 0
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	fe 01       	movw	r30, r28
     ae4:	e8 0f       	add	r30, r24
     ae6:	f9 1f       	adc	r31, r25
     ae8:	11 8e       	std	Z+25, r1	; 0x19
     aea:	10 8e       	std	Z+24, r1	; 0x18
     aec:	02 96       	adiw	r24, 0x02	; 2
     aee:	8e 30       	cpi	r24, 0x0E	; 14
     af0:	91 05       	cpc	r25, r1
     af2:	b9 f7       	brne	.-18     	; 0xae2 <menu_init_menu+0x36>
     af4:	01 15       	cp	r16, r1
     af6:	11 05       	cpc	r17, r1
     af8:	19 f4       	brne	.+6      	; 0xb00 <menu_init_menu+0x54>
     afa:	df a3       	std	Y+39, r29	; 0x27
     afc:	ce a3       	std	Y+38, r28	; 0x26
     afe:	18 c0       	rjmp	.+48     	; 0xb30 <menu_init_menu+0x84>
     b00:	1f a3       	std	Y+39, r17	; 0x27
     b02:	0e a3       	std	Y+38, r16	; 0x26
     b04:	d8 01       	movw	r26, r16
     b06:	e0 e0       	ldi	r30, 0x00	; 0
     b08:	f0 e0       	ldi	r31, 0x00	; 0
     b0a:	58 96       	adiw	r26, 0x18	; 24
     b0c:	8d 91       	ld	r24, X+
     b0e:	9c 91       	ld	r25, X
     b10:	59 97       	sbiw	r26, 0x19	; 25
     b12:	89 2b       	or	r24, r25
     b14:	41 f4       	brne	.+16     	; 0xb26 <menu_init_menu+0x7a>
     b16:	3c 96       	adiw	r30, 0x0c	; 12
     b18:	ee 0f       	add	r30, r30
     b1a:	ff 1f       	adc	r31, r31
     b1c:	e0 0f       	add	r30, r16
     b1e:	f1 1f       	adc	r31, r17
     b20:	d1 83       	std	Z+1, r29	; 0x01
     b22:	c0 83       	st	Z, r28
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <menu_init_menu+0x84>
     b26:	31 96       	adiw	r30, 0x01	; 1
     b28:	12 96       	adiw	r26, 0x02	; 2
     b2a:	e7 30       	cpi	r30, 0x07	; 7
     b2c:	f1 05       	cpc	r31, r1
     b2e:	69 f7       	brne	.-38     	; 0xb0a <menu_init_menu+0x5e>
     b30:	f9 a6       	std	Y+41, r15	; 0x29
     b32:	e8 a6       	std	Y+40, r14	; 0x28
     b34:	ce 01       	movw	r24, r28
     b36:	df 91       	pop	r29
     b38:	cf 91       	pop	r28
     b3a:	1f 91       	pop	r17
     b3c:	0f 91       	pop	r16
     b3e:	ff 90       	pop	r15
     b40:	ef 90       	pop	r14
     b42:	df 90       	pop	r13
     b44:	cf 90       	pop	r12
     b46:	08 95       	ret

00000b48 <menu_init>:
     b48:	0f 93       	push	r16
     b4a:	1f 93       	push	r17
     b4c:	cf 93       	push	r28
     b4e:	df 93       	push	r29
     b50:	60 91 dd 02 	lds	r22, 0x02DD
     b54:	70 91 de 02 	lds	r23, 0x02DE
     b58:	4e e4       	ldi	r20, 0x4E	; 78
     b5a:	55 e0       	ldi	r21, 0x05	; 5
     b5c:	89 ee       	ldi	r24, 0xE9	; 233
     b5e:	91 e0       	ldi	r25, 0x01	; 1
     b60:	a5 df       	rcall	.-182    	; 0xaac <menu_init_menu>
     b62:	ec 01       	movw	r28, r24
     b64:	90 93 de 02 	sts	0x02DE, r25
     b68:	80 93 dd 02 	sts	0x02DD, r24
     b6c:	42 ea       	ldi	r20, 0xA2	; 162
     b6e:	53 e0       	ldi	r21, 0x03	; 3
     b70:	bc 01       	movw	r22, r24
     b72:	8e ee       	ldi	r24, 0xEE	; 238
     b74:	91 e0       	ldi	r25, 0x01	; 1
     b76:	9a df       	rcall	.-204    	; 0xaac <menu_init_menu>
     b78:	4e e4       	ldi	r20, 0x4E	; 78
     b7a:	55 e0       	ldi	r21, 0x05	; 5
     b7c:	be 01       	movw	r22, r28
     b7e:	84 ef       	ldi	r24, 0xF4	; 244
     b80:	91 e0       	ldi	r25, 0x01	; 1
     b82:	94 df       	rcall	.-216    	; 0xaac <menu_init_menu>
     b84:	4e e4       	ldi	r20, 0x4E	; 78
     b86:	55 e0       	ldi	r21, 0x05	; 5
     b88:	be 01       	movw	r22, r28
     b8a:	8f ef       	ldi	r24, 0xFF	; 255
     b8c:	91 e0       	ldi	r25, 0x01	; 1
     b8e:	8e df       	rcall	.-228    	; 0xaac <menu_init_menu>
     b90:	8c 01       	movw	r16, r24
     b92:	4f e4       	ldi	r20, 0x4F	; 79
     b94:	55 e0       	ldi	r21, 0x05	; 5
     b96:	be 01       	movw	r22, r28
     b98:	88 e0       	ldi	r24, 0x08	; 8
     b9a:	92 e0       	ldi	r25, 0x02	; 2
     b9c:	87 df       	rcall	.-242    	; 0xaac <menu_init_menu>
     b9e:	43 ee       	ldi	r20, 0xE3	; 227
     ba0:	53 e0       	ldi	r21, 0x03	; 3
     ba2:	b8 01       	movw	r22, r16
     ba4:	82 e1       	ldi	r24, 0x12	; 18
     ba6:	92 e0       	ldi	r25, 0x02	; 2
     ba8:	81 df       	rcall	.-254    	; 0xaac <menu_init_menu>
     baa:	43 e1       	ldi	r20, 0x13	; 19
     bac:	54 e0       	ldi	r21, 0x04	; 4
     bae:	b8 01       	movw	r22, r16
     bb0:	8b e1       	ldi	r24, 0x1B	; 27
     bb2:	92 e0       	ldi	r25, 0x02	; 2
     bb4:	7b df       	rcall	.-266    	; 0xaac <menu_init_menu>
     bb6:	d0 93 dc 02 	sts	0x02DC, r29
     bba:	c0 93 db 02 	sts	0x02DB, r28
     bbe:	df 91       	pop	r29
     bc0:	cf 91       	pop	r28
     bc2:	1f 91       	pop	r17
     bc4:	0f 91       	pop	r16
     bc6:	08 95       	ret

00000bc8 <menu_print_current>:
     bc8:	cf 92       	push	r12
     bca:	df 92       	push	r13
     bcc:	ef 92       	push	r14
     bce:	ff 92       	push	r15
     bd0:	0f 93       	push	r16
     bd2:	1f 93       	push	r17
     bd4:	cf 93       	push	r28
     bd6:	df 93       	push	r29
     bd8:	ed d0       	rcall	.+474    	; 0xdb4 <oled_home>
     bda:	80 91 dc 02 	lds	r24, 0x02DC
     bde:	8f 93       	push	r24
     be0:	80 91 db 02 	lds	r24, 0x02DB
     be4:	8f 93       	push	r24
     be6:	87 e2       	ldi	r24, 0x27	; 39
     be8:	92 e0       	ldi	r25, 0x02	; 2
     bea:	9f 93       	push	r25
     bec:	8f 93       	push	r24
     bee:	88 e0       	ldi	r24, 0x08	; 8
     bf0:	91 e0       	ldi	r25, 0x01	; 1
     bf2:	9f 93       	push	r25
     bf4:	8f 93       	push	r24
     bf6:	a1 d4       	rcall	.+2370   	; 0x153a <fprintf>
     bf8:	0f 90       	pop	r0
     bfa:	0f 90       	pop	r0
     bfc:	0f 90       	pop	r0
     bfe:	0f 90       	pop	r0
     c00:	0f 90       	pop	r0
     c02:	0f 90       	pop	r0
     c04:	c0 e0       	ldi	r28, 0x00	; 0
     c06:	d0 e0       	ldi	r29, 0x00	; 0
     c08:	07 e2       	ldi	r16, 0x27	; 39
     c0a:	12 e0       	ldi	r17, 0x02	; 2
     c0c:	48 e0       	ldi	r20, 0x08	; 8
     c0e:	e4 2e       	mov	r14, r20
     c10:	41 e0       	ldi	r20, 0x01	; 1
     c12:	f4 2e       	mov	r15, r20
     c14:	e0 91 db 02 	lds	r30, 0x02DB
     c18:	f0 91 dc 02 	lds	r31, 0x02DC
     c1c:	6e 01       	movw	r12, r28
     c1e:	8c e0       	ldi	r24, 0x0C	; 12
     c20:	c8 0e       	add	r12, r24
     c22:	d1 1c       	adc	r13, r1
     c24:	c6 01       	movw	r24, r12
     c26:	88 0f       	add	r24, r24
     c28:	99 1f       	adc	r25, r25
     c2a:	e8 0f       	add	r30, r24
     c2c:	f9 1f       	adc	r31, r25
     c2e:	80 81       	ld	r24, Z
     c30:	91 81       	ldd	r25, Z+1	; 0x01
     c32:	89 2b       	or	r24, r25
     c34:	19 f1       	breq	.+70     	; 0xc7c <menu_print_current+0xb4>
     c36:	80 91 da 02 	lds	r24, 0x02DA
     c3a:	68 e0       	ldi	r22, 0x08	; 8
     c3c:	71 e0       	ldi	r23, 0x01	; 1
     c3e:	c8 13       	cpse	r28, r24
     c40:	03 c0       	rjmp	.+6      	; 0xc48 <menu_print_current+0x80>
     c42:	8b e2       	ldi	r24, 0x2B	; 43
     c44:	92 e0       	ldi	r25, 0x02	; 2
     c46:	02 c0       	rjmp	.+4      	; 0xc4c <menu_print_current+0x84>
     c48:	8e e2       	ldi	r24, 0x2E	; 46
     c4a:	92 e0       	ldi	r25, 0x02	; 2
     c4c:	b7 d4       	rcall	.+2414   	; 0x15bc <fputs>
     c4e:	e0 91 db 02 	lds	r30, 0x02DB
     c52:	f0 91 dc 02 	lds	r31, 0x02DC
     c56:	cc 0c       	add	r12, r12
     c58:	dd 1c       	adc	r13, r13
     c5a:	ec 0d       	add	r30, r12
     c5c:	fd 1d       	adc	r31, r13
     c5e:	81 81       	ldd	r24, Z+1	; 0x01
     c60:	8f 93       	push	r24
     c62:	80 81       	ld	r24, Z
     c64:	8f 93       	push	r24
     c66:	1f 93       	push	r17
     c68:	0f 93       	push	r16
     c6a:	ff 92       	push	r15
     c6c:	ef 92       	push	r14
     c6e:	65 d4       	rcall	.+2250   	; 0x153a <fprintf>
     c70:	0f 90       	pop	r0
     c72:	0f 90       	pop	r0
     c74:	0f 90       	pop	r0
     c76:	0f 90       	pop	r0
     c78:	0f 90       	pop	r0
     c7a:	0f 90       	pop	r0
     c7c:	21 96       	adiw	r28, 0x01	; 1
     c7e:	c7 30       	cpi	r28, 0x07	; 7
     c80:	d1 05       	cpc	r29, r1
     c82:	41 f6       	brne	.-112    	; 0xc14 <menu_print_current+0x4c>
     c84:	df 91       	pop	r29
     c86:	cf 91       	pop	r28
     c88:	1f 91       	pop	r17
     c8a:	0f 91       	pop	r16
     c8c:	ff 90       	pop	r15
     c8e:	ef 90       	pop	r14
     c90:	df 90       	pop	r13
     c92:	cf 90       	pop	r12
     c94:	08 95       	ret

00000c96 <menu_move_cursor>:
     c96:	90 91 da 02 	lds	r25, 0x02DA
     c9a:	98 0f       	add	r25, r24
     c9c:	20 91 db 02 	lds	r18, 0x02DB
     ca0:	80 91 dc 02 	lds	r24, 0x02DC
     ca4:	e2 2f       	mov	r30, r18
     ca6:	f8 2f       	mov	r31, r24
     ca8:	e9 0f       	add	r30, r25
     caa:	f1 1d       	adc	r31, r1
     cac:	e9 0f       	add	r30, r25
     cae:	f1 1d       	adc	r31, r1
     cb0:	20 8d       	ldd	r18, Z+24	; 0x18
     cb2:	31 8d       	ldd	r19, Z+25	; 0x19
     cb4:	23 2b       	or	r18, r19
     cb6:	21 f0       	breq	.+8      	; 0xcc0 <menu_move_cursor+0x2a>
     cb8:	97 30       	cpi	r25, 0x07	; 7
     cba:	10 f4       	brcc	.+4      	; 0xcc0 <menu_move_cursor+0x2a>
     cbc:	90 93 da 02 	sts	0x02DA, r25
     cc0:	08 95       	ret

00000cc2 <menu_enter_current>:



void menu_enter_current(void)
{
	oled_fill(0x00); // needed if next submenu has fewer menus than current
     cc2:	80 e0       	ldi	r24, 0x00	; 0
     cc4:	0f d1       	rcall	.+542    	; 0xee4 <oled_fill>
	
	// check if current choice is valid and that current choice has any children
	if (current->submenus[subchoice] != NULL && current->submenus[subchoice]->submenus[0] != NULL){
     cc6:	20 91 db 02 	lds	r18, 0x02DB
     cca:	90 91 dc 02 	lds	r25, 0x02DC
     cce:	80 91 da 02 	lds	r24, 0x02DA
     cd2:	e2 2f       	mov	r30, r18
     cd4:	f9 2f       	mov	r31, r25
     cd6:	e8 0f       	add	r30, r24
     cd8:	f1 1d       	adc	r31, r1
     cda:	e8 0f       	add	r30, r24
     cdc:	f1 1d       	adc	r31, r1
     cde:	00 8c       	ldd	r0, Z+24	; 0x18
     ce0:	f1 8d       	ldd	r31, Z+25	; 0x19
     ce2:	e0 2d       	mov	r30, r0
     ce4:	30 97       	sbiw	r30, 0x00	; 0
     ce6:	51 f0       	breq	.+20     	; 0xcfc <menu_enter_current+0x3a>
     ce8:	80 8d       	ldd	r24, Z+24	; 0x18
     cea:	91 8d       	ldd	r25, Z+25	; 0x19
     cec:	89 2b       	or	r24, r25
     cee:	31 f0       	breq	.+12     	; 0xcfc <menu_enter_current+0x3a>
		//fprintf(&uart_out, "current: %p\n", current);
		//fprintf(&uart_out, "next:    %p\n", current->submenus[subchoice]);

		current = current->submenus[subchoice];
     cf0:	f0 93 dc 02 	sts	0x02DC, r31
     cf4:	e0 93 db 02 	sts	0x02DB, r30
		subchoice = 0;
     cf8:	10 92 da 02 	sts	0x02DA, r1
	}
	
	current->submenus[subchoice]->action();
     cfc:	20 91 db 02 	lds	r18, 0x02DB
     d00:	90 91 dc 02 	lds	r25, 0x02DC
     d04:	80 91 da 02 	lds	r24, 0x02DA
     d08:	e2 2f       	mov	r30, r18
     d0a:	f9 2f       	mov	r31, r25
     d0c:	e8 0f       	add	r30, r24
     d0e:	f1 1d       	adc	r31, r1
     d10:	e8 0f       	add	r30, r24
     d12:	f1 1d       	adc	r31, r1
     d14:	00 8c       	ldd	r0, Z+24	; 0x18
     d16:	f1 8d       	ldd	r31, Z+25	; 0x19
     d18:	e0 2d       	mov	r30, r0
     d1a:	00 a4       	ldd	r0, Z+40	; 0x28
     d1c:	f1 a5       	ldd	r31, Z+41	; 0x29
     d1e:	e0 2d       	mov	r30, r0
     d20:	09 94       	ijmp

00000d22 <menu_enter_parent>:
}


void menu_enter_parent(void){
	oled_fill(0x00);
     d22:	80 e0       	ldi	r24, 0x00	; 0
     d24:	df d0       	rcall	.+446    	; 0xee4 <oled_fill>
	
	current = current->parent;	
     d26:	e0 91 db 02 	lds	r30, 0x02DB
     d2a:	f0 91 dc 02 	lds	r31, 0x02DC
     d2e:	86 a1       	ldd	r24, Z+38	; 0x26
     d30:	97 a1       	ldd	r25, Z+39	; 0x27
     d32:	90 93 dc 02 	sts	0x02DC, r25
     d36:	80 93 db 02 	sts	0x02DB, r24
     d3a:	08 95       	ret

00000d3c <menu_handle_input>:
 */
void menu_handle_input(void){                
        
    static BOOL joy_released = TRUE;
	
	joystick_t joy = joy_get_state();
     d3c:	e2 dd       	rcall	.-1084   	; 0x902 <joy_get_state>
     d3e:	86 2f       	mov	r24, r22
     d40:	67 2f       	mov	r22, r23
	
	direction_t joy_dir = joy_direction(joy.x, joy.y);
     d42:	ab dd       	rcall	.-1194   	; 0x89a <joy_direction>
	
	switch (joy_dir){
     d44:	82 30       	cpi	r24, 0x02	; 2
     d46:	59 f0       	breq	.+22     	; 0xd5e <menu_handle_input+0x22>
     d48:	28 f4       	brcc	.+10     	; 0xd54 <menu_handle_input+0x18>
     d4a:	88 23       	and	r24, r24
     d4c:	f9 f0       	breq	.+62     	; 0xd8c <menu_handle_input+0x50>
     d4e:	81 30       	cpi	r24, 0x01	; 1
     d50:	b1 f0       	breq	.+44     	; 0xd7e <menu_handle_input+0x42>
     d52:	08 95       	ret
     d54:	83 30       	cpi	r24, 0x03	; 3
     d56:	59 f0       	breq	.+22     	; 0xd6e <menu_handle_input+0x32>
     d58:	84 30       	cpi	r24, 0x04	; 4
     d5a:	f9 f0       	breq	.+62     	; 0xd9a <menu_handle_input+0x5e>
     d5c:	08 95       	ret
		case UP:
			if (joy_released){
     d5e:	80 91 07 01 	lds	r24, 0x0107
     d62:	88 23       	and	r24, r24
     d64:	e9 f0       	breq	.+58     	; 0xda0 <menu_handle_input+0x64>
				joy_released = FALSE;
     d66:	10 92 07 01 	sts	0x0107, r1
				menu_move_cursor(-1);
     d6a:	8f ef       	ldi	r24, 0xFF	; 255
     d6c:	07 c0       	rjmp	.+14     	; 0xd7c <menu_handle_input+0x40>
			}
			break;
		case DOWN:
			if (joy_released){
     d6e:	80 91 07 01 	lds	r24, 0x0107
     d72:	88 23       	and	r24, r24
     d74:	a9 f0       	breq	.+42     	; 0xda0 <menu_handle_input+0x64>
				joy_released = FALSE;
     d76:	10 92 07 01 	sts	0x0107, r1
				menu_move_cursor(1);
     d7a:	81 e0       	ldi	r24, 0x01	; 1
     d7c:	8c cf       	rjmp	.-232    	; 0xc96 <menu_move_cursor>
			}
			break;
			
		case RIGHT:
			if (joy_released){
     d7e:	80 91 07 01 	lds	r24, 0x0107
     d82:	88 23       	and	r24, r24
     d84:	69 f0       	breq	.+26     	; 0xda0 <menu_handle_input+0x64>
				joy_released = FALSE;
     d86:	10 92 07 01 	sts	0x0107, r1
				menu_enter_current();
     d8a:	9b cf       	rjmp	.-202    	; 0xcc2 <menu_enter_current>
			}
			break;
		
		case LEFT:
			if (joy_released){
     d8c:	80 91 07 01 	lds	r24, 0x0107
     d90:	88 23       	and	r24, r24
     d92:	31 f0       	breq	.+12     	; 0xda0 <menu_handle_input+0x64>
				joy_released = FALSE;
     d94:	10 92 07 01 	sts	0x0107, r1
				menu_enter_parent();
     d98:	c4 cf       	rjmp	.-120    	; 0xd22 <menu_enter_parent>
			}
			break;
		
		case NEUTRAL:
			joy_released = TRUE;
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	80 93 07 01 	sts	0x0107, r24
     da0:	08 95       	ret

00000da2 <oled_autorefresh_init>:
/// Reset oled display by initializing, clearing screen and setting cursor to home.
void oled_reset(){
	/// \note This is exexctly the same as oled_init except oled_fill and oled_home are called twice
	oled_init(); 
	oled_fill(0);
	oled_home();
     da2:	89 b7       	in	r24, 0x39	; 57
     da4:	82 60       	ori	r24, 0x02	; 2
     da6:	89 bf       	out	0x39, r24	; 57
     da8:	83 b7       	in	r24, 0x33	; 51
     daa:	85 60       	ori	r24, 0x05	; 5
     dac:	83 bf       	out	0x33, r24	; 51
     dae:	87 e2       	ldi	r24, 0x27	; 39
     db0:	81 bf       	out	0x31, r24	; 49
     db2:	08 95       	ret

00000db4 <oled_home>:
     db4:	10 92 e0 02 	sts	0x02E0, r1
     db8:	10 92 df 02 	sts	0x02DF, r1
     dbc:	08 95       	ret

00000dbe <oled_newline>:
     dbe:	10 92 e0 02 	sts	0x02E0, r1
     dc2:	80 91 df 02 	lds	r24, 0x02DF
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	01 96       	adiw	r24, 0x01	; 1
     dca:	87 70       	andi	r24, 0x07	; 7
     dcc:	99 27       	eor	r25, r25
     dce:	80 93 df 02 	sts	0x02DF, r24
     dd2:	08 95       	ret

00000dd4 <oled_goto_nextpos>:
     dd4:	80 91 e0 02 	lds	r24, 0x02E0
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	01 96       	adiw	r24, 0x01	; 1
     ddc:	8f 77       	andi	r24, 0x7F	; 127
     dde:	99 27       	eor	r25, r25
     de0:	80 93 e0 02 	sts	0x02E0, r24
     de4:	40 91 df 02 	lds	r20, 0x02DF
     de8:	50 e0       	ldi	r21, 0x00	; 0
     dea:	21 e0       	ldi	r18, 0x01	; 1
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	89 2b       	or	r24, r25
     df0:	11 f0       	breq	.+4      	; 0xdf6 <oled_goto_nextpos+0x22>
     df2:	20 e0       	ldi	r18, 0x00	; 0
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	ca 01       	movw	r24, r20
     df8:	82 0f       	add	r24, r18
     dfa:	93 1f       	adc	r25, r19
     dfc:	87 70       	andi	r24, 0x07	; 7
     dfe:	99 27       	eor	r25, r25
     e00:	80 93 df 02 	sts	0x02DF, r24
     e04:	08 95       	ret

00000e06 <oled_pos>:
     e06:	80 93 df 02 	sts	0x02DF, r24
     e0a:	60 93 e0 02 	sts	0x02E0, r22
     e0e:	08 95       	ret

00000e10 <oled_buffchar>:
     e10:	0f 93       	push	r16
     e12:	1f 93       	push	r17
     e14:	cf 93       	push	r28
     e16:	df 93       	push	r29
     e18:	c8 2f       	mov	r28, r24
     e1a:	80 32       	cpi	r24, 0x20	; 32
     e1c:	08 f4       	brcc	.+2      	; 0xe20 <oled_buffchar+0x10>
     e1e:	4e c0       	rjmp	.+156    	; 0xebc <oled_buffchar+0xac>
     e20:	20 91 e0 02 	lds	r18, 0x02E0
     e24:	27 fd       	sbrc	r18, 7
     e26:	55 c0       	rjmp	.+170    	; 0xed2 <oled_buffchar+0xc2>
     e28:	80 91 df 02 	lds	r24, 0x02DF
     e2c:	88 30       	cpi	r24, 0x08	; 8
     e2e:	08 f0       	brcs	.+2      	; 0xe32 <oled_buffchar+0x22>
     e30:	50 c0       	rjmp	.+160    	; 0xed2 <oled_buffchar+0xc2>
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	2c 37       	cpi	r18, 0x7C	; 124
     e36:	31 05       	cpc	r19, r1
     e38:	0c f0       	brlt	.+2      	; 0xe3c <oled_buffchar+0x2c>
     e3a:	c1 df       	rcall	.-126    	; 0xdbe <oled_newline>
     e3c:	d0 e0       	ldi	r29, 0x00	; 0
     e3e:	a0 97       	sbiw	r28, 0x20	; 32
     e40:	cc 0f       	add	r28, r28
     e42:	dd 1f       	adc	r29, r29
     e44:	cc 0f       	add	r28, r28
     e46:	dd 1f       	adc	r29, r29
     e48:	00 e0       	ldi	r16, 0x00	; 0
     e4a:	10 e0       	ldi	r17, 0x00	; 0
     e4c:	20 91 df 02 	lds	r18, 0x02DF
     e50:	80 91 e0 02 	lds	r24, 0x02E0
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	30 e8       	ldi	r19, 0x80	; 128
     e58:	23 9f       	mul	r18, r19
     e5a:	80 0d       	add	r24, r0
     e5c:	91 1d       	adc	r25, r1
     e5e:	11 24       	eor	r1, r1
     e60:	a0 91 16 01 	lds	r26, 0x0116
     e64:	b0 91 17 01 	lds	r27, 0x0117
     e68:	a8 0f       	add	r26, r24
     e6a:	b9 1f       	adc	r27, r25
     e6c:	c8 01       	movw	r24, r16
     e6e:	8c 0f       	add	r24, r28
     e70:	9d 1f       	adc	r25, r29
     e72:	e0 91 18 01 	lds	r30, 0x0118
     e76:	f0 91 19 01 	lds	r31, 0x0119
     e7a:	e8 0f       	add	r30, r24
     e7c:	f9 1f       	adc	r31, r25
     e7e:	85 91       	lpm	r24, Z+
     e80:	94 91       	lpm	r25, Z
     e82:	8c 93       	st	X, r24
     e84:	a7 df       	rcall	.-178    	; 0xdd4 <oled_goto_nextpos>
     e86:	0f 5f       	subi	r16, 0xFF	; 255
     e88:	1f 4f       	sbci	r17, 0xFF	; 255
     e8a:	04 30       	cpi	r16, 0x04	; 4
     e8c:	11 05       	cpc	r17, r1
     e8e:	f1 f6       	brne	.-68     	; 0xe4c <oled_buffchar+0x3c>
     e90:	20 91 df 02 	lds	r18, 0x02DF
     e94:	80 91 e0 02 	lds	r24, 0x02E0
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	30 e8       	ldi	r19, 0x80	; 128
     e9c:	23 9f       	mul	r18, r19
     e9e:	80 0d       	add	r24, r0
     ea0:	91 1d       	adc	r25, r1
     ea2:	11 24       	eor	r1, r1
     ea4:	e0 91 16 01 	lds	r30, 0x0116
     ea8:	f0 91 17 01 	lds	r31, 0x0117
     eac:	e8 0f       	add	r30, r24
     eae:	f9 1f       	adc	r31, r25
     eb0:	10 82       	st	Z, r1
     eb2:	df 91       	pop	r29
     eb4:	cf 91       	pop	r28
     eb6:	1f 91       	pop	r17
     eb8:	0f 91       	pop	r16
     eba:	8c cf       	rjmp	.-232    	; 0xdd4 <oled_goto_nextpos>
     ebc:	8a 30       	cpi	r24, 0x0A	; 10
     ebe:	29 f4       	brne	.+10     	; 0xeca <oled_buffchar+0xba>
     ec0:	df 91       	pop	r29
     ec2:	cf 91       	pop	r28
     ec4:	1f 91       	pop	r17
     ec6:	0f 91       	pop	r16
     ec8:	7a cf       	rjmp	.-268    	; 0xdbe <oled_newline>
     eca:	8d 30       	cpi	r24, 0x0D	; 13
     ecc:	11 f4       	brne	.+4      	; 0xed2 <oled_buffchar+0xc2>
     ece:	10 92 e0 02 	sts	0x02E0, r1
     ed2:	df 91       	pop	r29
     ed4:	cf 91       	pop	r28
     ed6:	1f 91       	pop	r17
     ed8:	0f 91       	pop	r16
     eda:	08 95       	ret

00000edc <oled_putchar>:
     edc:	99 df       	rcall	.-206    	; 0xe10 <oled_buffchar>
     ede:	80 e0       	ldi	r24, 0x00	; 0
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	08 95       	ret

00000ee4 <oled_fill>:
     ee4:	00 c0       	rjmp	.+0      	; 0xee6 <oled_fill+0x2>
     ee6:	00 c0       	rjmp	.+0      	; 0xee8 <oled_fill+0x4>
     ee8:	00 00       	nop
     eea:	91 e2       	ldi	r25, 0x21	; 33
     eec:	90 93 00 10 	sts	0x1000, r25
     ef0:	00 c0       	rjmp	.+0      	; 0xef2 <oled_fill+0xe>
     ef2:	00 c0       	rjmp	.+0      	; 0xef4 <oled_fill+0x10>
     ef4:	00 00       	nop
     ef6:	10 92 00 10 	sts	0x1000, r1
     efa:	00 c0       	rjmp	.+0      	; 0xefc <oled_fill+0x18>
     efc:	00 c0       	rjmp	.+0      	; 0xefe <oled_fill+0x1a>
     efe:	00 00       	nop
     f00:	9f e7       	ldi	r25, 0x7F	; 127
     f02:	90 93 00 10 	sts	0x1000, r25
     f06:	00 c0       	rjmp	.+0      	; 0xf08 <oled_fill+0x24>
     f08:	00 c0       	rjmp	.+0      	; 0xf0a <oled_fill+0x26>
     f0a:	00 00       	nop
     f0c:	92 e2       	ldi	r25, 0x22	; 34
     f0e:	90 93 00 10 	sts	0x1000, r25
     f12:	00 c0       	rjmp	.+0      	; 0xf14 <oled_fill+0x30>
     f14:	00 c0       	rjmp	.+0      	; 0xf16 <oled_fill+0x32>
     f16:	00 00       	nop
     f18:	10 92 00 10 	sts	0x1000, r1
     f1c:	00 c0       	rjmp	.+0      	; 0xf1e <oled_fill+0x3a>
     f1e:	00 c0       	rjmp	.+0      	; 0xf20 <oled_fill+0x3c>
     f20:	00 00       	nop
     f22:	97 e0       	ldi	r25, 0x07	; 7
     f24:	90 93 00 10 	sts	0x1000, r25
     f28:	40 e0       	ldi	r20, 0x00	; 0
     f2a:	50 e0       	ldi	r21, 0x00	; 0
     f2c:	20 e0       	ldi	r18, 0x00	; 0
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	b9 01       	movw	r22, r18
     f32:	64 0f       	add	r22, r20
     f34:	75 1f       	adc	r23, r21
     f36:	e0 91 16 01 	lds	r30, 0x0116
     f3a:	f0 91 17 01 	lds	r31, 0x0117
     f3e:	e6 0f       	add	r30, r22
     f40:	f7 1f       	adc	r31, r23
     f42:	80 83       	st	Z, r24
     f44:	2f 5f       	subi	r18, 0xFF	; 255
     f46:	3f 4f       	sbci	r19, 0xFF	; 255
     f48:	20 38       	cpi	r18, 0x80	; 128
     f4a:	31 05       	cpc	r19, r1
     f4c:	89 f7       	brne	.-30     	; 0xf30 <oled_fill+0x4c>
     f4e:	40 58       	subi	r20, 0x80	; 128
     f50:	5f 4f       	sbci	r21, 0xFF	; 255
     f52:	41 15       	cp	r20, r1
     f54:	94 e0       	ldi	r25, 0x04	; 4
     f56:	59 07       	cpc	r21, r25
     f58:	49 f7       	brne	.-46     	; 0xf2c <oled_fill+0x48>
     f5a:	08 95       	ret

00000f5c <oled_init>:
     f5c:	00 c0       	rjmp	.+0      	; 0xf5e <oled_init+0x2>
     f5e:	00 c0       	rjmp	.+0      	; 0xf60 <oled_init+0x4>
     f60:	00 00       	nop
     f62:	8e ea       	ldi	r24, 0xAE	; 174
     f64:	80 93 00 10 	sts	0x1000, r24
     f68:	00 c0       	rjmp	.+0      	; 0xf6a <oled_init+0xe>
     f6a:	00 c0       	rjmp	.+0      	; 0xf6c <oled_init+0x10>
     f6c:	00 00       	nop
     f6e:	81 ea       	ldi	r24, 0xA1	; 161
     f70:	80 93 00 10 	sts	0x1000, r24
     f74:	00 c0       	rjmp	.+0      	; 0xf76 <oled_init+0x1a>
     f76:	00 c0       	rjmp	.+0      	; 0xf78 <oled_init+0x1c>
     f78:	00 00       	nop
     f7a:	8a ed       	ldi	r24, 0xDA	; 218
     f7c:	80 93 00 10 	sts	0x1000, r24
     f80:	00 c0       	rjmp	.+0      	; 0xf82 <oled_init+0x26>
     f82:	00 c0       	rjmp	.+0      	; 0xf84 <oled_init+0x28>
     f84:	00 00       	nop
     f86:	82 e1       	ldi	r24, 0x12	; 18
     f88:	80 93 00 10 	sts	0x1000, r24
     f8c:	00 c0       	rjmp	.+0      	; 0xf8e <oled_init+0x32>
     f8e:	00 c0       	rjmp	.+0      	; 0xf90 <oled_init+0x34>
     f90:	00 00       	nop
     f92:	88 ec       	ldi	r24, 0xC8	; 200
     f94:	80 93 00 10 	sts	0x1000, r24
     f98:	00 c0       	rjmp	.+0      	; 0xf9a <oled_init+0x3e>
     f9a:	00 c0       	rjmp	.+0      	; 0xf9c <oled_init+0x40>
     f9c:	00 00       	nop
     f9e:	88 ea       	ldi	r24, 0xA8	; 168
     fa0:	80 93 00 10 	sts	0x1000, r24
     fa4:	00 c0       	rjmp	.+0      	; 0xfa6 <oled_init+0x4a>
     fa6:	00 c0       	rjmp	.+0      	; 0xfa8 <oled_init+0x4c>
     fa8:	00 00       	nop
     faa:	8f e3       	ldi	r24, 0x3F	; 63
     fac:	80 93 00 10 	sts	0x1000, r24
     fb0:	00 c0       	rjmp	.+0      	; 0xfb2 <oled_init+0x56>
     fb2:	00 c0       	rjmp	.+0      	; 0xfb4 <oled_init+0x58>
     fb4:	00 00       	nop
     fb6:	85 ed       	ldi	r24, 0xD5	; 213
     fb8:	80 93 00 10 	sts	0x1000, r24
     fbc:	00 c0       	rjmp	.+0      	; 0xfbe <oled_init+0x62>
     fbe:	00 c0       	rjmp	.+0      	; 0xfc0 <oled_init+0x64>
     fc0:	00 00       	nop
     fc2:	80 e8       	ldi	r24, 0x80	; 128
     fc4:	80 93 00 10 	sts	0x1000, r24
     fc8:	00 c0       	rjmp	.+0      	; 0xfca <oled_init+0x6e>
     fca:	00 c0       	rjmp	.+0      	; 0xfcc <oled_init+0x70>
     fcc:	00 00       	nop
     fce:	81 e8       	ldi	r24, 0x81	; 129
     fd0:	80 93 00 10 	sts	0x1000, r24
     fd4:	00 c0       	rjmp	.+0      	; 0xfd6 <oled_init+0x7a>
     fd6:	00 c0       	rjmp	.+0      	; 0xfd8 <oled_init+0x7c>
     fd8:	00 00       	nop
     fda:	80 e5       	ldi	r24, 0x50	; 80
     fdc:	80 93 00 10 	sts	0x1000, r24
     fe0:	00 c0       	rjmp	.+0      	; 0xfe2 <oled_init+0x86>
     fe2:	00 c0       	rjmp	.+0      	; 0xfe4 <oled_init+0x88>
     fe4:	00 00       	nop
     fe6:	89 ed       	ldi	r24, 0xD9	; 217
     fe8:	80 93 00 10 	sts	0x1000, r24
     fec:	00 c0       	rjmp	.+0      	; 0xfee <oled_init+0x92>
     fee:	00 c0       	rjmp	.+0      	; 0xff0 <oled_init+0x94>
     ff0:	00 00       	nop
     ff2:	81 e2       	ldi	r24, 0x21	; 33
     ff4:	80 93 00 10 	sts	0x1000, r24
     ff8:	00 c0       	rjmp	.+0      	; 0xffa <oled_init+0x9e>
     ffa:	00 c0       	rjmp	.+0      	; 0xffc <oled_init+0xa0>
     ffc:	00 00       	nop
     ffe:	80 e2       	ldi	r24, 0x20	; 32
    1000:	80 93 00 10 	sts	0x1000, r24
    1004:	00 c0       	rjmp	.+0      	; 0x1006 <oled_init+0xaa>
    1006:	00 c0       	rjmp	.+0      	; 0x1008 <oled_init+0xac>
    1008:	00 00       	nop
    100a:	10 92 00 10 	sts	0x1000, r1
    100e:	00 c0       	rjmp	.+0      	; 0x1010 <oled_init+0xb4>
    1010:	00 c0       	rjmp	.+0      	; 0x1012 <oled_init+0xb6>
    1012:	00 00       	nop
    1014:	8b ed       	ldi	r24, 0xDB	; 219
    1016:	80 93 00 10 	sts	0x1000, r24
    101a:	00 c0       	rjmp	.+0      	; 0x101c <oled_init+0xc0>
    101c:	00 c0       	rjmp	.+0      	; 0x101e <oled_init+0xc2>
    101e:	00 00       	nop
    1020:	80 e3       	ldi	r24, 0x30	; 48
    1022:	80 93 00 10 	sts	0x1000, r24
    1026:	00 c0       	rjmp	.+0      	; 0x1028 <oled_init+0xcc>
    1028:	00 c0       	rjmp	.+0      	; 0x102a <oled_init+0xce>
    102a:	00 00       	nop
    102c:	8d ea       	ldi	r24, 0xAD	; 173
    102e:	80 93 00 10 	sts	0x1000, r24
    1032:	00 c0       	rjmp	.+0      	; 0x1034 <oled_init+0xd8>
    1034:	00 c0       	rjmp	.+0      	; 0x1036 <oled_init+0xda>
    1036:	00 00       	nop
    1038:	10 92 00 10 	sts	0x1000, r1
    103c:	00 c0       	rjmp	.+0      	; 0x103e <oled_init+0xe2>
    103e:	00 c0       	rjmp	.+0      	; 0x1040 <oled_init+0xe4>
    1040:	00 00       	nop
    1042:	84 ea       	ldi	r24, 0xA4	; 164
    1044:	80 93 00 10 	sts	0x1000, r24
    1048:	00 c0       	rjmp	.+0      	; 0x104a <oled_init+0xee>
    104a:	00 c0       	rjmp	.+0      	; 0x104c <oled_init+0xf0>
    104c:	00 00       	nop
    104e:	86 ea       	ldi	r24, 0xA6	; 166
    1050:	80 93 00 10 	sts	0x1000, r24
    1054:	00 c0       	rjmp	.+0      	; 0x1056 <oled_init+0xfa>
    1056:	00 c0       	rjmp	.+0      	; 0x1058 <oled_init+0xfc>
    1058:	00 00       	nop
    105a:	8f ea       	ldi	r24, 0xAF	; 175
    105c:	80 93 00 10 	sts	0x1000, r24
    1060:	80 e0       	ldi	r24, 0x00	; 0
    1062:	40 df       	rcall	.-384    	; 0xee4 <oled_fill>
    1064:	a7 de       	rcall	.-690    	; 0xdb4 <oled_home>
    1066:	9d ce       	rjmp	.-710    	; 0xda2 <oled_autorefresh_init>

00001068 <oled_update>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1068:	00 c0       	rjmp	.+0      	; 0x106a <oled_update+0x2>
    106a:	00 c0       	rjmp	.+0      	; 0x106c <oled_update+0x4>
    106c:	00 00       	nop
}

/// Write command to oled
void write_c(uint8_t cmd){
	_delay_us(1);
	*((uint8_t *)OLED_C_ADR) = cmd;
    106e:	81 e2       	ldi	r24, 0x21	; 33
    1070:	80 93 00 10 	sts	0x1000, r24
    1074:	00 c0       	rjmp	.+0      	; 0x1076 <oled_update+0xe>
    1076:	00 c0       	rjmp	.+0      	; 0x1078 <oled_update+0x10>
    1078:	00 00       	nop
    107a:	10 92 00 10 	sts	0x1000, r1
    107e:	00 c0       	rjmp	.+0      	; 0x1080 <oled_update+0x18>
    1080:	00 c0       	rjmp	.+0      	; 0x1082 <oled_update+0x1a>
    1082:	00 00       	nop
    1084:	8f e7       	ldi	r24, 0x7F	; 127
    1086:	80 93 00 10 	sts	0x1000, r24
    108a:	00 c0       	rjmp	.+0      	; 0x108c <oled_update+0x24>
    108c:	00 c0       	rjmp	.+0      	; 0x108e <oled_update+0x26>
    108e:	00 00       	nop
    1090:	82 e2       	ldi	r24, 0x22	; 34
    1092:	80 93 00 10 	sts	0x1000, r24
    1096:	00 c0       	rjmp	.+0      	; 0x1098 <oled_update+0x30>
    1098:	00 c0       	rjmp	.+0      	; 0x109a <oled_update+0x32>
    109a:	00 00       	nop
    109c:	10 92 00 10 	sts	0x1000, r1
    10a0:	00 c0       	rjmp	.+0      	; 0x10a2 <oled_update+0x3a>
    10a2:	00 c0       	rjmp	.+0      	; 0x10a4 <oled_update+0x3c>
    10a4:	00 00       	nop
    10a6:	87 e0       	ldi	r24, 0x07	; 7
    10a8:	80 93 00 10 	sts	0x1000, r24
    10ac:	00 c0       	rjmp	.+0      	; 0x10ae <oled_update+0x46>
    10ae:	00 c0       	rjmp	.+0      	; 0x10b0 <oled_update+0x48>
    10b0:	00 00       	nop
    10b2:	10 92 00 10 	sts	0x1000, r1
    10b6:	00 c0       	rjmp	.+0      	; 0x10b8 <oled_update+0x50>
    10b8:	00 c0       	rjmp	.+0      	; 0x10ba <oled_update+0x52>
    10ba:	00 00       	nop
    10bc:	80 e1       	ldi	r24, 0x10	; 16
    10be:	80 93 00 10 	sts	0x1000, r24
    10c2:	20 e0       	ldi	r18, 0x00	; 0
    10c4:	30 e0       	ldi	r19, 0x00	; 0
//////////////////////////////////////////////////////////////////////////

/**
 * Go sequentially through the buffer and write data to the display. 
 */
void oled_update(){
    10c6:	80 e0       	ldi	r24, 0x00	; 0
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	ac 01       	movw	r20, r24
    10cc:	42 0f       	add	r20, r18
    10ce:	53 1f       	adc	r21, r19
	write_c(SET_LOW_COL_ADR  | 0x00);
	write_c(SET_HIGH_COL_ADR | 0x00);
	
	for (int page = 0; page<OLED_PAGES; ++page){
		for (int seg = 0; seg<OLED_WIDTH; ++seg){
			write_d(buffer[page*OLED_WIDTH + seg]);
    10d0:	e0 91 16 01 	lds	r30, 0x0116
    10d4:	f0 91 17 01 	lds	r31, 0x0117
    10d8:	e4 0f       	add	r30, r20
    10da:	f5 1f       	adc	r31, r21
    10dc:	40 81       	ld	r20, Z
    10de:	00 c0       	rjmp	.+0      	; 0x10e0 <oled_update+0x78>
    10e0:	00 c0       	rjmp	.+0      	; 0x10e2 <oled_update+0x7a>
    10e2:	00 00       	nop
}

/// Write data to oled
void write_d(uint8_t data){
	_delay_us(1); // delay may be increased to 1000 to make debug easier, works without any delay
	*((uint8_t *)OLED_D_ADR) = data;
    10e4:	40 93 01 10 	sts	0x1001, r20
	
	write_c(SET_LOW_COL_ADR  | 0x00);
	write_c(SET_HIGH_COL_ADR | 0x00);
	
	for (int page = 0; page<OLED_PAGES; ++page){
		for (int seg = 0; seg<OLED_WIDTH; ++seg){
    10e8:	01 96       	adiw	r24, 0x01	; 1
    10ea:	80 38       	cpi	r24, 0x80	; 128
    10ec:	91 05       	cpc	r25, r1
    10ee:	69 f7       	brne	.-38     	; 0x10ca <oled_update+0x62>
    10f0:	20 58       	subi	r18, 0x80	; 128
    10f2:	3f 4f       	sbci	r19, 0xFF	; 255
	write_c(SET_PAGE_ADR);write_c(0x00); write_c(OLED_PAGES-1);
	
	write_c(SET_LOW_COL_ADR  | 0x00);
	write_c(SET_HIGH_COL_ADR | 0x00);
	
	for (int page = 0; page<OLED_PAGES; ++page){
    10f4:	21 15       	cp	r18, r1
    10f6:	84 e0       	ldi	r24, 0x04	; 4
    10f8:	38 07       	cpc	r19, r24
    10fa:	29 f7       	brne	.-54     	; 0x10c6 <oled_update+0x5e>
    10fc:	08 95       	ret

000010fe <__vector_17>:
/// Make oled into a output file stream
FILE oled_out = FDEV_SETUP_STREAM(oled_putchar, NULL, _FDEV_SETUP_WRITE);


/// Interrupt vector which refreshes the display
ISR(TIMER0_OVF_vect){
    10fe:	1f 92       	push	r1
    1100:	0f 92       	push	r0
    1102:	0f b6       	in	r0, 0x3f	; 63
    1104:	0f 92       	push	r0
    1106:	11 24       	eor	r1, r1
    1108:	2f 93       	push	r18
    110a:	3f 93       	push	r19
    110c:	4f 93       	push	r20
    110e:	5f 93       	push	r21
    1110:	6f 93       	push	r22
    1112:	7f 93       	push	r23
    1114:	8f 93       	push	r24
    1116:	9f 93       	push	r25
    1118:	af 93       	push	r26
    111a:	bf 93       	push	r27
    111c:	ef 93       	push	r30
    111e:	ff 93       	push	r31
	oled_update();
    1120:	a3 df       	rcall	.-186    	; 0x1068 <oled_update>
}
    1122:	ff 91       	pop	r31
    1124:	ef 91       	pop	r30
    1126:	bf 91       	pop	r27
    1128:	af 91       	pop	r26
    112a:	9f 91       	pop	r25
    112c:	8f 91       	pop	r24
    112e:	7f 91       	pop	r23
    1130:	6f 91       	pop	r22
    1132:	5f 91       	pop	r21
    1134:	4f 91       	pop	r20
    1136:	3f 91       	pop	r19
    1138:	2f 91       	pop	r18
    113a:	0f 90       	pop	r0
    113c:	0f be       	out	0x3f, r0	; 63
    113e:	0f 90       	pop	r0
    1140:	1f 90       	pop	r1
    1142:	18 95       	reti

00001144 <spi_ss_low>:
#include "avr/io.h"
#include <stdio.h>

/// Set slave select line low
void spi_ss_low(){
	PORTB &= ~(1 << PB4);
    1144:	c4 98       	cbi	0x18, 4	; 24
    1146:	08 95       	ret

00001148 <spi_ss_high>:
}

/// Set slave select line high
void spi_ss_high(){
	PORTB |= (1 << PB4);
    1148:	c4 9a       	sbi	0x18, 4	; 24
    114a:	08 95       	ret

0000114c <spi_init>:

/// Initialize Atmega162 as SPI master
void spi_init()
{
	// setup IO pins
	DDRB |= (1<<DDB4 | 1<<DDB5 | 1<<DDB7);
    114c:	87 b3       	in	r24, 0x17	; 23
    114e:	80 6b       	ori	r24, 0xB0	; 176
    1150:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1<<DDB6); // not necessary
    1152:	be 98       	cbi	0x17, 6	; 23
	
	// setup SPI
	SPCR = (1<<SPE | 1<<MSTR | 1<<SPR0 | 1<<CPOL | 1<<CPHA) & ~(/*1<<CPOL | 1<<CPHA |*/ 1<<DORD);
    1154:	8d e5       	ldi	r24, 0x5D	; 93
    1156:	8d b9       	out	0x0d, r24	; 13
    1158:	08 95       	ret

0000115a <spi_transmit>:
/** Transmit one byte of data. 
 * Wait until byte is recieved and return recieved byte. 
 */
uint8_t spi_transmit(uint8_t data)
{
	SPDR = data;
    115a:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
    115c:	77 9b       	sbis	0x0e, 7	; 14
    115e:	fe cf       	rjmp	.-4      	; 0x115c <spi_transmit+0x2>
	
	return SPDR;
    1160:	8f b1       	in	r24, 0x0f	; 15
    1162:	08 95       	ret

00001164 <uart_send>:

}

/// Busy wait transmission of msg
int uart_send(unsigned char msg){
	while (!(UCSR0A & (1 << UDRE0)));
    1164:	5d 9b       	sbis	0x0b, 5	; 11
    1166:	fe cf       	rjmp	.-4      	; 0x1164 <uart_send>
	UDR0 = msg;
    1168:	8c b9       	out	0x0c, r24	; 12
	return 0;
}
    116a:	80 e0       	ldi	r24, 0x00	; 0
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	08 95       	ret

00001170 <uart_recv>:


/// Read data from buffer
unsigned char uart_recv(){
	char returnval = 0;
	if(recvhead != recvtail)
    1170:	20 91 e3 02 	lds	r18, 0x02E3
    1174:	30 91 e4 02 	lds	r19, 0x02E4
    1178:	80 91 e1 02 	lds	r24, 0x02E1
    117c:	90 91 e2 02 	lds	r25, 0x02E2
    1180:	28 17       	cp	r18, r24
    1182:	39 07       	cpc	r19, r25
    1184:	d9 f0       	breq	.+54     	; 0x11bc <uart_recv+0x4c>
	{
		returnval = recv_buffer[recvtail++];
    1186:	80 91 e1 02 	lds	r24, 0x02E1
    118a:	90 91 e2 02 	lds	r25, 0x02E2
    118e:	9c 01       	movw	r18, r24
    1190:	2f 5f       	subi	r18, 0xFF	; 255
    1192:	3f 4f       	sbci	r19, 0xFF	; 255
    1194:	30 93 e2 02 	sts	0x02E2, r19
    1198:	20 93 e1 02 	sts	0x02E1, r18
    119c:	fc 01       	movw	r30, r24
    119e:	eb 51       	subi	r30, 0x1B	; 27
    11a0:	fd 4f       	sbci	r31, 0xFD	; 253
    11a2:	20 81       	ld	r18, Z
		recvtail = recvtail%BUFFER_MAX;
    11a4:	80 91 e1 02 	lds	r24, 0x02E1
    11a8:	90 91 e2 02 	lds	r25, 0x02E2
    11ac:	60 e8       	ldi	r22, 0x80	; 128
    11ae:	70 e0       	ldi	r23, 0x00	; 0
    11b0:	67 d0       	rcall	.+206    	; 0x1280 <__divmodhi4>
    11b2:	90 93 e2 02 	sts	0x02E2, r25
    11b6:	80 93 e1 02 	sts	0x02E1, r24
    11ba:	01 c0       	rjmp	.+2      	; 0x11be <uart_recv+0x4e>
}


/// Read data from buffer
unsigned char uart_recv(){
	char returnval = 0;
    11bc:	20 e0       	ldi	r18, 0x00	; 0
	{
		returnval = recv_buffer[recvtail++];
		recvtail = recvtail%BUFFER_MAX;
	}
	return returnval;
}
    11be:	82 2f       	mov	r24, r18
    11c0:	08 95       	ret

000011c2 <__vector_19>:
volatile char recv_buffer[BUFFER_MAX]; 	/*!< Buffer for storing recieved data*/
volatile int recvhead = 0; 				/*!< Head of buffer. Where next recieved byte will be placed. */
volatile int recvtail = 0; 				/*!< Tail of buffer. Where next read will occour. */

/// Interrupt vector for Rx. Place recieved data into buffer.
ISR(USART0_RXC_vect){
    11c2:	1f 92       	push	r1
    11c4:	0f 92       	push	r0
    11c6:	0f b6       	in	r0, 0x3f	; 63
    11c8:	0f 92       	push	r0
    11ca:	11 24       	eor	r1, r1
    11cc:	2f 93       	push	r18
    11ce:	3f 93       	push	r19
    11d0:	4f 93       	push	r20
    11d2:	5f 93       	push	r21
    11d4:	6f 93       	push	r22
    11d6:	7f 93       	push	r23
    11d8:	8f 93       	push	r24
    11da:	9f 93       	push	r25
    11dc:	af 93       	push	r26
    11de:	bf 93       	push	r27
    11e0:	ef 93       	push	r30
    11e2:	ff 93       	push	r31
	char input = UDR0;
    11e4:	4c b1       	in	r20, 0x0c	; 12
	if((recvhead+1)%BUFFER_MAX != recvtail){		// Sjekk at bufferen ikke er full
    11e6:	80 91 e3 02 	lds	r24, 0x02E3
    11ea:	90 91 e4 02 	lds	r25, 0x02E4
    11ee:	e0 91 e1 02 	lds	r30, 0x02E1
    11f2:	f0 91 e2 02 	lds	r31, 0x02E2
    11f6:	01 96       	adiw	r24, 0x01	; 1
    11f8:	20 e8       	ldi	r18, 0x80	; 128
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	b9 01       	movw	r22, r18
    11fe:	40 d0       	rcall	.+128    	; 0x1280 <__divmodhi4>
    1200:	8e 17       	cp	r24, r30
    1202:	9f 07       	cpc	r25, r31
    1204:	91 f0       	breq	.+36     	; 0x122a <__vector_19+0x68>
		recv_buffer[recvhead] = input;				// If so, legg inn byte
    1206:	e0 91 e3 02 	lds	r30, 0x02E3
    120a:	f0 91 e4 02 	lds	r31, 0x02E4
    120e:	eb 51       	subi	r30, 0x1B	; 27
    1210:	fd 4f       	sbci	r31, 0xFD	; 253
    1212:	40 83       	st	Z, r20
		recvhead = (recvhead+1)%BUFFER_MAX;
    1214:	80 91 e3 02 	lds	r24, 0x02E3
    1218:	90 91 e4 02 	lds	r25, 0x02E4
    121c:	01 96       	adiw	r24, 0x01	; 1
    121e:	b9 01       	movw	r22, r18
    1220:	2f d0       	rcall	.+94     	; 0x1280 <__divmodhi4>
    1222:	90 93 e4 02 	sts	0x02E4, r25
    1226:	80 93 e3 02 	sts	0x02E3, r24
	}
	
}
    122a:	ff 91       	pop	r31
    122c:	ef 91       	pop	r30
    122e:	bf 91       	pop	r27
    1230:	af 91       	pop	r26
    1232:	9f 91       	pop	r25
    1234:	8f 91       	pop	r24
    1236:	7f 91       	pop	r23
    1238:	6f 91       	pop	r22
    123a:	5f 91       	pop	r21
    123c:	4f 91       	pop	r20
    123e:	3f 91       	pop	r19
    1240:	2f 91       	pop	r18
    1242:	0f 90       	pop	r0
    1244:	0f be       	out	0x3f, r0	; 63
    1246:	0f 90       	pop	r0
    1248:	1f 90       	pop	r1
    124a:	18 95       	reti

0000124c <__vector_23>:

///\todo remove interrupt from Tx
ISR(USART0_TXC_vect){
    124c:	1f 92       	push	r1
    124e:	0f 92       	push	r0
    1250:	0f b6       	in	r0, 0x3f	; 63
    1252:	0f 92       	push	r0
    1254:	11 24       	eor	r1, r1
	
}
    1256:	0f 90       	pop	r0
    1258:	0f be       	out	0x3f, r0	; 63
    125a:	0f 90       	pop	r0
    125c:	1f 90       	pop	r1
    125e:	18 95       	reti

00001260 <uart_init>:

///Initialize uart
void uart_init(){
	// set baud rate
	int timerval = (F_CPU/(16*BAUD) - 1);
	UBRR0L = timerval&0xFF;
    1260:	8f e1       	ldi	r24, 0x1F	; 31
    1262:	89 b9       	out	0x09, r24	; 9
	UBRR0H = (timerval>>8)&0x0F;
    1264:	10 bc       	out	0x20, r1	; 32
	
	// enable interupts on Rx & Tx, and enable Rx & Tx 
	UCSR0B |= (1 << RXCIE0) | (1 << TXCIE0) | (1 << RXEN0) | (1 << TXEN0);
    1266:	8a b1       	in	r24, 0x0a	; 10
    1268:	88 6d       	ori	r24, 0xD8	; 216
    126a:	8a b9       	out	0x0a, r24	; 10
	
	// enable async mode
	UCSR0C &= ~(1 << UMSEL0);
    126c:	80 b5       	in	r24, 0x20	; 32
    126e:	8f 7b       	andi	r24, 0xBF	; 191
    1270:	80 bd       	out	0x20, r24	; 32
	
	// parity disable
	UCSR0C &= ~((1 << UPM00) | (1 << UPM10));
    1272:	80 b5       	in	r24, 0x20	; 32
    1274:	8f 7e       	andi	r24, 0xEF	; 239
    1276:	80 bd       	out	0x20, r24	; 32
	
	// stop bit to 1
	UCSR0C &= ~(1 << USBS0);
    1278:	80 b5       	in	r24, 0x20	; 32
    127a:	87 7f       	andi	r24, 0xF7	; 247
    127c:	80 bd       	out	0x20, r24	; 32
    127e:	08 95       	ret

00001280 <__divmodhi4>:
    1280:	97 fb       	bst	r25, 7
    1282:	07 2e       	mov	r0, r23
    1284:	16 f4       	brtc	.+4      	; 0x128a <__divmodhi4+0xa>
    1286:	00 94       	com	r0
    1288:	06 d0       	rcall	.+12     	; 0x1296 <__divmodhi4_neg1>
    128a:	77 fd       	sbrc	r23, 7
    128c:	08 d0       	rcall	.+16     	; 0x129e <__divmodhi4_neg2>
    128e:	0b d0       	rcall	.+22     	; 0x12a6 <__udivmodhi4>
    1290:	07 fc       	sbrc	r0, 7
    1292:	05 d0       	rcall	.+10     	; 0x129e <__divmodhi4_neg2>
    1294:	3e f4       	brtc	.+14     	; 0x12a4 <__divmodhi4_exit>

00001296 <__divmodhi4_neg1>:
    1296:	90 95       	com	r25
    1298:	81 95       	neg	r24
    129a:	9f 4f       	sbci	r25, 0xFF	; 255
    129c:	08 95       	ret

0000129e <__divmodhi4_neg2>:
    129e:	70 95       	com	r23
    12a0:	61 95       	neg	r22
    12a2:	7f 4f       	sbci	r23, 0xFF	; 255

000012a4 <__divmodhi4_exit>:
    12a4:	08 95       	ret

000012a6 <__udivmodhi4>:
    12a6:	aa 1b       	sub	r26, r26
    12a8:	bb 1b       	sub	r27, r27
    12aa:	51 e1       	ldi	r21, 0x11	; 17
    12ac:	07 c0       	rjmp	.+14     	; 0x12bc <__udivmodhi4_ep>

000012ae <__udivmodhi4_loop>:
    12ae:	aa 1f       	adc	r26, r26
    12b0:	bb 1f       	adc	r27, r27
    12b2:	a6 17       	cp	r26, r22
    12b4:	b7 07       	cpc	r27, r23
    12b6:	10 f0       	brcs	.+4      	; 0x12bc <__udivmodhi4_ep>
    12b8:	a6 1b       	sub	r26, r22
    12ba:	b7 0b       	sbc	r27, r23

000012bc <__udivmodhi4_ep>:
    12bc:	88 1f       	adc	r24, r24
    12be:	99 1f       	adc	r25, r25
    12c0:	5a 95       	dec	r21
    12c2:	a9 f7       	brne	.-22     	; 0x12ae <__udivmodhi4_loop>
    12c4:	80 95       	com	r24
    12c6:	90 95       	com	r25
    12c8:	bc 01       	movw	r22, r24
    12ca:	cd 01       	movw	r24, r26
    12cc:	08 95       	ret

000012ce <malloc>:
    12ce:	cf 93       	push	r28
    12d0:	df 93       	push	r29
    12d2:	82 30       	cpi	r24, 0x02	; 2
    12d4:	91 05       	cpc	r25, r1
    12d6:	10 f4       	brcc	.+4      	; 0x12dc <malloc+0xe>
    12d8:	82 e0       	ldi	r24, 0x02	; 2
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	e0 91 67 03 	lds	r30, 0x0367
    12e0:	f0 91 68 03 	lds	r31, 0x0368
    12e4:	20 e0       	ldi	r18, 0x00	; 0
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	a0 e0       	ldi	r26, 0x00	; 0
    12ea:	b0 e0       	ldi	r27, 0x00	; 0
    12ec:	30 97       	sbiw	r30, 0x00	; 0
    12ee:	39 f1       	breq	.+78     	; 0x133e <malloc+0x70>
    12f0:	40 81       	ld	r20, Z
    12f2:	51 81       	ldd	r21, Z+1	; 0x01
    12f4:	48 17       	cp	r20, r24
    12f6:	59 07       	cpc	r21, r25
    12f8:	b8 f0       	brcs	.+46     	; 0x1328 <malloc+0x5a>
    12fa:	48 17       	cp	r20, r24
    12fc:	59 07       	cpc	r21, r25
    12fe:	71 f4       	brne	.+28     	; 0x131c <malloc+0x4e>
    1300:	82 81       	ldd	r24, Z+2	; 0x02
    1302:	93 81       	ldd	r25, Z+3	; 0x03
    1304:	10 97       	sbiw	r26, 0x00	; 0
    1306:	29 f0       	breq	.+10     	; 0x1312 <malloc+0x44>
    1308:	13 96       	adiw	r26, 0x03	; 3
    130a:	9c 93       	st	X, r25
    130c:	8e 93       	st	-X, r24
    130e:	12 97       	sbiw	r26, 0x02	; 2
    1310:	2c c0       	rjmp	.+88     	; 0x136a <malloc+0x9c>
    1312:	90 93 68 03 	sts	0x0368, r25
    1316:	80 93 67 03 	sts	0x0367, r24
    131a:	27 c0       	rjmp	.+78     	; 0x136a <malloc+0x9c>
    131c:	21 15       	cp	r18, r1
    131e:	31 05       	cpc	r19, r1
    1320:	31 f0       	breq	.+12     	; 0x132e <malloc+0x60>
    1322:	42 17       	cp	r20, r18
    1324:	53 07       	cpc	r21, r19
    1326:	18 f0       	brcs	.+6      	; 0x132e <malloc+0x60>
    1328:	a9 01       	movw	r20, r18
    132a:	db 01       	movw	r26, r22
    132c:	01 c0       	rjmp	.+2      	; 0x1330 <malloc+0x62>
    132e:	ef 01       	movw	r28, r30
    1330:	9a 01       	movw	r18, r20
    1332:	bd 01       	movw	r22, r26
    1334:	df 01       	movw	r26, r30
    1336:	02 80       	ldd	r0, Z+2	; 0x02
    1338:	f3 81       	ldd	r31, Z+3	; 0x03
    133a:	e0 2d       	mov	r30, r0
    133c:	d7 cf       	rjmp	.-82     	; 0x12ec <malloc+0x1e>
    133e:	21 15       	cp	r18, r1
    1340:	31 05       	cpc	r19, r1
    1342:	f9 f0       	breq	.+62     	; 0x1382 <malloc+0xb4>
    1344:	28 1b       	sub	r18, r24
    1346:	39 0b       	sbc	r19, r25
    1348:	24 30       	cpi	r18, 0x04	; 4
    134a:	31 05       	cpc	r19, r1
    134c:	80 f4       	brcc	.+32     	; 0x136e <malloc+0xa0>
    134e:	8a 81       	ldd	r24, Y+2	; 0x02
    1350:	9b 81       	ldd	r25, Y+3	; 0x03
    1352:	61 15       	cp	r22, r1
    1354:	71 05       	cpc	r23, r1
    1356:	21 f0       	breq	.+8      	; 0x1360 <malloc+0x92>
    1358:	fb 01       	movw	r30, r22
    135a:	93 83       	std	Z+3, r25	; 0x03
    135c:	82 83       	std	Z+2, r24	; 0x02
    135e:	04 c0       	rjmp	.+8      	; 0x1368 <malloc+0x9a>
    1360:	90 93 68 03 	sts	0x0368, r25
    1364:	80 93 67 03 	sts	0x0367, r24
    1368:	fe 01       	movw	r30, r28
    136a:	32 96       	adiw	r30, 0x02	; 2
    136c:	44 c0       	rjmp	.+136    	; 0x13f6 <malloc+0x128>
    136e:	fe 01       	movw	r30, r28
    1370:	e2 0f       	add	r30, r18
    1372:	f3 1f       	adc	r31, r19
    1374:	81 93       	st	Z+, r24
    1376:	91 93       	st	Z+, r25
    1378:	22 50       	subi	r18, 0x02	; 2
    137a:	31 09       	sbc	r19, r1
    137c:	39 83       	std	Y+1, r19	; 0x01
    137e:	28 83       	st	Y, r18
    1380:	3a c0       	rjmp	.+116    	; 0x13f6 <malloc+0x128>
    1382:	20 91 65 03 	lds	r18, 0x0365
    1386:	30 91 66 03 	lds	r19, 0x0366
    138a:	23 2b       	or	r18, r19
    138c:	41 f4       	brne	.+16     	; 0x139e <malloc+0xd0>
    138e:	20 91 02 01 	lds	r18, 0x0102
    1392:	30 91 03 01 	lds	r19, 0x0103
    1396:	30 93 66 03 	sts	0x0366, r19
    139a:	20 93 65 03 	sts	0x0365, r18
    139e:	20 91 00 01 	lds	r18, 0x0100
    13a2:	30 91 01 01 	lds	r19, 0x0101
    13a6:	21 15       	cp	r18, r1
    13a8:	31 05       	cpc	r19, r1
    13aa:	41 f4       	brne	.+16     	; 0x13bc <malloc+0xee>
    13ac:	2d b7       	in	r18, 0x3d	; 61
    13ae:	3e b7       	in	r19, 0x3e	; 62
    13b0:	40 91 04 01 	lds	r20, 0x0104
    13b4:	50 91 05 01 	lds	r21, 0x0105
    13b8:	24 1b       	sub	r18, r20
    13ba:	35 0b       	sbc	r19, r21
    13bc:	e0 91 65 03 	lds	r30, 0x0365
    13c0:	f0 91 66 03 	lds	r31, 0x0366
    13c4:	e2 17       	cp	r30, r18
    13c6:	f3 07       	cpc	r31, r19
    13c8:	a0 f4       	brcc	.+40     	; 0x13f2 <malloc+0x124>
    13ca:	2e 1b       	sub	r18, r30
    13cc:	3f 0b       	sbc	r19, r31
    13ce:	28 17       	cp	r18, r24
    13d0:	39 07       	cpc	r19, r25
    13d2:	78 f0       	brcs	.+30     	; 0x13f2 <malloc+0x124>
    13d4:	ac 01       	movw	r20, r24
    13d6:	4e 5f       	subi	r20, 0xFE	; 254
    13d8:	5f 4f       	sbci	r21, 0xFF	; 255
    13da:	24 17       	cp	r18, r20
    13dc:	35 07       	cpc	r19, r21
    13de:	48 f0       	brcs	.+18     	; 0x13f2 <malloc+0x124>
    13e0:	4e 0f       	add	r20, r30
    13e2:	5f 1f       	adc	r21, r31
    13e4:	50 93 66 03 	sts	0x0366, r21
    13e8:	40 93 65 03 	sts	0x0365, r20
    13ec:	81 93       	st	Z+, r24
    13ee:	91 93       	st	Z+, r25
    13f0:	02 c0       	rjmp	.+4      	; 0x13f6 <malloc+0x128>
    13f2:	e0 e0       	ldi	r30, 0x00	; 0
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	cf 01       	movw	r24, r30
    13f8:	df 91       	pop	r29
    13fa:	cf 91       	pop	r28
    13fc:	08 95       	ret

000013fe <free>:
    13fe:	cf 93       	push	r28
    1400:	df 93       	push	r29
    1402:	00 97       	sbiw	r24, 0x00	; 0
    1404:	09 f4       	brne	.+2      	; 0x1408 <free+0xa>
    1406:	87 c0       	rjmp	.+270    	; 0x1516 <free+0x118>
    1408:	fc 01       	movw	r30, r24
    140a:	32 97       	sbiw	r30, 0x02	; 2
    140c:	13 82       	std	Z+3, r1	; 0x03
    140e:	12 82       	std	Z+2, r1	; 0x02
    1410:	c0 91 67 03 	lds	r28, 0x0367
    1414:	d0 91 68 03 	lds	r29, 0x0368
    1418:	20 97       	sbiw	r28, 0x00	; 0
    141a:	81 f4       	brne	.+32     	; 0x143c <free+0x3e>
    141c:	20 81       	ld	r18, Z
    141e:	31 81       	ldd	r19, Z+1	; 0x01
    1420:	28 0f       	add	r18, r24
    1422:	39 1f       	adc	r19, r25
    1424:	80 91 65 03 	lds	r24, 0x0365
    1428:	90 91 66 03 	lds	r25, 0x0366
    142c:	82 17       	cp	r24, r18
    142e:	93 07       	cpc	r25, r19
    1430:	79 f5       	brne	.+94     	; 0x1490 <free+0x92>
    1432:	f0 93 66 03 	sts	0x0366, r31
    1436:	e0 93 65 03 	sts	0x0365, r30
    143a:	6d c0       	rjmp	.+218    	; 0x1516 <free+0x118>
    143c:	de 01       	movw	r26, r28
    143e:	20 e0       	ldi	r18, 0x00	; 0
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	ae 17       	cp	r26, r30
    1444:	bf 07       	cpc	r27, r31
    1446:	50 f4       	brcc	.+20     	; 0x145c <free+0x5e>
    1448:	12 96       	adiw	r26, 0x02	; 2
    144a:	4d 91       	ld	r20, X+
    144c:	5c 91       	ld	r21, X
    144e:	13 97       	sbiw	r26, 0x03	; 3
    1450:	9d 01       	movw	r18, r26
    1452:	41 15       	cp	r20, r1
    1454:	51 05       	cpc	r21, r1
    1456:	09 f1       	breq	.+66     	; 0x149a <free+0x9c>
    1458:	da 01       	movw	r26, r20
    145a:	f3 cf       	rjmp	.-26     	; 0x1442 <free+0x44>
    145c:	b3 83       	std	Z+3, r27	; 0x03
    145e:	a2 83       	std	Z+2, r26	; 0x02
    1460:	40 81       	ld	r20, Z
    1462:	51 81       	ldd	r21, Z+1	; 0x01
    1464:	84 0f       	add	r24, r20
    1466:	95 1f       	adc	r25, r21
    1468:	8a 17       	cp	r24, r26
    146a:	9b 07       	cpc	r25, r27
    146c:	71 f4       	brne	.+28     	; 0x148a <free+0x8c>
    146e:	8d 91       	ld	r24, X+
    1470:	9c 91       	ld	r25, X
    1472:	11 97       	sbiw	r26, 0x01	; 1
    1474:	84 0f       	add	r24, r20
    1476:	95 1f       	adc	r25, r21
    1478:	02 96       	adiw	r24, 0x02	; 2
    147a:	91 83       	std	Z+1, r25	; 0x01
    147c:	80 83       	st	Z, r24
    147e:	12 96       	adiw	r26, 0x02	; 2
    1480:	8d 91       	ld	r24, X+
    1482:	9c 91       	ld	r25, X
    1484:	13 97       	sbiw	r26, 0x03	; 3
    1486:	93 83       	std	Z+3, r25	; 0x03
    1488:	82 83       	std	Z+2, r24	; 0x02
    148a:	21 15       	cp	r18, r1
    148c:	31 05       	cpc	r19, r1
    148e:	29 f4       	brne	.+10     	; 0x149a <free+0x9c>
    1490:	f0 93 68 03 	sts	0x0368, r31
    1494:	e0 93 67 03 	sts	0x0367, r30
    1498:	3e c0       	rjmp	.+124    	; 0x1516 <free+0x118>
    149a:	d9 01       	movw	r26, r18
    149c:	13 96       	adiw	r26, 0x03	; 3
    149e:	fc 93       	st	X, r31
    14a0:	ee 93       	st	-X, r30
    14a2:	12 97       	sbiw	r26, 0x02	; 2
    14a4:	4d 91       	ld	r20, X+
    14a6:	5d 91       	ld	r21, X+
    14a8:	a4 0f       	add	r26, r20
    14aa:	b5 1f       	adc	r27, r21
    14ac:	ea 17       	cp	r30, r26
    14ae:	fb 07       	cpc	r31, r27
    14b0:	79 f4       	brne	.+30     	; 0x14d0 <free+0xd2>
    14b2:	80 81       	ld	r24, Z
    14b4:	91 81       	ldd	r25, Z+1	; 0x01
    14b6:	84 0f       	add	r24, r20
    14b8:	95 1f       	adc	r25, r21
    14ba:	02 96       	adiw	r24, 0x02	; 2
    14bc:	d9 01       	movw	r26, r18
    14be:	11 96       	adiw	r26, 0x01	; 1
    14c0:	9c 93       	st	X, r25
    14c2:	8e 93       	st	-X, r24
    14c4:	82 81       	ldd	r24, Z+2	; 0x02
    14c6:	93 81       	ldd	r25, Z+3	; 0x03
    14c8:	13 96       	adiw	r26, 0x03	; 3
    14ca:	9c 93       	st	X, r25
    14cc:	8e 93       	st	-X, r24
    14ce:	12 97       	sbiw	r26, 0x02	; 2
    14d0:	e0 e0       	ldi	r30, 0x00	; 0
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	8a 81       	ldd	r24, Y+2	; 0x02
    14d6:	9b 81       	ldd	r25, Y+3	; 0x03
    14d8:	00 97       	sbiw	r24, 0x00	; 0
    14da:	19 f0       	breq	.+6      	; 0x14e2 <free+0xe4>
    14dc:	fe 01       	movw	r30, r28
    14de:	ec 01       	movw	r28, r24
    14e0:	f9 cf       	rjmp	.-14     	; 0x14d4 <free+0xd6>
    14e2:	ce 01       	movw	r24, r28
    14e4:	02 96       	adiw	r24, 0x02	; 2
    14e6:	28 81       	ld	r18, Y
    14e8:	39 81       	ldd	r19, Y+1	; 0x01
    14ea:	82 0f       	add	r24, r18
    14ec:	93 1f       	adc	r25, r19
    14ee:	20 91 65 03 	lds	r18, 0x0365
    14f2:	30 91 66 03 	lds	r19, 0x0366
    14f6:	28 17       	cp	r18, r24
    14f8:	39 07       	cpc	r19, r25
    14fa:	69 f4       	brne	.+26     	; 0x1516 <free+0x118>
    14fc:	30 97       	sbiw	r30, 0x00	; 0
    14fe:	29 f4       	brne	.+10     	; 0x150a <free+0x10c>
    1500:	10 92 68 03 	sts	0x0368, r1
    1504:	10 92 67 03 	sts	0x0367, r1
    1508:	02 c0       	rjmp	.+4      	; 0x150e <free+0x110>
    150a:	13 82       	std	Z+3, r1	; 0x03
    150c:	12 82       	std	Z+2, r1	; 0x02
    150e:	d0 93 66 03 	sts	0x0366, r29
    1512:	c0 93 65 03 	sts	0x0365, r28
    1516:	df 91       	pop	r29
    1518:	cf 91       	pop	r28
    151a:	08 95       	ret

0000151c <strncpy>:
    151c:	fb 01       	movw	r30, r22
    151e:	dc 01       	movw	r26, r24
    1520:	41 50       	subi	r20, 0x01	; 1
    1522:	50 40       	sbci	r21, 0x00	; 0
    1524:	48 f0       	brcs	.+18     	; 0x1538 <strncpy+0x1c>
    1526:	01 90       	ld	r0, Z+
    1528:	0d 92       	st	X+, r0
    152a:	00 20       	and	r0, r0
    152c:	c9 f7       	brne	.-14     	; 0x1520 <strncpy+0x4>
    152e:	01 c0       	rjmp	.+2      	; 0x1532 <strncpy+0x16>
    1530:	1d 92       	st	X+, r1
    1532:	41 50       	subi	r20, 0x01	; 1
    1534:	50 40       	sbci	r21, 0x00	; 0
    1536:	e0 f7       	brcc	.-8      	; 0x1530 <strncpy+0x14>
    1538:	08 95       	ret

0000153a <fprintf>:
    153a:	a0 e0       	ldi	r26, 0x00	; 0
    153c:	b0 e0       	ldi	r27, 0x00	; 0
    153e:	e2 ea       	ldi	r30, 0xA2	; 162
    1540:	fa e0       	ldi	r31, 0x0A	; 10
    1542:	ab c2       	rjmp	.+1366   	; 0x1a9a <__prologue_saves__+0x20>
    1544:	ae 01       	movw	r20, r28
    1546:	47 5f       	subi	r20, 0xF7	; 247
    1548:	5f 4f       	sbci	r21, 0xFF	; 255
    154a:	6f 81       	ldd	r22, Y+7	; 0x07
    154c:	78 85       	ldd	r23, Y+8	; 0x08
    154e:	8d 81       	ldd	r24, Y+5	; 0x05
    1550:	9e 81       	ldd	r25, Y+6	; 0x06
    1552:	5c d0       	rcall	.+184    	; 0x160c <vfprintf>
    1554:	e2 e0       	ldi	r30, 0x02	; 2
    1556:	bd c2       	rjmp	.+1402   	; 0x1ad2 <__epilogue_restores__+0x20>

00001558 <fputc>:
    1558:	0f 93       	push	r16
    155a:	1f 93       	push	r17
    155c:	cf 93       	push	r28
    155e:	df 93       	push	r29
    1560:	18 2f       	mov	r17, r24
    1562:	09 2f       	mov	r16, r25
    1564:	eb 01       	movw	r28, r22
    1566:	8b 81       	ldd	r24, Y+3	; 0x03
    1568:	81 fd       	sbrc	r24, 1
    156a:	03 c0       	rjmp	.+6      	; 0x1572 <fputc+0x1a>
    156c:	8f ef       	ldi	r24, 0xFF	; 255
    156e:	9f ef       	ldi	r25, 0xFF	; 255
    1570:	20 c0       	rjmp	.+64     	; 0x15b2 <fputc+0x5a>
    1572:	82 ff       	sbrs	r24, 2
    1574:	10 c0       	rjmp	.+32     	; 0x1596 <fputc+0x3e>
    1576:	4e 81       	ldd	r20, Y+6	; 0x06
    1578:	5f 81       	ldd	r21, Y+7	; 0x07
    157a:	2c 81       	ldd	r18, Y+4	; 0x04
    157c:	3d 81       	ldd	r19, Y+5	; 0x05
    157e:	42 17       	cp	r20, r18
    1580:	53 07       	cpc	r21, r19
    1582:	7c f4       	brge	.+30     	; 0x15a2 <fputc+0x4a>
    1584:	e8 81       	ld	r30, Y
    1586:	f9 81       	ldd	r31, Y+1	; 0x01
    1588:	9f 01       	movw	r18, r30
    158a:	2f 5f       	subi	r18, 0xFF	; 255
    158c:	3f 4f       	sbci	r19, 0xFF	; 255
    158e:	39 83       	std	Y+1, r19	; 0x01
    1590:	28 83       	st	Y, r18
    1592:	10 83       	st	Z, r17
    1594:	06 c0       	rjmp	.+12     	; 0x15a2 <fputc+0x4a>
    1596:	e8 85       	ldd	r30, Y+8	; 0x08
    1598:	f9 85       	ldd	r31, Y+9	; 0x09
    159a:	81 2f       	mov	r24, r17
    159c:	09 95       	icall
    159e:	89 2b       	or	r24, r25
    15a0:	29 f7       	brne	.-54     	; 0x156c <fputc+0x14>
    15a2:	2e 81       	ldd	r18, Y+6	; 0x06
    15a4:	3f 81       	ldd	r19, Y+7	; 0x07
    15a6:	2f 5f       	subi	r18, 0xFF	; 255
    15a8:	3f 4f       	sbci	r19, 0xFF	; 255
    15aa:	3f 83       	std	Y+7, r19	; 0x07
    15ac:	2e 83       	std	Y+6, r18	; 0x06
    15ae:	81 2f       	mov	r24, r17
    15b0:	90 2f       	mov	r25, r16
    15b2:	df 91       	pop	r29
    15b4:	cf 91       	pop	r28
    15b6:	1f 91       	pop	r17
    15b8:	0f 91       	pop	r16
    15ba:	08 95       	ret

000015bc <fputs>:
    15bc:	ef 92       	push	r14
    15be:	ff 92       	push	r15
    15c0:	0f 93       	push	r16
    15c2:	1f 93       	push	r17
    15c4:	cf 93       	push	r28
    15c6:	df 93       	push	r29
    15c8:	8b 01       	movw	r16, r22
    15ca:	db 01       	movw	r26, r22
    15cc:	13 96       	adiw	r26, 0x03	; 3
    15ce:	2c 91       	ld	r18, X
    15d0:	21 ff       	sbrs	r18, 1
    15d2:	16 c0       	rjmp	.+44     	; 0x1600 <fputs+0x44>
    15d4:	ec 01       	movw	r28, r24
    15d6:	e1 2c       	mov	r14, r1
    15d8:	f1 2c       	mov	r15, r1
    15da:	89 91       	ld	r24, Y+
    15dc:	88 23       	and	r24, r24
    15de:	71 f0       	breq	.+28     	; 0x15fc <fputs+0x40>
    15e0:	d8 01       	movw	r26, r16
    15e2:	18 96       	adiw	r26, 0x08	; 8
    15e4:	ed 91       	ld	r30, X+
    15e6:	fc 91       	ld	r31, X
    15e8:	19 97       	sbiw	r26, 0x09	; 9
    15ea:	b8 01       	movw	r22, r16
    15ec:	09 95       	icall
    15ee:	89 2b       	or	r24, r25
    15f0:	a1 f3       	breq	.-24     	; 0x15da <fputs+0x1e>
    15f2:	ee 24       	eor	r14, r14
    15f4:	ea 94       	dec	r14
    15f6:	ff 24       	eor	r15, r15
    15f8:	fa 94       	dec	r15
    15fa:	ef cf       	rjmp	.-34     	; 0x15da <fputs+0x1e>
    15fc:	c7 01       	movw	r24, r14
    15fe:	02 c0       	rjmp	.+4      	; 0x1604 <fputs+0x48>
    1600:	8f ef       	ldi	r24, 0xFF	; 255
    1602:	9f ef       	ldi	r25, 0xFF	; 255
    1604:	cd b7       	in	r28, 0x3d	; 61
    1606:	de b7       	in	r29, 0x3e	; 62
    1608:	e6 e0       	ldi	r30, 0x06	; 6
    160a:	5f c2       	rjmp	.+1214   	; 0x1aca <__epilogue_restores__+0x18>

0000160c <vfprintf>:
    160c:	ac e0       	ldi	r26, 0x0C	; 12
    160e:	b0 e0       	ldi	r27, 0x00	; 0
    1610:	eb e0       	ldi	r30, 0x0B	; 11
    1612:	fb e0       	ldi	r31, 0x0B	; 11
    1614:	32 c2       	rjmp	.+1124   	; 0x1a7a <__prologue_saves__>
    1616:	7c 01       	movw	r14, r24
    1618:	6b 01       	movw	r12, r22
    161a:	8a 01       	movw	r16, r20
    161c:	fc 01       	movw	r30, r24
    161e:	17 82       	std	Z+7, r1	; 0x07
    1620:	16 82       	std	Z+6, r1	; 0x06
    1622:	83 81       	ldd	r24, Z+3	; 0x03
    1624:	81 ff       	sbrs	r24, 1
    1626:	b0 c1       	rjmp	.+864    	; 0x1988 <vfprintf+0x37c>
    1628:	ce 01       	movw	r24, r28
    162a:	01 96       	adiw	r24, 0x01	; 1
    162c:	4c 01       	movw	r8, r24
    162e:	f7 01       	movw	r30, r14
    1630:	93 81       	ldd	r25, Z+3	; 0x03
    1632:	f6 01       	movw	r30, r12
    1634:	93 fd       	sbrc	r25, 3
    1636:	85 91       	lpm	r24, Z+
    1638:	93 ff       	sbrs	r25, 3
    163a:	81 91       	ld	r24, Z+
    163c:	6f 01       	movw	r12, r30
    163e:	88 23       	and	r24, r24
    1640:	09 f4       	brne	.+2      	; 0x1644 <vfprintf+0x38>
    1642:	9e c1       	rjmp	.+828    	; 0x1980 <vfprintf+0x374>
    1644:	85 32       	cpi	r24, 0x25	; 37
    1646:	39 f4       	brne	.+14     	; 0x1656 <vfprintf+0x4a>
    1648:	93 fd       	sbrc	r25, 3
    164a:	85 91       	lpm	r24, Z+
    164c:	93 ff       	sbrs	r25, 3
    164e:	81 91       	ld	r24, Z+
    1650:	6f 01       	movw	r12, r30
    1652:	85 32       	cpi	r24, 0x25	; 37
    1654:	21 f4       	brne	.+8      	; 0x165e <vfprintf+0x52>
    1656:	b7 01       	movw	r22, r14
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	7e df       	rcall	.-260    	; 0x1558 <fputc>
    165c:	e8 cf       	rjmp	.-48     	; 0x162e <vfprintf+0x22>
    165e:	51 2c       	mov	r5, r1
    1660:	31 2c       	mov	r3, r1
    1662:	20 e0       	ldi	r18, 0x00	; 0
    1664:	20 32       	cpi	r18, 0x20	; 32
    1666:	a0 f4       	brcc	.+40     	; 0x1690 <vfprintf+0x84>
    1668:	8b 32       	cpi	r24, 0x2B	; 43
    166a:	69 f0       	breq	.+26     	; 0x1686 <vfprintf+0x7a>
    166c:	30 f4       	brcc	.+12     	; 0x167a <vfprintf+0x6e>
    166e:	80 32       	cpi	r24, 0x20	; 32
    1670:	59 f0       	breq	.+22     	; 0x1688 <vfprintf+0x7c>
    1672:	83 32       	cpi	r24, 0x23	; 35
    1674:	69 f4       	brne	.+26     	; 0x1690 <vfprintf+0x84>
    1676:	20 61       	ori	r18, 0x10	; 16
    1678:	2c c0       	rjmp	.+88     	; 0x16d2 <vfprintf+0xc6>
    167a:	8d 32       	cpi	r24, 0x2D	; 45
    167c:	39 f0       	breq	.+14     	; 0x168c <vfprintf+0x80>
    167e:	80 33       	cpi	r24, 0x30	; 48
    1680:	39 f4       	brne	.+14     	; 0x1690 <vfprintf+0x84>
    1682:	21 60       	ori	r18, 0x01	; 1
    1684:	26 c0       	rjmp	.+76     	; 0x16d2 <vfprintf+0xc6>
    1686:	22 60       	ori	r18, 0x02	; 2
    1688:	24 60       	ori	r18, 0x04	; 4
    168a:	23 c0       	rjmp	.+70     	; 0x16d2 <vfprintf+0xc6>
    168c:	28 60       	ori	r18, 0x08	; 8
    168e:	21 c0       	rjmp	.+66     	; 0x16d2 <vfprintf+0xc6>
    1690:	27 fd       	sbrc	r18, 7
    1692:	27 c0       	rjmp	.+78     	; 0x16e2 <vfprintf+0xd6>
    1694:	30 ed       	ldi	r19, 0xD0	; 208
    1696:	38 0f       	add	r19, r24
    1698:	3a 30       	cpi	r19, 0x0A	; 10
    169a:	78 f4       	brcc	.+30     	; 0x16ba <vfprintf+0xae>
    169c:	26 ff       	sbrs	r18, 6
    169e:	06 c0       	rjmp	.+12     	; 0x16ac <vfprintf+0xa0>
    16a0:	fa e0       	ldi	r31, 0x0A	; 10
    16a2:	5f 9e       	mul	r5, r31
    16a4:	30 0d       	add	r19, r0
    16a6:	11 24       	eor	r1, r1
    16a8:	53 2e       	mov	r5, r19
    16aa:	13 c0       	rjmp	.+38     	; 0x16d2 <vfprintf+0xc6>
    16ac:	8a e0       	ldi	r24, 0x0A	; 10
    16ae:	38 9e       	mul	r3, r24
    16b0:	30 0d       	add	r19, r0
    16b2:	11 24       	eor	r1, r1
    16b4:	33 2e       	mov	r3, r19
    16b6:	20 62       	ori	r18, 0x20	; 32
    16b8:	0c c0       	rjmp	.+24     	; 0x16d2 <vfprintf+0xc6>
    16ba:	8e 32       	cpi	r24, 0x2E	; 46
    16bc:	21 f4       	brne	.+8      	; 0x16c6 <vfprintf+0xba>
    16be:	26 fd       	sbrc	r18, 6
    16c0:	5f c1       	rjmp	.+702    	; 0x1980 <vfprintf+0x374>
    16c2:	20 64       	ori	r18, 0x40	; 64
    16c4:	06 c0       	rjmp	.+12     	; 0x16d2 <vfprintf+0xc6>
    16c6:	8c 36       	cpi	r24, 0x6C	; 108
    16c8:	11 f4       	brne	.+4      	; 0x16ce <vfprintf+0xc2>
    16ca:	20 68       	ori	r18, 0x80	; 128
    16cc:	02 c0       	rjmp	.+4      	; 0x16d2 <vfprintf+0xc6>
    16ce:	88 36       	cpi	r24, 0x68	; 104
    16d0:	41 f4       	brne	.+16     	; 0x16e2 <vfprintf+0xd6>
    16d2:	f6 01       	movw	r30, r12
    16d4:	93 fd       	sbrc	r25, 3
    16d6:	85 91       	lpm	r24, Z+
    16d8:	93 ff       	sbrs	r25, 3
    16da:	81 91       	ld	r24, Z+
    16dc:	6f 01       	movw	r12, r30
    16de:	81 11       	cpse	r24, r1
    16e0:	c1 cf       	rjmp	.-126    	; 0x1664 <vfprintf+0x58>
    16e2:	98 2f       	mov	r25, r24
    16e4:	9f 7d       	andi	r25, 0xDF	; 223
    16e6:	95 54       	subi	r25, 0x45	; 69
    16e8:	93 30       	cpi	r25, 0x03	; 3
    16ea:	28 f4       	brcc	.+10     	; 0x16f6 <vfprintf+0xea>
    16ec:	0c 5f       	subi	r16, 0xFC	; 252
    16ee:	1f 4f       	sbci	r17, 0xFF	; 255
    16f0:	ff e3       	ldi	r31, 0x3F	; 63
    16f2:	f9 83       	std	Y+1, r31	; 0x01
    16f4:	0d c0       	rjmp	.+26     	; 0x1710 <vfprintf+0x104>
    16f6:	83 36       	cpi	r24, 0x63	; 99
    16f8:	31 f0       	breq	.+12     	; 0x1706 <vfprintf+0xfa>
    16fa:	83 37       	cpi	r24, 0x73	; 115
    16fc:	71 f0       	breq	.+28     	; 0x171a <vfprintf+0x10e>
    16fe:	83 35       	cpi	r24, 0x53	; 83
    1700:	09 f0       	breq	.+2      	; 0x1704 <vfprintf+0xf8>
    1702:	57 c0       	rjmp	.+174    	; 0x17b2 <vfprintf+0x1a6>
    1704:	21 c0       	rjmp	.+66     	; 0x1748 <vfprintf+0x13c>
    1706:	f8 01       	movw	r30, r16
    1708:	80 81       	ld	r24, Z
    170a:	89 83       	std	Y+1, r24	; 0x01
    170c:	0e 5f       	subi	r16, 0xFE	; 254
    170e:	1f 4f       	sbci	r17, 0xFF	; 255
    1710:	44 24       	eor	r4, r4
    1712:	43 94       	inc	r4
    1714:	51 2c       	mov	r5, r1
    1716:	54 01       	movw	r10, r8
    1718:	14 c0       	rjmp	.+40     	; 0x1742 <vfprintf+0x136>
    171a:	38 01       	movw	r6, r16
    171c:	f2 e0       	ldi	r31, 0x02	; 2
    171e:	6f 0e       	add	r6, r31
    1720:	71 1c       	adc	r7, r1
    1722:	f8 01       	movw	r30, r16
    1724:	a0 80       	ld	r10, Z
    1726:	b1 80       	ldd	r11, Z+1	; 0x01
    1728:	26 ff       	sbrs	r18, 6
    172a:	03 c0       	rjmp	.+6      	; 0x1732 <vfprintf+0x126>
    172c:	65 2d       	mov	r22, r5
    172e:	70 e0       	ldi	r23, 0x00	; 0
    1730:	02 c0       	rjmp	.+4      	; 0x1736 <vfprintf+0x12a>
    1732:	6f ef       	ldi	r22, 0xFF	; 255
    1734:	7f ef       	ldi	r23, 0xFF	; 255
    1736:	c5 01       	movw	r24, r10
    1738:	2c 87       	std	Y+12, r18	; 0x0c
    173a:	36 d1       	rcall	.+620    	; 0x19a8 <strnlen>
    173c:	2c 01       	movw	r4, r24
    173e:	83 01       	movw	r16, r6
    1740:	2c 85       	ldd	r18, Y+12	; 0x0c
    1742:	2f 77       	andi	r18, 0x7F	; 127
    1744:	22 2e       	mov	r2, r18
    1746:	16 c0       	rjmp	.+44     	; 0x1774 <vfprintf+0x168>
    1748:	38 01       	movw	r6, r16
    174a:	f2 e0       	ldi	r31, 0x02	; 2
    174c:	6f 0e       	add	r6, r31
    174e:	71 1c       	adc	r7, r1
    1750:	f8 01       	movw	r30, r16
    1752:	a0 80       	ld	r10, Z
    1754:	b1 80       	ldd	r11, Z+1	; 0x01
    1756:	26 ff       	sbrs	r18, 6
    1758:	03 c0       	rjmp	.+6      	; 0x1760 <vfprintf+0x154>
    175a:	65 2d       	mov	r22, r5
    175c:	70 e0       	ldi	r23, 0x00	; 0
    175e:	02 c0       	rjmp	.+4      	; 0x1764 <vfprintf+0x158>
    1760:	6f ef       	ldi	r22, 0xFF	; 255
    1762:	7f ef       	ldi	r23, 0xFF	; 255
    1764:	c5 01       	movw	r24, r10
    1766:	2c 87       	std	Y+12, r18	; 0x0c
    1768:	14 d1       	rcall	.+552    	; 0x1992 <strnlen_P>
    176a:	2c 01       	movw	r4, r24
    176c:	2c 85       	ldd	r18, Y+12	; 0x0c
    176e:	20 68       	ori	r18, 0x80	; 128
    1770:	22 2e       	mov	r2, r18
    1772:	83 01       	movw	r16, r6
    1774:	23 fc       	sbrc	r2, 3
    1776:	19 c0       	rjmp	.+50     	; 0x17aa <vfprintf+0x19e>
    1778:	83 2d       	mov	r24, r3
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	48 16       	cp	r4, r24
    177e:	59 06       	cpc	r5, r25
    1780:	a0 f4       	brcc	.+40     	; 0x17aa <vfprintf+0x19e>
    1782:	b7 01       	movw	r22, r14
    1784:	80 e2       	ldi	r24, 0x20	; 32
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	e7 de       	rcall	.-562    	; 0x1558 <fputc>
    178a:	3a 94       	dec	r3
    178c:	f5 cf       	rjmp	.-22     	; 0x1778 <vfprintf+0x16c>
    178e:	f5 01       	movw	r30, r10
    1790:	27 fc       	sbrc	r2, 7
    1792:	85 91       	lpm	r24, Z+
    1794:	27 fe       	sbrs	r2, 7
    1796:	81 91       	ld	r24, Z+
    1798:	5f 01       	movw	r10, r30
    179a:	b7 01       	movw	r22, r14
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	dc de       	rcall	.-584    	; 0x1558 <fputc>
    17a0:	31 10       	cpse	r3, r1
    17a2:	3a 94       	dec	r3
    17a4:	f1 e0       	ldi	r31, 0x01	; 1
    17a6:	4f 1a       	sub	r4, r31
    17a8:	51 08       	sbc	r5, r1
    17aa:	41 14       	cp	r4, r1
    17ac:	51 04       	cpc	r5, r1
    17ae:	79 f7       	brne	.-34     	; 0x178e <vfprintf+0x182>
    17b0:	de c0       	rjmp	.+444    	; 0x196e <vfprintf+0x362>
    17b2:	84 36       	cpi	r24, 0x64	; 100
    17b4:	11 f0       	breq	.+4      	; 0x17ba <vfprintf+0x1ae>
    17b6:	89 36       	cpi	r24, 0x69	; 105
    17b8:	31 f5       	brne	.+76     	; 0x1806 <vfprintf+0x1fa>
    17ba:	f8 01       	movw	r30, r16
    17bc:	27 ff       	sbrs	r18, 7
    17be:	07 c0       	rjmp	.+14     	; 0x17ce <vfprintf+0x1c2>
    17c0:	60 81       	ld	r22, Z
    17c2:	71 81       	ldd	r23, Z+1	; 0x01
    17c4:	82 81       	ldd	r24, Z+2	; 0x02
    17c6:	93 81       	ldd	r25, Z+3	; 0x03
    17c8:	0c 5f       	subi	r16, 0xFC	; 252
    17ca:	1f 4f       	sbci	r17, 0xFF	; 255
    17cc:	08 c0       	rjmp	.+16     	; 0x17de <vfprintf+0x1d2>
    17ce:	60 81       	ld	r22, Z
    17d0:	71 81       	ldd	r23, Z+1	; 0x01
    17d2:	88 27       	eor	r24, r24
    17d4:	77 fd       	sbrc	r23, 7
    17d6:	80 95       	com	r24
    17d8:	98 2f       	mov	r25, r24
    17da:	0e 5f       	subi	r16, 0xFE	; 254
    17dc:	1f 4f       	sbci	r17, 0xFF	; 255
    17de:	2f 76       	andi	r18, 0x6F	; 111
    17e0:	b2 2e       	mov	r11, r18
    17e2:	97 ff       	sbrs	r25, 7
    17e4:	09 c0       	rjmp	.+18     	; 0x17f8 <vfprintf+0x1ec>
    17e6:	90 95       	com	r25
    17e8:	80 95       	com	r24
    17ea:	70 95       	com	r23
    17ec:	61 95       	neg	r22
    17ee:	7f 4f       	sbci	r23, 0xFF	; 255
    17f0:	8f 4f       	sbci	r24, 0xFF	; 255
    17f2:	9f 4f       	sbci	r25, 0xFF	; 255
    17f4:	20 68       	ori	r18, 0x80	; 128
    17f6:	b2 2e       	mov	r11, r18
    17f8:	2a e0       	ldi	r18, 0x0A	; 10
    17fa:	30 e0       	ldi	r19, 0x00	; 0
    17fc:	a4 01       	movw	r20, r8
    17fe:	df d0       	rcall	.+446    	; 0x19be <__ultoa_invert>
    1800:	a8 2e       	mov	r10, r24
    1802:	a8 18       	sub	r10, r8
    1804:	43 c0       	rjmp	.+134    	; 0x188c <vfprintf+0x280>
    1806:	85 37       	cpi	r24, 0x75	; 117
    1808:	29 f4       	brne	.+10     	; 0x1814 <vfprintf+0x208>
    180a:	2f 7e       	andi	r18, 0xEF	; 239
    180c:	b2 2e       	mov	r11, r18
    180e:	2a e0       	ldi	r18, 0x0A	; 10
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	25 c0       	rjmp	.+74     	; 0x185e <vfprintf+0x252>
    1814:	f2 2f       	mov	r31, r18
    1816:	f9 7f       	andi	r31, 0xF9	; 249
    1818:	bf 2e       	mov	r11, r31
    181a:	8f 36       	cpi	r24, 0x6F	; 111
    181c:	c1 f0       	breq	.+48     	; 0x184e <vfprintf+0x242>
    181e:	18 f4       	brcc	.+6      	; 0x1826 <vfprintf+0x21a>
    1820:	88 35       	cpi	r24, 0x58	; 88
    1822:	79 f0       	breq	.+30     	; 0x1842 <vfprintf+0x236>
    1824:	ad c0       	rjmp	.+346    	; 0x1980 <vfprintf+0x374>
    1826:	80 37       	cpi	r24, 0x70	; 112
    1828:	19 f0       	breq	.+6      	; 0x1830 <vfprintf+0x224>
    182a:	88 37       	cpi	r24, 0x78	; 120
    182c:	21 f0       	breq	.+8      	; 0x1836 <vfprintf+0x22a>
    182e:	a8 c0       	rjmp	.+336    	; 0x1980 <vfprintf+0x374>
    1830:	2f 2f       	mov	r18, r31
    1832:	20 61       	ori	r18, 0x10	; 16
    1834:	b2 2e       	mov	r11, r18
    1836:	b4 fe       	sbrs	r11, 4
    1838:	0d c0       	rjmp	.+26     	; 0x1854 <vfprintf+0x248>
    183a:	8b 2d       	mov	r24, r11
    183c:	84 60       	ori	r24, 0x04	; 4
    183e:	b8 2e       	mov	r11, r24
    1840:	09 c0       	rjmp	.+18     	; 0x1854 <vfprintf+0x248>
    1842:	24 ff       	sbrs	r18, 4
    1844:	0a c0       	rjmp	.+20     	; 0x185a <vfprintf+0x24e>
    1846:	9f 2f       	mov	r25, r31
    1848:	96 60       	ori	r25, 0x06	; 6
    184a:	b9 2e       	mov	r11, r25
    184c:	06 c0       	rjmp	.+12     	; 0x185a <vfprintf+0x24e>
    184e:	28 e0       	ldi	r18, 0x08	; 8
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	05 c0       	rjmp	.+10     	; 0x185e <vfprintf+0x252>
    1854:	20 e1       	ldi	r18, 0x10	; 16
    1856:	30 e0       	ldi	r19, 0x00	; 0
    1858:	02 c0       	rjmp	.+4      	; 0x185e <vfprintf+0x252>
    185a:	20 e1       	ldi	r18, 0x10	; 16
    185c:	32 e0       	ldi	r19, 0x02	; 2
    185e:	f8 01       	movw	r30, r16
    1860:	b7 fe       	sbrs	r11, 7
    1862:	07 c0       	rjmp	.+14     	; 0x1872 <vfprintf+0x266>
    1864:	60 81       	ld	r22, Z
    1866:	71 81       	ldd	r23, Z+1	; 0x01
    1868:	82 81       	ldd	r24, Z+2	; 0x02
    186a:	93 81       	ldd	r25, Z+3	; 0x03
    186c:	0c 5f       	subi	r16, 0xFC	; 252
    186e:	1f 4f       	sbci	r17, 0xFF	; 255
    1870:	06 c0       	rjmp	.+12     	; 0x187e <vfprintf+0x272>
    1872:	60 81       	ld	r22, Z
    1874:	71 81       	ldd	r23, Z+1	; 0x01
    1876:	80 e0       	ldi	r24, 0x00	; 0
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	0e 5f       	subi	r16, 0xFE	; 254
    187c:	1f 4f       	sbci	r17, 0xFF	; 255
    187e:	a4 01       	movw	r20, r8
    1880:	9e d0       	rcall	.+316    	; 0x19be <__ultoa_invert>
    1882:	a8 2e       	mov	r10, r24
    1884:	a8 18       	sub	r10, r8
    1886:	fb 2d       	mov	r31, r11
    1888:	ff 77       	andi	r31, 0x7F	; 127
    188a:	bf 2e       	mov	r11, r31
    188c:	b6 fe       	sbrs	r11, 6
    188e:	0b c0       	rjmp	.+22     	; 0x18a6 <vfprintf+0x29a>
    1890:	2b 2d       	mov	r18, r11
    1892:	2e 7f       	andi	r18, 0xFE	; 254
    1894:	a5 14       	cp	r10, r5
    1896:	50 f4       	brcc	.+20     	; 0x18ac <vfprintf+0x2a0>
    1898:	b4 fe       	sbrs	r11, 4
    189a:	0a c0       	rjmp	.+20     	; 0x18b0 <vfprintf+0x2a4>
    189c:	b2 fc       	sbrc	r11, 2
    189e:	08 c0       	rjmp	.+16     	; 0x18b0 <vfprintf+0x2a4>
    18a0:	2b 2d       	mov	r18, r11
    18a2:	2e 7e       	andi	r18, 0xEE	; 238
    18a4:	05 c0       	rjmp	.+10     	; 0x18b0 <vfprintf+0x2a4>
    18a6:	7a 2c       	mov	r7, r10
    18a8:	2b 2d       	mov	r18, r11
    18aa:	03 c0       	rjmp	.+6      	; 0x18b2 <vfprintf+0x2a6>
    18ac:	7a 2c       	mov	r7, r10
    18ae:	01 c0       	rjmp	.+2      	; 0x18b2 <vfprintf+0x2a6>
    18b0:	75 2c       	mov	r7, r5
    18b2:	24 ff       	sbrs	r18, 4
    18b4:	0d c0       	rjmp	.+26     	; 0x18d0 <vfprintf+0x2c4>
    18b6:	fe 01       	movw	r30, r28
    18b8:	ea 0d       	add	r30, r10
    18ba:	f1 1d       	adc	r31, r1
    18bc:	80 81       	ld	r24, Z
    18be:	80 33       	cpi	r24, 0x30	; 48
    18c0:	11 f4       	brne	.+4      	; 0x18c6 <vfprintf+0x2ba>
    18c2:	29 7e       	andi	r18, 0xE9	; 233
    18c4:	09 c0       	rjmp	.+18     	; 0x18d8 <vfprintf+0x2cc>
    18c6:	22 ff       	sbrs	r18, 2
    18c8:	06 c0       	rjmp	.+12     	; 0x18d6 <vfprintf+0x2ca>
    18ca:	73 94       	inc	r7
    18cc:	73 94       	inc	r7
    18ce:	04 c0       	rjmp	.+8      	; 0x18d8 <vfprintf+0x2cc>
    18d0:	82 2f       	mov	r24, r18
    18d2:	86 78       	andi	r24, 0x86	; 134
    18d4:	09 f0       	breq	.+2      	; 0x18d8 <vfprintf+0x2cc>
    18d6:	73 94       	inc	r7
    18d8:	23 fd       	sbrc	r18, 3
    18da:	12 c0       	rjmp	.+36     	; 0x1900 <vfprintf+0x2f4>
    18dc:	20 ff       	sbrs	r18, 0
    18de:	06 c0       	rjmp	.+12     	; 0x18ec <vfprintf+0x2e0>
    18e0:	5a 2c       	mov	r5, r10
    18e2:	73 14       	cp	r7, r3
    18e4:	18 f4       	brcc	.+6      	; 0x18ec <vfprintf+0x2e0>
    18e6:	53 0c       	add	r5, r3
    18e8:	57 18       	sub	r5, r7
    18ea:	73 2c       	mov	r7, r3
    18ec:	73 14       	cp	r7, r3
    18ee:	60 f4       	brcc	.+24     	; 0x1908 <vfprintf+0x2fc>
    18f0:	b7 01       	movw	r22, r14
    18f2:	80 e2       	ldi	r24, 0x20	; 32
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	2c 87       	std	Y+12, r18	; 0x0c
    18f8:	2f de       	rcall	.-930    	; 0x1558 <fputc>
    18fa:	73 94       	inc	r7
    18fc:	2c 85       	ldd	r18, Y+12	; 0x0c
    18fe:	f6 cf       	rjmp	.-20     	; 0x18ec <vfprintf+0x2e0>
    1900:	73 14       	cp	r7, r3
    1902:	10 f4       	brcc	.+4      	; 0x1908 <vfprintf+0x2fc>
    1904:	37 18       	sub	r3, r7
    1906:	01 c0       	rjmp	.+2      	; 0x190a <vfprintf+0x2fe>
    1908:	31 2c       	mov	r3, r1
    190a:	24 ff       	sbrs	r18, 4
    190c:	11 c0       	rjmp	.+34     	; 0x1930 <vfprintf+0x324>
    190e:	b7 01       	movw	r22, r14
    1910:	80 e3       	ldi	r24, 0x30	; 48
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	2c 87       	std	Y+12, r18	; 0x0c
    1916:	20 de       	rcall	.-960    	; 0x1558 <fputc>
    1918:	2c 85       	ldd	r18, Y+12	; 0x0c
    191a:	22 ff       	sbrs	r18, 2
    191c:	16 c0       	rjmp	.+44     	; 0x194a <vfprintf+0x33e>
    191e:	21 ff       	sbrs	r18, 1
    1920:	03 c0       	rjmp	.+6      	; 0x1928 <vfprintf+0x31c>
    1922:	88 e5       	ldi	r24, 0x58	; 88
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	02 c0       	rjmp	.+4      	; 0x192c <vfprintf+0x320>
    1928:	88 e7       	ldi	r24, 0x78	; 120
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	b7 01       	movw	r22, r14
    192e:	0c c0       	rjmp	.+24     	; 0x1948 <vfprintf+0x33c>
    1930:	82 2f       	mov	r24, r18
    1932:	86 78       	andi	r24, 0x86	; 134
    1934:	51 f0       	breq	.+20     	; 0x194a <vfprintf+0x33e>
    1936:	21 fd       	sbrc	r18, 1
    1938:	02 c0       	rjmp	.+4      	; 0x193e <vfprintf+0x332>
    193a:	80 e2       	ldi	r24, 0x20	; 32
    193c:	01 c0       	rjmp	.+2      	; 0x1940 <vfprintf+0x334>
    193e:	8b e2       	ldi	r24, 0x2B	; 43
    1940:	27 fd       	sbrc	r18, 7
    1942:	8d e2       	ldi	r24, 0x2D	; 45
    1944:	b7 01       	movw	r22, r14
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	07 de       	rcall	.-1010   	; 0x1558 <fputc>
    194a:	a5 14       	cp	r10, r5
    194c:	30 f4       	brcc	.+12     	; 0x195a <vfprintf+0x34e>
    194e:	b7 01       	movw	r22, r14
    1950:	80 e3       	ldi	r24, 0x30	; 48
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	01 de       	rcall	.-1022   	; 0x1558 <fputc>
    1956:	5a 94       	dec	r5
    1958:	f8 cf       	rjmp	.-16     	; 0x194a <vfprintf+0x33e>
    195a:	aa 94       	dec	r10
    195c:	f4 01       	movw	r30, r8
    195e:	ea 0d       	add	r30, r10
    1960:	f1 1d       	adc	r31, r1
    1962:	80 81       	ld	r24, Z
    1964:	b7 01       	movw	r22, r14
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	f7 dd       	rcall	.-1042   	; 0x1558 <fputc>
    196a:	a1 10       	cpse	r10, r1
    196c:	f6 cf       	rjmp	.-20     	; 0x195a <vfprintf+0x34e>
    196e:	33 20       	and	r3, r3
    1970:	09 f4       	brne	.+2      	; 0x1974 <vfprintf+0x368>
    1972:	5d ce       	rjmp	.-838    	; 0x162e <vfprintf+0x22>
    1974:	b7 01       	movw	r22, r14
    1976:	80 e2       	ldi	r24, 0x20	; 32
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	ee dd       	rcall	.-1060   	; 0x1558 <fputc>
    197c:	3a 94       	dec	r3
    197e:	f7 cf       	rjmp	.-18     	; 0x196e <vfprintf+0x362>
    1980:	f7 01       	movw	r30, r14
    1982:	86 81       	ldd	r24, Z+6	; 0x06
    1984:	97 81       	ldd	r25, Z+7	; 0x07
    1986:	02 c0       	rjmp	.+4      	; 0x198c <vfprintf+0x380>
    1988:	8f ef       	ldi	r24, 0xFF	; 255
    198a:	9f ef       	ldi	r25, 0xFF	; 255
    198c:	2c 96       	adiw	r28, 0x0c	; 12
    198e:	e2 e1       	ldi	r30, 0x12	; 18
    1990:	90 c0       	rjmp	.+288    	; 0x1ab2 <__epilogue_restores__>

00001992 <strnlen_P>:
    1992:	fc 01       	movw	r30, r24
    1994:	05 90       	lpm	r0, Z+
    1996:	61 50       	subi	r22, 0x01	; 1
    1998:	70 40       	sbci	r23, 0x00	; 0
    199a:	01 10       	cpse	r0, r1
    199c:	d8 f7       	brcc	.-10     	; 0x1994 <strnlen_P+0x2>
    199e:	80 95       	com	r24
    19a0:	90 95       	com	r25
    19a2:	8e 0f       	add	r24, r30
    19a4:	9f 1f       	adc	r25, r31
    19a6:	08 95       	ret

000019a8 <strnlen>:
    19a8:	fc 01       	movw	r30, r24
    19aa:	61 50       	subi	r22, 0x01	; 1
    19ac:	70 40       	sbci	r23, 0x00	; 0
    19ae:	01 90       	ld	r0, Z+
    19b0:	01 10       	cpse	r0, r1
    19b2:	d8 f7       	brcc	.-10     	; 0x19aa <strnlen+0x2>
    19b4:	80 95       	com	r24
    19b6:	90 95       	com	r25
    19b8:	8e 0f       	add	r24, r30
    19ba:	9f 1f       	adc	r25, r31
    19bc:	08 95       	ret

000019be <__ultoa_invert>:
    19be:	fa 01       	movw	r30, r20
    19c0:	aa 27       	eor	r26, r26
    19c2:	28 30       	cpi	r18, 0x08	; 8
    19c4:	51 f1       	breq	.+84     	; 0x1a1a <__ultoa_invert+0x5c>
    19c6:	20 31       	cpi	r18, 0x10	; 16
    19c8:	81 f1       	breq	.+96     	; 0x1a2a <__ultoa_invert+0x6c>
    19ca:	e8 94       	clt
    19cc:	6f 93       	push	r22
    19ce:	6e 7f       	andi	r22, 0xFE	; 254
    19d0:	6e 5f       	subi	r22, 0xFE	; 254
    19d2:	7f 4f       	sbci	r23, 0xFF	; 255
    19d4:	8f 4f       	sbci	r24, 0xFF	; 255
    19d6:	9f 4f       	sbci	r25, 0xFF	; 255
    19d8:	af 4f       	sbci	r26, 0xFF	; 255
    19da:	b1 e0       	ldi	r27, 0x01	; 1
    19dc:	3e d0       	rcall	.+124    	; 0x1a5a <__ultoa_invert+0x9c>
    19de:	b4 e0       	ldi	r27, 0x04	; 4
    19e0:	3c d0       	rcall	.+120    	; 0x1a5a <__ultoa_invert+0x9c>
    19e2:	67 0f       	add	r22, r23
    19e4:	78 1f       	adc	r23, r24
    19e6:	89 1f       	adc	r24, r25
    19e8:	9a 1f       	adc	r25, r26
    19ea:	a1 1d       	adc	r26, r1
    19ec:	68 0f       	add	r22, r24
    19ee:	79 1f       	adc	r23, r25
    19f0:	8a 1f       	adc	r24, r26
    19f2:	91 1d       	adc	r25, r1
    19f4:	a1 1d       	adc	r26, r1
    19f6:	6a 0f       	add	r22, r26
    19f8:	71 1d       	adc	r23, r1
    19fa:	81 1d       	adc	r24, r1
    19fc:	91 1d       	adc	r25, r1
    19fe:	a1 1d       	adc	r26, r1
    1a00:	20 d0       	rcall	.+64     	; 0x1a42 <__ultoa_invert+0x84>
    1a02:	09 f4       	brne	.+2      	; 0x1a06 <__ultoa_invert+0x48>
    1a04:	68 94       	set
    1a06:	3f 91       	pop	r19
    1a08:	2a e0       	ldi	r18, 0x0A	; 10
    1a0a:	26 9f       	mul	r18, r22
    1a0c:	11 24       	eor	r1, r1
    1a0e:	30 19       	sub	r19, r0
    1a10:	30 5d       	subi	r19, 0xD0	; 208
    1a12:	31 93       	st	Z+, r19
    1a14:	de f6       	brtc	.-74     	; 0x19cc <__ultoa_invert+0xe>
    1a16:	cf 01       	movw	r24, r30
    1a18:	08 95       	ret
    1a1a:	46 2f       	mov	r20, r22
    1a1c:	47 70       	andi	r20, 0x07	; 7
    1a1e:	40 5d       	subi	r20, 0xD0	; 208
    1a20:	41 93       	st	Z+, r20
    1a22:	b3 e0       	ldi	r27, 0x03	; 3
    1a24:	0f d0       	rcall	.+30     	; 0x1a44 <__ultoa_invert+0x86>
    1a26:	c9 f7       	brne	.-14     	; 0x1a1a <__ultoa_invert+0x5c>
    1a28:	f6 cf       	rjmp	.-20     	; 0x1a16 <__ultoa_invert+0x58>
    1a2a:	46 2f       	mov	r20, r22
    1a2c:	4f 70       	andi	r20, 0x0F	; 15
    1a2e:	40 5d       	subi	r20, 0xD0	; 208
    1a30:	4a 33       	cpi	r20, 0x3A	; 58
    1a32:	18 f0       	brcs	.+6      	; 0x1a3a <__ultoa_invert+0x7c>
    1a34:	49 5d       	subi	r20, 0xD9	; 217
    1a36:	31 fd       	sbrc	r19, 1
    1a38:	40 52       	subi	r20, 0x20	; 32
    1a3a:	41 93       	st	Z+, r20
    1a3c:	02 d0       	rcall	.+4      	; 0x1a42 <__ultoa_invert+0x84>
    1a3e:	a9 f7       	brne	.-22     	; 0x1a2a <__ultoa_invert+0x6c>
    1a40:	ea cf       	rjmp	.-44     	; 0x1a16 <__ultoa_invert+0x58>
    1a42:	b4 e0       	ldi	r27, 0x04	; 4
    1a44:	a6 95       	lsr	r26
    1a46:	97 95       	ror	r25
    1a48:	87 95       	ror	r24
    1a4a:	77 95       	ror	r23
    1a4c:	67 95       	ror	r22
    1a4e:	ba 95       	dec	r27
    1a50:	c9 f7       	brne	.-14     	; 0x1a44 <__ultoa_invert+0x86>
    1a52:	00 97       	sbiw	r24, 0x00	; 0
    1a54:	61 05       	cpc	r22, r1
    1a56:	71 05       	cpc	r23, r1
    1a58:	08 95       	ret
    1a5a:	9b 01       	movw	r18, r22
    1a5c:	ac 01       	movw	r20, r24
    1a5e:	0a 2e       	mov	r0, r26
    1a60:	06 94       	lsr	r0
    1a62:	57 95       	ror	r21
    1a64:	47 95       	ror	r20
    1a66:	37 95       	ror	r19
    1a68:	27 95       	ror	r18
    1a6a:	ba 95       	dec	r27
    1a6c:	c9 f7       	brne	.-14     	; 0x1a60 <__ultoa_invert+0xa2>
    1a6e:	62 0f       	add	r22, r18
    1a70:	73 1f       	adc	r23, r19
    1a72:	84 1f       	adc	r24, r20
    1a74:	95 1f       	adc	r25, r21
    1a76:	a0 1d       	adc	r26, r0
    1a78:	08 95       	ret

00001a7a <__prologue_saves__>:
    1a7a:	2f 92       	push	r2
    1a7c:	3f 92       	push	r3
    1a7e:	4f 92       	push	r4
    1a80:	5f 92       	push	r5
    1a82:	6f 92       	push	r6
    1a84:	7f 92       	push	r7
    1a86:	8f 92       	push	r8
    1a88:	9f 92       	push	r9
    1a8a:	af 92       	push	r10
    1a8c:	bf 92       	push	r11
    1a8e:	cf 92       	push	r12
    1a90:	df 92       	push	r13
    1a92:	ef 92       	push	r14
    1a94:	ff 92       	push	r15
    1a96:	0f 93       	push	r16
    1a98:	1f 93       	push	r17
    1a9a:	cf 93       	push	r28
    1a9c:	df 93       	push	r29
    1a9e:	cd b7       	in	r28, 0x3d	; 61
    1aa0:	de b7       	in	r29, 0x3e	; 62
    1aa2:	ca 1b       	sub	r28, r26
    1aa4:	db 0b       	sbc	r29, r27
    1aa6:	0f b6       	in	r0, 0x3f	; 63
    1aa8:	f8 94       	cli
    1aaa:	de bf       	out	0x3e, r29	; 62
    1aac:	0f be       	out	0x3f, r0	; 63
    1aae:	cd bf       	out	0x3d, r28	; 61
    1ab0:	09 94       	ijmp

00001ab2 <__epilogue_restores__>:
    1ab2:	2a 88       	ldd	r2, Y+18	; 0x12
    1ab4:	39 88       	ldd	r3, Y+17	; 0x11
    1ab6:	48 88       	ldd	r4, Y+16	; 0x10
    1ab8:	5f 84       	ldd	r5, Y+15	; 0x0f
    1aba:	6e 84       	ldd	r6, Y+14	; 0x0e
    1abc:	7d 84       	ldd	r7, Y+13	; 0x0d
    1abe:	8c 84       	ldd	r8, Y+12	; 0x0c
    1ac0:	9b 84       	ldd	r9, Y+11	; 0x0b
    1ac2:	aa 84       	ldd	r10, Y+10	; 0x0a
    1ac4:	b9 84       	ldd	r11, Y+9	; 0x09
    1ac6:	c8 84       	ldd	r12, Y+8	; 0x08
    1ac8:	df 80       	ldd	r13, Y+7	; 0x07
    1aca:	ee 80       	ldd	r14, Y+6	; 0x06
    1acc:	fd 80       	ldd	r15, Y+5	; 0x05
    1ace:	0c 81       	ldd	r16, Y+4	; 0x04
    1ad0:	1b 81       	ldd	r17, Y+3	; 0x03
    1ad2:	aa 81       	ldd	r26, Y+2	; 0x02
    1ad4:	b9 81       	ldd	r27, Y+1	; 0x01
    1ad6:	ce 0f       	add	r28, r30
    1ad8:	d1 1d       	adc	r29, r1
    1ada:	0f b6       	in	r0, 0x3f	; 63
    1adc:	f8 94       	cli
    1ade:	de bf       	out	0x3e, r29	; 62
    1ae0:	0f be       	out	0x3f, r0	; 63
    1ae2:	cd bf       	out	0x3d, r28	; 61
    1ae4:	ed 01       	movw	r28, r26
    1ae6:	08 95       	ret

00001ae8 <_exit>:
    1ae8:	f8 94       	cli

00001aea <__stop_program>:
    1aea:	ff cf       	rjmp	.-2      	; 0x1aea <__stop_program>
