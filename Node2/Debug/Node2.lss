
Node2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007c  00800200  00000c90  00000d24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c90  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001ca  0080027c  0080027c  00000da0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000da0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000190  00000000  00000000  00000dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001703  00000000  00000000  00000f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000962  00000000  00000000  0000268f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c72  00000000  00000000  00002ff1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000040c  00000000  00000000  00003c64  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000442  00000000  00000000  00004070  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a52  00000000  00000000  000044b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000120  00000000  00000000  00004f04  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8b c0       	rjmp	.+278    	; 0x124 <__vector_3>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	c0 c2       	rjmp	.+1408   	; 0x5e6 <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	08 c3       	rjmp	.+1552   	; 0x67e <__vector_27>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e0 e9       	ldi	r30, 0x90	; 144
  fc:	fc e0       	ldi	r31, 0x0C	; 12
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ac 37       	cpi	r26, 0x7C	; 124
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	24 e0       	ldi	r18, 0x04	; 4
 110:	ac e7       	ldi	r26, 0x7C	; 124
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a6 34       	cpi	r26, 0x46	; 70
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	81 d1       	rcall	.+770    	; 0x422 <main>
 120:	b5 c5       	rjmp	.+2922   	; 0xc8c <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <__vector_3>:
	
	
	#ifdef MCP_DEBUG
	//fprintf(&uart_out, "MCP_LOAD_TX0\t%x\n", msg.data);
	#endif // MCP_DEBUG
}
 124:	1f 92       	push	r1
 126:	0f 92       	push	r0
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	0f 92       	push	r0
 12c:	11 24       	eor	r1, r1
 12e:	0b b6       	in	r0, 0x3b	; 59
 130:	0f 92       	push	r0
 132:	ff 92       	push	r15
 134:	0f 93       	push	r16
 136:	1f 93       	push	r17
 138:	2f 93       	push	r18
 13a:	3f 93       	push	r19
 13c:	4f 93       	push	r20
 13e:	5f 93       	push	r21
 140:	6f 93       	push	r22
 142:	7f 93       	push	r23
 144:	8f 93       	push	r24
 146:	9f 93       	push	r25
 148:	af 93       	push	r26
 14a:	bf 93       	push	r27
 14c:	ef 93       	push	r30
 14e:	ff 93       	push	r31
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
 154:	cd b7       	in	r28, 0x3d	; 61
 156:	de b7       	in	r29, 0x3e	; 62
 158:	2e 97       	sbiw	r28, 0x0e	; 14
 15a:	de bf       	out	0x3e, r29	; 62
 15c:	cd bf       	out	0x3d, r28	; 61
 15e:	f8 94       	cli
 160:	19 82       	std	Y+1, r1	; 0x01
 162:	80 e6       	ldi	r24, 0x60	; 96
 164:	8a 83       	std	Y+2, r24	; 0x02
 166:	80 e9       	ldi	r24, 0x90	; 144
 168:	8b 83       	std	Y+3, r24	; 0x03
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	8c 83       	std	Y+4, r24	; 0x04
 16e:	23 d1       	rcall	.+582    	; 0x3b6 <mcp_readstatus>
 170:	81 ff       	sbrs	r24, 1
 172:	08 c0       	rjmp	.+16     	; 0x184 <__vector_3+0x60>
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	89 83       	std	Y+1, r24	; 0x01
 178:	80 e7       	ldi	r24, 0x70	; 112
 17a:	8a 83       	std	Y+2, r24	; 0x02
 17c:	84 e9       	ldi	r24, 0x94	; 148
 17e:	8b 83       	std	Y+3, r24	; 0x03
 180:	82 e0       	ldi	r24, 0x02	; 2
 182:	8c 83       	std	Y+4, r24	; 0x04
 184:	e9 81       	ldd	r30, Y+1	; 0x01
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	e2 58       	subi	r30, 0x82	; 130
 18a:	fd 4f       	sbci	r31, 0xFD	; 253
 18c:	20 81       	ld	r18, Z
 18e:	e9 81       	ldd	r30, Y+1	; 0x01
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	e4 58       	subi	r30, 0x84	; 132
 194:	fd 4f       	sbci	r31, 0xFD	; 253
 196:	80 81       	ld	r24, Z
 198:	30 e0       	ldi	r19, 0x00	; 0
 19a:	2f 5f       	subi	r18, 0xFF	; 255
 19c:	3f 4f       	sbci	r19, 0xFF	; 255
 19e:	2f 70       	andi	r18, 0x0F	; 15
 1a0:	30 78       	andi	r19, 0x80	; 128
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	28 17       	cp	r18, r24
 1a6:	39 07       	cpc	r19, r25
 1a8:	09 f4       	brne	.+2      	; 0x1ac <__vector_3+0x88>
 1aa:	5d c0       	rjmp	.+186    	; 0x266 <__vector_3+0x142>
 1ac:	fe 01       	movw	r30, r28
 1ae:	35 96       	adiw	r30, 0x05	; 5
 1b0:	8a e0       	ldi	r24, 0x0A	; 10
 1b2:	df 01       	movw	r26, r30
 1b4:	1d 92       	st	X+, r1
 1b6:	8a 95       	dec	r24
 1b8:	e9 f7       	brne	.-6      	; 0x1b4 <__vector_3+0x90>
 1ba:	8a 81       	ldd	r24, Y+2	; 0x02
 1bc:	85 66       	ori	r24, 0x65	; 101
 1be:	de d0       	rcall	.+444    	; 0x37c <mcp_read>
 1c0:	8f 70       	andi	r24, 0x0F	; 15
 1c2:	8e 83       	std	Y+6, r24	; 0x06
 1c4:	f5 d1       	rcall	.+1002   	; 0x5b0 <spi_ss_low>
 1c6:	8b 81       	ldd	r24, Y+3	; 0x03
 1c8:	fe d1       	rcall	.+1020   	; 0x5c6 <spi_transmit>
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	fc d1       	rcall	.+1016   	; 0x5c6 <spi_transmit>
 1ce:	8d 83       	std	Y+5, r24	; 0x05
 1d0:	f1 d1       	rcall	.+994    	; 0x5b4 <spi_ss_high>
 1d2:	ee d1       	rcall	.+988    	; 0x5b0 <spi_ss_low>
 1d4:	8b 81       	ldd	r24, Y+3	; 0x03
 1d6:	82 60       	ori	r24, 0x02	; 2
 1d8:	f6 d1       	rcall	.+1004   	; 0x5c6 <spi_transmit>
 1da:	8e 81       	ldd	r24, Y+6	; 0x06
 1dc:	88 23       	and	r24, r24
 1de:	81 f0       	breq	.+32     	; 0x200 <__vector_3+0xdc>
 1e0:	f1 2c       	mov	r15, r1
 1e2:	0f 2d       	mov	r16, r15
 1e4:	10 e0       	ldi	r17, 0x00	; 0
 1e6:	80 e0       	ldi	r24, 0x00	; 0
 1e8:	ee d1       	rcall	.+988    	; 0x5c6 <spi_transmit>
 1ea:	e7 e0       	ldi	r30, 0x07	; 7
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	ec 0f       	add	r30, r28
 1f0:	fd 1f       	adc	r31, r29
 1f2:	e0 0f       	add	r30, r16
 1f4:	f1 1f       	adc	r31, r17
 1f6:	80 83       	st	Z, r24
 1f8:	f3 94       	inc	r15
 1fa:	8e 81       	ldd	r24, Y+6	; 0x06
 1fc:	f8 16       	cp	r15, r24
 1fe:	88 f3       	brcs	.-30     	; 0x1e2 <__vector_3+0xbe>
 200:	d9 d1       	rcall	.+946    	; 0x5b4 <spi_ss_high>
 202:	6c 81       	ldd	r22, Y+4	; 0x04
 204:	40 e0       	ldi	r20, 0x00	; 0
 206:	8c e2       	ldi	r24, 0x2C	; 44
 208:	e1 d0       	rcall	.+450    	; 0x3cc <mcp_bitmodify>
 20a:	29 81       	ldd	r18, Y+1	; 0x01
 20c:	e9 81       	ldd	r30, Y+1	; 0x01
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	e2 58       	subi	r30, 0x82	; 130
 212:	fd 4f       	sbci	r31, 0xFD	; 253
 214:	80 81       	ld	r24, Z
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	dc 01       	movw	r26, r24
 21a:	aa 0f       	add	r26, r26
 21c:	bb 1f       	adc	r27, r27
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	88 0f       	add	r24, r24
 224:	99 1f       	adc	r25, r25
 226:	88 0f       	add	r24, r24
 228:	99 1f       	adc	r25, r25
 22a:	a8 0f       	add	r26, r24
 22c:	b9 1f       	adc	r27, r25
 22e:	80 ea       	ldi	r24, 0xA0	; 160
 230:	28 9f       	mul	r18, r24
 232:	a0 0d       	add	r26, r0
 234:	b1 1d       	adc	r27, r1
 236:	11 24       	eor	r1, r1
 238:	a0 58       	subi	r26, 0x80	; 128
 23a:	bd 4f       	sbci	r27, 0xFD	; 253
 23c:	8a e0       	ldi	r24, 0x0A	; 10
 23e:	fe 01       	movw	r30, r28
 240:	35 96       	adiw	r30, 0x05	; 5
 242:	01 90       	ld	r0, Z+
 244:	0d 92       	st	X+, r0
 246:	8a 95       	dec	r24
 248:	e1 f7       	brne	.-8      	; 0x242 <__vector_3+0x11e>
 24a:	e9 81       	ldd	r30, Y+1	; 0x01
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	a9 81       	ldd	r26, Y+1	; 0x01
 250:	b0 e0       	ldi	r27, 0x00	; 0
 252:	a2 58       	subi	r26, 0x82	; 130
 254:	bd 4f       	sbci	r27, 0xFD	; 253
 256:	8c 91       	ld	r24, X
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	01 96       	adiw	r24, 0x01	; 1
 25c:	8f 70       	andi	r24, 0x0F	; 15
 25e:	90 78       	andi	r25, 0x80	; 128
 260:	e2 58       	subi	r30, 0x82	; 130
 262:	fd 4f       	sbci	r31, 0xFD	; 253
 264:	80 83       	st	Z, r24
 266:	78 94       	sei
 268:	2e 96       	adiw	r28, 0x0e	; 14
 26a:	0f b6       	in	r0, 0x3f	; 63
 26c:	f8 94       	cli
 26e:	de bf       	out	0x3e, r29	; 62
 270:	0f be       	out	0x3f, r0	; 63
 272:	cd bf       	out	0x3d, r28	; 61
 274:	df 91       	pop	r29
 276:	cf 91       	pop	r28
 278:	ff 91       	pop	r31
 27a:	ef 91       	pop	r30
 27c:	bf 91       	pop	r27
 27e:	af 91       	pop	r26
 280:	9f 91       	pop	r25
 282:	8f 91       	pop	r24
 284:	7f 91       	pop	r23
 286:	6f 91       	pop	r22
 288:	5f 91       	pop	r21
 28a:	4f 91       	pop	r20
 28c:	3f 91       	pop	r19
 28e:	2f 91       	pop	r18
 290:	1f 91       	pop	r17
 292:	0f 91       	pop	r16
 294:	ff 90       	pop	r15
 296:	0f 90       	pop	r0
 298:	0b be       	out	0x3b, r0	; 59
 29a:	0f 90       	pop	r0
 29c:	0f be       	out	0x3f, r0	; 63
 29e:	0f 90       	pop	r0
 2a0:	1f 90       	pop	r1
 2a2:	18 95       	reti

000002a4 <can_init>:
 2a4:	a7 d0       	rcall	.+334    	; 0x3f4 <mcp_init>
 2a6:	43 e0       	ldi	r20, 0x03	; 3
 2a8:	63 e0       	ldi	r22, 0x03	; 3
 2aa:	8b e2       	ldi	r24, 0x2B	; 43
 2ac:	8f d0       	rcall	.+286    	; 0x3cc <mcp_bitmodify>
 2ae:	ea 9a       	sbi	0x1d, 2	; 29
 2b0:	50 98       	cbi	0x0a, 0	; 10
 2b2:	08 95       	ret

000002b4 <can_read_buffer>:


can_msg_t can_read_buffer(uint8_t rx_buffer_select)
{
 2b4:	cf 93       	push	r28
 2b6:	df 93       	push	r29
	const uint8_t n = rx_buffer_select; // not different but just a shorter variable name
	
	can_msg_t msg = {};
 2b8:	2a e0       	ldi	r18, 0x0A	; 10
 2ba:	fc 01       	movw	r30, r24
 2bc:	11 92       	st	Z+, r1
 2be:	2a 95       	dec	r18
 2c0:	e9 f7       	brne	.-6      	; 0x2bc <can_read_buffer+0x8>
	
	if (rx_head[n] != rx_tail[n])
 2c2:	70 e0       	ldi	r23, 0x00	; 0
 2c4:	fb 01       	movw	r30, r22
 2c6:	e2 58       	subi	r30, 0x82	; 130
 2c8:	fd 4f       	sbci	r31, 0xFD	; 253
 2ca:	30 81       	ld	r19, Z
 2cc:	fb 01       	movw	r30, r22
 2ce:	e4 58       	subi	r30, 0x84	; 132
 2d0:	fd 4f       	sbci	r31, 0xFD	; 253
 2d2:	20 81       	ld	r18, Z
 2d4:	32 17       	cp	r19, r18
 2d6:	41 f1       	breq	.+80     	; 0x328 <can_read_buffer+0x74>
	{
		msg = rx_buffer[n][rx_tail[n]];
 2d8:	ef 01       	movw	r28, r30
 2da:	20 81       	ld	r18, Z
 2dc:	30 e0       	ldi	r19, 0x00	; 0
 2de:	f9 01       	movw	r30, r18
 2e0:	ee 0f       	add	r30, r30
 2e2:	ff 1f       	adc	r31, r31
 2e4:	22 0f       	add	r18, r18
 2e6:	33 1f       	adc	r19, r19
 2e8:	22 0f       	add	r18, r18
 2ea:	33 1f       	adc	r19, r19
 2ec:	22 0f       	add	r18, r18
 2ee:	33 1f       	adc	r19, r19
 2f0:	e2 0f       	add	r30, r18
 2f2:	f3 1f       	adc	r31, r19
 2f4:	20 ea       	ldi	r18, 0xA0	; 160
 2f6:	26 9f       	mul	r18, r22
 2f8:	a0 01       	movw	r20, r0
 2fa:	27 9f       	mul	r18, r23
 2fc:	50 0d       	add	r21, r0
 2fe:	11 24       	eor	r1, r1
 300:	e4 0f       	add	r30, r20
 302:	f5 1f       	adc	r31, r21
 304:	e0 58       	subi	r30, 0x80	; 128
 306:	fd 4f       	sbci	r31, 0xFD	; 253
 308:	2a e0       	ldi	r18, 0x0A	; 10
 30a:	dc 01       	movw	r26, r24
 30c:	01 90       	ld	r0, Z+
 30e:	0d 92       	st	X+, r0
 310:	2a 95       	dec	r18
 312:	e1 f7       	brne	.-8      	; 0x30c <can_read_buffer+0x58>
 314:	fc 01       	movw	r30, r24
 316:	40 81       	ld	r20, Z
		rx_tail[n] = (rx_tail[n] + 1)%RX_BUFFER_MAX;
 318:	28 81       	ld	r18, Y
 31a:	30 e0       	ldi	r19, 0x00	; 0
 31c:	2f 5f       	subi	r18, 0xFF	; 255
 31e:	3f 4f       	sbci	r19, 0xFF	; 255
 320:	2f 70       	andi	r18, 0x0F	; 15
 322:	30 78       	andi	r19, 0x80	; 128
 324:	28 83       	st	Y, r18
 326:	01 c0       	rjmp	.+2      	; 0x32a <can_read_buffer+0x76>
	} else{
		msg.sid = MSG_INVALID;
 328:	40 e0       	ldi	r20, 0x00	; 0
	}
		
	return msg;
 32a:	fc 01       	movw	r30, r24
 32c:	40 83       	st	Z, r20
}
 32e:	df 91       	pop	r29
 330:	cf 91       	pop	r28
 332:	08 95       	ret

00000334 <ir_init>:

// make separate adc module?
void ir_init(void)
{
	
	ADCSRA |= (1 << ADPS0 | 1 << ADPS1 | 1 << ADPS2); 
 334:	ea e7       	ldi	r30, 0x7A	; 122
 336:	f0 e0       	ldi	r31, 0x00	; 0
 338:	80 81       	ld	r24, Z
 33a:	87 60       	ori	r24, 0x07	; 7
 33c:	80 83       	st	Z, r24
	
	//DIDR0 |= (1 << ADC0D); // disable digital input on adc pin
	
	ADCSRA |= (1 << ADEN);
 33e:	80 81       	ld	r24, Z
 340:	80 68       	ori	r24, 0x80	; 128
 342:	80 83       	st	Z, r24
 344:	08 95       	ret

00000346 <ir_read>:
}

uint16_t ir_read(void)
{
	//ADMUX &= ~(1 << REFS1); // vref=1.1V internal
	ADMUX |= (1 << REFS1);
 346:	ec e7       	ldi	r30, 0x7C	; 124
 348:	f0 e0       	ldi	r31, 0x00	; 0
 34a:	80 81       	ld	r24, Z
 34c:	80 68       	ori	r24, 0x80	; 128
 34e:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);
 350:	ea e7       	ldi	r30, 0x7A	; 122
 352:	f0 e0       	ldi	r31, 0x00	; 0
 354:	80 81       	ld	r24, Z
 356:	80 64       	ori	r24, 0x40	; 64
 358:	80 83       	st	Z, r24
	
	while (ADCSRA & (1 << ADSC));
 35a:	80 81       	ld	r24, Z
 35c:	86 fd       	sbrc	r24, 6
 35e:	fd cf       	rjmp	.-6      	; 0x35a <ir_read+0x14>
	
	return ADC;
 360:	80 91 78 00 	lds	r24, 0x0078
 364:	90 91 79 00 	lds	r25, 0x0079
 368:	08 95       	ret

0000036a <mcp_reset>:
	spi_ss_high();
	
	#ifdef MCP_DEBUG
	fprintf(&uart_out, "MCP_RTS\t%i\n", tx_buffer);
	#endif // MCP_DEBUG
}
 36a:	22 d1       	rcall	.+580    	; 0x5b0 <spi_ss_low>
 36c:	80 ec       	ldi	r24, 0xC0	; 192
 36e:	2b d1       	rcall	.+598    	; 0x5c6 <spi_transmit>
 370:	21 d1       	rcall	.+578    	; 0x5b4 <spi_ss_high>
 372:	80 e0       	ldi	r24, 0x00	; 0
 374:	8f 5f       	subi	r24, 0xFF	; 255
 376:	80 38       	cpi	r24, 0x80	; 128
 378:	e9 f7       	brne	.-6      	; 0x374 <mcp_reset+0xa>
 37a:	08 95       	ret

0000037c <mcp_read>:
 37c:	cf 93       	push	r28
 37e:	c8 2f       	mov	r28, r24
 380:	17 d1       	rcall	.+558    	; 0x5b0 <spi_ss_low>
 382:	83 e0       	ldi	r24, 0x03	; 3
 384:	20 d1       	rcall	.+576    	; 0x5c6 <spi_transmit>
 386:	8c 2f       	mov	r24, r28
 388:	1e d1       	rcall	.+572    	; 0x5c6 <spi_transmit>
 38a:	80 e0       	ldi	r24, 0x00	; 0
 38c:	1c d1       	rcall	.+568    	; 0x5c6 <spi_transmit>
 38e:	c8 2f       	mov	r28, r24
 390:	11 d1       	rcall	.+546    	; 0x5b4 <spi_ss_high>
 392:	8c 2f       	mov	r24, r28
 394:	cf 91       	pop	r28
 396:	08 95       	ret

00000398 <mcp_write>:
 398:	cf 93       	push	r28
 39a:	df 93       	push	r29
 39c:	d8 2f       	mov	r29, r24
 39e:	c6 2f       	mov	r28, r22
 3a0:	07 d1       	rcall	.+526    	; 0x5b0 <spi_ss_low>
 3a2:	82 e0       	ldi	r24, 0x02	; 2
 3a4:	10 d1       	rcall	.+544    	; 0x5c6 <spi_transmit>
 3a6:	8d 2f       	mov	r24, r29
 3a8:	0e d1       	rcall	.+540    	; 0x5c6 <spi_transmit>
 3aa:	8c 2f       	mov	r24, r28
 3ac:	0c d1       	rcall	.+536    	; 0x5c6 <spi_transmit>
 3ae:	02 d1       	rcall	.+516    	; 0x5b4 <spi_ss_high>
 3b0:	df 91       	pop	r29
 3b2:	cf 91       	pop	r28
 3b4:	08 95       	ret

000003b6 <mcp_readstatus>:

uint8_t mcp_readstatus()
{
 3b6:	cf 93       	push	r28
	spi_ss_low();
 3b8:	fb d0       	rcall	.+502    	; 0x5b0 <spi_ss_low>
	spi_transmit(MCP_READ_STATUS);
 3ba:	80 ea       	ldi	r24, 0xA0	; 160
 3bc:	04 d1       	rcall	.+520    	; 0x5c6 <spi_transmit>
	uint8_t status = spi_transmit(0);
 3be:	80 e0       	ldi	r24, 0x00	; 0
 3c0:	02 d1       	rcall	.+516    	; 0x5c6 <spi_transmit>
 3c2:	c8 2f       	mov	r28, r24
	spi_ss_high();
 3c4:	f7 d0       	rcall	.+494    	; 0x5b4 <spi_ss_high>
	#ifdef MCP_DEBUG
	fprintf(&uart_out, "MCP_READ_STATUS\t%x\n", status);
	#endif // MCP_DEBUG
	
	return status;
}
 3c6:	8c 2f       	mov	r24, r28
 3c8:	cf 91       	pop	r28
 3ca:	08 95       	ret

000003cc <mcp_bitmodify>:

void mcp_bitmodify(uint8_t adr, uint8_t mask, uint8_t data)
{
 3cc:	1f 93       	push	r17
 3ce:	cf 93       	push	r28
 3d0:	df 93       	push	r29
 3d2:	18 2f       	mov	r17, r24
 3d4:	d6 2f       	mov	r29, r22
 3d6:	c4 2f       	mov	r28, r20
	spi_ss_low();
 3d8:	eb d0       	rcall	.+470    	; 0x5b0 <spi_ss_low>
	spi_transmit(MCP_BITMOD);
 3da:	85 e0       	ldi	r24, 0x05	; 5
 3dc:	f4 d0       	rcall	.+488    	; 0x5c6 <spi_transmit>
	spi_transmit(adr);
 3de:	81 2f       	mov	r24, r17
 3e0:	f2 d0       	rcall	.+484    	; 0x5c6 <spi_transmit>
	spi_transmit(mask);
 3e2:	8d 2f       	mov	r24, r29
 3e4:	f0 d0       	rcall	.+480    	; 0x5c6 <spi_transmit>
	spi_transmit(data);
 3e6:	8c 2f       	mov	r24, r28
 3e8:	ee d0       	rcall	.+476    	; 0x5c6 <spi_transmit>
	spi_ss_high();
 3ea:	e4 d0       	rcall	.+456    	; 0x5b4 <spi_ss_high>
	
	#ifdef MCP_DEBUG
	fprintf(&uart_out, "MCP_BITMOD\t%x\t%x\t%x\n", adr, mask, data);
	#endif // MCP_DEBUG
}
 3ec:	df 91       	pop	r29
 3ee:	cf 91       	pop	r28
 3f0:	1f 91       	pop	r17
 3f2:	08 95       	ret

000003f4 <mcp_init>:
#define MCP_LOOPBACK_INIT


void mcp_init()
{
	mcp_reset();
 3f4:	ba df       	rcall	.-140    	; 0x36a <mcp_reset>
	const uint8_t BRP		= 1;	// TQ = 2*Tosc*(BRP+1)  = 250 ns
	const uint8_t PrSeg		= 1;	// tPropSeg = (PrSeg + 1)
	const uint8_t PhSeg1	= 2;	// tPS1 = (PhSeg1 + 1)*TQ
	const uint8_t PhSeg2	= 2;	// tPS2 = (PhSeg2 + 1)*TQ
	
	mcp_write(MCP_CNF1, BRP);
 3f6:	61 e0       	ldi	r22, 0x01	; 1
 3f8:	8a e2       	ldi	r24, 0x2A	; 42
 3fa:	ce df       	rcall	.-100    	; 0x398 <mcp_write>
	mcp_write(MCP_CNF2, PrSeg | (PhSeg1 << 3));
 3fc:	61 e1       	ldi	r22, 0x11	; 17
 3fe:	89 e2       	ldi	r24, 0x29	; 41
 400:	cb df       	rcall	.-106    	; 0x398 <mcp_write>
	mcp_write(MCP_CNF3, PhSeg2);
 402:	62 e0       	ldi	r22, 0x02	; 2
 404:	88 e2       	ldi	r24, 0x28	; 40
 406:	c8 df       	rcall	.-112    	; 0x398 <mcp_write>


	// Setup Rx registers
	//mcp_write(MCP_RXM0SIDH, 0);
	//mcp_write(MCP_RXM0SIDL, 0);
	mcp_bitmodify(MCP_RXB0CTRL, 0x60, 0x60);
 408:	40 e6       	ldi	r20, 0x60	; 96
 40a:	60 e6       	ldi	r22, 0x60	; 96
 40c:	80 e6       	ldi	r24, 0x60	; 96
 40e:	de df       	rcall	.-68     	; 0x3cc <mcp_bitmodify>
	mcp_bitmodify(MCP_RXB1CTRL, 0x60, 0x60);	
 410:	40 e6       	ldi	r20, 0x60	; 96
 412:	60 e6       	ldi	r22, 0x60	; 96
 414:	80 e7       	ldi	r24, 0x70	; 112
 416:	da df       	rcall	.-76     	; 0x3cc <mcp_bitmodify>
	
	// normal mode
	mcp_bitmodify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);
 418:	40 e0       	ldi	r20, 0x00	; 0
 41a:	60 ee       	ldi	r22, 0xE0	; 224
 41c:	8f e0       	ldi	r24, 0x0F	; 15
 41e:	d6 cf       	rjmp	.-84     	; 0x3cc <mcp_bitmodify>
 420:	08 95       	ret

00000422 <main>:

uint16_t negativescore = 0;
uint16_t adc_read;

int main(void)
{
 422:	cf 93       	push	r28
 424:	df 93       	push	r29
 426:	cd b7       	in	r28, 0x3d	; 61
 428:	de b7       	in	r29, 0x3e	; 62
 42a:	2a 97       	sbiw	r28, 0x0a	; 10
 42c:	0f b6       	in	r0, 0x3f	; 63
 42e:	f8 94       	cli
 430:	de bf       	out	0x3e, r29	; 62
 432:	0f be       	out	0x3f, r0	; 63
 434:	cd bf       	out	0x3d, r28	; 61
	cli();
 436:	f8 94       	cli
	spi_init();
 438:	bf d0       	rcall	.+382    	; 0x5b8 <spi_init>
	uart_init();
 43a:	2b d1       	rcall	.+598    	; 0x692 <uart_init>
	fprintf(&uart_out, "can init starting...");
 43c:	20 e0       	ldi	r18, 0x00	; 0
 43e:	32 e0       	ldi	r19, 0x02	; 2
 440:	44 e1       	ldi	r20, 0x14	; 20
 442:	50 e0       	ldi	r21, 0x00	; 0
 444:	61 e0       	ldi	r22, 0x01	; 1
 446:	70 e0       	ldi	r23, 0x00	; 0
 448:	8e e0       	ldi	r24, 0x0E	; 14
 44a:	92 e0       	ldi	r25, 0x02	; 2
 44c:	7b d1       	rcall	.+758    	; 0x744 <fwrite>
	can_init();
 44e:	2a df       	rcall	.-428    	; 0x2a4 <can_init>
	fprintf(&uart_out, "done\n");
 450:	20 e0       	ldi	r18, 0x00	; 0
 452:	32 e0       	ldi	r19, 0x02	; 2
 454:	45 e0       	ldi	r20, 0x05	; 5
 456:	50 e0       	ldi	r21, 0x00	; 0
 458:	61 e0       	ldi	r22, 0x01	; 1
 45a:	70 e0       	ldi	r23, 0x00	; 0
 45c:	8b e3       	ldi	r24, 0x3B	; 59
 45e:	92 e0       	ldi	r25, 0x02	; 2
 460:	71 d1       	rcall	.+738    	; 0x744 <fwrite>
	fprintf(&uart_out, "pwm init starting...");
 462:	20 e0       	ldi	r18, 0x00	; 0
 464:	32 e0       	ldi	r19, 0x02	; 2
 466:	44 e1       	ldi	r20, 0x14	; 20
 468:	50 e0       	ldi	r21, 0x00	; 0
 46a:	61 e0       	ldi	r22, 0x01	; 1
 46c:	70 e0       	ldi	r23, 0x00	; 0
 46e:	83 e2       	ldi	r24, 0x23	; 35
 470:	92 e0       	ldi	r25, 0x02	; 2
 472:	68 d1       	rcall	.+720    	; 0x744 <fwrite>
	pwm_init();
 474:	6e d0       	rcall	.+220    	; 0x552 <pwm_init>
	fprintf(&uart_out, "...done\n");
 476:	20 e0       	ldi	r18, 0x00	; 0
 478:	32 e0       	ldi	r19, 0x02	; 2
 47a:	48 e0       	ldi	r20, 0x08	; 8
 47c:	50 e0       	ldi	r21, 0x00	; 0
 47e:	61 e0       	ldi	r22, 0x01	; 1
 480:	70 e0       	ldi	r23, 0x00	; 0
 482:	88 e3       	ldi	r24, 0x38	; 56
 484:	92 e0       	ldi	r25, 0x02	; 2
 486:	5e d1       	rcall	.+700    	; 0x744 <fwrite>
	fprintf(&uart_out, "ir init starting...");
 488:	20 e0       	ldi	r18, 0x00	; 0
 48a:	32 e0       	ldi	r19, 0x02	; 2
 48c:	43 e1       	ldi	r20, 0x13	; 19
 48e:	50 e0       	ldi	r21, 0x00	; 0
 490:	61 e0       	ldi	r22, 0x01	; 1
 492:	70 e0       	ldi	r23, 0x00	; 0
 494:	81 e4       	ldi	r24, 0x41	; 65
 496:	92 e0       	ldi	r25, 0x02	; 2
 498:	55 d1       	rcall	.+682    	; 0x744 <fwrite>
	ir_init();
 49a:	4c df       	rcall	.-360    	; 0x334 <ir_init>
	fprintf(&uart_out, "done\n");
 49c:	20 e0       	ldi	r18, 0x00	; 0
 49e:	32 e0       	ldi	r19, 0x02	; 2
 4a0:	45 e0       	ldi	r20, 0x05	; 5
 4a2:	50 e0       	ldi	r21, 0x00	; 0
 4a4:	61 e0       	ldi	r22, 0x01	; 1
 4a6:	70 e0       	ldi	r23, 0x00	; 0
 4a8:	8b e3       	ldi	r24, 0x3B	; 59
 4aa:	92 e0       	ldi	r25, 0x02	; 2
 4ac:	4b d1       	rcall	.+662    	; 0x744 <fwrite>
	sei();
 4ae:	78 94       	sei
	
	
	int8_t joy_x = 0;
 4b0:	c1 2c       	mov	r12, r1
		

		//uint16_t adc_read = ir_read(); // changed to global variable instead
		adc_read = ir_read();
		//scorekeeping();
		fprintf(&uart_out, "adc value: %i\n", adc_read);
 4b2:	0f 2e       	mov	r0, r31
 4b4:	fe e5       	ldi	r31, 0x5E	; 94
 4b6:	ef 2e       	mov	r14, r31
 4b8:	f2 e0       	ldi	r31, 0x02	; 2
 4ba:	ff 2e       	mov	r15, r31
 4bc:	f0 2d       	mov	r31, r0
		fprintf(&uart_out, "pwm duty: %i\n",  32 + joy_x/2);
 4be:	0d e6       	ldi	r16, 0x6D	; 109
 4c0:	12 e0       	ldi	r17, 0x02	; 2
	
	
	int8_t joy_x = 0;
    while(1)
    {
		can_msg_t read = can_read_buffer(0);
 4c2:	60 e0       	ldi	r22, 0x00	; 0
 4c4:	ce 01       	movw	r24, r28
 4c6:	01 96       	adiw	r24, 0x01	; 1
 4c8:	f5 de       	rcall	.-534    	; 0x2b4 <can_read_buffer>
		
		switch (read.sid)
 4ca:	89 81       	ldd	r24, Y+1	; 0x01
 4cc:	88 23       	and	r24, r24
 4ce:	21 f0       	breq	.+8      	; 0x4d8 <main+0xb6>
 4d0:	81 30       	cpi	r24, 0x01	; 1
 4d2:	59 f4       	brne	.+22     	; 0x4ea <main+0xc8>
		{
			case MSG_JOY:
				joy_x = read.data[0];
 4d4:	cb 80       	ldd	r12, Y+3	; 0x03
				break;
 4d6:	09 c0       	rjmp	.+18     	; 0x4ea <main+0xc8>
				
			case MSG_INVALID:
				fprintf(&uart_out, "Invalid\n");
 4d8:	20 e0       	ldi	r18, 0x00	; 0
 4da:	32 e0       	ldi	r19, 0x02	; 2
 4dc:	48 e0       	ldi	r20, 0x08	; 8
 4de:	50 e0       	ldi	r21, 0x00	; 0
 4e0:	61 e0       	ldi	r22, 0x01	; 1
 4e2:	70 e0       	ldi	r23, 0x00	; 0
 4e4:	85 e5       	ldi	r24, 0x55	; 85
 4e6:	92 e0       	ldi	r25, 0x02	; 2
 4e8:	2d d1       	rcall	.+602    	; 0x744 <fwrite>
		}
		

		//uint16_t adc_read = ir_read(); // changed to global variable instead
		adc_read = ir_read();
 4ea:	2d df       	rcall	.-422    	; 0x346 <ir_read>
 4ec:	80 93 c4 03 	sts	0x03C4, r24
 4f0:	90 93 c5 03 	sts	0x03C5, r25
		//scorekeeping();
		fprintf(&uart_out, "adc value: %i\n", adc_read);
 4f4:	9f 93       	push	r25
 4f6:	8f 93       	push	r24
 4f8:	ff 92       	push	r15
 4fa:	ef 92       	push	r14
 4fc:	80 e0       	ldi	r24, 0x00	; 0
 4fe:	92 e0       	ldi	r25, 0x02	; 2
 500:	9f 93       	push	r25
 502:	8f 93       	push	r24
 504:	de d0       	rcall	.+444    	; 0x6c2 <fprintf>
		fprintf(&uart_out, "pwm duty: %i\n",  32 + joy_x/2);
 506:	dc 2c       	mov	r13, r12
 508:	0f 90       	pop	r0
 50a:	0f 90       	pop	r0
 50c:	0f 90       	pop	r0
 50e:	0f 90       	pop	r0
 510:	0f 90       	pop	r0
 512:	0f 90       	pop	r0
 514:	cc 20       	and	r12, r12
 516:	1c f4       	brge	.+6      	; 0x51e <main+0xfc>
 518:	dd 24       	eor	r13, r13
 51a:	d3 94       	inc	r13
 51c:	dc 0c       	add	r13, r12
 51e:	d5 94       	asr	r13
 520:	2d 2d       	mov	r18, r13
 522:	33 27       	eor	r19, r19
 524:	27 fd       	sbrc	r18, 7
 526:	30 95       	com	r19
 528:	20 5e       	subi	r18, 0xE0	; 224
 52a:	3f 4f       	sbci	r19, 0xFF	; 255
 52c:	3f 93       	push	r19
 52e:	2f 93       	push	r18
 530:	1f 93       	push	r17
 532:	0f 93       	push	r16
 534:	20 e0       	ldi	r18, 0x00	; 0
 536:	32 e0       	ldi	r19, 0x02	; 2
 538:	3f 93       	push	r19
 53a:	2f 93       	push	r18
 53c:	c2 d0       	rcall	.+388    	; 0x6c2 <fprintf>
		pwm_set_duty(32 + joy_x/2);
 53e:	80 e2       	ldi	r24, 0x20	; 32
 540:	8d 0d       	add	r24, r13
 542:	21 d0       	rcall	.+66     	; 0x586 <pwm_set_duty>
		
    }
 544:	0f 90       	pop	r0
 546:	0f 90       	pop	r0
 548:	0f 90       	pop	r0
 54a:	0f 90       	pop	r0
 54c:	0f 90       	pop	r0
 54e:	0f 90       	pop	r0
 550:	b8 cf       	rjmp	.-144    	; 0x4c2 <main+0xa0>

00000552 <pwm_init>:
/// Set up 16-bit timers for pwm
/// 50 Hertz pwm period
void pwm_init(void)
{
	// PB5
	DDRB |= (1 << DDB5);
 552:	25 9a       	sbi	0x04, 5	; 4
	
	// Select clock source
	ICR1 = PWM_TOP;
 554:	80 e4       	ldi	r24, 0x40	; 64
 556:	9c e9       	ldi	r25, 0x9C	; 156
 558:	90 93 87 00 	sts	0x0087, r25
 55c:	80 93 86 00 	sts	0x0086, r24
	//ICR1L = 40000	& 0xFF; 
	//ICR1H = (40000<<8) & 0xFF; // TOP = 310
	TCCR1B = (1 << CS11) & ~(1 << CS10 | 1 << CS12);     //((1 << CS12) | (1 << CS10)) & ~(1 << CS11); // prescaler = 8
 560:	e1 e8       	ldi	r30, 0x81	; 129
 562:	f0 e0       	ldi	r31, 0x00	; 0
 564:	82 e0       	ldi	r24, 0x02	; 2
 566:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12 | 1 << WGM13);
 568:	80 81       	ld	r24, Z
 56a:	88 61       	ori	r24, 0x18	; 24
 56c:	80 83       	st	Z, r24
	TCCR1A |= (~(1 << COM1A0) & (1 << COM1A1)) | ((1 << WGM11) & ~(1 << WGM10));	// non-inverting fast pwm
 56e:	e0 e8       	ldi	r30, 0x80	; 128
 570:	f0 e0       	ldi	r31, 0x00	; 0
 572:	80 81       	ld	r24, Z
 574:	82 68       	ori	r24, 0x82	; 130
 576:	80 83       	st	Z, r24
	
	OCR1A = PWM_MID;
 578:	88 eb       	ldi	r24, 0xB8	; 184
 57a:	9b e0       	ldi	r25, 0x0B	; 11
 57c:	90 93 89 00 	sts	0x0089, r25
 580:	80 93 88 00 	sts	0x0088, r24
 584:	08 95       	ret

00000586 <pwm_set_duty>:
}


void pwm_set_duty(uint8_t duty){
	if (duty > 100){
 586:	85 36       	cpi	r24, 0x65	; 101
 588:	90 f4       	brcc	.+36     	; 0x5ae <pwm_set_duty+0x28>
		return;
	}
	
	
	OCR1A = PWM_MIN + 24*duty;
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	9c 01       	movw	r18, r24
 58e:	22 0f       	add	r18, r18
 590:	33 1f       	adc	r19, r19
 592:	82 0f       	add	r24, r18
 594:	93 1f       	adc	r25, r19
 596:	88 0f       	add	r24, r24
 598:	99 1f       	adc	r25, r25
 59a:	88 0f       	add	r24, r24
 59c:	99 1f       	adc	r25, r25
 59e:	88 0f       	add	r24, r24
 5a0:	99 1f       	adc	r25, r25
 5a2:	88 5f       	subi	r24, 0xF8	; 248
 5a4:	98 4f       	sbci	r25, 0xF8	; 248
 5a6:	90 93 89 00 	sts	0x0089, r25
 5aa:	80 93 88 00 	sts	0x0088, r24
 5ae:	08 95       	ret

000005b0 <spi_ss_low>:
ISR(SPI_STC_vect){
}
*/

void spi_ss_low(){
	PORTB &= ~(1 << PB7);
 5b0:	2f 98       	cbi	0x05, 7	; 5
 5b2:	08 95       	ret

000005b4 <spi_ss_high>:
	
}

void spi_ss_high(){
	PORTB |= (1 << PB7);
 5b4:	2f 9a       	sbi	0x05, 7	; 5
 5b6:	08 95       	ret

000005b8 <spi_init>:

/// Initialize Atmega162 as SPI master
void spi_init(void)
{
	// setup IO pins
	DDRB |= (1<<DDB1 | 1<<DDB2 | 1<<DDB7 | 1<<DDB0);
 5b8:	84 b1       	in	r24, 0x04	; 4
 5ba:	87 68       	ori	r24, 0x87	; 135
 5bc:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1<<DDB3); // not necessary
 5be:	23 98       	cbi	0x04, 3	; 4
	
	// setup SPI
	SPCR = (1<<SPE | 1<<MSTR | 1<<SPR1 | 1<<SPR0 | 1<<CPOL | 1<<CPHA ) & ~(/*1<<CPOL | 1<<CPHA |*/ 1<<DORD);
 5c0:	8f e5       	ldi	r24, 0x5F	; 95
 5c2:	8c bd       	out	0x2c, r24	; 44
 5c4:	08 95       	ret

000005c6 <spi_transmit>:
}


uint8_t spi_transmit(uint8_t data)
{
	SPDR = data;
 5c6:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
 5c8:	0d b4       	in	r0, 0x2d	; 45
 5ca:	07 fe       	sbrs	r0, 7
 5cc:	fd cf       	rjmp	.-6      	; 0x5c8 <spi_transmit+0x2>
	
	return SPDR;
 5ce:	8e b5       	in	r24, 0x2e	; 46
 5d0:	08 95       	ret

000005d2 <uart_send>:
	{
		returnval = recv_buffer[recvtail++];
		recvtail = recvtail%BUFFER_MAX;
	}
	return returnval;
}
 5d2:	e0 ec       	ldi	r30, 0xC0	; 192
 5d4:	f0 e0       	ldi	r31, 0x00	; 0
 5d6:	90 81       	ld	r25, Z
 5d8:	95 ff       	sbrs	r25, 5
 5da:	fd cf       	rjmp	.-6      	; 0x5d6 <uart_send+0x4>
 5dc:	80 93 c6 00 	sts	0x00C6, r24
 5e0:	80 e0       	ldi	r24, 0x00	; 0
 5e2:	90 e0       	ldi	r25, 0x00	; 0
 5e4:	08 95       	ret

000005e6 <__vector_25>:

volatile char recv_buffer[BUFFER_MAX];
volatile int recvhead = 0;
volatile int recvtail = 0;

ISR(USART0_RX_vect){
 5e6:	1f 92       	push	r1
 5e8:	0f 92       	push	r0
 5ea:	0f b6       	in	r0, 0x3f	; 63
 5ec:	0f 92       	push	r0
 5ee:	11 24       	eor	r1, r1
 5f0:	0b b6       	in	r0, 0x3b	; 59
 5f2:	0f 92       	push	r0
 5f4:	2f 93       	push	r18
 5f6:	3f 93       	push	r19
 5f8:	4f 93       	push	r20
 5fa:	8f 93       	push	r24
 5fc:	9f 93       	push	r25
 5fe:	ef 93       	push	r30
 600:	ff 93       	push	r31
	cli();
 602:	f8 94       	cli
	char input = UDR0;
 604:	40 91 c6 00 	lds	r20, 0x00C6
	if((recvhead+1)%BUFFER_MAX != recvtail){		// Sjekk at bufferen ikke er full
 608:	80 91 c2 03 	lds	r24, 0x03C2
 60c:	90 91 c3 03 	lds	r25, 0x03C3
 610:	20 91 c0 03 	lds	r18, 0x03C0
 614:	30 91 c1 03 	lds	r19, 0x03C1
 618:	01 96       	adiw	r24, 0x01	; 1
 61a:	8f 77       	andi	r24, 0x7F	; 127
 61c:	90 78       	andi	r25, 0x80	; 128
 61e:	99 23       	and	r25, r25
 620:	24 f4       	brge	.+8      	; 0x62a <__vector_25+0x44>
 622:	01 97       	sbiw	r24, 0x01	; 1
 624:	80 68       	ori	r24, 0x80	; 128
 626:	9f 6f       	ori	r25, 0xFF	; 255
 628:	01 96       	adiw	r24, 0x01	; 1
 62a:	82 17       	cp	r24, r18
 62c:	93 07       	cpc	r25, r19
 62e:	c1 f0       	breq	.+48     	; 0x660 <__vector_25+0x7a>
		recv_buffer[recvhead] = input;				// If so, legg inn byte
 630:	e0 91 c2 03 	lds	r30, 0x03C2
 634:	f0 91 c3 03 	lds	r31, 0x03C3
 638:	ea 53       	subi	r30, 0x3A	; 58
 63a:	fc 4f       	sbci	r31, 0xFC	; 252
 63c:	40 83       	st	Z, r20
		recvhead = (recvhead+1)%BUFFER_MAX;
 63e:	80 91 c2 03 	lds	r24, 0x03C2
 642:	90 91 c3 03 	lds	r25, 0x03C3
 646:	01 96       	adiw	r24, 0x01	; 1
 648:	8f 77       	andi	r24, 0x7F	; 127
 64a:	90 78       	andi	r25, 0x80	; 128
 64c:	99 23       	and	r25, r25
 64e:	24 f4       	brge	.+8      	; 0x658 <__vector_25+0x72>
 650:	01 97       	sbiw	r24, 0x01	; 1
 652:	80 68       	ori	r24, 0x80	; 128
 654:	9f 6f       	ori	r25, 0xFF	; 255
 656:	01 96       	adiw	r24, 0x01	; 1
 658:	90 93 c3 03 	sts	0x03C3, r25
 65c:	80 93 c2 03 	sts	0x03C2, r24
	}
	sei();
 660:	78 94       	sei
}
 662:	ff 91       	pop	r31
 664:	ef 91       	pop	r30
 666:	9f 91       	pop	r25
 668:	8f 91       	pop	r24
 66a:	4f 91       	pop	r20
 66c:	3f 91       	pop	r19
 66e:	2f 91       	pop	r18
 670:	0f 90       	pop	r0
 672:	0b be       	out	0x3b, r0	; 59
 674:	0f 90       	pop	r0
 676:	0f be       	out	0x3f, r0	; 63
 678:	0f 90       	pop	r0
 67a:	1f 90       	pop	r1
 67c:	18 95       	reti

0000067e <__vector_27>:

ISR(USART0_TX_vect){
 67e:	1f 92       	push	r1
 680:	0f 92       	push	r0
 682:	0f b6       	in	r0, 0x3f	; 63
 684:	0f 92       	push	r0
 686:	11 24       	eor	r1, r1
	
}
 688:	0f 90       	pop	r0
 68a:	0f be       	out	0x3f, r0	; 63
 68c:	0f 90       	pop	r0
 68e:	1f 90       	pop	r1
 690:	18 95       	reti

00000692 <uart_init>:


void uart_init(void){
	cli();
 692:	f8 94       	cli
	
	// set baud rate
	int timerval = (F_CPU/(16*BAUD) - 1);
	UBRR0L = timerval&0xFF;
 694:	87 e6       	ldi	r24, 0x67	; 103
 696:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H = (timerval>>8)&0x0F;
 69a:	10 92 c5 00 	sts	0x00C5, r1
	
	// enable interupts on Rx & Tx, and enable Rx & Tx
	UCSR0B |= (1 << RXCIE0) | (1 << TXCIE0) | (1 << RXEN0) | (1 << TXEN0);
 69e:	e1 ec       	ldi	r30, 0xC1	; 193
 6a0:	f0 e0       	ldi	r31, 0x00	; 0
 6a2:	80 81       	ld	r24, Z
 6a4:	88 6d       	ori	r24, 0xD8	; 216
 6a6:	80 83       	st	Z, r24
	
	// enable async mode
	UCSR0C &= ~(1 << UMSEL01); // changed from UMSEL0
 6a8:	e2 ec       	ldi	r30, 0xC2	; 194
 6aa:	f0 e0       	ldi	r31, 0x00	; 0
 6ac:	80 81       	ld	r24, Z
 6ae:	8f 77       	andi	r24, 0x7F	; 127
 6b0:	80 83       	st	Z, r24
	
	// parity disable
	UCSR0C &= ~((1 << UPM00) | (1 << UPM10));
 6b2:	80 81       	ld	r24, Z
 6b4:	8f 7e       	andi	r24, 0xEF	; 239
 6b6:	80 83       	st	Z, r24
	
	// stop bit to 1
	UCSR0C &= ~(1 << USBS0);
 6b8:	80 81       	ld	r24, Z
 6ba:	87 7f       	andi	r24, 0xF7	; 247
 6bc:	80 83       	st	Z, r24

	sei();
 6be:	78 94       	sei
 6c0:	08 95       	ret

000006c2 <fprintf>:
 6c2:	cf 93       	push	r28
 6c4:	df 93       	push	r29
 6c6:	cd b7       	in	r28, 0x3d	; 61
 6c8:	de b7       	in	r29, 0x3e	; 62
 6ca:	ae 01       	movw	r20, r28
 6cc:	46 5f       	subi	r20, 0xF6	; 246
 6ce:	5f 4f       	sbci	r21, 0xFF	; 255
 6d0:	68 85       	ldd	r22, Y+8	; 0x08
 6d2:	79 85       	ldd	r23, Y+9	; 0x09
 6d4:	8e 81       	ldd	r24, Y+6	; 0x06
 6d6:	9f 81       	ldd	r25, Y+7	; 0x07
 6d8:	77 d0       	rcall	.+238    	; 0x7c8 <vfprintf>
 6da:	df 91       	pop	r29
 6dc:	cf 91       	pop	r28
 6de:	08 95       	ret

000006e0 <fputc>:
 6e0:	0f 93       	push	r16
 6e2:	1f 93       	push	r17
 6e4:	cf 93       	push	r28
 6e6:	df 93       	push	r29
 6e8:	18 2f       	mov	r17, r24
 6ea:	09 2f       	mov	r16, r25
 6ec:	eb 01       	movw	r28, r22
 6ee:	8b 81       	ldd	r24, Y+3	; 0x03
 6f0:	81 fd       	sbrc	r24, 1
 6f2:	03 c0       	rjmp	.+6      	; 0x6fa <fputc+0x1a>
 6f4:	8f ef       	ldi	r24, 0xFF	; 255
 6f6:	9f ef       	ldi	r25, 0xFF	; 255
 6f8:	20 c0       	rjmp	.+64     	; 0x73a <fputc+0x5a>
 6fa:	82 ff       	sbrs	r24, 2
 6fc:	10 c0       	rjmp	.+32     	; 0x71e <fputc+0x3e>
 6fe:	4e 81       	ldd	r20, Y+6	; 0x06
 700:	5f 81       	ldd	r21, Y+7	; 0x07
 702:	2c 81       	ldd	r18, Y+4	; 0x04
 704:	3d 81       	ldd	r19, Y+5	; 0x05
 706:	42 17       	cp	r20, r18
 708:	53 07       	cpc	r21, r19
 70a:	7c f4       	brge	.+30     	; 0x72a <fputc+0x4a>
 70c:	e8 81       	ld	r30, Y
 70e:	f9 81       	ldd	r31, Y+1	; 0x01
 710:	9f 01       	movw	r18, r30
 712:	2f 5f       	subi	r18, 0xFF	; 255
 714:	3f 4f       	sbci	r19, 0xFF	; 255
 716:	39 83       	std	Y+1, r19	; 0x01
 718:	28 83       	st	Y, r18
 71a:	10 83       	st	Z, r17
 71c:	06 c0       	rjmp	.+12     	; 0x72a <fputc+0x4a>
 71e:	e8 85       	ldd	r30, Y+8	; 0x08
 720:	f9 85       	ldd	r31, Y+9	; 0x09
 722:	81 2f       	mov	r24, r17
 724:	19 95       	eicall
 726:	89 2b       	or	r24, r25
 728:	29 f7       	brne	.-54     	; 0x6f4 <fputc+0x14>
 72a:	2e 81       	ldd	r18, Y+6	; 0x06
 72c:	3f 81       	ldd	r19, Y+7	; 0x07
 72e:	2f 5f       	subi	r18, 0xFF	; 255
 730:	3f 4f       	sbci	r19, 0xFF	; 255
 732:	3f 83       	std	Y+7, r19	; 0x07
 734:	2e 83       	std	Y+6, r18	; 0x06
 736:	81 2f       	mov	r24, r17
 738:	90 2f       	mov	r25, r16
 73a:	df 91       	pop	r29
 73c:	cf 91       	pop	r28
 73e:	1f 91       	pop	r17
 740:	0f 91       	pop	r16
 742:	08 95       	ret

00000744 <fwrite>:
 744:	8f 92       	push	r8
 746:	9f 92       	push	r9
 748:	af 92       	push	r10
 74a:	bf 92       	push	r11
 74c:	cf 92       	push	r12
 74e:	df 92       	push	r13
 750:	ef 92       	push	r14
 752:	ff 92       	push	r15
 754:	0f 93       	push	r16
 756:	1f 93       	push	r17
 758:	cf 93       	push	r28
 75a:	df 93       	push	r29
 75c:	6b 01       	movw	r12, r22
 75e:	4a 01       	movw	r8, r20
 760:	79 01       	movw	r14, r18
 762:	d9 01       	movw	r26, r18
 764:	13 96       	adiw	r26, 0x03	; 3
 766:	2c 91       	ld	r18, X
 768:	21 ff       	sbrs	r18, 1
 76a:	1d c0       	rjmp	.+58     	; 0x7a6 <fwrite+0x62>
 76c:	c0 e0       	ldi	r28, 0x00	; 0
 76e:	d0 e0       	ldi	r29, 0x00	; 0
 770:	c8 15       	cp	r28, r8
 772:	d9 05       	cpc	r29, r9
 774:	d9 f0       	breq	.+54     	; 0x7ac <fwrite+0x68>
 776:	8c 01       	movw	r16, r24
 778:	5c 01       	movw	r10, r24
 77a:	ac 0c       	add	r10, r12
 77c:	bd 1c       	adc	r11, r13
 77e:	c8 01       	movw	r24, r16
 780:	0a 15       	cp	r16, r10
 782:	1b 05       	cpc	r17, r11
 784:	71 f0       	breq	.+28     	; 0x7a2 <fwrite+0x5e>
 786:	0f 5f       	subi	r16, 0xFF	; 255
 788:	1f 4f       	sbci	r17, 0xFF	; 255
 78a:	d7 01       	movw	r26, r14
 78c:	18 96       	adiw	r26, 0x08	; 8
 78e:	ed 91       	ld	r30, X+
 790:	fc 91       	ld	r31, X
 792:	19 97       	sbiw	r26, 0x09	; 9
 794:	b7 01       	movw	r22, r14
 796:	dc 01       	movw	r26, r24
 798:	8c 91       	ld	r24, X
 79a:	19 95       	eicall
 79c:	89 2b       	or	r24, r25
 79e:	79 f3       	breq	.-34     	; 0x77e <fwrite+0x3a>
 7a0:	05 c0       	rjmp	.+10     	; 0x7ac <fwrite+0x68>
 7a2:	21 96       	adiw	r28, 0x01	; 1
 7a4:	e5 cf       	rjmp	.-54     	; 0x770 <fwrite+0x2c>
 7a6:	80 e0       	ldi	r24, 0x00	; 0
 7a8:	90 e0       	ldi	r25, 0x00	; 0
 7aa:	01 c0       	rjmp	.+2      	; 0x7ae <fwrite+0x6a>
 7ac:	ce 01       	movw	r24, r28
 7ae:	df 91       	pop	r29
 7b0:	cf 91       	pop	r28
 7b2:	1f 91       	pop	r17
 7b4:	0f 91       	pop	r16
 7b6:	ff 90       	pop	r15
 7b8:	ef 90       	pop	r14
 7ba:	df 90       	pop	r13
 7bc:	cf 90       	pop	r12
 7be:	bf 90       	pop	r11
 7c0:	af 90       	pop	r10
 7c2:	9f 90       	pop	r9
 7c4:	8f 90       	pop	r8
 7c6:	08 95       	ret

000007c8 <vfprintf>:
 7c8:	2f 92       	push	r2
 7ca:	3f 92       	push	r3
 7cc:	4f 92       	push	r4
 7ce:	5f 92       	push	r5
 7d0:	6f 92       	push	r6
 7d2:	7f 92       	push	r7
 7d4:	8f 92       	push	r8
 7d6:	9f 92       	push	r9
 7d8:	af 92       	push	r10
 7da:	bf 92       	push	r11
 7dc:	cf 92       	push	r12
 7de:	df 92       	push	r13
 7e0:	ef 92       	push	r14
 7e2:	ff 92       	push	r15
 7e4:	0f 93       	push	r16
 7e6:	1f 93       	push	r17
 7e8:	cf 93       	push	r28
 7ea:	df 93       	push	r29
 7ec:	cd b7       	in	r28, 0x3d	; 61
 7ee:	de b7       	in	r29, 0x3e	; 62
 7f0:	2c 97       	sbiw	r28, 0x0c	; 12
 7f2:	0f b6       	in	r0, 0x3f	; 63
 7f4:	f8 94       	cli
 7f6:	de bf       	out	0x3e, r29	; 62
 7f8:	0f be       	out	0x3f, r0	; 63
 7fa:	cd bf       	out	0x3d, r28	; 61
 7fc:	7c 01       	movw	r14, r24
 7fe:	6b 01       	movw	r12, r22
 800:	8a 01       	movw	r16, r20
 802:	fc 01       	movw	r30, r24
 804:	17 82       	std	Z+7, r1	; 0x07
 806:	16 82       	std	Z+6, r1	; 0x06
 808:	83 81       	ldd	r24, Z+3	; 0x03
 80a:	81 ff       	sbrs	r24, 1
 80c:	b0 c1       	rjmp	.+864    	; 0xb6e <vfprintf+0x3a6>
 80e:	ce 01       	movw	r24, r28
 810:	01 96       	adiw	r24, 0x01	; 1
 812:	4c 01       	movw	r8, r24
 814:	f7 01       	movw	r30, r14
 816:	93 81       	ldd	r25, Z+3	; 0x03
 818:	f6 01       	movw	r30, r12
 81a:	93 fd       	sbrc	r25, 3
 81c:	85 91       	lpm	r24, Z+
 81e:	93 ff       	sbrs	r25, 3
 820:	81 91       	ld	r24, Z+
 822:	6f 01       	movw	r12, r30
 824:	88 23       	and	r24, r24
 826:	09 f4       	brne	.+2      	; 0x82a <vfprintf+0x62>
 828:	9e c1       	rjmp	.+828    	; 0xb66 <vfprintf+0x39e>
 82a:	85 32       	cpi	r24, 0x25	; 37
 82c:	39 f4       	brne	.+14     	; 0x83c <vfprintf+0x74>
 82e:	93 fd       	sbrc	r25, 3
 830:	85 91       	lpm	r24, Z+
 832:	93 ff       	sbrs	r25, 3
 834:	81 91       	ld	r24, Z+
 836:	6f 01       	movw	r12, r30
 838:	85 32       	cpi	r24, 0x25	; 37
 83a:	21 f4       	brne	.+8      	; 0x844 <vfprintf+0x7c>
 83c:	b7 01       	movw	r22, r14
 83e:	90 e0       	ldi	r25, 0x00	; 0
 840:	4f df       	rcall	.-354    	; 0x6e0 <fputc>
 842:	e8 cf       	rjmp	.-48     	; 0x814 <vfprintf+0x4c>
 844:	51 2c       	mov	r5, r1
 846:	31 2c       	mov	r3, r1
 848:	20 e0       	ldi	r18, 0x00	; 0
 84a:	20 32       	cpi	r18, 0x20	; 32
 84c:	a0 f4       	brcc	.+40     	; 0x876 <vfprintf+0xae>
 84e:	8b 32       	cpi	r24, 0x2B	; 43
 850:	69 f0       	breq	.+26     	; 0x86c <vfprintf+0xa4>
 852:	30 f4       	brcc	.+12     	; 0x860 <vfprintf+0x98>
 854:	80 32       	cpi	r24, 0x20	; 32
 856:	59 f0       	breq	.+22     	; 0x86e <vfprintf+0xa6>
 858:	83 32       	cpi	r24, 0x23	; 35
 85a:	69 f4       	brne	.+26     	; 0x876 <vfprintf+0xae>
 85c:	20 61       	ori	r18, 0x10	; 16
 85e:	2c c0       	rjmp	.+88     	; 0x8b8 <vfprintf+0xf0>
 860:	8d 32       	cpi	r24, 0x2D	; 45
 862:	39 f0       	breq	.+14     	; 0x872 <vfprintf+0xaa>
 864:	80 33       	cpi	r24, 0x30	; 48
 866:	39 f4       	brne	.+14     	; 0x876 <vfprintf+0xae>
 868:	21 60       	ori	r18, 0x01	; 1
 86a:	26 c0       	rjmp	.+76     	; 0x8b8 <vfprintf+0xf0>
 86c:	22 60       	ori	r18, 0x02	; 2
 86e:	24 60       	ori	r18, 0x04	; 4
 870:	23 c0       	rjmp	.+70     	; 0x8b8 <vfprintf+0xf0>
 872:	28 60       	ori	r18, 0x08	; 8
 874:	21 c0       	rjmp	.+66     	; 0x8b8 <vfprintf+0xf0>
 876:	27 fd       	sbrc	r18, 7
 878:	27 c0       	rjmp	.+78     	; 0x8c8 <vfprintf+0x100>
 87a:	30 ed       	ldi	r19, 0xD0	; 208
 87c:	38 0f       	add	r19, r24
 87e:	3a 30       	cpi	r19, 0x0A	; 10
 880:	78 f4       	brcc	.+30     	; 0x8a0 <vfprintf+0xd8>
 882:	26 ff       	sbrs	r18, 6
 884:	06 c0       	rjmp	.+12     	; 0x892 <vfprintf+0xca>
 886:	fa e0       	ldi	r31, 0x0A	; 10
 888:	5f 9e       	mul	r5, r31
 88a:	30 0d       	add	r19, r0
 88c:	11 24       	eor	r1, r1
 88e:	53 2e       	mov	r5, r19
 890:	13 c0       	rjmp	.+38     	; 0x8b8 <vfprintf+0xf0>
 892:	8a e0       	ldi	r24, 0x0A	; 10
 894:	38 9e       	mul	r3, r24
 896:	30 0d       	add	r19, r0
 898:	11 24       	eor	r1, r1
 89a:	33 2e       	mov	r3, r19
 89c:	20 62       	ori	r18, 0x20	; 32
 89e:	0c c0       	rjmp	.+24     	; 0x8b8 <vfprintf+0xf0>
 8a0:	8e 32       	cpi	r24, 0x2E	; 46
 8a2:	21 f4       	brne	.+8      	; 0x8ac <vfprintf+0xe4>
 8a4:	26 fd       	sbrc	r18, 6
 8a6:	5f c1       	rjmp	.+702    	; 0xb66 <vfprintf+0x39e>
 8a8:	20 64       	ori	r18, 0x40	; 64
 8aa:	06 c0       	rjmp	.+12     	; 0x8b8 <vfprintf+0xf0>
 8ac:	8c 36       	cpi	r24, 0x6C	; 108
 8ae:	11 f4       	brne	.+4      	; 0x8b4 <vfprintf+0xec>
 8b0:	20 68       	ori	r18, 0x80	; 128
 8b2:	02 c0       	rjmp	.+4      	; 0x8b8 <vfprintf+0xf0>
 8b4:	88 36       	cpi	r24, 0x68	; 104
 8b6:	41 f4       	brne	.+16     	; 0x8c8 <vfprintf+0x100>
 8b8:	f6 01       	movw	r30, r12
 8ba:	93 fd       	sbrc	r25, 3
 8bc:	85 91       	lpm	r24, Z+
 8be:	93 ff       	sbrs	r25, 3
 8c0:	81 91       	ld	r24, Z+
 8c2:	6f 01       	movw	r12, r30
 8c4:	81 11       	cpse	r24, r1
 8c6:	c1 cf       	rjmp	.-126    	; 0x84a <vfprintf+0x82>
 8c8:	98 2f       	mov	r25, r24
 8ca:	9f 7d       	andi	r25, 0xDF	; 223
 8cc:	95 54       	subi	r25, 0x45	; 69
 8ce:	93 30       	cpi	r25, 0x03	; 3
 8d0:	28 f4       	brcc	.+10     	; 0x8dc <vfprintf+0x114>
 8d2:	0c 5f       	subi	r16, 0xFC	; 252
 8d4:	1f 4f       	sbci	r17, 0xFF	; 255
 8d6:	ff e3       	ldi	r31, 0x3F	; 63
 8d8:	f9 83       	std	Y+1, r31	; 0x01
 8da:	0d c0       	rjmp	.+26     	; 0x8f6 <vfprintf+0x12e>
 8dc:	83 36       	cpi	r24, 0x63	; 99
 8de:	31 f0       	breq	.+12     	; 0x8ec <vfprintf+0x124>
 8e0:	83 37       	cpi	r24, 0x73	; 115
 8e2:	71 f0       	breq	.+28     	; 0x900 <vfprintf+0x138>
 8e4:	83 35       	cpi	r24, 0x53	; 83
 8e6:	09 f0       	breq	.+2      	; 0x8ea <vfprintf+0x122>
 8e8:	57 c0       	rjmp	.+174    	; 0x998 <vfprintf+0x1d0>
 8ea:	21 c0       	rjmp	.+66     	; 0x92e <vfprintf+0x166>
 8ec:	f8 01       	movw	r30, r16
 8ee:	80 81       	ld	r24, Z
 8f0:	89 83       	std	Y+1, r24	; 0x01
 8f2:	0e 5f       	subi	r16, 0xFE	; 254
 8f4:	1f 4f       	sbci	r17, 0xFF	; 255
 8f6:	44 24       	eor	r4, r4
 8f8:	43 94       	inc	r4
 8fa:	51 2c       	mov	r5, r1
 8fc:	54 01       	movw	r10, r8
 8fe:	14 c0       	rjmp	.+40     	; 0x928 <vfprintf+0x160>
 900:	38 01       	movw	r6, r16
 902:	f2 e0       	ldi	r31, 0x02	; 2
 904:	6f 0e       	add	r6, r31
 906:	71 1c       	adc	r7, r1
 908:	f8 01       	movw	r30, r16
 90a:	a0 80       	ld	r10, Z
 90c:	b1 80       	ldd	r11, Z+1	; 0x01
 90e:	26 ff       	sbrs	r18, 6
 910:	03 c0       	rjmp	.+6      	; 0x918 <vfprintf+0x150>
 912:	65 2d       	mov	r22, r5
 914:	70 e0       	ldi	r23, 0x00	; 0
 916:	02 c0       	rjmp	.+4      	; 0x91c <vfprintf+0x154>
 918:	6f ef       	ldi	r22, 0xFF	; 255
 91a:	7f ef       	ldi	r23, 0xFF	; 255
 91c:	c5 01       	movw	r24, r10
 91e:	2c 87       	std	Y+12, r18	; 0x0c
 920:	4c d1       	rcall	.+664    	; 0xbba <strnlen>
 922:	2c 01       	movw	r4, r24
 924:	83 01       	movw	r16, r6
 926:	2c 85       	ldd	r18, Y+12	; 0x0c
 928:	2f 77       	andi	r18, 0x7F	; 127
 92a:	22 2e       	mov	r2, r18
 92c:	16 c0       	rjmp	.+44     	; 0x95a <vfprintf+0x192>
 92e:	38 01       	movw	r6, r16
 930:	f2 e0       	ldi	r31, 0x02	; 2
 932:	6f 0e       	add	r6, r31
 934:	71 1c       	adc	r7, r1
 936:	f8 01       	movw	r30, r16
 938:	a0 80       	ld	r10, Z
 93a:	b1 80       	ldd	r11, Z+1	; 0x01
 93c:	26 ff       	sbrs	r18, 6
 93e:	03 c0       	rjmp	.+6      	; 0x946 <vfprintf+0x17e>
 940:	65 2d       	mov	r22, r5
 942:	70 e0       	ldi	r23, 0x00	; 0
 944:	02 c0       	rjmp	.+4      	; 0x94a <vfprintf+0x182>
 946:	6f ef       	ldi	r22, 0xFF	; 255
 948:	7f ef       	ldi	r23, 0xFF	; 255
 94a:	c5 01       	movw	r24, r10
 94c:	2c 87       	std	Y+12, r18	; 0x0c
 94e:	2a d1       	rcall	.+596    	; 0xba4 <strnlen_P>
 950:	2c 01       	movw	r4, r24
 952:	2c 85       	ldd	r18, Y+12	; 0x0c
 954:	20 68       	ori	r18, 0x80	; 128
 956:	22 2e       	mov	r2, r18
 958:	83 01       	movw	r16, r6
 95a:	23 fc       	sbrc	r2, 3
 95c:	19 c0       	rjmp	.+50     	; 0x990 <vfprintf+0x1c8>
 95e:	83 2d       	mov	r24, r3
 960:	90 e0       	ldi	r25, 0x00	; 0
 962:	48 16       	cp	r4, r24
 964:	59 06       	cpc	r5, r25
 966:	a0 f4       	brcc	.+40     	; 0x990 <vfprintf+0x1c8>
 968:	b7 01       	movw	r22, r14
 96a:	80 e2       	ldi	r24, 0x20	; 32
 96c:	90 e0       	ldi	r25, 0x00	; 0
 96e:	b8 de       	rcall	.-656    	; 0x6e0 <fputc>
 970:	3a 94       	dec	r3
 972:	f5 cf       	rjmp	.-22     	; 0x95e <vfprintf+0x196>
 974:	f5 01       	movw	r30, r10
 976:	27 fc       	sbrc	r2, 7
 978:	85 91       	lpm	r24, Z+
 97a:	27 fe       	sbrs	r2, 7
 97c:	81 91       	ld	r24, Z+
 97e:	5f 01       	movw	r10, r30
 980:	b7 01       	movw	r22, r14
 982:	90 e0       	ldi	r25, 0x00	; 0
 984:	ad de       	rcall	.-678    	; 0x6e0 <fputc>
 986:	31 10       	cpse	r3, r1
 988:	3a 94       	dec	r3
 98a:	f1 e0       	ldi	r31, 0x01	; 1
 98c:	4f 1a       	sub	r4, r31
 98e:	51 08       	sbc	r5, r1
 990:	41 14       	cp	r4, r1
 992:	51 04       	cpc	r5, r1
 994:	79 f7       	brne	.-34     	; 0x974 <vfprintf+0x1ac>
 996:	de c0       	rjmp	.+444    	; 0xb54 <vfprintf+0x38c>
 998:	84 36       	cpi	r24, 0x64	; 100
 99a:	11 f0       	breq	.+4      	; 0x9a0 <vfprintf+0x1d8>
 99c:	89 36       	cpi	r24, 0x69	; 105
 99e:	31 f5       	brne	.+76     	; 0x9ec <vfprintf+0x224>
 9a0:	f8 01       	movw	r30, r16
 9a2:	27 ff       	sbrs	r18, 7
 9a4:	07 c0       	rjmp	.+14     	; 0x9b4 <vfprintf+0x1ec>
 9a6:	60 81       	ld	r22, Z
 9a8:	71 81       	ldd	r23, Z+1	; 0x01
 9aa:	82 81       	ldd	r24, Z+2	; 0x02
 9ac:	93 81       	ldd	r25, Z+3	; 0x03
 9ae:	0c 5f       	subi	r16, 0xFC	; 252
 9b0:	1f 4f       	sbci	r17, 0xFF	; 255
 9b2:	08 c0       	rjmp	.+16     	; 0x9c4 <vfprintf+0x1fc>
 9b4:	60 81       	ld	r22, Z
 9b6:	71 81       	ldd	r23, Z+1	; 0x01
 9b8:	88 27       	eor	r24, r24
 9ba:	77 fd       	sbrc	r23, 7
 9bc:	80 95       	com	r24
 9be:	98 2f       	mov	r25, r24
 9c0:	0e 5f       	subi	r16, 0xFE	; 254
 9c2:	1f 4f       	sbci	r17, 0xFF	; 255
 9c4:	2f 76       	andi	r18, 0x6F	; 111
 9c6:	b2 2e       	mov	r11, r18
 9c8:	97 ff       	sbrs	r25, 7
 9ca:	09 c0       	rjmp	.+18     	; 0x9de <vfprintf+0x216>
 9cc:	90 95       	com	r25
 9ce:	80 95       	com	r24
 9d0:	70 95       	com	r23
 9d2:	61 95       	neg	r22
 9d4:	7f 4f       	sbci	r23, 0xFF	; 255
 9d6:	8f 4f       	sbci	r24, 0xFF	; 255
 9d8:	9f 4f       	sbci	r25, 0xFF	; 255
 9da:	20 68       	ori	r18, 0x80	; 128
 9dc:	b2 2e       	mov	r11, r18
 9de:	2a e0       	ldi	r18, 0x0A	; 10
 9e0:	30 e0       	ldi	r19, 0x00	; 0
 9e2:	a4 01       	movw	r20, r8
 9e4:	f5 d0       	rcall	.+490    	; 0xbd0 <__ultoa_invert>
 9e6:	a8 2e       	mov	r10, r24
 9e8:	a8 18       	sub	r10, r8
 9ea:	43 c0       	rjmp	.+134    	; 0xa72 <vfprintf+0x2aa>
 9ec:	85 37       	cpi	r24, 0x75	; 117
 9ee:	29 f4       	brne	.+10     	; 0x9fa <vfprintf+0x232>
 9f0:	2f 7e       	andi	r18, 0xEF	; 239
 9f2:	b2 2e       	mov	r11, r18
 9f4:	2a e0       	ldi	r18, 0x0A	; 10
 9f6:	30 e0       	ldi	r19, 0x00	; 0
 9f8:	25 c0       	rjmp	.+74     	; 0xa44 <vfprintf+0x27c>
 9fa:	f2 2f       	mov	r31, r18
 9fc:	f9 7f       	andi	r31, 0xF9	; 249
 9fe:	bf 2e       	mov	r11, r31
 a00:	8f 36       	cpi	r24, 0x6F	; 111
 a02:	c1 f0       	breq	.+48     	; 0xa34 <vfprintf+0x26c>
 a04:	18 f4       	brcc	.+6      	; 0xa0c <vfprintf+0x244>
 a06:	88 35       	cpi	r24, 0x58	; 88
 a08:	79 f0       	breq	.+30     	; 0xa28 <vfprintf+0x260>
 a0a:	ad c0       	rjmp	.+346    	; 0xb66 <vfprintf+0x39e>
 a0c:	80 37       	cpi	r24, 0x70	; 112
 a0e:	19 f0       	breq	.+6      	; 0xa16 <vfprintf+0x24e>
 a10:	88 37       	cpi	r24, 0x78	; 120
 a12:	21 f0       	breq	.+8      	; 0xa1c <vfprintf+0x254>
 a14:	a8 c0       	rjmp	.+336    	; 0xb66 <vfprintf+0x39e>
 a16:	2f 2f       	mov	r18, r31
 a18:	20 61       	ori	r18, 0x10	; 16
 a1a:	b2 2e       	mov	r11, r18
 a1c:	b4 fe       	sbrs	r11, 4
 a1e:	0d c0       	rjmp	.+26     	; 0xa3a <vfprintf+0x272>
 a20:	8b 2d       	mov	r24, r11
 a22:	84 60       	ori	r24, 0x04	; 4
 a24:	b8 2e       	mov	r11, r24
 a26:	09 c0       	rjmp	.+18     	; 0xa3a <vfprintf+0x272>
 a28:	24 ff       	sbrs	r18, 4
 a2a:	0a c0       	rjmp	.+20     	; 0xa40 <vfprintf+0x278>
 a2c:	9f 2f       	mov	r25, r31
 a2e:	96 60       	ori	r25, 0x06	; 6
 a30:	b9 2e       	mov	r11, r25
 a32:	06 c0       	rjmp	.+12     	; 0xa40 <vfprintf+0x278>
 a34:	28 e0       	ldi	r18, 0x08	; 8
 a36:	30 e0       	ldi	r19, 0x00	; 0
 a38:	05 c0       	rjmp	.+10     	; 0xa44 <vfprintf+0x27c>
 a3a:	20 e1       	ldi	r18, 0x10	; 16
 a3c:	30 e0       	ldi	r19, 0x00	; 0
 a3e:	02 c0       	rjmp	.+4      	; 0xa44 <vfprintf+0x27c>
 a40:	20 e1       	ldi	r18, 0x10	; 16
 a42:	32 e0       	ldi	r19, 0x02	; 2
 a44:	f8 01       	movw	r30, r16
 a46:	b7 fe       	sbrs	r11, 7
 a48:	07 c0       	rjmp	.+14     	; 0xa58 <vfprintf+0x290>
 a4a:	60 81       	ld	r22, Z
 a4c:	71 81       	ldd	r23, Z+1	; 0x01
 a4e:	82 81       	ldd	r24, Z+2	; 0x02
 a50:	93 81       	ldd	r25, Z+3	; 0x03
 a52:	0c 5f       	subi	r16, 0xFC	; 252
 a54:	1f 4f       	sbci	r17, 0xFF	; 255
 a56:	06 c0       	rjmp	.+12     	; 0xa64 <vfprintf+0x29c>
 a58:	60 81       	ld	r22, Z
 a5a:	71 81       	ldd	r23, Z+1	; 0x01
 a5c:	80 e0       	ldi	r24, 0x00	; 0
 a5e:	90 e0       	ldi	r25, 0x00	; 0
 a60:	0e 5f       	subi	r16, 0xFE	; 254
 a62:	1f 4f       	sbci	r17, 0xFF	; 255
 a64:	a4 01       	movw	r20, r8
 a66:	b4 d0       	rcall	.+360    	; 0xbd0 <__ultoa_invert>
 a68:	a8 2e       	mov	r10, r24
 a6a:	a8 18       	sub	r10, r8
 a6c:	fb 2d       	mov	r31, r11
 a6e:	ff 77       	andi	r31, 0x7F	; 127
 a70:	bf 2e       	mov	r11, r31
 a72:	b6 fe       	sbrs	r11, 6
 a74:	0b c0       	rjmp	.+22     	; 0xa8c <vfprintf+0x2c4>
 a76:	2b 2d       	mov	r18, r11
 a78:	2e 7f       	andi	r18, 0xFE	; 254
 a7a:	a5 14       	cp	r10, r5
 a7c:	50 f4       	brcc	.+20     	; 0xa92 <vfprintf+0x2ca>
 a7e:	b4 fe       	sbrs	r11, 4
 a80:	0a c0       	rjmp	.+20     	; 0xa96 <vfprintf+0x2ce>
 a82:	b2 fc       	sbrc	r11, 2
 a84:	08 c0       	rjmp	.+16     	; 0xa96 <vfprintf+0x2ce>
 a86:	2b 2d       	mov	r18, r11
 a88:	2e 7e       	andi	r18, 0xEE	; 238
 a8a:	05 c0       	rjmp	.+10     	; 0xa96 <vfprintf+0x2ce>
 a8c:	7a 2c       	mov	r7, r10
 a8e:	2b 2d       	mov	r18, r11
 a90:	03 c0       	rjmp	.+6      	; 0xa98 <vfprintf+0x2d0>
 a92:	7a 2c       	mov	r7, r10
 a94:	01 c0       	rjmp	.+2      	; 0xa98 <vfprintf+0x2d0>
 a96:	75 2c       	mov	r7, r5
 a98:	24 ff       	sbrs	r18, 4
 a9a:	0d c0       	rjmp	.+26     	; 0xab6 <vfprintf+0x2ee>
 a9c:	fe 01       	movw	r30, r28
 a9e:	ea 0d       	add	r30, r10
 aa0:	f1 1d       	adc	r31, r1
 aa2:	80 81       	ld	r24, Z
 aa4:	80 33       	cpi	r24, 0x30	; 48
 aa6:	11 f4       	brne	.+4      	; 0xaac <vfprintf+0x2e4>
 aa8:	29 7e       	andi	r18, 0xE9	; 233
 aaa:	09 c0       	rjmp	.+18     	; 0xabe <vfprintf+0x2f6>
 aac:	22 ff       	sbrs	r18, 2
 aae:	06 c0       	rjmp	.+12     	; 0xabc <vfprintf+0x2f4>
 ab0:	73 94       	inc	r7
 ab2:	73 94       	inc	r7
 ab4:	04 c0       	rjmp	.+8      	; 0xabe <vfprintf+0x2f6>
 ab6:	82 2f       	mov	r24, r18
 ab8:	86 78       	andi	r24, 0x86	; 134
 aba:	09 f0       	breq	.+2      	; 0xabe <vfprintf+0x2f6>
 abc:	73 94       	inc	r7
 abe:	23 fd       	sbrc	r18, 3
 ac0:	12 c0       	rjmp	.+36     	; 0xae6 <vfprintf+0x31e>
 ac2:	20 ff       	sbrs	r18, 0
 ac4:	06 c0       	rjmp	.+12     	; 0xad2 <vfprintf+0x30a>
 ac6:	5a 2c       	mov	r5, r10
 ac8:	73 14       	cp	r7, r3
 aca:	18 f4       	brcc	.+6      	; 0xad2 <vfprintf+0x30a>
 acc:	53 0c       	add	r5, r3
 ace:	57 18       	sub	r5, r7
 ad0:	73 2c       	mov	r7, r3
 ad2:	73 14       	cp	r7, r3
 ad4:	60 f4       	brcc	.+24     	; 0xaee <vfprintf+0x326>
 ad6:	b7 01       	movw	r22, r14
 ad8:	80 e2       	ldi	r24, 0x20	; 32
 ada:	90 e0       	ldi	r25, 0x00	; 0
 adc:	2c 87       	std	Y+12, r18	; 0x0c
 ade:	00 de       	rcall	.-1024   	; 0x6e0 <fputc>
 ae0:	73 94       	inc	r7
 ae2:	2c 85       	ldd	r18, Y+12	; 0x0c
 ae4:	f6 cf       	rjmp	.-20     	; 0xad2 <vfprintf+0x30a>
 ae6:	73 14       	cp	r7, r3
 ae8:	10 f4       	brcc	.+4      	; 0xaee <vfprintf+0x326>
 aea:	37 18       	sub	r3, r7
 aec:	01 c0       	rjmp	.+2      	; 0xaf0 <vfprintf+0x328>
 aee:	31 2c       	mov	r3, r1
 af0:	24 ff       	sbrs	r18, 4
 af2:	11 c0       	rjmp	.+34     	; 0xb16 <vfprintf+0x34e>
 af4:	b7 01       	movw	r22, r14
 af6:	80 e3       	ldi	r24, 0x30	; 48
 af8:	90 e0       	ldi	r25, 0x00	; 0
 afa:	2c 87       	std	Y+12, r18	; 0x0c
 afc:	f1 dd       	rcall	.-1054   	; 0x6e0 <fputc>
 afe:	2c 85       	ldd	r18, Y+12	; 0x0c
 b00:	22 ff       	sbrs	r18, 2
 b02:	16 c0       	rjmp	.+44     	; 0xb30 <vfprintf+0x368>
 b04:	21 ff       	sbrs	r18, 1
 b06:	03 c0       	rjmp	.+6      	; 0xb0e <vfprintf+0x346>
 b08:	88 e5       	ldi	r24, 0x58	; 88
 b0a:	90 e0       	ldi	r25, 0x00	; 0
 b0c:	02 c0       	rjmp	.+4      	; 0xb12 <vfprintf+0x34a>
 b0e:	88 e7       	ldi	r24, 0x78	; 120
 b10:	90 e0       	ldi	r25, 0x00	; 0
 b12:	b7 01       	movw	r22, r14
 b14:	0c c0       	rjmp	.+24     	; 0xb2e <vfprintf+0x366>
 b16:	82 2f       	mov	r24, r18
 b18:	86 78       	andi	r24, 0x86	; 134
 b1a:	51 f0       	breq	.+20     	; 0xb30 <vfprintf+0x368>
 b1c:	21 fd       	sbrc	r18, 1
 b1e:	02 c0       	rjmp	.+4      	; 0xb24 <vfprintf+0x35c>
 b20:	80 e2       	ldi	r24, 0x20	; 32
 b22:	01 c0       	rjmp	.+2      	; 0xb26 <vfprintf+0x35e>
 b24:	8b e2       	ldi	r24, 0x2B	; 43
 b26:	27 fd       	sbrc	r18, 7
 b28:	8d e2       	ldi	r24, 0x2D	; 45
 b2a:	b7 01       	movw	r22, r14
 b2c:	90 e0       	ldi	r25, 0x00	; 0
 b2e:	d8 dd       	rcall	.-1104   	; 0x6e0 <fputc>
 b30:	a5 14       	cp	r10, r5
 b32:	30 f4       	brcc	.+12     	; 0xb40 <vfprintf+0x378>
 b34:	b7 01       	movw	r22, r14
 b36:	80 e3       	ldi	r24, 0x30	; 48
 b38:	90 e0       	ldi	r25, 0x00	; 0
 b3a:	d2 dd       	rcall	.-1116   	; 0x6e0 <fputc>
 b3c:	5a 94       	dec	r5
 b3e:	f8 cf       	rjmp	.-16     	; 0xb30 <vfprintf+0x368>
 b40:	aa 94       	dec	r10
 b42:	f4 01       	movw	r30, r8
 b44:	ea 0d       	add	r30, r10
 b46:	f1 1d       	adc	r31, r1
 b48:	80 81       	ld	r24, Z
 b4a:	b7 01       	movw	r22, r14
 b4c:	90 e0       	ldi	r25, 0x00	; 0
 b4e:	c8 dd       	rcall	.-1136   	; 0x6e0 <fputc>
 b50:	a1 10       	cpse	r10, r1
 b52:	f6 cf       	rjmp	.-20     	; 0xb40 <vfprintf+0x378>
 b54:	33 20       	and	r3, r3
 b56:	09 f4       	brne	.+2      	; 0xb5a <vfprintf+0x392>
 b58:	5d ce       	rjmp	.-838    	; 0x814 <vfprintf+0x4c>
 b5a:	b7 01       	movw	r22, r14
 b5c:	80 e2       	ldi	r24, 0x20	; 32
 b5e:	90 e0       	ldi	r25, 0x00	; 0
 b60:	bf dd       	rcall	.-1154   	; 0x6e0 <fputc>
 b62:	3a 94       	dec	r3
 b64:	f7 cf       	rjmp	.-18     	; 0xb54 <vfprintf+0x38c>
 b66:	f7 01       	movw	r30, r14
 b68:	86 81       	ldd	r24, Z+6	; 0x06
 b6a:	97 81       	ldd	r25, Z+7	; 0x07
 b6c:	02 c0       	rjmp	.+4      	; 0xb72 <vfprintf+0x3aa>
 b6e:	8f ef       	ldi	r24, 0xFF	; 255
 b70:	9f ef       	ldi	r25, 0xFF	; 255
 b72:	2c 96       	adiw	r28, 0x0c	; 12
 b74:	0f b6       	in	r0, 0x3f	; 63
 b76:	f8 94       	cli
 b78:	de bf       	out	0x3e, r29	; 62
 b7a:	0f be       	out	0x3f, r0	; 63
 b7c:	cd bf       	out	0x3d, r28	; 61
 b7e:	df 91       	pop	r29
 b80:	cf 91       	pop	r28
 b82:	1f 91       	pop	r17
 b84:	0f 91       	pop	r16
 b86:	ff 90       	pop	r15
 b88:	ef 90       	pop	r14
 b8a:	df 90       	pop	r13
 b8c:	cf 90       	pop	r12
 b8e:	bf 90       	pop	r11
 b90:	af 90       	pop	r10
 b92:	9f 90       	pop	r9
 b94:	8f 90       	pop	r8
 b96:	7f 90       	pop	r7
 b98:	6f 90       	pop	r6
 b9a:	5f 90       	pop	r5
 b9c:	4f 90       	pop	r4
 b9e:	3f 90       	pop	r3
 ba0:	2f 90       	pop	r2
 ba2:	08 95       	ret

00000ba4 <strnlen_P>:
 ba4:	fc 01       	movw	r30, r24
 ba6:	05 90       	lpm	r0, Z+
 ba8:	61 50       	subi	r22, 0x01	; 1
 baa:	70 40       	sbci	r23, 0x00	; 0
 bac:	01 10       	cpse	r0, r1
 bae:	d8 f7       	brcc	.-10     	; 0xba6 <strnlen_P+0x2>
 bb0:	80 95       	com	r24
 bb2:	90 95       	com	r25
 bb4:	8e 0f       	add	r24, r30
 bb6:	9f 1f       	adc	r25, r31
 bb8:	08 95       	ret

00000bba <strnlen>:
 bba:	fc 01       	movw	r30, r24
 bbc:	61 50       	subi	r22, 0x01	; 1
 bbe:	70 40       	sbci	r23, 0x00	; 0
 bc0:	01 90       	ld	r0, Z+
 bc2:	01 10       	cpse	r0, r1
 bc4:	d8 f7       	brcc	.-10     	; 0xbbc <strnlen+0x2>
 bc6:	80 95       	com	r24
 bc8:	90 95       	com	r25
 bca:	8e 0f       	add	r24, r30
 bcc:	9f 1f       	adc	r25, r31
 bce:	08 95       	ret

00000bd0 <__ultoa_invert>:
 bd0:	fa 01       	movw	r30, r20
 bd2:	aa 27       	eor	r26, r26
 bd4:	28 30       	cpi	r18, 0x08	; 8
 bd6:	51 f1       	breq	.+84     	; 0xc2c <__ultoa_invert+0x5c>
 bd8:	20 31       	cpi	r18, 0x10	; 16
 bda:	81 f1       	breq	.+96     	; 0xc3c <__ultoa_invert+0x6c>
 bdc:	e8 94       	clt
 bde:	6f 93       	push	r22
 be0:	6e 7f       	andi	r22, 0xFE	; 254
 be2:	6e 5f       	subi	r22, 0xFE	; 254
 be4:	7f 4f       	sbci	r23, 0xFF	; 255
 be6:	8f 4f       	sbci	r24, 0xFF	; 255
 be8:	9f 4f       	sbci	r25, 0xFF	; 255
 bea:	af 4f       	sbci	r26, 0xFF	; 255
 bec:	b1 e0       	ldi	r27, 0x01	; 1
 bee:	3e d0       	rcall	.+124    	; 0xc6c <__ultoa_invert+0x9c>
 bf0:	b4 e0       	ldi	r27, 0x04	; 4
 bf2:	3c d0       	rcall	.+120    	; 0xc6c <__ultoa_invert+0x9c>
 bf4:	67 0f       	add	r22, r23
 bf6:	78 1f       	adc	r23, r24
 bf8:	89 1f       	adc	r24, r25
 bfa:	9a 1f       	adc	r25, r26
 bfc:	a1 1d       	adc	r26, r1
 bfe:	68 0f       	add	r22, r24
 c00:	79 1f       	adc	r23, r25
 c02:	8a 1f       	adc	r24, r26
 c04:	91 1d       	adc	r25, r1
 c06:	a1 1d       	adc	r26, r1
 c08:	6a 0f       	add	r22, r26
 c0a:	71 1d       	adc	r23, r1
 c0c:	81 1d       	adc	r24, r1
 c0e:	91 1d       	adc	r25, r1
 c10:	a1 1d       	adc	r26, r1
 c12:	20 d0       	rcall	.+64     	; 0xc54 <__ultoa_invert+0x84>
 c14:	09 f4       	brne	.+2      	; 0xc18 <__ultoa_invert+0x48>
 c16:	68 94       	set
 c18:	3f 91       	pop	r19
 c1a:	2a e0       	ldi	r18, 0x0A	; 10
 c1c:	26 9f       	mul	r18, r22
 c1e:	11 24       	eor	r1, r1
 c20:	30 19       	sub	r19, r0
 c22:	30 5d       	subi	r19, 0xD0	; 208
 c24:	31 93       	st	Z+, r19
 c26:	de f6       	brtc	.-74     	; 0xbde <__ultoa_invert+0xe>
 c28:	cf 01       	movw	r24, r30
 c2a:	08 95       	ret
 c2c:	46 2f       	mov	r20, r22
 c2e:	47 70       	andi	r20, 0x07	; 7
 c30:	40 5d       	subi	r20, 0xD0	; 208
 c32:	41 93       	st	Z+, r20
 c34:	b3 e0       	ldi	r27, 0x03	; 3
 c36:	0f d0       	rcall	.+30     	; 0xc56 <__ultoa_invert+0x86>
 c38:	c9 f7       	brne	.-14     	; 0xc2c <__ultoa_invert+0x5c>
 c3a:	f6 cf       	rjmp	.-20     	; 0xc28 <__ultoa_invert+0x58>
 c3c:	46 2f       	mov	r20, r22
 c3e:	4f 70       	andi	r20, 0x0F	; 15
 c40:	40 5d       	subi	r20, 0xD0	; 208
 c42:	4a 33       	cpi	r20, 0x3A	; 58
 c44:	18 f0       	brcs	.+6      	; 0xc4c <__ultoa_invert+0x7c>
 c46:	49 5d       	subi	r20, 0xD9	; 217
 c48:	31 fd       	sbrc	r19, 1
 c4a:	40 52       	subi	r20, 0x20	; 32
 c4c:	41 93       	st	Z+, r20
 c4e:	02 d0       	rcall	.+4      	; 0xc54 <__ultoa_invert+0x84>
 c50:	a9 f7       	brne	.-22     	; 0xc3c <__ultoa_invert+0x6c>
 c52:	ea cf       	rjmp	.-44     	; 0xc28 <__ultoa_invert+0x58>
 c54:	b4 e0       	ldi	r27, 0x04	; 4
 c56:	a6 95       	lsr	r26
 c58:	97 95       	ror	r25
 c5a:	87 95       	ror	r24
 c5c:	77 95       	ror	r23
 c5e:	67 95       	ror	r22
 c60:	ba 95       	dec	r27
 c62:	c9 f7       	brne	.-14     	; 0xc56 <__ultoa_invert+0x86>
 c64:	00 97       	sbiw	r24, 0x00	; 0
 c66:	61 05       	cpc	r22, r1
 c68:	71 05       	cpc	r23, r1
 c6a:	08 95       	ret
 c6c:	9b 01       	movw	r18, r22
 c6e:	ac 01       	movw	r20, r24
 c70:	0a 2e       	mov	r0, r26
 c72:	06 94       	lsr	r0
 c74:	57 95       	ror	r21
 c76:	47 95       	ror	r20
 c78:	37 95       	ror	r19
 c7a:	27 95       	ror	r18
 c7c:	ba 95       	dec	r27
 c7e:	c9 f7       	brne	.-14     	; 0xc72 <__ultoa_invert+0xa2>
 c80:	62 0f       	add	r22, r18
 c82:	73 1f       	adc	r23, r19
 c84:	84 1f       	adc	r24, r20
 c86:	95 1f       	adc	r25, r21
 c88:	a0 1d       	adc	r26, r0
 c8a:	08 95       	ret

00000c8c <_exit>:
 c8c:	f8 94       	cli

00000c8e <__stop_program>:
 c8e:	ff cf       	rjmp	.-2      	; 0xc8e <__stop_program>
